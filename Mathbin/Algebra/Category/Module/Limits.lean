import Mathbin.Algebra.Category.Module.Basic
import Mathbin.Algebra.Category.Group.Limits
import Mathbin.Algebra.DirectLimit

/-!
# The category of R-modules has all limits

Further, these limits are preserved by the forgetful functor --- that is,
the underlying types are just the limits in the category of types.
-/


open CategoryTheory

open CategoryTheory.Limits

universe u v

noncomputable section

namespace ModuleCat

variable {R : Type u} [Ring‚Çì R]

variable {J : Type v} [small_category J]

instance add_comm_group_obj (F : J ‚•§ ModuleCat.{v} R) j : AddCommGroup‚Çì ((F ‚ãô forget (ModuleCat R)).obj j) := by
  change AddCommGroup‚Çì (F.obj j)
  infer_instance

instance module_obj (F : J ‚•§ ModuleCat.{v} R) j : Module R ((F ‚ãô forget (ModuleCat R)).obj j) := by
  change Module R (F.obj j)
  infer_instance

/-- The flat sections of a functor into `Module R` form a submodule of all sections.
-/
def sections_submodule (F : J ‚•§ ModuleCat R) : Submodule R (‚àÄ j, F.obj j) :=
  { AddGroup‚Çì‚Çì.sectionsAddSubgroup
      (F ‚ãô forget‚ÇÇ (ModuleCat R) AddCommGroup‚Çì‚Çì.{v} ‚ãô forget‚ÇÇ AddCommGroup‚Çì‚Çì AddGroup‚Çì‚Çì.{v}) with
    Carrier := (F ‚ãô forget (ModuleCat R)).sections,
    smul_mem' := fun r s sh j j' f => by
      simp only [forget_map_eq_coe, functor.comp_map, Pi.smul_apply, LinearMap.map_smul]
      dsimp [functor.sections]  at sh
      rw [sh f] }

instance limit_add_comm_monoid (F : J ‚•§ ModuleCat R) :
    AddCommMonoid‚Çì (types.limit_cone (F ‚ãô forget (ModuleCat.{v} R))).x :=
  show AddCommMonoid‚Çì (sections_submodule F) by
    infer_instance

instance limit_add_comm_group (F : J ‚•§ ModuleCat R) :
    AddCommGroup‚Çì (types.limit_cone (F ‚ãô forget (ModuleCat.{v} R))).x :=
  show AddCommGroup‚Çì (sections_submodule F) by
    infer_instance

instance limit_module (F : J ‚•§ ModuleCat R) : Module R (types.limit_cone (F ‚ãô forget (ModuleCat.{v} R))).x :=
  show Module R (sections_submodule F) by
    infer_instance

/-- `limit.œÄ (F ‚ãô forget Ring) j` as a `ring_hom`. -/
def limit_œÄ_linear_map (F : J ‚•§ ModuleCat R) j :
    (types.limit_cone (F ‚ãô forget (ModuleCat.{v} R))).x ‚Üí‚Çó[R] (F ‚ãô forget (ModuleCat R)).obj j where
  toFun := (types.limit_cone (F ‚ãô forget (ModuleCat R))).œÄ.app j
  map_smul' := fun x y => rfl
  map_add' := fun x y => rfl

namespace HasLimits

/-- Construction of a limit cone in `Module R`.
(Internal use only; use the limits API.)
-/
def limit_cone (F : J ‚•§ ModuleCat.{v} R) : cone F where
  x := ModuleCat.of R (types.limit_cone (F ‚ãô forget _)).x
  œÄ :=
    { app := limit_œÄ_linear_map F,
      naturality' := fun j j' f => LinearMap.coe_injective ((types.limit_cone (F ‚ãô forget _)).œÄ.naturality f) }

/-- Witness that the limit cone in `Module R` is a limit cone.
(Internal use only; use the limits API.)
-/
def limit_cone_is_limit (F : J ‚•§ ModuleCat R) : is_limit (limit_cone F) := by
  refine'
      is_limit.of_faithful (forget (ModuleCat R)) (types.limit_cone_is_limit _) (fun s => ‚ü®_, _, _‚ü©) fun s => rfl <;>
    intros <;>
      ext j <;>
        simp only [Subtype.coe_mk, functor.map_cone_œÄ_app, forget_map_eq_coe, LinearMap.map_add, LinearMap.map_smul] <;>
          rfl

end HasLimits

open HasLimits

-- ././Mathport/Syntax/Translate/Basic.lean:1080:38: unsupported irreducible non-definition
/-- The category of R-modules has all limits. -/
irreducible_def has_limits : has_limits (ModuleCat.{v} R) :=
  { HasLimitsOfShape := fun J ùí• =>
      { HasLimit := fun F => has_limit.mk { Cone := limit_cone F, IsLimit := limit_cone_is_limit F } } }

/-- An auxiliary declaration to speed up typechecking.
-/
def forget‚ÇÇ_AddCommGroup_preserves_limits_aux (F : J ‚•§ ModuleCat R) :
    is_limit ((forget‚ÇÇ (ModuleCat R) AddCommGroup‚Çì‚Çì).mapCone (limit_cone F)) :=
  AddCommGroup‚Çì‚Çì.limitConeIsLimit (F ‚ãô forget‚ÇÇ (ModuleCat R) AddCommGroup‚Çì‚Çì)

/-- The forgetful functor from R-modules to abelian groups preserves all limits.
-/
instance forget‚ÇÇ_AddCommGroup_preserves_limits : preserves_limits (forget‚ÇÇ (ModuleCat R) AddCommGroup‚Çì‚Çì.{v}) where
  PreservesLimitsOfShape := fun J ùí• =>
    { PreservesLimit := fun F =>
        preserves_limit_of_preserves_limit_cone (limit_cone_is_limit F) (forget‚ÇÇ_AddCommGroup_preserves_limits_aux F) }

/-- The forgetful functor from R-modules to types preserves all limits.
-/
instance forget_preserves_limits : preserves_limits (forget (ModuleCat R)) where
  PreservesLimitsOfShape := fun J ùí• =>
    { PreservesLimit := fun F =>
        preserves_limit_of_preserves_limit_cone (limit_cone_is_limit F) (types.limit_cone_is_limit (F ‚ãô forget _)) }

section DirectLimit

open Module

variable {Œπ : Type v}

variable [dec_Œπ : DecidableEq Œπ] [DirectedOrder Œπ]

variable (G : Œπ ‚Üí Type v)

variable [‚àÄ i, AddCommGroup‚Çì (G i)] [‚àÄ i, Module R (G i)]

variable (f : ‚àÄ i j, i ‚â§ j ‚Üí G i ‚Üí‚Çó[R] G j) [DirectedSystem G fun i j h => f i j h]

/-- The diagram (in the sense of `category_theory`)
 of an unbundled `direct_limit` of modules. -/
@[simps]
def direct_limit_diagram : Œπ ‚•§ ModuleCat R where
  obj := fun i => ModuleCat.of R (G i)
  map := fun i j hij => f i j hij.le
  map_id' := fun i => by
    apply LinearMap.ext
    intro x
    apply Module.DirectedSystem.map_self
  map_comp' := fun i j k hij hjk => by
    apply LinearMap.ext
    intro x
    symm
    apply Module.DirectedSystem.map_map

variable [DecidableEq Œπ]

/-- The `cocone` on `direct_limit_diagram` corresponding to
the unbundled `direct_limit` of modules.

In `direct_limit_is_colimit` we show that it is a colimit cocone. -/
@[simps]
def direct_limit_cocone : cocone (direct_limit_diagram G f) where
  x := ModuleCat.of R $ direct_limit G f
  Œπ :=
    { app := Module.DirectLimit.of R Œπ G f,
      naturality' := fun i j hij => by
        apply LinearMap.ext
        intro x
        exact direct_limit.of_f }

/-- The unbundled `direct_limit` of modules is a colimit
in the sense of `category_theory`. -/
@[simps]
def direct_limit_is_colimit [Nonempty Œπ] : is_colimit (direct_limit_cocone G f) where
  desc := fun s =>
    direct_limit.lift R Œπ G f s.Œπ.app $ fun i j h x => by
      rw [‚Üê s.w (hom_of_le h)]
      rfl
  fac' := fun s i => by
    apply LinearMap.ext
    intro x
    dsimp
    exact direct_limit.lift_of s.Œπ.app _ x
  uniq' := fun s m h => by
    have : s.Œπ.app = fun i => LinearMap.comp m (direct_limit.of R Œπ (fun i => G i) (fun i j H => f i j H) i) := by
      funext i
      rw [‚Üê h]
      rfl
    apply LinearMap.ext
    intro x
    simp only [this]
    apply Module.DirectLimit.lift_unique

end DirectLimit

end ModuleCat

