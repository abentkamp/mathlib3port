import Mathbin.MeasureTheory.Integral.SetIntegral 
import Mathbin.Analysis.Calculus.MeanValue

/-!
# Derivatives of integrals depending on parameters

A parametric integral is a function with shape `f = Œª x : H, ‚à´ a : Œ±, F x a ‚àÇŒº` for some
`F : H ‚Üí Œ± ‚Üí E`, where `H` and `E` are normed spaces and `Œ±` is a measured space with measure `Œº`.

We already know from `continuous_of_dominated` in `measure_theory.integral.bochner` how to
guarantee that `f` is continuous using the dominated convergence theorem. In this file,
we want to express the derivative of `f` as the integral of the derivative of `F` with respect
to `x`.


## Main results

As explained above, all results express the derivative of a parametric integral as the integral of
a derivative. The variations come from the assumptions and from the different ways of expressing
derivative, especially Fr√©chet derivatives vs elementary derivative of function of one real
variable.

* `has_fderiv_at_of_dominated_loc_of_lip`: this version assumes
    `F x` is ae-measurable for x near `x‚ÇÄ`, `F x‚ÇÄ` is integrable,
    `Œª x, F x a` has derivative `F' a : H ‚ÜíL[‚Ñù] E` at `x‚ÇÄ` which is ae-measurable,
    `Œª x, F x a` is locally Lipschitz near `x‚ÇÄ` for almost every `a`, with a Lipschitz bound which
    is integrable with respect to `a`. A subtle point is that the "near x‚ÇÄ" in the last condition
    has to be uniform in `a`. This is controlled by a positive number `Œµ`.

* `has_fderiv_at_of_dominated_of_fderiv_le`: this version assume `Œª x, F x a` has derivative
    `F' x a` for `x` near `x‚ÇÄ` and `F' x` is bounded by an integrable function independent from
    `x` near `x‚ÇÄ`.


`has_deriv_at_of_dominated_loc_of_lip` and `has_deriv_at_of_dominated_loc_of_deriv_le ` are versions
of the above two results that assume `H = ‚Ñù` and use the high-school derivative `deriv` instead of
Fr√©chet derivative `fderiv`.
-/


noncomputable theory

open TopologicalSpace MeasureTheory Filter Metric

open_locale TopologicalSpace Filter

variable{Œ± :
    Type
      _}[MeasurableSpace
      Œ±]{Œº :
    Measure‚Çì
      Œ±}{E :
    Type
      _}[NormedGroup
      E][NormedSpace ‚Ñù
      E][CompleteSpace
      E][second_countable_topology
      E][MeasurableSpace
      E][BorelSpace E]{H : Type _}[NormedGroup H][NormedSpace ‚Ñù H][second_countable_topology$ H ‚ÜíL[‚Ñù] E]

-- error in Analysis.Calculus.ParametricIntegral: ././Mathport/Syntax/Translate/Basic.lean:340:40: in exacts: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on a ball around `x‚ÇÄ` for ae `a` with
integrable Lipschitz bound (with a ball radius independent of `a`), and `F x` is
ae-measurable for `x` in the same ball. See `has_fderiv_at_of_dominated_loc_of_lip` for a
slightly more general version. -/
theorem has_fderiv_at_of_dominated_loc_of_lip'
{F : H ‚Üí Œ± ‚Üí E}
{F' : Œ± ‚Üí ¬´expr ‚ÜíL[ ] ¬ª(H, expr‚Ñù(), E)}
{x‚ÇÄ : H}
{bound : Œ± ‚Üí expr‚Ñù()}
{Œµ : expr‚Ñù()}
(Œµ_pos : ¬´expr < ¬ª(0, Œµ))
(hF_meas : ‚àÄ x ¬´expr ‚àà ¬ª ball x‚ÇÄ Œµ, ae_measurable (F x) Œº)
(hF_int : integrable (F x‚ÇÄ) Œº)
(hF'_meas : ae_measurable F' Œº)
(h_lipsch : ¬´expr‚àÄ·µê ‚àÇ , ¬ª((a), Œº, lipschitz_on_with ¬´expr $ ¬ª(real.nnabs, bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ)))
(bound_integrable : integrable (bound : Œ± ‚Üí expr‚Ñù()) Œº)
(h_diff : ¬´expr‚àÄ·µê ‚àÇ , ¬ª((a), Œº, has_fderiv_at (Œª
   x, F x a) (F' a) x‚ÇÄ)) : ¬´expr ‚àß ¬ª(integrable F' Œº, has_fderiv_at (Œª
  x, ¬´expr‚à´ , ‚àÇ ¬ª((a), F x a, Œº)) ¬´expr‚à´ , ‚àÇ ¬ª((a), F' a, Œº) x‚ÇÄ) :=
begin
  have [ident x‚ÇÄ_in] [":", expr ¬´expr ‚àà ¬ª(x‚ÇÄ, ball x‚ÇÄ Œµ)] [":=", expr mem_ball_self Œµ_pos],
  have [ident nneg] [":", expr ‚àÄ
   x, ¬´expr ‚â§ ¬ª(0, ¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))))] [":=", expr Œª x, inv_nonneg.mpr (norm_nonneg _)],
  set [] [ident b] [":", expr Œ± ‚Üí expr‚Ñù()] [":="] [expr Œª a, ¬´expr| |¬ª(bound a)] [],
  have [ident b_int] [":", expr integrable b Œº] [":=", expr bound_integrable.norm],
  have [ident b_nonneg] [":", expr ‚àÄ a, ¬´expr ‚â§ ¬ª(0, b a)] [":=", expr Œª a, abs_nonneg _],
  have [ident hF_int'] [":", expr ‚àÄ x ¬´expr ‚àà ¬ª ball x‚ÇÄ Œµ, integrable (F x) Œº] [],
  { intros [ident x, ident x_in],
    have [] [":", expr ¬´expr‚àÄ·µê ‚àÇ , ¬ª((a), Œº, ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(F x‚ÇÄ a, F x a)), ¬´expr * ¬ª(Œµ, ¬´expr‚à• ‚à•¬ª((bound a : expr‚Ñù())))))] [],
    { apply [expr h_lipsch.mono],
      intros [ident a, ident ha],
      rw [expr lipschitz_on_with_iff_norm_sub_le] ["at", ident ha],
      apply [expr (ha x‚ÇÄ x‚ÇÄ_in x x_in).trans],
      rw ["[", expr mul_comm, ",", expr real.coe_nnabs, ",", expr real.norm_eq_abs, "]"] [],
      rw ["[", expr mem_ball, ",", expr dist_eq_norm, ",", expr norm_sub_rev, "]"] ["at", ident x_in],
      exact [expr mul_le_mul_of_nonneg_right (le_of_lt x_in) (abs_nonneg _)] },
    exact [expr integrable_of_norm_sub_le (hF_meas x x_in) hF_int (integrable.const_mul bound_integrable.norm Œµ) this] },
  have [ident hF'_int] [":", expr integrable F' Œº] [],
  { have [] [":", expr ¬´expr‚àÄ·µê ‚àÇ , ¬ª((a), Œº, ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(F' a), b a))] [],
    { apply [expr (h_diff.and h_lipsch).mono],
      rintros [ident a, "‚ü®", ident ha_diff, ",", ident ha_lip, "‚ü©"],
      exact [expr ha_diff.le_of_lip (ball_mem_nhds _ Œµ_pos) ha_lip] },
    exact [expr b_int.mono' hF'_meas this] },
  refine [expr ‚ü®hF'_int, _‚ü©],
  have [ident h_ball] [":", expr ¬´expr ‚àà ¬ª(ball x‚ÇÄ Œµ, exprùìù() x‚ÇÄ)] [":=", expr ball_mem_nhds x‚ÇÄ Œµ_pos],
  have [] [":", expr ¬´expr‚àÄ·∂† in , ¬ª((x), exprùìù() x‚ÇÄ, ¬´expr = ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr - ¬ª(¬´expr‚à´ , ‚àÇ ¬ª((a), F x a, Œº), ¬´expr‚à´ , ‚àÇ ¬ª((a), F x‚ÇÄ a, Œº)), ¬´expr‚à´ , ‚àÇ ¬ª((a), F' a, Œº) ¬´expr - ¬ª(x, x‚ÇÄ)))), ¬´expr‚à• ‚à•¬ª(¬´expr‚à´ , ‚àÇ ¬ª((a), ¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ))), Œº))))] [],
  { apply [expr mem_of_superset (ball_mem_nhds _ Œµ_pos)],
    intros [ident x, ident x_in],
    rw ["[", expr set.mem_set_of_eq, ",", "<-", expr norm_smul_of_nonneg (nneg _), ",", expr integral_smul, ",", expr integral_sub, ",", expr integral_sub, ",", "<-", expr continuous_linear_map.integral_apply hF'_int, "]"] [],
    exacts ["[", expr hF_int' x x_in, ",", expr hF_int, ",", expr (hF_int' x x_in).sub hF_int, ",", expr hF'_int.apply_continuous_linear_map _, "]"] },
  rw ["[", expr has_fderiv_at_iff_tendsto, ",", expr tendsto_congr' this, ",", "<-", expr tendsto_zero_iff_norm_tendsto_zero, ",", "<-", expr show ¬´expr = ¬ª(¬´expr‚à´ , ‚àÇ ¬ª((a : Œ±), ¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x‚ÇÄ, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x‚ÇÄ a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x‚ÇÄ, x‚ÇÄ))), Œº), 0), by simp [] [] [] [] [] [], "]"] [],
  apply [expr tendsto_integral_filter_of_dominated_convergence],
  { filter_upwards ["[", expr h_ball, "]"] [],
    intros [ident x, ident x_in],
    apply [expr ae_measurable.const_smul],
    exact [expr ((hF_meas _ x_in).sub (hF_meas _ x‚ÇÄ_in)).sub (hF'_meas.apply_continuous_linear_map _)] },
  { apply [expr mem_of_superset h_ball],
    intros [ident x, ident hx],
    apply [expr (h_diff.and h_lipsch).mono],
    rintros [ident a, "‚ü®", ident ha_deriv, ",", ident ha_bound, "‚ü©"],
    show [expr ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ)))), ¬´expr + ¬ª(b a, ¬´expr‚à• ‚à•¬ª(F' a)))],
    replace [ident ha_bound] [":", expr ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a)), ¬´expr * ¬ª(b a, ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))))] [],
    { rw [expr lipschitz_on_with_iff_norm_sub_le] ["at", ident ha_bound],
      exact [expr ha_bound _ hx _ x‚ÇÄ_in] },
    calc
      ¬´expr = ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ)))), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(F x a, F x‚ÇÄ a)), ¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), F' a ¬´expr - ¬ª(x, x‚ÇÄ))))) : by rw [expr smul_sub] []
      ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(F x a, F x‚ÇÄ a))), ¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), F' a ¬´expr - ¬ª(x, x‚ÇÄ))))) : norm_sub_le _ _
      ¬´expr = ¬ª(..., ¬´expr + ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a))), ¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr‚à• ‚à•¬ª(F' a ¬´expr - ¬ª(x, x‚ÇÄ))))) : by { rw ["[", expr norm_smul_of_nonneg, ",", expr norm_smul_of_nonneg, "]"] []; exact [expr nneg _] }
      ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr * ¬ª(b a, ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ)))), ¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(F' a), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ)))))) : add_le_add _ _
      ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(b a, ¬´expr‚à• ‚à•¬ª(F' a))) : _,
    exact [expr mul_le_mul_of_nonneg_left ha_bound (nneg _)],
    apply [expr mul_le_mul_of_nonneg_left ((F' a).le_op_norm _) (nneg _)],
    by_cases [expr h, ":", expr ¬´expr = ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ)), 0)],
    { simpa [] [] [] ["[", expr h, "]"] [] ["using", expr add_nonneg (b_nonneg a) (norm_nonneg (F' a))] },
    { field_simp [] ["[", expr h, "]"] [] [] } },
  { exact [expr b_int.add hF'_int.norm] },
  { apply [expr h_diff.mono],
    intros [ident a, ident ha],
    suffices [] [":", expr tendsto (Œª
      x, ¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ)))) (exprùìù() x‚ÇÄ) (exprùìù() 0)],
    by simpa [] [] [] [] [] [],
    rw [expr tendsto_zero_iff_norm_tendsto_zero] [],
    have [] [":", expr ¬´expr = ¬ª(Œª
      x, ¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ)))), Œª
      x, ¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(x, x‚ÇÄ))), ¬´expr - ¬ª(¬´expr - ¬ª(F x a, F x‚ÇÄ a), F' a ¬´expr - ¬ª(x, x‚ÇÄ)))))] [],
    { ext [] [ident x] [],
      rw [expr norm_smul_of_nonneg (nneg _)] [] },
    rwa ["[", expr has_fderiv_at_iff_tendsto, ",", expr this, "]"] ["at", ident ha] }
end

/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on a ball around `x‚ÇÄ` for ae `a`
(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable
for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
theorem has_fderiv_at_of_dominated_loc_of_lip {F : H ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí H ‚ÜíL[‚Ñù] E} {x‚ÇÄ : H} {bound : Œ± ‚Üí ‚Ñù} {Œµ : ‚Ñù}
  (Œµ_pos : 0 < Œµ) (hF_meas : ‚àÄ·∂†x in ùìù x‚ÇÄ, AeMeasurable (F x) Œº) (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : AeMeasurable F' Œº) (h_lip : ‚àÄ·µêa ‚àÇŒº, LipschitzOnWith (Real.nnabs$ bound a) (fun x => F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº) (h_diff : ‚àÄ·µêa ‚àÇŒº, HasFderivAt (fun x => F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß HasFderivAt (fun x => ‚à´a, F x a ‚àÇŒº) (‚à´a, F' a ‚àÇŒº) x‚ÇÄ :=
  by 
    obtain ‚ü®Œµ', Œµ'_pos, h'‚ü© : ‚àÉ (Œµ' : _)(_ : Œµ' > 0), ‚àÄ x _ : x ‚àà ball x‚ÇÄ Œµ', AeMeasurable (F x) Œº
    ¬∑
      simpa using nhds_basis_ball.eventually_iff.mp hF_meas 
    set Œ¥ := min Œµ Œµ' 
    have Œ¥_pos : 0 < Œ¥ := lt_min‚Çì Œµ_pos Œµ'_pos 
    replace h' : ‚àÄ x, x ‚àà ball x‚ÇÄ Œ¥ ‚Üí AeMeasurable (F x) Œº
    ¬∑
      intro x x_in 
      exact h' _ (ball_subset_ball (min_le_right‚Çì Œµ Œµ') x_in)
    replace h_lip : ‚àÄ·µêa : Œ± ‚àÇŒº, LipschitzOnWith (Real.nnabs$ bound a) (fun x => F x a) (ball x‚ÇÄ Œ¥)
    ¬∑
      apply h_lip.mono 
      intro a lip 
      exact lip.mono (ball_subset_ball$ min_le_left‚Çì Œµ Œµ')
    apply has_fderiv_at_of_dominated_loc_of_lip' Œ¥_pos <;> assumption

/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is differentiable on a ball around `x‚ÇÄ` for ae `a` with
derivative norm uniformly bounded by an integrable function (the ball radius is independent of `a`),
and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
theorem has_fderiv_at_of_dominated_of_fderiv_le {F : H ‚Üí Œ± ‚Üí E} {F' : H ‚Üí Œ± ‚Üí H ‚ÜíL[‚Ñù] E} {x‚ÇÄ : H} {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) (hF_meas : ‚àÄ·∂†x in ùìù x‚ÇÄ, AeMeasurable (F x) Œº) (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : AeMeasurable (F' x‚ÇÄ) Œº) (h_bound : ‚àÄ·µêa ‚àÇŒº, ‚àÄ x _ : x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a)
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µêa ‚àÇŒº, ‚àÄ x _ : x ‚àà ball x‚ÇÄ Œµ, HasFderivAt (fun x => F x a) (F' x a) x) :
  HasFderivAt (fun x => ‚à´a, F x a ‚àÇŒº) (‚à´a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
  by 
    have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos 
    have diff_x‚ÇÄ : ‚àÄ·µêa ‚àÇŒº, HasFderivAt (fun x => F x a) (F' x‚ÇÄ a) x‚ÇÄ := h_diff.mono fun a ha => ha x‚ÇÄ x‚ÇÄ_in 
    have  : ‚àÄ·µêa ‚àÇŒº, LipschitzOnWith (Real.nnabs (bound a)) (fun x => F x a) (ball x‚ÇÄ Œµ)
    ¬∑
      apply (h_diff.and h_bound).mono 
      rintro a ‚ü®ha_deriv, ha_bound‚ü©
      refine'
        (convex_ball _ _).lipschitz_on_with_of_nnnorm_has_fderiv_within_le
          (fun x x_in => (ha_deriv x x_in).HasFderivWithinAt) fun x x_in => _ 
      rw [‚ÜêNnreal.coe_le_coe, coe_nnnorm, Real.coe_nnabs]
      exact (ha_bound x x_in).trans (le_abs_self _)
    exact (has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hF'_meas this bound_integrable diff_x‚ÇÄ).2

/-- Derivative under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ : ‚Ñù`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on an interval around `x‚ÇÄ` for ae `a`
(with interval radius independent of `a`) with integrable Lipschitz bound, and `F x` is
ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
theorem has_deriv_at_of_dominated_loc_of_lip {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂†x in ùìù x‚ÇÄ, AeMeasurable (F x) Œº) (hF_int : integrable (F x‚ÇÄ) Œº) (hF'_meas : AeMeasurable F' Œº)
  {bound : Œ± ‚Üí ‚Ñù} (h_lipsch : ‚àÄ·µêa ‚àÇŒº, LipschitzOnWith (Real.nnabs$ bound a) (fun x => F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº) (h_diff : ‚àÄ·µêa ‚àÇŒº, HasDerivAt (fun x => F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß HasDerivAt (fun x => ‚à´a, F x a ‚àÇŒº) (‚à´a, F' a ‚àÇŒº) x‚ÇÄ :=
  by 
    have hm := (ContinuousLinearMap.smulRightL ‚Ñù ‚Ñù E 1).Continuous.Measurable.comp_ae_measurable hF'_meas 
    cases' has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hm h_lipsch bound_integrable h_diff with hF'_int
      key 
    replace hF'_int : integrable F' Œº
    ¬∑
      rw [‚Üêintegrable_norm_iff hm] at hF'_int 
      simpa only [integrable_norm_iff, hF'_meas, one_mul‚Çì, norm_one, ContinuousLinearMap.norm_smul_rightL_apply] using
        hF'_int 
    refine' ‚ü®hF'_int, _‚ü©
    simpRw [has_deriv_at_iff_has_fderiv_at]  at h_diff‚ä¢
    rwa [ContinuousLinearMap.integral_comp_comm _ hF'_int] at key 
    all_goals 
      infer_instance

/-- Derivative under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ : ‚Ñù`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is differentiable on an interval around `x‚ÇÄ` for ae `a`
(with interval radius independent of `a`) with derivative uniformly bounded by an integrable
function, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
theorem has_deriv_at_of_dominated_loc_of_deriv_le {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : ‚Ñù ‚Üí Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù} {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂†x in ùìù x‚ÇÄ, AeMeasurable (F x) Œº) (hF_int : integrable (F x‚ÇÄ) Œº) (hF'_meas : AeMeasurable (F' x‚ÇÄ) Œº)
  {bound : Œ± ‚Üí ‚Ñù} (h_bound : ‚àÄ·µêa ‚àÇŒº, ‚àÄ x _ : x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a) (bound_integrable : integrable bound Œº)
  (h_diff : ‚àÄ·µêa ‚àÇŒº, ‚àÄ x _ : x ‚àà ball x‚ÇÄ Œµ, HasDerivAt (fun x => F x a) (F' x a) x) :
  integrable (F' x‚ÇÄ) Œº ‚àß HasDerivAt (fun n => ‚à´a, F n a ‚àÇŒº) (‚à´a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
  by 
    have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos 
    have diff_x‚ÇÄ : ‚àÄ·µêa ‚àÇŒº, HasDerivAt (fun x => F x a) (F' x‚ÇÄ a) x‚ÇÄ := h_diff.mono fun a ha => ha x‚ÇÄ x‚ÇÄ_in 
    have  : ‚àÄ·µêa ‚àÇŒº, LipschitzOnWith (Real.nnabs (bound a)) (fun x : ‚Ñù => F x a) (ball x‚ÇÄ Œµ)
    ¬∑
      apply (h_diff.and h_bound).mono 
      rintro a ‚ü®ha_deriv, ha_bound‚ü©
      refine'
        (convex_ball _ _).lipschitz_on_with_of_nnnorm_has_deriv_within_le
          (fun x x_in => (ha_deriv x x_in).HasDerivWithinAt) fun x x_in => _ 
      rw [‚ÜêNnreal.coe_le_coe, coe_nnnorm, Real.coe_nnabs]
      exact (ha_bound x x_in).trans (le_abs_self _)
    exact has_deriv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hF'_meas this bound_integrable diff_x‚ÇÄ

