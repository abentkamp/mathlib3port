import Mathbin.MeasureTheory.Function.ContinuousMapDense
import Mathbin.MeasureTheory.Function.L2Space
import Mathbin.MeasureTheory.Measure.Haar
import Mathbin.Analysis.Complex.Circle
import Mathbin.Topology.MetricSpace.EmetricParacompact
import Mathbin.Topology.ContinuousFunction.StoneWeierstrass

/-!

# Fourier analysis on the circle

This file contains basic technical results for a development of Fourier series.

## Main definitions

* `haar_circle`, Haar measure on the circle, normalized to have total measure `1`
* instances `measure_space`, `is_probability_measure` for the circle with respect to this measure
* for `n : ℤ`, `fourier n` is the monomial `λ z, z ^ n`, bundled as a continuous map from `circle`
  to `ℂ`
* for `n : ℤ` and `p : ℝ≥0∞`, `fourier_Lp p n` is an abbreviation for the monomial `fourier n`
  considered as an element of the Lᵖ-space `Lp ℂ p haar_circle`, via the embedding
  `continuous_map.to_Lp`

## Main statements

The theorem `span_fourier_closure_eq_top` states that the span of the monomials `fourier n` is
dense in `C(circle, ℂ)`, i.e. that its `submodule.topological_closure` is `⊤`.  This follows from
the Stone-Weierstrass theorem after checking that it is a subalgebra, closed under conjugation, and
separates points.

The theorem `span_fourier_Lp_closure_eq_top` states that for `1 ≤ p < ∞` the span of the monomials
`fourier_Lp` is dense in `Lp ℂ p haar_circle`, i.e. that its `submodule.topological_closure` is
`⊤`.  This follows from the previous theorem using general theory on approximation of Lᵖ functions
by continuous functions.

The theorem `orthonormal_fourier` states that the monomials `fourier_Lp 2 n` form an orthonormal
set (in the L² space of the circle).

By definition, a Hilbert basis for an inner product space is an orthonormal set whose span is
dense.  Thus, the last two results together establish that the functions `fourier_Lp 2 n` form a
Hilbert basis for L².

## TODO

Once mathlib has general theory showing that a Hilbert basis of an inner product space induces a
unitary equivalence with L², the results in this file will give Fourier series applications such
as Parseval's formula.

-/


noncomputable section

open_locale Ennreal ComplexConjugate

open TopologicalSpace ContinuousMap MeasureTheory MeasureTheory.Measure Algebra Submodule Set

attribute [local instance] fact_one_le_two_ennreal

/-! ### Choice of measure on the circle -/


section haarCircle

/-! We make the circle into a measure space, using the Haar measure normalized to have total
measure 1. -/


instance : MeasurableSpace circle :=
  borel circle

instance : BorelSpace circle :=
  ⟨rfl⟩

/--  Haar measure on the circle, normalized to have total measure 1. -/
def haarCircle : Measureₓ circle :=
  haar_measure positive_compacts_univ

instance : is_probability_measure haarCircle :=
  ⟨haar_measure_self⟩

instance : measure_space circle :=
  { circle.measurableSpace with volume := haarCircle }

end haarCircle

/-! ### Monomials on the circle -/


section fourier

/--  The family of monomials `λ z, z ^ n`, parametrized by `n : ℤ` and considered as bundled
continuous maps from `circle` to `ℂ`. -/
@[simps]
def fourier (n : ℤ) : C(circle, ℂ) :=
  { toFun := fun z => z^n,
    continuous_to_fun := continuous_subtype_coe.zpow n $ fun z => Or.inl (nonzero_of_mem_circle z) }

@[simp]
theorem fourier_zero {z : circle} : fourier 0 z = 1 :=
  rfl

@[simp]
theorem fourier_neg {n : ℤ} {z : circle} : fourier (-n) z = conj (fourier n z) := by
  simp [← coe_inv_circle_eq_conj z]

@[simp]
theorem fourier_add {m n : ℤ} {z : circle} : fourier (m+n) z = fourier m z*fourier n z := by
  simp [zpow_add₀ (nonzero_of_mem_circle z)]

/--  The subalgebra of `C(circle, ℂ)` generated by `z ^ n` for `n ∈ ℤ`; equivalently, polynomials in
`z` and `conj z`. -/
def fourierSubalgebra : Subalgebra ℂ C(circle, ℂ) :=
  Algebra.adjoin ℂ (range fourier)

/--  The subalgebra of `C(circle, ℂ)` generated by `z ^ n` for `n ∈ ℤ` is in fact the linear span of
these functions. -/
theorem fourier_subalgebra_coe : fourierSubalgebra.toSubmodule = span ℂ (range fourier) := by
  apply adjoin_eq_span_of_subset
  refine' subset.trans _ Submodule.subset_span
  intro x hx
  apply Submonoid.closure_induction hx (fun _ => id) ⟨0, rfl⟩
  rintro _ _ ⟨m, rfl⟩ ⟨n, rfl⟩
  refine' ⟨m+n, _⟩
  ext1 z
  exact fourier_add

/--  The subalgebra of `C(circle, ℂ)` generated by `z ^ n` for `n ∈ ℤ` separates points. -/
theorem fourier_subalgebra_separates_points : fourierSubalgebra.SeparatesPoints := by
  intro x y hxy
  refine' ⟨_, ⟨fourier 1, _, rfl⟩, _⟩
  ·
    exact subset_adjoin ⟨1, rfl⟩
  ·
    simp [hxy]

/--  The subalgebra of `C(circle, ℂ)` generated by `z ^ n` for `n ∈ ℤ` is invariant under complex
conjugation. -/
theorem fourier_subalgebra_conj_invariant : conj_invariant_subalgebra (fourierSubalgebra.restrictScalars ℝ) := by
  rintro _ ⟨f, hf, rfl⟩
  change _ ∈ fourierSubalgebra
  change _ ∈ fourierSubalgebra at hf
  apply adjoin_induction hf
  ·
    rintro _ ⟨n, rfl⟩
    suffices fourier (-n) ∈ fourierSubalgebra by
      convert this
      ext1
      simp
    exact subset_adjoin ⟨-n, rfl⟩
  ·
    intro c
    exact fourier_subalgebra.algebra_map_mem (conj c)
  ·
    intro f g hf hg
    convert fourier_subalgebra.add_mem hf hg
    exact AlgHom.map_add _ f g
  ·
    intro f g hf hg
    convert fourier_subalgebra.mul_mem hf hg
    exact AlgHom.map_mul _ f g

/--  The subalgebra of `C(circle, ℂ)` generated by `z ^ n` for `n ∈ ℤ` is dense. -/
theorem fourier_subalgebra_closure_eq_top : fourierSubalgebra.topologicalClosure = ⊤ :=
  ContinuousMap.subalgebra_complex_topological_closure_eq_top_of_separates_points fourierSubalgebra
    fourier_subalgebra_separates_points fourier_subalgebra_conj_invariant

/--  The linear span of the monomials `z ^ n` is dense in `C(circle, ℂ)`. -/
theorem span_fourier_closure_eq_top : (span ℂ (range fourier)).topologicalClosure = ⊤ := by
  rw [← fourier_subalgebra_coe]
  exact congr_argₓ Subalgebra.toSubmodule fourier_subalgebra_closure_eq_top

/--  The family of monomials `λ z, z ^ n`, parametrized by `n : ℤ` and considered as elements of
the `Lp` space of functions on `circle` taking values in `ℂ`. -/
abbrev fourierLp (p : ℝ≥0∞) [Fact (1 ≤ p)] (n : ℤ) : Lp ℂ p haarCircle :=
  to_Lp p haarCircle ℂ (fourier n)

/--  For each `1 ≤ p < ∞`, the linear span of the monomials `z ^ n` is dense in
`Lp ℂ p haar_circle`. -/
theorem span_fourier_Lp_closure_eq_top {p : ℝ≥0∞} [Fact (1 ≤ p)] (hp : p ≠ ∞) :
    (span ℂ (range (fourierLp p))).topologicalClosure = ⊤ := by
  convert
    (ContinuousMap.to_Lp_dense_range ℂ hp haarCircle ℂ).topological_closure_map_submodule span_fourier_closure_eq_top
  rw [map_span, range_comp]
  simp

/--  For `n ≠ 0`, a rotation by `n⁻¹ * real.pi` negates the monomial `z ^ n`. -/
theorem fourier_add_half_inv_index {n : ℤ} (hn : n ≠ 0) (z : circle) :
    fourier n (expMapCircle (n⁻¹*Real.pi)*z) = -fourier n z := by
  have : ((↑n)*((↑n)⁻¹*↑Real.pi)*Complex.i) = (↑Real.pi)*Complex.i := by
    have : (n : ℂ) ≠ 0 := by
      exact_mod_cast hn
    field_simp
    ring
  simp [mul_zpow₀, ← Complex.exp_int_mul, Complex.exp_pi_mul_I, this]

/--  The monomials `z ^ n` are an orthonormal set with respect to Haar measure on the circle. -/
theorem orthonormal_fourier : Orthonormal ℂ (fourierLp 2) := by
  rw [orthonormal_iff_ite]
  intro i j
  rw [continuous_map.inner_to_Lp haarCircle (fourier i) (fourier j)]
  split_ifs
  ·
    simp [h, is_probability_measure.measure_univ, ← fourier_neg, ← fourier_add, -fourier_to_fun]
  simp only [← fourier_add, ← fourier_neg]
  have hij : ((-i)+j) ≠ 0 := by
    rw [add_commₓ]
    exact sub_ne_zero.mpr (Ne.symm h)
  exact integral_zero_of_mul_left_eq_neg (is_mul_left_invariant_haar_measure _) (fourier_add_half_inv_index hij)

end fourier

