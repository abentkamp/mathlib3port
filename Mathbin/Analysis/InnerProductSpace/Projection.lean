import Mathbin.Analysis.Convex.Basic
import Mathbin.Analysis.InnerProductSpace.Basic
import Mathbin.Analysis.NormedSpace.IsROrC

/-!
# The orthogonal projection

Given a nonempty complete subspace `K` of an inner product space `E`, this file constructs
`orthogonal_projection K : E ‚ÜíL[ùïú] K`, the orthogonal projection of `E` onto `K`.  This map
satisfies: for any point `u` in `E`, the point `v = orthogonal_projection K u` in `K` minimizes the
distance `‚à•u - v‚à•` to `u`.

Also a linear isometry equivalence `reflection K : E ‚âÉ‚Çó·µ¢[ùïú] E` is constructed, by choosing, for
each `u : E`, the point `reflection K u` to satisfy
`u + (reflection K u) = 2 ‚Ä¢ orthogonal_projection K u`.

Basic API for `orthogonal_projection` and `reflection` is developed.

Next, the orthogonal projection is used to prove a series of more subtle lemmas about the
the orthogonal complement of complete subspaces of `E` (the orthogonal complement itself was
defined in `analysis.inner_product_space.basic`); the lemma
`submodule.sup_orthogonal_of_is_complete`, stating that for a complete subspace `K` of `E` we have
`K ‚äî K·óÆ = ‚ä§`, is a typical example.

The last section covers orthonormal bases, Hilbert bases, etc. The lemma
`maximal_orthonormal_iff_dense_span`, whose proof requires the theory on the orthogonal complement
developed earlier in this file, states that an orthonormal set in an inner product space is
maximal, if and only if its span is dense (i.e., iff it is Hilbert basis, although we do not make
that definition).  Various consequences are stated, including that if `E` is finite-dimensional
then a maximal orthonormal set is a basis (`maximal_orthonormal_iff_basis_of_finite_dimensional`).

## References

The orthogonal projection construction is adapted from
*  [Cl√©ment & Martin, *The Lax-Milgram Theorem. A detailed proof to be formalized in Coq*]
*  [Cl√©ment & Martin, *A Coq formal proof of the Lax‚ÄìMilgram theorem*]

The Coq code is available at the following address: <http://www.lri.fr/~sboldo/elfic/index.html>
-/


noncomputable section

open IsROrC Real Filter

open_locale BigOperators TopologicalSpace

variable {ùïú E F : Type _} [IsROrC ùïú]

variable [InnerProductSpace ùïú E] [InnerProductSpace ‚Ñù F]

local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú E _ x y

local notation "absR" => HasAbs.abs

/-! ### Orthogonal projection in inner product spaces -/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    "\nExistence of minimizers\nLet `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.\nThen there exists a (unique) `v` in `K` that minimizes the distance `‚à•u - v‚à•` to `u`.\n -/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `exists_norm_eq_infi_of_complete_convex [])
  (Command.declSig
   [(Term.implicitBinder "{" [`K] [":" (Term.app `Set [`F])] "}")
    (Term.explicitBinder "(" [`ne] [":" `K.nonempty] [] ")")
    (Term.explicitBinder "(" [`h‚ÇÅ] [":" (Term.app `IsComplete [`K])] [] ")")
    (Term.explicitBinder "(" [`h‚ÇÇ] [":" (Term.app `Convex [(Data.Real.Basic.term‚Ñù "‚Ñù") `K])] [] ")")]
   (Term.typeSpec
    ":"
    (Term.forall
     "‚àÄ"
     [(Term.simpleBinder [`u] [(Term.typeSpec ":" `F)])]
     ","
     (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
      "‚àÉ"
      `v
      (¬´binderTerm‚àà_¬ª "‚àà" `K)
      ","
      (¬´term_=_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
       "="
       (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
        "‚®Ö"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
        ", "
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))))
  (Command.declValSimple
   ":="
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`u] [])]
     "=>"
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `Œ¥
             []
             ":="
             (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
              "‚®Ö"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
              ", "
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl `this' [] [(Term.typeSpec ":" (Term.app `Nonempty [`K]))] ":=" `ne.to_subtype)))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`zero_le_Œ¥ []]
             [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]
             ":="
             (Term.app
              `le_cinfi
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [(Term.hole "_")] [])]
                 "=>"
                 (Term.app `norm_nonneg [(Term.hole "_")])))]))))
          [])
         (group
          (Tactic.have''
           "have"
           [`Œ¥_le []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
              ","
              (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.app
            `cinfi_le
            [(Term.anonymousCtor
              "‚ü®"
              [(numLit "0")
               ","
               (¬´term_$__¬ª
                (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
                "$"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [(Term.hole "_")] [])]
                  "=>"
                  (Term.app `norm_nonneg [(Term.hole "_")]))))]
              "‚ü©")]))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Œ¥_le' []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                []
                ","
                (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                 "‚àÄ"
                 `w
                 (¬´binderTerm‚àà_¬ª "‚àà" `K)
                 ","
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`w `hw] [])]
               "=>"
               (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`exists_seq []]
             [(Term.typeSpec
               ":"
               (¬´term‚àÉ_,_¬ª
                "‚àÉ"
                (Lean.explicitBinders
                 (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
                ","
                (Term.forall
                 "‚àÄ"
                 [(Term.simpleBinder [`n] [])]
                 ","
                 (¬´term_<_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
                  "<"
                  (Init.Logic.¬´term_+_¬ª
                   `Œ¥
                   "+"
                   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.have''
                   "have"
                   [`hŒ¥ []]
                   [(Term.typeSpec
                     ":"
                     (Term.forall
                      "‚àÄ"
                      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                      ","
                      (¬´term_<_¬ª
                       `Œ¥
                       "<"
                       (Init.Logic.¬´term_+_¬ª
                        `Œ¥
                        "+"
                        (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`n] [])]
                     "=>"
                     (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h []]
                     []
                     ":="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`n] [])]
                       "=>"
                       (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
                  [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `w
                     [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                     ":="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`n] [])]
                       "=>"
                       (Term.app `Classical.some [(Term.app `h [`n])]))))))
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.anonymousCtor
                    "‚ü®"
                    [`w
                     ","
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`n] [])]
                       "=>"
                       (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
                    "‚ü©"))
                  [])]))))))
          [])
         (group
          (Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `exists_seq)]
           ["with"
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hw)]) [])]
             "‚ü©")])
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`norm_tendsto []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [])]
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
                 `at_top
                 (Term.app `nhds [`Œ¥])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h []]
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `tendsto
                        [(Term.fun
                          "fun"
                          (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
                         `at_top
                         (Term.app `nhds [`Œ¥])]))]
                     ":="
                     `tendsto_const_nhds)))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h' []]
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `tendsto
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                           "=>"
                           (Init.Logic.¬´term_+_¬ª
                            `Œ¥
                            "+"
                            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                         `at_top
                         (Term.app `nhds [`Œ¥])]))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                          [])
                         (group
                          (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] [])
                          [])]))))))
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `tendsto_of_tendsto_of_tendsto_of_le_of_le
                    [`h
                     `h'
                     (Term.fun
                      "fun"
                      (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`x] [])]
                       "=>"
                       (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
                  [])]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`seq_is_cauchy []]
             [(Term.typeSpec
               ":"
               (Term.app
                `CauchySeq
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [])]
                   "=>"
                   (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") [])
                  [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `b
                     []
                     ":="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                       "=>"
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (numLit "4")
                          "*"
                          (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
                  [])
                 (group
                  (Tactic.use
                   "use"
                   [(Term.fun
                     "fun"
                     (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
                  [])
                 (group (Tactic.constructor "constructor") [])
                 (group (Tactic.intro "intro" [`n]) [])
                 (group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])
                 (group (Tactic.constructor "constructor") [])
                 (group (Tactic.intro "intro" [`p `q `N `hp `hq]) [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `wp
                     []
                     ":="
                     (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
                  [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `wq
                     []
                     ":="
                     (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
                  [])
                 (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq)))) [])
                 (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp)))) [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `half
                     []
                     ":="
                     (¬´term_/_¬ª
                      (numLit "1")
                      "/"
                      (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
                  [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `div
                     []
                     ":="
                     (¬´term_/_¬ª
                      (numLit "1")
                      "/"
                      (Init.Logic.¬´term_+_¬ª
                       (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                       "+"
                       (numLit "1"))))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (¬´term_=_¬ª
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (numLit "4")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                           "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "2")
                         "*"
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        (¬´term_=_¬ª
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (numLit "4")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                             "‚à•"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                             "‚à•"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•"))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                         "="
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (numLit "2")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                             "‚à•"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                             "‚à•"))
                           "*"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (numLit "2")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                             "‚à•"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                             "‚à•")))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Term.app
                             (Analysis.InnerProductSpace.Projection.termabsR "absR")
                             [(Term.paren
                               "("
                               [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                               ")")])
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                             "‚à•"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                             "‚à•"))
                           "*"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Term.app
                             (Analysis.InnerProductSpace.Projection.termabsR "absR")
                             [(Term.paren
                               "("
                               [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                               ")")])
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                             "‚à•"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                             "‚à•")))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                              [])
                             [])
                            (group (Tactic.exact "exact" `zero_le_two) [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                             " ‚Ä¢ "
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                            "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                             " ‚Ä¢ "
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                            "‚à•"))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] [])
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `smul_sub)
                                ","
                                (Tactic.rwRule [] `smul_smul)
                                ","
                                (Tactic.rwRule
                                 []
                                 (Term.app
                                  `mul_one_div_cancel
                                  [(Term.paren
                                    "("
                                    [`_root_.two_ne_zero
                                     [(Term.typeAscription
                                       ":"
                                       (¬´term_‚â†_¬ª
                                        (Term.paren
                                         "("
                                         [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                                         ")")
                                        "‚â†"
                                        (numLit "0")))]]
                                    ")")]))
                                ","
                                (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                                ","
                                (Tactic.rwRule [] `add_smul)]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] [])
                             [])
                            (group
                             (Tactic.have''
                              "have"
                              [`eq‚ÇÅ []]
                              [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
                             [])
                            (group
                             (Tactic.exact
                              "exact"
                              (Term.proj
                               (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                               "."
                               `symm))
                             [])
                            (group
                             (Tactic.have''
                              "have"
                              [`eq‚ÇÇ []]
                              [(Term.typeSpec
                                ":"
                                (¬´term_=_¬ª
                                 (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                                 "="
                                 (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
                             [])
                            (group
                             (Tactic.tacticShow_
                              "show"
                              (¬´term_=_¬ª
                               (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                               "="
                               (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                             [])
                            (group (Tactic.abel "abel" [] []) [])
                            (group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (numLit "2")
                          "*"
                          (Init.Logic.¬´term_+_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                           "+"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
                        ":="
                        `parallelogram_law_with_norm)]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        `Œ¥
                        "‚â§"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•")))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
                         (group (Tactic.apply "apply" `Œ¥_le') [])
                         (group (Tactic.apply "apply" `h‚ÇÇ) [])
                         (group
                          (tacticRepeat'_
                           "repeat'"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
                          [])
                         (group
                          (tacticRepeat'_
                           "repeat'"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
                          [])
                         (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq‚ÇÅ []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                         "*"
                         `Œ¥)
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (numLit "4")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                           "‚à•"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group (Tactic.mono "mono" [] [] [] []) [])
                         (group (Tactic.mono "mono" [] [] [] []) [])
                         (group (Lean.Tactic.normNum "norm_num" [] []) [])
                         (group (Tactic.apply "apply" `mul_nonneg) [])
                         (group (Lean.Tactic.normNum "norm_num" [] []) [])
                         (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq‚ÇÇ []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                         "*"
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                     ":="
                     (Term.app
                      `mul_self_le_mul_self
                      [(Term.app `norm_nonneg [(Term.hole "_")])
                       (Term.app
                        `le_trans‚Çì
                        [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
                         (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq‚ÇÇ' []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                         "*"
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                     ":="
                     (Term.app
                      `mul_self_le_mul_self
                      [(Term.app `norm_nonneg [(Term.hole "_")])
                       (Term.app
                        `le_trans‚Çì
                        [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
                         (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
                  [])
                 (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") []) [])
                 (group (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq) [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
                  [])
                 (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") []) [])
                 (group
                  (tacticCalc_
                   "calc"
                   [(calcStep
                     (¬´term_=_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
                      "="
                      (¬´term_-_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "2")
                        "*"
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                       "-"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "4")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
                         (group (Tactic.simp "simp" [] [] [] []) [])]))))
                    (calcStep
                     (¬´term_‚â§_¬ª
                      (Term.hole "_")
                      "‚â§"
                      (¬´term_-_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "2")
                        "*"
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                       "-"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                        "*"
                        `Œ¥)))
                     ":="
                     (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                    (calcStep
                     (¬´term_‚â§_¬ª
                      (Term.hole "_")
                      "‚â§"
                      (¬´term_-_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "2")
                        "*"
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                          "*"
                          (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                          "*"
                          (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
                       "-"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                        "*"
                        `Œ¥)))
                     ":="
                     (Term.app
                      `sub_le_sub_right
                      [(Term.app
                        `mul_le_mul_of_nonneg_left
                        [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
                       (Term.hole "_")]))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                        "*"
                        `div)
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div)
                        "*"
                        `div)))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `add_nonneg
                    [(Term.app
                      `mul_nonneg
                      [(Term.app
                        `mul_nonneg
                        [(Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                         `zero_le_Œ¥])
                       (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
                     (Term.app
                      `mul_nonneg
                      [(Term.app
                        `mul_nonneg
                        [(Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                         `nat.one_div_pos_of_nat.le])
                       `nat.one_div_pos_of_nat.le])]))
                  [])
                 (group (Tactic.apply "apply" `tendsto.comp) [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
                      (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq‚ÇÅ []]
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `tendsto
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                           "=>"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                            "*"
                            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                         `at_top
                         (Term.app
                          `nhds
                          [(Term.paren
                            "("
                            [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                            ")")])]))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.convert
                           "convert"
                           []
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.explicit "@" `tendsto_const_nhds)
                              [(Term.hole "_")
                               (Term.hole "_")
                               (Term.hole "_")
                               (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                               (Term.hole "_")])
                             "."
                             `mul)
                            [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          [])
                         (group
                          (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                          [])]))))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `tendsto
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                           "=>"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                            "*"
                            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                         `at_top
                         (Term.app
                          `nhds
                          [(Term.paren
                            "("
                            [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                            ")")])]))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.convert
                           "convert"
                           []
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.explicit "@" `tendsto_const_nhds)
                              [(Term.hole "_")
                               (Term.hole "_")
                               (Term.hole "_")
                               (Term.paren
                                "("
                                [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                                ")")
                               (Term.hole "_")])
                             "."
                             `mul)
                            [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          [])
                         (group
                          (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                          [])]))))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`eq‚ÇÇ []]
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `tendsto
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                           "=>"
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Finset.Data.Finset.Fold.¬´term_*_¬ª
                             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                             "*"
                             (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                            "*"
                            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                         `at_top
                         (Term.app
                          `nhds
                          [(Term.paren
                            "("
                            [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                            ")")])]))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                          [])
                         (group
                          (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                          [])]))))))
                  [])
                 (group (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) []) [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
          [])
         (group
          (Tactic.rcases
           "rcases"
           [(Tactic.casesTarget
             []
             (Term.app
              `cauchy_seq_tendsto_of_is_complete
              [`h‚ÇÅ
               (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_")))
               `seq_is_cauchy]))]
           ["with"
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hv)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w_tendsto)]) [])]
             "‚ü©")])
          [])
         (group (Tactic.use "use" [`v]) [])
         (group (Tactic.use "use" [`hv]) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h_cont []]
             [(Term.typeSpec
               ":"
               (Term.app
                `Continuous
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`v] [])]
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))]))]
             ":="
             (Term.app
              `Continuous.comp
              [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
          [])
         (group
          (Tactic.have''
           "have"
           []
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n] [])]
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
               `at_top
               (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])]))])
          [])
         (group (Tactic.convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) []) [])
         (group (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto])) [])
         (group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`u] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `Œ¥
            []
            ":="
            (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
             "‚®Ö"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
             ", "
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
         [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl (Term.letIdDecl `this' [] [(Term.typeSpec ":" (Term.app `Nonempty [`K]))] ":=" `ne.to_subtype)))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`zero_le_Œ¥ []]
            [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]
            ":="
            (Term.app
             `le_cinfi
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [(Term.hole "_")] [])]
                "=>"
                (Term.app `norm_nonneg [(Term.hole "_")])))]))))
         [])
        (group
         (Tactic.have''
          "have"
          [`Œ¥_le []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
             ","
             (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
         [])
        (group
         (Tactic.exact
          "exact"
          (Term.app
           `cinfi_le
           [(Term.anonymousCtor
             "‚ü®"
             [(numLit "0")
              ","
              (¬´term_$__¬ª
               (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
               "$"
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [(Term.hole "_")] [])]
                 "=>"
                 (Term.app `norm_nonneg [(Term.hole "_")]))))]
             "‚ü©")]))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`Œ¥_le' []]
            [(Term.typeSpec
              ":"
              (Term.forall
               "‚àÄ"
               []
               ","
               (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                "‚àÄ"
                `w
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (Term.forall
                 "‚àÄ"
                 []
                 ","
                 (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`w `hw] [])]
              "=>"
              (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`exists_seq []]
            [(Term.typeSpec
              ":"
              (¬´term‚àÉ_,_¬ª
               "‚àÉ"
               (Lean.explicitBinders
                (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
               ","
               (Term.forall
                "‚àÄ"
                [(Term.simpleBinder [`n] [])]
                ","
                (¬´term_<_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
                 "<"
                 (Init.Logic.¬´term_+_¬ª
                  `Œ¥
                  "+"
                  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.have''
                  "have"
                  [`hŒ¥ []]
                  [(Term.typeSpec
                    ":"
                    (Term.forall
                     "‚àÄ"
                     [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                     ","
                     (¬´term_<_¬ª
                      `Œ¥
                      "<"
                      (Init.Logic.¬´term_+_¬ª
                       `Œ¥
                       "+"
                       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n] [])]
                    "=>"
                    (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h []]
                    []
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`n] [])]
                      "=>"
                      (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
                 [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `w
                    [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`n] [])]
                      "=>"
                      (Term.app `Classical.some [(Term.app `h [`n])]))))))
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.anonymousCtor
                   "‚ü®"
                   [`w
                    ","
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`n] [])]
                      "=>"
                      (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
                   "‚ü©"))
                 [])]))))))
         [])
        (group
         (Tactic.rcases
          "rcases"
          [(Tactic.casesTarget [] `exists_seq)]
          ["with"
           (Tactic.rcasesPat.tuple
            "‚ü®"
            [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w)]) [])
             ","
             (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hw)]) [])]
            "‚ü©")])
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`norm_tendsto []]
            [(Term.typeSpec
              ":"
              (Term.app
               `tendsto
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`n] [])]
                  "=>"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
                `at_top
                (Term.app `nhds [`Œ¥])]))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
                        `at_top
                        (Term.app `nhds [`Œ¥])]))]
                    ":="
                    `tendsto_const_nhds)))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h' []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                          "=>"
                          (Init.Logic.¬´term_+_¬ª
                           `Œ¥
                           "+"
                           (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                        `at_top
                        (Term.app `nhds [`Œ¥])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                         [])
                        (group
                         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] [])
                         [])]))))))
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `tendsto_of_tendsto_of_tendsto_of_le_of_le
                   [`h
                    `h'
                    (Term.fun
                     "fun"
                     (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`x] [])]
                      "=>"
                      (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`seq_is_cauchy []]
            [(Term.typeSpec
              ":"
              (Term.app
               `CauchySeq
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`n] [])]
                  "=>"
                  (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))]))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") [])
                 [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `b
                    []
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                      "=>"
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                        "*"
                        (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "4")
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                        "*"
                        (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
                 [])
                (group
                 (Tactic.use
                  "use"
                  [(Term.fun
                    "fun"
                    (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
                 [])
                (group (Tactic.constructor "constructor") [])
                (group (Tactic.intro "intro" [`n]) [])
                (group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])
                (group (Tactic.constructor "constructor") [])
                (group (Tactic.intro "intro" [`p `q `N `hp `hq]) [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `wp
                    []
                    ":="
                    (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
                 [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `wq
                    []
                    ":="
                    (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
                 [])
                (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq)))) [])
                (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp)))) [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `half
                    []
                    ":="
                    (¬´term_/_¬ª
                     (numLit "1")
                     "/"
                     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
                 [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `div
                    []
                    ":="
                    (¬´term_/_¬ª
                     (numLit "1")
                     "/"
                     (Init.Logic.¬´term_+_¬ª
                      (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                      "+"
                      (numLit "1"))))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (¬´term_=_¬ª
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (numLit "4")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                           "‚à•"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                       "="
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "2")
                        "*"
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       (¬´term_=_¬ª
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (numLit "4")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                           "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                        "="
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (numLit "2")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•"))
                          "*"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (numLit "2")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•")))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Term.app
                            (Analysis.InnerProductSpace.Projection.termabsR "absR")
                            [(Term.paren
                              "("
                              [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                              ")")])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•"))
                          "*"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Term.app
                            (Analysis.InnerProductSpace.Projection.termabsR "absR")
                            [(Term.paren
                              "("
                              [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                              ")")])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                            "‚à•"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                            "‚à•")))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                             [])
                            [])
                           (group (Tactic.exact "exact" `zero_le_two) [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                            " ‚Ä¢ "
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                           "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                            " ‚Ä¢ "
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                           "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Init.Logic.¬´term_+_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
                         "+"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `smul_sub)
                               ","
                               (Tactic.rwRule [] `smul_smul)
                               ","
                               (Tactic.rwRule
                                []
                                (Term.app
                                 `mul_one_div_cancel
                                 [(Term.paren
                                   "("
                                   [`_root_.two_ne_zero
                                    [(Term.typeAscription
                                      ":"
                                      (¬´term_‚â†_¬ª
                                       (Term.paren
                                        "("
                                        [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                                        ")")
                                       "‚â†"
                                       (numLit "0")))]]
                                   ")")]))
                               ","
                               (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                               ","
                               (Tactic.rwRule [] `add_smul)]
                              "]")
                             [])
                            [])
                           (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
                           (group
                            (Tactic.have''
                             "have"
                             [`eq‚ÇÅ []]
                             [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
                            [])
                           (group
                            (Tactic.exact
                             "exact"
                             (Term.proj
                              (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                              "."
                              `symm))
                            [])
                           (group
                            (Tactic.have''
                             "have"
                             [`eq‚ÇÇ []]
                             [(Term.typeSpec
                               ":"
                               (¬´term_=_¬ª
                                (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                                "="
                                (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
                            [])
                           (group
                            (Tactic.tacticShow_
                             "show"
                             (¬´term_=_¬ª
                              (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                              "="
                              (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                            [])
                           (group (Tactic.abel "abel" [] []) [])
                           (group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "2")
                         "*"
                         (Init.Logic.¬´term_+_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                          "+"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
                       ":="
                       `parallelogram_law_with_norm)]))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       `Œ¥
                       "‚â§"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                        "‚à•")))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
                        (group (Tactic.apply "apply" `Œ¥_le') [])
                        (group (Tactic.apply "apply" `h‚ÇÇ) [])
                        (group
                         (tacticRepeat'_
                          "repeat'"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
                         [])
                        (group
                         (tacticRepeat'_
                          "repeat'"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
                         [])
                        (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÅ []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                        "*"
                        `Œ¥)
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "4")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•"))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group (Tactic.mono "mono" [] [] [] []) [])
                        (group (Tactic.mono "mono" [] [] [] []) [])
                        (group (Lean.Tactic.normNum "norm_num" [] []) [])
                        (group (Tactic.apply "apply" `mul_nonneg) [])
                        (group (Lean.Tactic.normNum "norm_num" [] []) [])
                        (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                        "*"
                        (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                    ":="
                    (Term.app
                     `mul_self_le_mul_self
                     [(Term.app `norm_nonneg [(Term.hole "_")])
                      (Term.app
                       `le_trans‚Çì
                       [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
                        (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ' []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                        "*"
                        (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                    ":="
                    (Term.app
                     `mul_self_le_mul_self
                     [(Term.app `norm_nonneg [(Term.hole "_")])
                      (Term.app
                       `le_trans‚Çì
                       [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
                        (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
                 [])
                (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") []) [])
                (group (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq) [])
                (group
                 (Tactic.¬´tactic¬∑._¬ª
                  "¬∑"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
                 [])
                (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") []) [])
                (group
                 (tacticCalc_
                  "calc"
                  [(calcStep
                    (¬´term_=_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
                     "="
                     (¬´term_-_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "2")
                       "*"
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                      "-"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "4")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•"))
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                        "‚à•"))))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
                        (group (Tactic.simp "simp" [] [] [] []) [])]))))
                   (calcStep
                    (¬´term_‚â§_¬ª
                     (Term.hole "_")
                     "‚â§"
                     (¬´term_-_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "2")
                       "*"
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                      "-"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                       "*"
                       `Œ¥)))
                    ":="
                    (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                   (calcStep
                    (¬´term_‚â§_¬ª
                     (Term.hole "_")
                     "‚â§"
                     (¬´term_-_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "2")
                       "*"
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                         "*"
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                         "*"
                         (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
                      "-"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
                       "*"
                       `Œ¥)))
                    ":="
                    (Term.app
                     `sub_le_sub_right
                     [(Term.app
                       `mul_le_mul_of_nonneg_left
                       [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
                      (Term.hole "_")]))
                   (calcStep
                    (¬´term_=_¬ª
                     (Term.hole "_")
                     "="
                     (Init.Logic.¬´term_+_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                       "*"
                       `div)
                      "+"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div)
                       "*"
                       `div)))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `add_nonneg
                   [(Term.app
                     `mul_nonneg
                     [(Term.app
                       `mul_nonneg
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                        `zero_le_Œ¥])
                      (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
                    (Term.app
                     `mul_nonneg
                     [(Term.app
                       `mul_nonneg
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                        `nat.one_div_pos_of_nat.le])
                      `nat.one_div_pos_of_nat.le])]))
                 [])
                (group (Tactic.apply "apply" `tendsto.comp) [])
                (group
                 (Tactic.¬´tactic¬∑._¬ª
                  "¬∑"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
                     (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÅ []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                          "=>"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                           "*"
                           (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.paren
                           "("
                           [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.convert
                          "convert"
                          []
                          (Term.app
                           (Term.proj
                            (Term.app
                             (Term.explicit "@" `tendsto_const_nhds)
                             [(Term.hole "_")
                              (Term.hole "_")
                              (Term.hole "_")
                              (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                              (Term.hole "_")])
                            "."
                            `mul)
                           [`tendsto_one_div_add_at_top_nhds_0_nat])
                          [])
                         [])
                        (group
                         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                         [])]))))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                          "=>"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                           "*"
                           (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.paren
                           "("
                           [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.convert
                          "convert"
                          []
                          (Term.app
                           (Term.proj
                            (Term.app
                             (Term.explicit "@" `tendsto_const_nhds)
                             [(Term.hole "_")
                              (Term.hole "_")
                              (Term.hole "_")
                              (Term.paren
                               "("
                               [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                               ")")
                              (Term.hole "_")])
                            "."
                            `mul)
                           [`tendsto_one_div_add_at_top_nhds_0_nat])
                          [])
                         [])
                        (group
                         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                         [])]))))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                          "=>"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                            "*"
                            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                           "*"
                           (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.paren
                           "("
                           [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                         [])
                        (group
                         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                         [])]))))))
                 [])
                (group (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) []) [])
                (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
         [])
        (group
         (Tactic.rcases
          "rcases"
          [(Tactic.casesTarget
            []
            (Term.app
             `cauchy_seq_tendsto_of_is_complete
             [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_"))) `seq_is_cauchy]))]
          ["with"
           (Tactic.rcasesPat.tuple
            "‚ü®"
            [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])
             ","
             (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hv)]) [])
             ","
             (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w_tendsto)]) [])]
            "‚ü©")])
         [])
        (group (Tactic.use "use" [`v]) [])
        (group (Tactic.use "use" [`hv]) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h_cont []]
            [(Term.typeSpec
              ":"
              (Term.app
               `Continuous
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`v] [])]
                  "=>"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))]))]
            ":="
            (Term.app
             `Continuous.comp
             [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
         [])
        (group
         (Tactic.have''
          "have"
          []
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
              `at_top
              (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])]))])
         [])
        (group (Tactic.convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) []) [])
        (group (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto])) [])
        (group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `Œ¥
          []
          ":="
          (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
           "‚®Ö"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
           ", "
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl (Term.letIdDecl `this' [] [(Term.typeSpec ":" (Term.app `Nonempty [`K]))] ":=" `ne.to_subtype)))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`zero_le_Œ¥ []]
          [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]
          ":="
          (Term.app
           `le_cinfi
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [(Term.hole "_")] [])]
              "=>"
              (Term.app `norm_nonneg [(Term.hole "_")])))]))))
       [])
      (group
       (Tactic.have''
        "have"
        [`Œ¥_le []]
        [(Term.typeSpec
          ":"
          (Term.forall
           "‚àÄ"
           [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
           ","
           (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `cinfi_le
         [(Term.anonymousCtor
           "‚ü®"
           [(numLit "0")
            ","
            (¬´term_$__¬ª
             (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
             "$"
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [(Term.hole "_")] [])]
               "=>"
               (Term.app `norm_nonneg [(Term.hole "_")]))))]
           "‚ü©")]))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`Œ¥_le' []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`w `hw] [])]
            "=>"
            (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`exists_seq []]
          [(Term.typeSpec
            ":"
            (¬´term‚àÉ_,_¬ª
             "‚àÉ"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
             ","
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`n] [])]
              ","
              (¬´term_<_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
               "<"
               (Init.Logic.¬´term_+_¬ª
                `Œ¥
                "+"
                (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.have''
                "have"
                [`hŒ¥ []]
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "‚àÄ"
                   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                   ","
                   (¬´term_<_¬ª
                    `Œ¥
                    "<"
                    (Init.Logic.¬´term_+_¬ª
                     `Œ¥
                     "+"
                     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`n] [])]
                  "=>"
                  (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h []]
                  []
                  ":="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n] [])]
                    "=>"
                    (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
               [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `w
                  [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                  ":="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n] [])]
                    "=>"
                    (Term.app `Classical.some [(Term.app `h [`n])]))))))
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.anonymousCtor
                 "‚ü®"
                 [`w
                  ","
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n] [])]
                    "=>"
                    (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
                 "‚ü©"))
               [])]))))))
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] `exists_seq)]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hw)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`norm_tendsto []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
              `at_top
              (Term.app `nhds [`Œ¥])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
                      `at_top
                      (Term.app `nhds [`Œ¥])]))]
                  ":="
                  `tendsto_const_nhds)))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h' []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                        "=>"
                        (Init.Logic.¬´term_+_¬ª
                         `Œ¥
                         "+"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                      `at_top
                      (Term.app `nhds [`Œ¥])]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                       [])
                      (group
                       (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] [])
                       [])]))))))
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `tendsto_of_tendsto_of_tendsto_of_le_of_le
                 [`h
                  `h'
                  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`x] [])]
                    "=>"
                    (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`seq_is_cauchy []]
          [(Term.typeSpec
            ":"
            (Term.app
             `CauchySeq
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") [])
               [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `b
                  []
                  ":="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                    "=>"
                    (Init.Logic.¬´term_+_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                      "*"
                      (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                     "+"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "4")
                       "*"
                       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                      "*"
                      (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
               [])
              (group
               (Tactic.use
                "use"
                [(Term.fun
                  "fun"
                  (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
               [])
              (group (Tactic.constructor "constructor") [])
              (group (Tactic.intro "intro" [`n]) [])
              (group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])
              (group (Tactic.constructor "constructor") [])
              (group (Tactic.intro "intro" [`p `q `N `hp `hq]) [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl `wp [] ":=" (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
               [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl `wq [] ":=" (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
               [])
              (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq)))) [])
              (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp)))) [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `half
                  []
                  ":="
                  (¬´term_/_¬ª
                   (numLit "1")
                   "/"
                   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
               [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `div
                  []
                  ":="
                  (¬´term_/_¬ª
                   (numLit "1")
                   "/"
                   (Init.Logic.¬´term_+_¬ª
                    (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                    "+"
                    (numLit "1"))))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (¬´term_=_¬ª
                     (Init.Logic.¬´term_+_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (numLit "4")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•"))
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                        "‚à•"))
                      "+"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                     "="
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (numLit "2")
                      "*"
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     (¬´term_=_¬ª
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "4")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                         "‚à•"))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "2")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "*"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "2")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•")))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Term.app
                          (Analysis.InnerProductSpace.Projection.termabsR "absR")
                          [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•"))
                        "*"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Term.app
                          (Analysis.InnerProductSpace.Projection.termabsR "absR")
                          [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                          "‚à•")))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                           [])
                          [])
                         (group (Tactic.exact "exact" `zero_le_two) [])]))))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                          (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                          " ‚Ä¢ "
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                         "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                          (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                          " ‚Ä¢ "
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                         "‚à•"))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [] `smul_sub)
                             ","
                             (Tactic.rwRule [] `smul_smul)
                             ","
                             (Tactic.rwRule
                              []
                              (Term.app
                               `mul_one_div_cancel
                               [(Term.paren
                                 "("
                                 [`_root_.two_ne_zero
                                  [(Term.typeAscription
                                    ":"
                                    (¬´term_‚â†_¬ª
                                     (Term.paren
                                      "("
                                      [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                                      ")")
                                     "‚â†"
                                     (numLit "0")))]]
                                 ")")]))
                             ","
                             (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                             ","
                             (Tactic.rwRule [] `add_smul)]
                            "]")
                           [])
                          [])
                         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
                         (group
                          (Tactic.have''
                           "have"
                           [`eq‚ÇÅ []]
                           [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
                          [])
                         (group
                          (Tactic.exact
                           "exact"
                           (Term.proj
                            (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                            "."
                            `symm))
                          [])
                         (group
                          (Tactic.have''
                           "have"
                           [`eq‚ÇÇ []]
                           [(Term.typeSpec
                             ":"
                             (¬´term_=_¬ª
                              (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                              "="
                              (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
                          [])
                         (group
                          (Tactic.tacticShow_
                           "show"
                           (¬´term_=_¬ª
                            (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                            "="
                            (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                          [])
                         (group (Tactic.abel "abel" [] []) [])
                         (group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                           [])
                          [])]))))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "2")
                       "*"
                       (Init.Logic.¬´term_+_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
                     ":="
                     `parallelogram_law_with_norm)]))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚â§_¬ª
                     `Œ¥
                     "‚â§"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                      "‚à•"
                      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                      "‚à•")))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
                      (group (Tactic.apply "apply" `Œ¥_le') [])
                      (group (Tactic.apply "apply" `h‚ÇÇ) [])
                      (group
                       (tacticRepeat'_
                        "repeat'"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
                       [])
                      (group
                       (tacticRepeat'_
                        "repeat'"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
                       [])
                      (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÅ []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚â§_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
                     "‚â§"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (numLit "4")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                        "‚à•"))
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                       "‚à•"
                       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                       "‚à•"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.mono "mono" [] [] [] []) [])
                      (group (Tactic.mono "mono" [] [] [] []) [])
                      (group (Lean.Tactic.normNum "norm_num" [] []) [])
                      (group (Tactic.apply "apply" `mul_nonneg) [])
                      (group (Lean.Tactic.normNum "norm_num" [] []) [])
                      (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÇ []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚â§_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                     "‚â§"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                      "*"
                      (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                  ":="
                  (Term.app
                   `mul_self_le_mul_self
                   [(Term.app `norm_nonneg [(Term.hole "_")])
                    (Term.app
                     `le_trans‚Çì
                     [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
                      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÇ' []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚â§_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
                     "‚â§"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                      "*"
                      (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
                  ":="
                  (Term.app
                   `mul_self_le_mul_self
                   [(Term.app `norm_nonneg [(Term.hole "_")])
                    (Term.app
                     `le_trans‚Çì
                     [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
                      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
               [])
              (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") []) [])
              (group (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq) [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
               [])
              (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") []) [])
              (group
               (tacticCalc_
                "calc"
                [(calcStep
                  (¬´term_=_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
                   "="
                   (¬´term_-_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (numLit "2")
                     "*"
                     (Init.Logic.¬´term_+_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                      "+"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                    "-"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (numLit "4")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                       "‚à•"
                       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                       "‚à•"))
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                      "‚à•"
                      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                      "‚à•"))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
                      (group (Tactic.simp "simp" [] [] [] []) [])]))))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (¬´term_-_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (numLit "2")
                     "*"
                     (Init.Logic.¬´term_+_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                      "+"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
                    "-"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
                  ":="
                  (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (¬´term_-_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (numLit "2")
                     "*"
                     (Init.Logic.¬´term_+_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                       "*"
                       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
                      "+"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                       "*"
                       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
                    "-"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
                  ":="
                  (Term.app
                   `sub_le_sub_right
                   [(Term.app
                     `mul_le_mul_of_nonneg_left
                     [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
                    (Term.hole "_")]))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Init.Logic.¬´term_+_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
                    "+"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div)
                     "*"
                     `div)))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `add_nonneg
                 [(Term.app
                   `mul_nonneg
                   [(Term.app
                     `mul_nonneg
                     [(Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                      `zero_le_Œ¥])
                    (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
                  (Term.app
                   `mul_nonneg
                   [(Term.app
                     `mul_nonneg
                     [(Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                      `nat.one_div_pos_of_nat.le])
                    `nat.one_div_pos_of_nat.le])]))
               [])
              (group (Tactic.apply "apply" `tendsto.comp) [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
                   (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÅ []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                        "=>"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                      `at_top
                      (Term.app
                       `nhds
                       [(Term.paren
                         "("
                         [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                         ")")])]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.convert
                        "convert"
                        []
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.explicit "@" `tendsto_const_nhds)
                           [(Term.hole "_")
                            (Term.hole "_")
                            (Term.hole "_")
                            (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                            (Term.hole "_")])
                          "."
                          `mul)
                         [`tendsto_one_div_add_at_top_nhds_0_nat])
                        [])
                       [])
                      (group
                       (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                       [])]))))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                        "=>"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                      `at_top
                      (Term.app
                       `nhds
                       [(Term.paren
                         "("
                         [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                         ")")])]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.convert
                        "convert"
                        []
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.explicit "@" `tendsto_const_nhds)
                           [(Term.hole "_")
                            (Term.hole "_")
                            (Term.hole "_")
                            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                            (Term.hole "_")])
                          "."
                          `mul)
                         [`tendsto_one_div_add_at_top_nhds_0_nat])
                        [])
                       [])
                      (group
                       (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                       [])]))))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÇ []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                        "=>"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                          "*"
                          (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                         "*"
                         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                      `at_top
                      (Term.app
                       `nhds
                       [(Term.paren
                         "("
                         [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                         ")")])]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                       [])
                      (group
                       (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
                       [])]))))))
               [])
              (group (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) []) [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget
          []
          (Term.app
           `cauchy_seq_tendsto_of_is_complete
           [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_"))) `seq_is_cauchy]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hv)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w_tendsto)]) [])]
          "‚ü©")])
       [])
      (group (Tactic.use "use" [`v]) [])
      (group (Tactic.use "use" [`hv]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h_cont []]
          [(Term.typeSpec
            ":"
            (Term.app
             `Continuous
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`v] [])]
                "=>"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))]))]
          ":="
          (Term.app
           `Continuous.comp
           [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
       [])
      (group
       (Tactic.have''
        "have"
        []
        [(Term.typeSpec
          ":"
          (Term.app
           `tendsto
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`n] [])]
              "=>"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
            `at_top
            (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])]))])
       [])
      (group (Tactic.convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) []) [])
      (group (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto])) [])
      (group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Subtype.mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Subtype.mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tendsto_nhds_unique [`this `norm_tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto_nhds_unique
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w_tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h_cont.continuous_at
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto.comp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   []
   [(Term.typeSpec
     ":"
     (Term.app
      `tendsto
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`n] [])]
         "=>"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
       `at_top
       (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
    `at_top
    (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `w [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h_cont []]
     [(Term.typeSpec
       ":"
       (Term.app
        `Continuous
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`v] [])]
           "=>"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))]))]
     ":="
     (Term.app `Continuous.comp [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Continuous.comp [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Continuous.sub [`continuous_const `continuous_id])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `continuous_id
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `continuous_const
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Continuous.sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Continuous.sub [`continuous_const `continuous_id]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `continuous_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Continuous.comp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Continuous
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`v] [])]
      "=>"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`v] [])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Continuous
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.use "use" [`hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.use', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.use "use" [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.use', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget
     []
     (Term.app
      `cauchy_seq_tendsto_of_is_complete
      [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_"))) `seq_is_cauchy]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hv)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w_tendsto)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `cauchy_seq_tendsto_of_is_complete
   [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_"))) `seq_is_cauchy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `seq_is_cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.hole "_"))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `cauchy_seq_tendsto_of_is_complete
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`seq_is_cauchy []]
     [(Term.typeSpec
       ":"
       (Term.app
        `CauchySeq
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [])]
           "=>"
           (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") [])
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `b
             []
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
               "=>"
               (Init.Logic.¬´term_+_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                 "*"
                 (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                "+"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (numLit "4")
                  "*"
                  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                 "*"
                 (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
          [])
         (group
          (Tactic.use
           "use"
           [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
          [])
         (group (Tactic.constructor "constructor") [])
         (group (Tactic.intro "intro" [`n]) [])
         (group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])
         (group (Tactic.constructor "constructor") [])
         (group (Tactic.intro "intro" [`p `q `N `hp `hq]) [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl `wp [] ":=" (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl `wq [] ":=" (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
          [])
         (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq)))) [])
         (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp)))) [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `half
             []
             ":="
             (¬´term_/_¬ª
              (numLit "1")
              "/"
              (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `div
             []
             ":="
             (¬´term_/_¬ª
              (numLit "1")
              "/"
              (Init.Logic.¬´term_+_¬ª
               (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
               "+"
               (numLit "1"))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Init.Logic.¬´term_+_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (numLit "4")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                    "‚à•"))
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                   "‚à•"))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                "="
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "2")
                 "*"
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
             ":="
             (calc
              "calc"
              [(calcStep
                (¬´term_=_¬ª
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (numLit "4")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                     "‚à•"))
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                    "‚à•"))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
                 "="
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (numLit "2")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                     "‚à•"))
                   "*"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (numLit "2")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                     "‚à•")))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Term.app
                     (Analysis.InnerProductSpace.Projection.termabsR "absR")
                     [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                     "‚à•"))
                   "*"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Term.app
                     (Analysis.InnerProductSpace.Projection.termabsR "absR")
                     [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                     "‚à•")))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") [])
                     [])
                    (group (Tactic.exact "exact" `zero_le_two) [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                     " ‚Ä¢ "
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                    "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                     " ‚Ä¢ "
                     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                    "‚à•"))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Init.Logic.¬´term_+_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `smul_sub)
                        ","
                        (Tactic.rwRule [] `smul_smul)
                        ","
                        (Tactic.rwRule
                         []
                         (Term.app
                          `mul_one_div_cancel
                          [(Term.paren
                            "("
                            [`_root_.two_ne_zero
                             [(Term.typeAscription
                               ":"
                               (¬´term_‚â†_¬ª
                                (Term.paren
                                 "("
                                 [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]]
                                 ")")
                                "‚â†"
                                (numLit "0")))]]
                            ")")]))
                        ","
                        (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                        ","
                        (Tactic.rwRule [] `add_smul)]
                       "]")
                      [])
                     [])
                    (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
                    (group
                     (Tactic.have''
                      "have"
                      [`eq‚ÇÅ []]
                      [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
                     [])
                    (group
                     (Tactic.exact
                      "exact"
                      (Term.proj
                       (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                       "."
                       `symm))
                     [])
                    (group
                     (Tactic.have''
                      "have"
                      [`eq‚ÇÇ []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_=_¬ª
                         (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                         "="
                         (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
                     [])
                    (group
                     (Tactic.tacticShow_
                      "show"
                      (¬´term_=_¬ª
                       (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                       "="
                       (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                     [])
                    (group (Tactic.abel "abel" [] []) [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                      [])
                     [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (numLit "2")
                  "*"
                  (Init.Logic.¬´term_+_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                   "+"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
                ":="
                `parallelogram_law_with_norm)]))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                `Œ¥
                "‚â§"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                 "‚à•")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
                 (group (Tactic.apply "apply" `Œ¥_le') [])
                 (group (Tactic.apply "apply" `h‚ÇÇ) [])
                 (group
                  (tacticRepeat'_
                   "repeat'"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
                  [])
                 (group
                  (tacticRepeat'_
                   "repeat'"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
                  [])
                 (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
                "‚â§"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (numLit "4")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                   "‚à•"))
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.mono "mono" [] [] [] []) [])
                 (group (Tactic.mono "mono" [] [] [] []) [])
                 (group (Lean.Tactic.normNum "norm_num" [] []) [])
                 (group (Tactic.apply "apply" `mul_nonneg) [])
                 (group (Lean.Tactic.normNum "norm_num" [] []) [])
                 (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                "‚â§"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                 "*"
                 (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
             ":="
             (Term.app
              `mul_self_le_mul_self
              [(Term.app `norm_nonneg [(Term.hole "_")])
               (Term.app
                `le_trans‚Çì
                [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
                 (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ' []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
                "‚â§"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                 "*"
                 (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
             ":="
             (Term.app
              `mul_self_le_mul_self
              [(Term.app `norm_nonneg [(Term.hole "_")])
               (Term.app
                `le_trans‚Çì
                [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
                 (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
          [])
         (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") []) [])
         (group (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq) [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
          [])
         (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") []) [])
         (group
          (tacticCalc_
           "calc"
           [(calcStep
             (¬´term_=_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
              "="
              (¬´term_-_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (numLit "2")
                "*"
                (Init.Logic.¬´term_+_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
               "-"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "4")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                 "‚à•"))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
                 (group (Tactic.simp "simp" [] [] [] []) [])]))))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (¬´term_-_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (numLit "2")
                "*"
                (Init.Logic.¬´term_+_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
               "-"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
             ":="
             (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (¬´term_-_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (numLit "2")
                "*"
                (Init.Logic.¬´term_+_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                  "*"
                  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
                  "*"
                  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
               "-"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
             ":="
             (Term.app
              `sub_le_sub_right
              [(Term.app
                `mul_le_mul_of_nonneg_left
                [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
               (Term.hole "_")]))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.app
            `add_nonneg
            [(Term.app
              `mul_nonneg
              [(Term.app
                `mul_nonneg
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                 `zero_le_Œ¥])
               (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
             (Term.app
              `mul_nonneg
              [(Term.app
                `mul_nonneg
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                 `nat.one_div_pos_of_nat.le])
               `nat.one_div_pos_of_nat.le])]))
          [])
         (group (Tactic.apply "apply" `tendsto.comp) [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
              (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                   "=>"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                    "*"
                    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.convert
                   "convert"
                   []
                   (Term.app
                    (Term.proj
                     (Term.app
                      (Term.explicit "@" `tendsto_const_nhds)
                      [(Term.hole "_")
                       (Term.hole "_")
                       (Term.hole "_")
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                       (Term.hole "_")])
                     "."
                     `mul)
                    [`tendsto_one_div_add_at_top_nhds_0_nat])
                   [])
                  [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                   "=>"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                    "*"
                    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.convert
                   "convert"
                   []
                   (Term.app
                    (Term.proj
                     (Term.app
                      (Term.explicit "@" `tendsto_const_nhds)
                      [(Term.hole "_")
                       (Term.hole "_")
                       (Term.hole "_")
                       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                       (Term.hole "_")])
                     "."
                     `mul)
                    [`tendsto_one_div_add_at_top_nhds_0_nat])
                   [])
                  [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                   "=>"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                     "*"
                     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                    "*"
                    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
                  [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
          [])
         (group (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) []) [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") []) [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `b
          []
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
            "=>"
            (Init.Logic.¬´term_+_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
              "*"
              (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
             "+"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (numLit "4")
               "*"
               (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
              "*"
              (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
       [])
      (group
       (Tactic.use
        "use"
        [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
       [])
      (group (Tactic.constructor "constructor") [])
      (group (Tactic.intro "intro" [`n]) [])
      (group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])
      (group (Tactic.constructor "constructor") [])
      (group (Tactic.intro "intro" [`p `q `N `hp `hq]) [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl `wp [] ":=" (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl `wq [] ":=" (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq)))) [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp)))) [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `half
          []
          ":="
          (¬´term_/_¬ª
           (numLit "1")
           "/"
           (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `div
          []
          ":="
          (¬´term_/_¬ª
           (numLit "1")
           "/"
           (Init.Logic.¬´term_+_¬ª
            (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
            "+"
            (numLit "1"))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Init.Logic.¬´term_+_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (numLit "4")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                 "‚à•"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                "‚à•"
                (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                "‚à•"))
              "+"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
             "="
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (numLit "2")
              "*"
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
          ":="
          (calc
           "calc"
           [(calcStep
             (¬´term_=_¬ª
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "4")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                 "‚à•"))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
              "="
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "2")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•"))
                "*"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "2")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•")))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Term.app
                  (Analysis.InnerProductSpace.Projection.termabsR "absR")
                  [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•"))
                "*"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Term.app
                  (Analysis.InnerProductSpace.Projection.termabsR "absR")
                  [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                  "‚à•")))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") [])
                  [])
                 (group (Tactic.exact "exact" `zero_le_two) [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                  " ‚Ä¢ "
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                 "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                 "‚à•"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                  " ‚Ä¢ "
                  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
                 "‚à•"))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
               "+"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `smul_sub)
                     ","
                     (Tactic.rwRule [] `smul_smul)
                     ","
                     (Tactic.rwRule
                      []
                      (Term.app
                       `mul_one_div_cancel
                       [(Term.paren
                         "("
                         [`_root_.two_ne_zero
                          [(Term.typeAscription
                            ":"
                            (¬´term_‚â†_¬ª
                             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                             "‚â†"
                             (numLit "0")))]]
                         ")")]))
                     ","
                     (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                     ","
                     (Tactic.rwRule [] `add_smul)]
                    "]")
                   [])
                  [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
                 (group
                  (Tactic.have''
                   "have"
                   [`eq‚ÇÅ []]
                   [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.proj
                    (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                    "."
                    `symm))
                  [])
                 (group
                  (Tactic.have''
                   "have"
                   [`eq‚ÇÇ []]
                   [(Term.typeSpec
                     ":"
                     (¬´term_=_¬ª
                      (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                      "="
                      (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
                  [])
                 (group
                  (Tactic.tacticShow_
                   "show"
                   (¬´term_=_¬ª
                    (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                    "="
                    (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                  [])
                 (group (Tactic.abel "abel" [] []) [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (numLit "2")
               "*"
               (Init.Logic.¬´term_+_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
                "+"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
             ":="
             `parallelogram_law_with_norm)]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             `Œ¥
             "‚â§"
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
              "‚à•"
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
              "‚à•")))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
              (group (Tactic.apply "apply" `Œ¥_le') [])
              (group (Tactic.apply "apply" `h‚ÇÇ) [])
              (group
               (tacticRepeat'_
                "repeat'"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
               [])
              (group
               (tacticRepeat'_
                "repeat'"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
               [])
              (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq‚ÇÅ []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (numLit "4")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                "‚à•"
                (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
                "‚à•"))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
               "‚à•"))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.mono "mono" [] [] [] []) [])
              (group (Tactic.mono "mono" [] [] [] []) [])
              (group (Lean.Tactic.normNum "norm_num" [] []) [])
              (group (Tactic.apply "apply" `mul_nonneg) [])
              (group (Lean.Tactic.normNum "norm_num" [] []) [])
              (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq‚ÇÇ []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
              "*"
              (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
          ":="
          (Term.app
           `mul_self_le_mul_self
           [(Term.app `norm_nonneg [(Term.hole "_")])
            (Term.app
             `le_trans‚Çì
             [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
              (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq‚ÇÇ' []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
              "*"
              (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
          ":="
          (Term.app
           `mul_self_le_mul_self
           [(Term.app `norm_nonneg [(Term.hole "_")])
            (Term.app
             `le_trans‚Çì
             [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
              (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") []) [])
      (group (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") []) [])
      (group
       (tacticCalc_
        "calc"
        [(calcStep
          (¬´term_=_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
           "="
           (¬´term_-_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (numLit "2")
             "*"
             (Init.Logic.¬´term_+_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
              "+"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
            "-"
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (numLit "4")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
               "‚à•"))
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
              "‚à•"
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
              "‚à•"))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
              (group (Tactic.simp "simp" [] [] [] []) [])]))))
         (calcStep
          (¬´term_‚â§_¬ª
           (Term.hole "_")
           "‚â§"
           (¬´term_-_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (numLit "2")
             "*"
             (Init.Logic.¬´term_+_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
              "+"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
            "-"
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
          ":="
          (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
         (calcStep
          (¬´term_‚â§_¬ª
           (Term.hole "_")
           "‚â§"
           (¬´term_-_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (numLit "2")
             "*"
             (Init.Logic.¬´term_+_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
               "*"
               (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
              "+"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
               "*"
               (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
            "-"
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
          ":="
          (Term.app
           `sub_le_sub_right
           [(Term.app
             `mul_le_mul_of_nonneg_left
             [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
            (Term.hole "_")]))
         (calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (Init.Logic.¬´term_+_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
            "+"
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div)))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `add_nonneg
         [(Term.app
           `mul_nonneg
           [(Term.app
             `mul_nonneg
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
              `zero_le_Œ¥])
            (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
          (Term.app
           `mul_nonneg
           [(Term.app
             `mul_nonneg
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
              `nat.one_div_pos_of_nat.le])
            `nat.one_div_pos_of_nat.le])]))
       [])
      (group (Tactic.apply "apply" `tendsto.comp) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
           (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq‚ÇÅ []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                "=>"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                 "*"
                 (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
              `at_top
              (Term.app
               `nhds
               [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.convert
                "convert"
                []
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.explicit "@" `tendsto_const_nhds)
                   [(Term.hole "_")
                    (Term.hole "_")
                    (Term.hole "_")
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
                    (Term.hole "_")])
                  "."
                  `mul)
                 [`tendsto_one_div_add_at_top_nhds_0_nat])
                [])
               [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                "=>"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                 "*"
                 (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
              `at_top
              (Term.app
               `nhds
               [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.convert
                "convert"
                []
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.explicit "@" `tendsto_const_nhds)
                   [(Term.hole "_")
                    (Term.hole "_")
                    (Term.hole "_")
                    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                    (Term.hole "_")])
                  "."
                  `mul)
                 [`tendsto_one_div_add_at_top_nhds_0_nat])
                [])
               [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`eq‚ÇÇ []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                "=>"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                  "*"
                  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
                 "*"
                 (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
              `at_top
              (Term.app
               `nhds
               [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
       [])
      (group (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) []) [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_zero‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `eq‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `eq‚ÇÅ.add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq‚ÇÇ []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
           "=>"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
             "*"
             (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
            "*"
            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
         `at_top
         (Term.app
          `nhds
          [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `this.mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
      "=>"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
        "*"
        (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
       "*"
       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
    `at_top
    (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
      "*"
      (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    "*"
    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.paren
      "("
      [(Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
        "*"
        (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
       []]
      ")")
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
           "=>"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
            "*"
            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
         `at_top
         (Term.app
          `nhds
          [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.convert
           "convert"
           []
           (Term.app
            (Term.proj
             (Term.app
              (Term.explicit "@" `tendsto_const_nhds)
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
               (Term.hole "_")])
             "."
             `mul)
            [`tendsto_one_div_add_at_top_nhds_0_nat])
           [])
          [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.convert
        "convert"
        []
        (Term.app
         (Term.proj
          (Term.app
           (Term.explicit "@" `tendsto_const_nhds)
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
            (Term.hole "_")])
          "."
          `mul)
         [`tendsto_one_div_add_at_top_nhds_0_nat])
        [])
       [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert
   "convert"
   []
   (Term.app
    (Term.proj
     (Term.app
      (Term.explicit "@" `tendsto_const_nhds)
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       (Term.hole "_")])
     "."
     `mul)
    [`tendsto_one_div_add_at_top_nhds_0_nat])
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    (Term.app
     (Term.explicit "@" `tendsto_const_nhds)
     [(Term.hole "_")
      (Term.hole "_")
      (Term.hole "_")
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
      (Term.hole "_")])
    "."
    `mul)
   [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.explicit "@" `tendsto_const_nhds)
    [(Term.hole "_")
     (Term.hole "_")
     (Term.hole "_")
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     (Term.hole "_")])
   "."
   `mul)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.explicit "@" `tendsto_const_nhds)
   [(Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `tendsto_const_nhds)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_const_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.explicit "@" `tendsto_const_nhds)
   [(Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
      "=>"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       "*"
       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
    `at_top
    (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq‚ÇÅ []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
           "=>"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
            "*"
            (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
         `at_top
         (Term.app
          `nhds
          [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.convert
           "convert"
           []
           (Term.app
            (Term.proj
             (Term.app
              (Term.explicit "@" `tendsto_const_nhds)
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
               (Term.hole "_")])
             "."
             `mul)
            [`tendsto_one_div_add_at_top_nhds_0_nat])
           [])
          [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.convert
        "convert"
        []
        (Term.app
         (Term.proj
          (Term.app
           (Term.explicit "@" `tendsto_const_nhds)
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
            (Term.hole "_")])
          "."
          `mul)
         [`tendsto_one_div_add_at_top_nhds_0_nat])
        [])
       [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert
   "convert"
   []
   (Term.app
    (Term.proj
     (Term.app
      (Term.explicit "@" `tendsto_const_nhds)
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
       (Term.hole "_")])
     "."
     `mul)
    [`tendsto_one_div_add_at_top_nhds_0_nat])
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    (Term.app
     (Term.explicit "@" `tendsto_const_nhds)
     [(Term.hole "_")
      (Term.hole "_")
      (Term.hole "_")
      (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
      (Term.hole "_")])
    "."
    `mul)
   [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.explicit "@" `tendsto_const_nhds)
    [(Term.hole "_")
     (Term.hole "_")
     (Term.hole "_")
     (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
     (Term.hole "_")])
   "."
   `mul)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.explicit "@" `tendsto_const_nhds)
   [(Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "8")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `tendsto_const_nhds)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_const_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.explicit "@" `tendsto_const_nhds)
   [(Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    (Term.paren "(" [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []] ")")
    (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
      "=>"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
       "*"
       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
    `at_top
    (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `nhds [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "8")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.paren "(" [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []] ")")
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.convert "convert" [] `continuous_sqrt.continuous_at []) [])
      (group (Tactic.exact "exact" `sqrt_zero.symm) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" `sqrt_zero.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sqrt_zero.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert "convert" [] `continuous_sqrt.continuous_at [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `continuous_sqrt.continuous_at
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `tendsto.comp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto.comp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact
   "exact"
   (Term.app
    `add_nonneg
    [(Term.app
      `mul_nonneg
      [(Term.app
        `mul_nonneg
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
         `zero_le_Œ¥])
       (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
     (Term.app
      `mul_nonneg
      [(Term.app
        `mul_nonneg
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
         `nat.one_div_pos_of_nat.le])
       `nat.one_div_pos_of_nat.le])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_nonneg
   [(Term.app
     `mul_nonneg
     [(Term.app
       `mul_nonneg
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
        `zero_le_Œ¥])
      (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
    (Term.app
     `mul_nonneg
     [(Term.app
       `mul_nonneg
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
        `nat.one_div_pos_of_nat.le])
      `nat.one_div_pos_of_nat.le])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_nonneg
   [(Term.app
     `mul_nonneg
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      `nat.one_div_pos_of_nat.le])
    `nat.one_div_pos_of_nat.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nat.one_div_pos_of_nat.le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `mul_nonneg
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
    `nat.one_div_pos_of_nat.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nat.one_div_pos_of_nat.le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")
    `nat.one_div_pos_of_nat.le])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren
     "("
     [(Term.app
       `mul_nonneg
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")
        `nat.one_div_pos_of_nat.le])
      []]
     ")")
    `nat.one_div_pos_of_nat.le])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `mul_nonneg
   [(Term.app
     `mul_nonneg
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      `zero_le_Œ¥])
    (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.one_div_pos_of_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `mul_nonneg
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
    `zero_le_Œ¥])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_le_Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")
    `zero_le_Œ¥])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren
     "("
     [(Term.app
       `mul_nonneg
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")
        `zero_le_Œ¥])
      []]
     ")")
    (Term.paren "(" [(Term.app `le_of_lt‚Çì [`Nat.one_div_pos_of_nat]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (tacticCalc_
   "calc"
   [(calcStep
     (¬´term_=_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
      "="
      (¬´term_-_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (numLit "2")
        "*"
        (Init.Logic.¬´term_+_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
         "+"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
       "-"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
         "‚à•"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
         (group (Tactic.simp "simp" [] [] [] []) [])]))))
    (calcStep
     (¬´term_‚â§_¬ª
      (Term.hole "_")
      "‚â§"
      (¬´term_-_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (numLit "2")
        "*"
        (Init.Logic.¬´term_+_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
         "+"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
       "-"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
     ":="
     (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
    (calcStep
     (¬´term_‚â§_¬ª
      (Term.hole "_")
      "‚â§"
      (¬´term_-_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (numLit "2")
        "*"
        (Init.Logic.¬´term_+_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
         "+"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
       "-"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
     ":="
     (Term.app
      `sub_le_sub_right
      [(Term.app
        `mul_le_mul_of_nonneg_left
        [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
       (Term.hole "_")]))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div)))
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticCalc_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.Ring.tacticRing "ring")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Tactic.Ring.tacticRing', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) "*" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `div) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) "*" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "8")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []] ")")
   "*"
   `div)
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `sub_le_sub_right
   [(Term.app
     `mul_le_mul_of_nonneg_left
     [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app
   `mul_le_mul_of_nonneg_left
   [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `eq‚ÇÇ'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `eq‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ']) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_le_mul_of_nonneg_left
   [(Term.paren "(" [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ']) []] ")")
    (Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_le_sub_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Term.hole "_")
   "‚â§"
   (¬´term_-_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "2")
     "*"
     (Init.Logic.¬´term_+_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
      "+"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
    "-"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
   "-"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
   "*"
   (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Term.paren
     "("
     [(Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
       "*"
       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
      []]
     ")")
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
     "*"
     (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `eq‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_le_sub_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Term.hole "_")
   "‚â§"
   (¬´term_-_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "2")
     "*"
     (Init.Logic.¬´term_+_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
      "+"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
    "-"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
   "-"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Term.paren
     "("
     [(Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
      []]
     ")")
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") []) [])
      (group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `this)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
   "="
   (¬´term_-_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "2")
     "*"
     (Init.Logic.¬´term_+_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
      "+"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
    "-"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "4")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
   "-"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "4")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "4")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Term.paren
     "("
     [(Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
      []]
     ")")
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_self_sqrt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sqrt_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sqrt_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nonneg_le_nonneg_of_sq_le_sq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq‚ÇÇ' []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
     ":="
     (Term.app
      `mul_self_le_mul_self
      [(Term.app `norm_nonneg [(Term.hole "_")])
       (Term.app
        `le_trans‚Çì
        [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
         (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_self_le_mul_self
   [(Term.app `norm_nonneg [(Term.hole "_")])
    (Term.app
     `le_trans‚Çì
     [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_trans‚Çì
   [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
    (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `Nat.one_div_le_one_div [`hp])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.one_div_le_one_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hp]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `add_le_add_left [(Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hp]) []] ")") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hw [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p])) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_trans‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `le_trans‚Çì
   [(Term.paren "(" [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`p])) []] ")")
    (Term.paren
     "("
     [(Term.app `add_le_add_left [(Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hp]) []] ")") (Term.hole "_")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_self_le_mul_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq‚ÇÇ []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))))]
     ":="
     (Term.app
      `mul_self_le_mul_self
      [(Term.app `norm_nonneg [(Term.hole "_")])
       (Term.app
        `le_trans‚Çì
        [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
         (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_self_le_mul_self
   [(Term.app `norm_nonneg [(Term.hole "_")])
    (Term.app
     `le_trans‚Çì
     [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_trans‚Çì
   [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
    (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `Nat.one_div_le_one_div [`hq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.one_div_le_one_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hq]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `add_le_add_left [(Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hq]) []] ")") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hw [`q])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q])) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_trans‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `le_trans‚Çì
   [(Term.paren "(" [(¬´term_$__¬ª `le_of_lt‚Çì "$" (Term.app `hw [`q])) []] ")")
    (Term.paren
     "("
     [(Term.app `add_le_add_left [(Term.paren "(" [(Term.app `Nat.one_div_le_one_div [`hq]) []] ")") (Term.hole "_")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_self_le_mul_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) "*" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `Œ¥ "+" `div) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq‚ÇÅ []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (numLit "4")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
           "‚à•"
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
           "‚à•"))
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.mono "mono" [] [] [] []) [])
         (group (Tactic.mono "mono" [] [] [] []) [])
         (group (Lean.Tactic.normNum "norm_num" [] []) [])
         (group (Tactic.apply "apply" `mul_nonneg) [])
         (group (Lean.Tactic.normNum "norm_num" [] []) [])
         (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.mono "mono" [] [] [] []) [])
      (group (Tactic.mono "mono" [] [] [] []) [])
      (group (Lean.Tactic.normNum "norm_num" [] []) [])
      (group (Tactic.apply "apply" `mul_nonneg) [])
      (group (Lean.Tactic.normNum "norm_num" [] []) [])
      (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `mul_nonneg)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.mono "mono" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.mono', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.mono "mono" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.mono', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "4")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "4")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "4") "*" `Œ¥) []] ")")
   "*"
   `Œ¥)
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`eq []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        `Œ¥
        "‚â§"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
         "‚à•")))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
         (group (Tactic.apply "apply" `Œ¥_le') [])
         (group (Tactic.apply "apply" `h‚ÇÇ) [])
         (group
          (tacticRepeat'_
           "repeat'"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
          [])
         (group
          (tacticRepeat'_
           "repeat'"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
          [])
         (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") []) [])
      (group (Tactic.apply "apply" `Œ¥_le') [])
      (group (Tactic.apply "apply" `h‚ÇÇ) [])
      (group
       (tacticRepeat'_
        "repeat'"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
       [])
      (group
       (tacticRepeat'_
        "repeat'"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
       [])
      (group (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `add_halves [(numLit "1")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_halves [(numLit "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_halves
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (tacticRepeat'_
   "repeat'"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRepeat'_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`one_half_pos]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [`one_half_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_half_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (tacticRepeat'_
   "repeat'"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRepeat'_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Subtype.mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Subtype.mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `h‚ÇÇ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `Œ¥_le')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥_le'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `smul_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   `Œ¥
   "‚â§"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Init.Logic.¬´term_+_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (numLit "4")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
            "‚à•"
            (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
            "‚à•"))
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
           "‚à•"
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
           "‚à•"))
         "+"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
        "="
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "2")
         "*"
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))))]
     ":="
     (calc
      "calc"
      [(calcStep
        (¬´term_=_¬ª
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (numLit "4")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
             "‚à•"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
             "‚à•"))
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
            "‚à•"
            (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
            "‚à•"))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
         "="
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (numLit "2")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
             "‚à•"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
             "‚à•"))
           "*"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (numLit "2")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
             "‚à•"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
             "‚à•")))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Term.app
             (Analysis.InnerProductSpace.Projection.termabsR "absR")
             [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
             "‚à•"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
             "‚à•"))
           "*"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Term.app
             (Analysis.InnerProductSpace.Projection.termabsR "absR")
             [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
             "‚à•"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
             "‚à•")))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") []) [])
            (group (Tactic.exact "exact" `zero_le_two) [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
            "‚à•"
            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
             " ‚Ä¢ "
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
            "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
            "‚à•"
            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
             " ‚Ä¢ "
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
            "‚à•"))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Init.Logic.¬´term_+_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
          "+"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `smul_sub)
                ","
                (Tactic.rwRule [] `smul_smul)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `mul_one_div_cancel
                  [(Term.paren
                    "("
                    [`_root_.two_ne_zero
                     [(Term.typeAscription
                       ":"
                       (¬´term_‚â†_¬ª
                        (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                        "‚â†"
                        (numLit "0")))]]
                    ")")]))
                ","
                (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
                ","
                (Tactic.rwRule [] `add_smul)]
               "]")
              [])
             [])
            (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
            (group
             (Tactic.have''
              "have"
              [`eq‚ÇÅ []]
              [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.proj
               (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
               "."
               `symm))
             [])
            (group
             (Tactic.have''
              "have"
              [`eq‚ÇÇ []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
                 "="
                 (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
             [])
            (group
             (Tactic.tacticShow_
              "show"
              (¬´term_=_¬ª
               (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
               "="
               (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
             [])
            (group (Tactic.abel "abel" [] []) [])
            (group
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]") [])
             [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (numLit "2")
          "*"
          (Init.Logic.¬´term_+_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
           "+"
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
        ":="
        `parallelogram_law_with_norm)]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     (¬´term_=_¬ª
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
         "‚à•"))
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
      "="
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "2")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        "*"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "2")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•")))
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Term.app
          (Analysis.InnerProductSpace.Projection.termabsR "absR")
          [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        "*"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Term.app
          (Analysis.InnerProductSpace.Projection.termabsR "absR")
          [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•")))
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") []) [])
         (group (Tactic.exact "exact" `zero_le_two) [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
          " ‚Ä¢ "
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
         "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
          " ‚Ä¢ "
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
         "‚à•"))
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Init.Logic.¬´term_+_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
       "+"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `smul_sub)
             ","
             (Tactic.rwRule [] `smul_smul)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `mul_one_div_cancel
               [(Term.paren
                 "("
                 [`_root_.two_ne_zero
                  [(Term.typeAscription
                    ":"
                    (¬´term_‚â†_¬ª
                     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                     "‚â†"
                     (numLit "0")))]]
                 ")")]))
             ","
             (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
             ","
             (Tactic.rwRule [] `add_smul)]
            "]")
           [])
          [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
         (group
          (Tactic.have''
           "have"
           [`eq‚ÇÅ []]
           [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.proj (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))
          [])
         (group
          (Tactic.have''
           "have"
           [`eq‚ÇÇ []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
              "="
              (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
          [])
         (group
          (Tactic.tacticShow_
           "show"
           (¬´term_=_¬ª
            (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
            "="
            (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
          [])
         (group (Tactic.abel "abel" [] []) [])
         (group
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]") [])
          [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (numLit "2")
       "*"
       (Init.Logic.¬´term_+_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
        "+"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
     ":="
     `parallelogram_law_with_norm)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `parallelogram_law_with_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `smul_sub)
          ","
          (Tactic.rwRule [] `smul_smul)
          ","
          (Tactic.rwRule
           []
           (Term.app
            `mul_one_div_cancel
            [(Term.paren
              "("
              [`_root_.two_ne_zero
               [(Term.typeAscription
                 ":"
                 (¬´term_‚â†_¬ª
                  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                  "‚â†"
                  (numLit "0")))]]
              ")")]))
          ","
          (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
          ","
          (Tactic.rwRule [] `add_smul)]
         "]")
        [])
       [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] []) [])
      (group
       (Tactic.have''
        "have"
        [`eq‚ÇÅ []]
        [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.proj (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))
       [])
      (group
       (Tactic.have''
        "have"
        [`eq‚ÇÇ []]
        [(Term.typeSpec
          ":"
          (¬´term_=_¬ª
           (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
           "="
           (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
       [])
      (group
       (Tactic.tacticShow_
        "show"
        (¬´term_=_¬ª
         (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
         "="
         (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
       [])
      (group (Tactic.abel "abel" [] []) [])
      (group
       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]") [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `eq‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `eq‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.abel', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticShow_
   "show"
   (¬´term_=_¬ª
    (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
    "="
    (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticShow_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
   "="
   (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_-_¬ª `u "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_-_¬ª `u "-" `wq) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Init.Logic.¬´term_+_¬ª `u "+" `u)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `u "+" `u) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `u "+" `u) []] ")") "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp)) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   [`eq‚ÇÇ []]
   [(Term.typeSpec
     ":"
     (¬´term_=_¬ª
      (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
      "="
      (Init.Logic.¬´term_+_¬ª `a "+" `b)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
   "="
   (Init.Logic.¬´term_+_¬ª `a "+" `b))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (¬´term_-_¬ª (Init.Logic.¬´term_+_¬ª `u "+" `u) "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Init.Logic.¬´term_+_¬ª `u "+" `u)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `u "+" `u) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª (Term.paren "(" [(Init.Logic.¬´term_+_¬ª `u "+" `u) []] ")") "-" (Init.Logic.¬´term_+_¬ª `wq "+" `wp)) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact
   "exact"
   (Term.proj (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_sub_sub_cancel_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have'' "have" [`eq‚ÇÅ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `smul_sub)
     ","
     (Tactic.rwRule [] `smul_smul)
     ","
     (Tactic.rwRule
      []
      (Term.app
       `mul_one_div_cancel
       [(Term.paren
         "("
         [`_root_.two_ne_zero
          [(Term.typeAscription
            ":"
            (¬´term_‚â†_¬ª
             (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
             "‚â†"
             (numLit "0")))]]
         ")")]))
     ","
     (Tactic.rwRule ["‚Üê"] `one_add_one_eq_two)
     ","
     (Tactic.rwRule [] `add_smul)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_add_one_eq_two
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_one_div_cancel
   [(Term.paren
     "("
     [`_root_.two_ne_zero
      [(Term.typeAscription
        ":"
        (¬´term_‚â†_¬ª
         (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
         "‚â†"
         (numLit "0")))]]
     ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`_root_.two_ne_zero
    [(Term.typeAscription
      ":"
      (¬´term_‚â†_¬ª
       (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       "‚â†"
       (numLit "0")))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â†_¬ª
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   "‚â†"
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â†_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `_root_.two_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_one_div_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `smul_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `smul_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `a "-" `b) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Init.Logic.¬´term_+_¬ª `a "+" `b) "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       " ‚Ä¢ "
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
      "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       " ‚Ä¢ "
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
      "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
      (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
      " ‚Ä¢ "
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
     "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
      (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
      " ‚Ä¢ "
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
     "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     " ‚Ä¢ "
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
    "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     " ‚Ä¢ "
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
    (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    " ‚Ä¢ "
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   " ‚Ä¢ "
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
    (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    " ‚Ä¢ "
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   " ‚Ä¢ "
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     " ‚Ä¢ "
     (Term.paren
      "("
      [(¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))) []]
      ")"))
    "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
     " ‚Ä¢ "
     (Term.paren
      "("
      [(¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))) []]
      ")"))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") []) [])
      (group (Tactic.exact "exact" `zero_le_two) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" `zero_le_two)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_le_two
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `_root_.abs_of_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.app
       (Analysis.InnerProductSpace.Projection.termabsR "absR")
       [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     "*"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.app
       (Analysis.InnerProductSpace.Projection.termabsR "absR")
       [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•")))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.app
      (Analysis.InnerProductSpace.Projection.termabsR "absR")
      [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Term.app
      (Analysis.InnerProductSpace.Projection.termabsR "absR")
      [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•")))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Term.app
     (Analysis.InnerProductSpace.Projection.termabsR "absR")
     [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Term.app
     (Analysis.InnerProductSpace.Projection.termabsR "absR")
     [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.app
    (Analysis.InnerProductSpace.Projection.termabsR "absR")
    [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app
   (Analysis.InnerProductSpace.Projection.termabsR "absR")
   [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.InnerProductSpace.Projection.termabsR "absR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.termabsR', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.app
    (Analysis.InnerProductSpace.Projection.termabsR "absR")
    [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app
   (Analysis.InnerProductSpace.Projection.termabsR "absR")
   [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.InnerProductSpace.Projection.termabsR "absR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.termabsR', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.app
    (Analysis.InnerProductSpace.Projection.termabsR "absR")
    [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.app
       (Analysis.InnerProductSpace.Projection.termabsR "absR")
       [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Term.app
     (Analysis.InnerProductSpace.Projection.termabsR "absR")
     [(Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.Ring.tacticRing "ring")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Tactic.Ring.tacticRing', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "4")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
   "="
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "2")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     "*"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "2")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•")))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "2")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "2")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•")))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "2")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "4")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "4")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "4")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Logic.¬´term_+_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.paren
       "("
       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        []]
       ")")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "4")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "2")
    "*"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "2")
   "*"
   (Init.Logic.¬´term_+_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
    "+"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `b "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `a "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "4")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
      "‚à•"
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
      "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "4")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
     "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (numLit "4")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
    "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Logic.¬´term_+_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.paren
       "("
       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
         (numLit "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
          "‚à•"))
        []]
       ")")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Init.Logic.¬´term_+_¬ª `wq "+" `wp)))
       "‚à•"))
     []]
    ")")
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `wp "-" `wq) "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `div
     []
     ":="
     (¬´term_/_¬ª
      (numLit "1")
      "/"
      (Init.Logic.¬´term_+_¬ª
       (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
       "+"
       (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª
   (numLit "1")
   "/"
   (Init.Logic.¬´term_+_¬ª
    (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
    "+"
    (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
   "+"
   (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.paren "(" [`N [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `N
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `half
     []
     ":="
     (¬´term_/_¬ª
      (numLit "1")
      "/"
      (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª
   (numLit "1")
   "/"
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `b [] ":=" (¬´term_-_¬ª `u "-" `wp))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `wp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `a [] ":=" (¬´term_-_¬ª `u "-" `wq))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `wq)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `wq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl (Term.letIdDecl `wq [] ":=" (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(Term.app `w [`q]) [(Term.typeAscription ":" `F)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `F
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `w [`q])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl (Term.letIdDecl `wp [] ":=" (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(Term.app `w [`p]) [(Term.typeAscription ":" `F)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `F
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `w [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`p `q `N `hp `hq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `N
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.constructor "constructor")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.constructor', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sqrt_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sqrt_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.constructor "constructor")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.constructor', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.use
   "use"
   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.use', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `sqrt [(Term.app `b [`n])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sqrt [(Term.app `b [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `b [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `b [`n]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sqrt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `b
     []
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
       "=>"
       (Init.Logic.¬´term_+_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
         "*"
         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
        "+"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (numLit "4")
          "*"
          (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
         "*"
         (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Init.Logic.¬´term_+_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
      "*"
      (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
     "+"
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (numLit "4")
       "*"
       (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
      "*"
      (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
    "*"
    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
   "+"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (numLit "4")
     "*"
     (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
    "*"
    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (numLit "4")
    "*"
    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (numLit "4")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "8")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "8") "*" `Œ¥) []] ")")
   "*"
   (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `cauchy_seq_iff_le_tendsto_0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `CauchySeq
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(Term.app `w [`n]) [(Term.typeAscription ":" `F)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `F
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `w [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CauchySeq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`norm_tendsto []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [])]
           "=>"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
         `at_top
         (Term.app `nhds [`Œ¥])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
                 `at_top
                 (Term.app `nhds [`Œ¥])]))]
             ":="
             `tendsto_const_nhds)))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h' []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                   "=>"
                   (Init.Logic.¬´term_+_¬ª
                    `Œ¥
                    "+"
                    (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
                 `at_top
                 (Term.app `nhds [`Œ¥])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
                 (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.app
            `tendsto_of_tendsto_of_tendsto_of_le_of_le
            [`h
             `h'
             (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`x] [])]
               "=>"
               (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
              `at_top
              (Term.app `nhds [`Œ¥])]))]
          ":="
          `tendsto_const_nhds)))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h' []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
                "=>"
                (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
              `at_top
              (Term.app `nhds [`Œ¥])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `tendsto_of_tendsto_of_tendsto_of_le_of_le
         [`h
          `h'
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`x] [])]
            "=>"
            (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `tendsto_of_tendsto_of_tendsto_of_le_of_le
    [`h
     `h'
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
     (Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto_of_tendsto_of_tendsto_of_le_of_le
   [`h
    `h'
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
    (Term.fun
     "fun"
     (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [(Term.app `hw [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hw [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hw [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Œ¥_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`x] [])] "=>" (Term.app `Œ¥_le [(Term.hole "_")]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto_of_tendsto_of_tendsto_of_le_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h' []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
           "=>"
           (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
         `at_top
         (Term.app `nhds [`Œ¥])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) []) [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero‚Çì)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_zero‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.convert "convert" [] (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h.add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
      "=>"
      (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
    `at_top
    (Term.app `nhds [`Œ¥])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [`Œ¥])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `nhds [`Œ¥]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
    "=>"
    (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
         `at_top
         (Term.app `nhds [`Œ¥])]))]
     ":="
     `tendsto_const_nhds)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_const_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
    `at_top
    (Term.app `nhds [`Œ¥])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [`Œ¥])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `nhds [`Œ¥]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])] "=>" `Œ¥)) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
    `at_top
    (Term.app `nhds [`Œ¥])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nhds [`Œ¥])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `nhds [`Œ¥]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `w [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] `exists_seq)]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `w)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hw)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exists_seq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`exists_seq []]
     [(Term.typeSpec
       ":"
       (¬´term‚àÉ_,_¬ª
        "‚àÉ"
        (Lean.explicitBinders
         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
        ","
        (Term.forall
         "‚àÄ"
         [(Term.simpleBinder [`n] [])]
         ","
         (¬´term_<_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
          "<"
          (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.have''
           "have"
           [`hŒ¥ []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
              ","
              (¬´term_<_¬ª
               `Œ¥
               "<"
               (Init.Logic.¬´term_+_¬ª
                `Œ¥
                "+"
                (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`n] [])]
             "=>"
             (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h []]
             []
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`n] [])]
               "=>"
               (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `w
             [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some [(Term.app `h [`n])]))))))
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.anonymousCtor
            "‚ü®"
            [`w
             ","
             (Term.fun
              "fun"
              (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
            "‚ü©"))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.have''
        "have"
        [`hŒ¥ []]
        [(Term.typeSpec
          ":"
          (Term.forall
           "‚àÄ"
           [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
           ","
           (¬´term_<_¬ª
            `Œ¥
            "<"
            (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`n] [])]
          "=>"
          (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h []]
          []
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`n] [])]
            "=>"
            (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `w
          [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
          ":="
          (Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some [(Term.app `h [`n])]))))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.anonymousCtor
         "‚ü®"
         [`w
          ","
          (Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
         "‚ü©"))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.anonymousCtor
    "‚ü®"
    [`w
     ","
     (Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
    "‚ü©"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "‚ü®"
   [`w
    ","
    (Term.fun
     "fun"
     (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some_spec [(Term.app `h [`n])])))]
   "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some_spec [(Term.app `h [`n])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Classical.some_spec [(Term.app `h [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `h [`n]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Classical.some_spec
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `w
     [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some [(Term.app `h [`n])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `Classical.some [(Term.app `h [`n])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Classical.some [(Term.app `h [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `h [`n]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Classical.some
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h []]
     []
     ":="
     (Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exists_lt_of_cinfi_lt [(Term.app `hŒ¥ [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hŒ¥ [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hŒ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hŒ¥ [`n]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exists_lt_of_cinfi_lt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact
   "exact"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`n] [])]
     "=>"
     (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_add_of_le_of_pos [(Term.app `le_refl‚Çì [(Term.hole "_")]) `Nat.one_div_pos_of_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.one_div_pos_of_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_refl‚Çì [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_refl‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_refl‚Çì [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_add_of_le_of_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   [`hŒ¥ []]
   [(Term.typeSpec
     ":"
     (Term.forall
      "‚àÄ"
      [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
      ","
      (¬´term_<_¬ª
       `Œ¥
       "<"
       (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
   ","
   (¬´term_<_¬ª
    `Œ¥
    "<"
    (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_<_¬ª
   `Œ¥
   "<"
   (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term‚àÉ_,_¬ª
   "‚àÉ"
   (Lean.explicitBinders
    (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
   ","
   (Term.forall
    "‚àÄ"
    [(Term.simpleBinder [`n] [])]
    ","
    (¬´term_<_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
     "<"
     (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚àÉ_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   [(Term.simpleBinder [`n] [])]
   ","
   (¬´term_<_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
    "<"
    (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_<_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
   "<"
   (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (numLit "1") "/" (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `w [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`Œ¥_le' []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "‚àÄ"
        []
        ","
        (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
         "‚àÄ"
         `w
         (¬´binderTerm‚àà_¬ª "‚àà" `K)
         ","
         (Term.forall
          "‚àÄ"
          []
          ","
          (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`w `hw] [])]
       "=>"
       (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [`w `hw] [])] "=>" (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall "‚àÄ" [] "," (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall "‚àÄ" [] "," (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall "‚àÄ" [] "," (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact
   "exact"
   (Term.app
    `cinfi_le
    [(Term.anonymousCtor
      "‚ü®"
      [(numLit "0")
       ","
       (¬´term_$__¬ª
        (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
        "$"
        (Term.fun
         "fun"
         (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")]))))]
      "‚ü©")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `cinfi_le
   [(Term.anonymousCtor
     "‚ü®"
     [(numLit "0")
      ","
      (¬´term_$__¬ª
       (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
       "$"
       (Term.fun
        "fun"
        (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")]))))]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "‚ü®"
   [(numLit "0")
    ","
    (¬´term_$__¬ª
     (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
     "$"
     (Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")]))))]
   "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_$__¬ª
   (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
   "$"
   (Term.fun
    "fun"
    (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Set.forall_range_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `cinfi_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   [`Œ¥_le []]
   [(Term.typeSpec
     ":"
     (Term.forall
      "‚àÄ"
      [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
      ","
      (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
   ","
   (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`zero_le_Œ¥ []]
     [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]
     ":="
     (Term.app
      `le_cinfi
      [(Term.fun
        "fun"
        (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_cinfi
   [(Term.fun
     "fun"
     (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_cinfi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl (Term.letIdDecl `this' [] [(Term.typeSpec ":" (Term.app `Nonempty [`K]))] ":=" `ne.to_subtype)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ne.to_subtype
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nonempty [`K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nonempty
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `Œ¥
     []
     ":="
     (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
      "‚®Ö"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
      ", "
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
   "‚®Ö"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
   ", "
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.CompleteLattice.¬´term‚®Ö_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Existence of minimizers
    Let `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.
    Then there exists a (unique) `v` in `K` that minimizes the distance `‚à•u - v‚à•` to `u`.
     -/
  theorem
    exists_norm_eq_infi_of_complete_convex
    { K : Set F } ( ne : K.nonempty ) ( h‚ÇÅ : IsComplete K ) ( h‚ÇÇ : Convex ‚Ñù K )
      : ‚àÄ u : F , ‚àÉ v ‚àà K , ‚à• u - v ‚à• = ‚®Ö w : K , ‚à• u - w ‚à•
    :=
      fun
        u
          =>
          by
            let Œ¥ := ‚®Ö w : K , ‚à• u - w ‚à•
              let this' : Nonempty K := ne.to_subtype
              have zero_le_Œ¥ : 0 ‚â§ Œ¥ := le_cinfi fun _ => norm_nonneg _
              have Œ¥_le : ‚àÄ w : K , Œ¥ ‚â§ ‚à• u - w ‚à•
              exact cinfi_le ‚ü® 0 , Set.forall_range_iff . 2 $ fun _ => norm_nonneg _ ‚ü©
              have Œ¥_le' : ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , Œ¥ ‚â§ ‚à• u - w ‚à• := fun w hw => Œ¥_le ‚ü® w , hw ‚ü©
              have
                exists_seq
                  : ‚àÉ w : ‚Ñï ‚Üí K , ‚àÄ n , ‚à• u - w n ‚à• < Œ¥ + 1 / n + 1
                  :=
                  by
                    have hŒ¥ : ‚àÄ n : ‚Ñï , Œ¥ < Œ¥ + 1 / n + 1
                      exact fun n => lt_add_of_le_of_pos le_refl‚Çì _ Nat.one_div_pos_of_nat
                      have h := fun n => exists_lt_of_cinfi_lt hŒ¥ n
                      let w : ‚Ñï ‚Üí K := fun n => Classical.some h n
                      exact ‚ü® w , fun n => Classical.some_spec h n ‚ü©
              rcases exists_seq with ‚ü® w , hw ‚ü©
              have
                norm_tendsto
                  : tendsto fun n => ‚à• u - w n ‚à• at_top nhds Œ¥
                  :=
                  by
                    have h : tendsto fun n : ‚Ñï => Œ¥ at_top nhds Œ¥ := tendsto_const_nhds
                      have
                        h'
                          : tendsto fun n : ‚Ñï => Œ¥ + 1 / n + 1 at_top nhds Œ¥
                          :=
                          by convert h.add tendsto_one_div_add_at_top_nhds_0_nat simp only [ add_zero‚Çì ]
                      exact tendsto_of_tendsto_of_tendsto_of_le_of_le h h' fun x => Œ¥_le _ fun x => le_of_lt‚Çì hw _
              have
                seq_is_cauchy
                  : CauchySeq fun n => ( w n : F )
                  :=
                  by
                    rw [ cauchy_seq_iff_le_tendsto_0 ]
                      let b := fun n : ‚Ñï => 8 * Œ¥ * 1 / n + 1 + 4 * 1 / n + 1 * 1 / n + 1
                      use fun n => sqrt b n
                      constructor
                      intro n
                      exact sqrt_nonneg _
                      constructor
                      intro p q N hp hq
                      let wp := ( w p : F )
                      let wq := ( w q : F )
                      let a := u - wq
                      let b := u - wp
                      let half := 1 / ( 2 : ‚Ñù )
                      let div := 1 / ( N : ‚Ñù ) + 1
                      have
                        :
                            4 * ‚à• u - half ‚Ä¢ wq + wp ‚à• * ‚à• u - half ‚Ä¢ wq + wp ‚à• + ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                              =
                              2 * ‚à• a ‚à• * ‚à• a ‚à• + ‚à• b ‚à• * ‚à• b ‚à•
                          :=
                          calc
                            4 * ‚à• u - half ‚Ä¢ wq + wp ‚à• * ‚à• u - half ‚Ä¢ wq + wp ‚à• + ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                                  =
                                  2 * ‚à• u - half ‚Ä¢ wq + wp ‚à• * 2 * ‚à• u - half ‚Ä¢ wq + wp ‚à• + ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                                :=
                                by ring
                              _
                                  =
                                  absR ( 2 : ‚Ñù ) * ‚à• u - half ‚Ä¢ wq + wp ‚à• * absR ( 2 : ‚Ñù ) * ‚à• u - half ‚Ä¢ wq + wp ‚à•
                                    +
                                    ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                                :=
                                by rw [ _root_.abs_of_nonneg ] exact zero_le_two
                              _
                                  =
                                  ‚à• ( 2 : ‚Ñù ) ‚Ä¢ u - half ‚Ä¢ wq + wp ‚à• * ‚à• ( 2 : ‚Ñù ) ‚Ä¢ u - half ‚Ä¢ wq + wp ‚à•
                                    +
                                    ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                                :=
                                by simp [ norm_smul ]
                              _ = ‚à• a + b ‚à• * ‚à• a + b ‚à• + ‚à• a - b ‚à• * ‚à• a - b ‚à•
                                :=
                                by
                                  rw
                                      [
                                        smul_sub
                                          ,
                                          smul_smul
                                          ,
                                          mul_one_div_cancel ( _root_.two_ne_zero : ( 2 : ‚Ñù ) ‚â† 0 )
                                          ,
                                          ‚Üê one_add_one_eq_two
                                          ,
                                          add_smul
                                        ]
                                    simp only [ one_smul ]
                                    have eq‚ÇÅ : wp - wq = a - b
                                    exact sub_sub_sub_cancel_left _ _ _ . symm
                                    have eq‚ÇÇ : u + u - wq + wp = a + b
                                    show u + u - wq + wp = u - wq + u - wp
                                    abel
                                    rw [ eq‚ÇÅ , eq‚ÇÇ ]
                              _ = 2 * ‚à• a ‚à• * ‚à• a ‚à• + ‚à• b ‚à• * ‚à• b ‚à• := parallelogram_law_with_norm
                      have
                        eq
                          : Œ¥ ‚â§ ‚à• u - half ‚Ä¢ wq + wp ‚à•
                          :=
                          by
                            rw [ smul_add ]
                              apply Œ¥_le'
                              apply h‚ÇÇ
                              repeat' exact Subtype.mem _
                              repeat' exact le_of_lt‚Çì one_half_pos
                              exact add_halves 1
                      have
                        eq‚ÇÅ
                          : 4 * Œ¥ * Œ¥ ‚â§ 4 * ‚à• u - half ‚Ä¢ wq + wp ‚à• * ‚à• u - half ‚Ä¢ wq + wp ‚à•
                          :=
                          by mono mono norm_num apply mul_nonneg norm_num exact norm_nonneg _
                      have
                        eq‚ÇÇ
                          : ‚à• a ‚à• * ‚à• a ‚à• ‚â§ Œ¥ + div * Œ¥ + div
                          :=
                          mul_self_le_mul_self
                            norm_nonneg _ le_trans‚Çì le_of_lt‚Çì $ hw q add_le_add_left Nat.one_div_le_one_div hq _
                      have
                        eq‚ÇÇ'
                          : ‚à• b ‚à• * ‚à• b ‚à• ‚â§ Œ¥ + div * Œ¥ + div
                          :=
                          mul_self_le_mul_self
                            norm_nonneg _ le_trans‚Çì le_of_lt‚Çì $ hw p add_le_add_left Nat.one_div_le_one_div hp _
                      rw [ dist_eq_norm ]
                      apply nonneg_le_nonneg_of_sq_le_sq
                      ¬∑ exact sqrt_nonneg _
                      rw [ mul_self_sqrt ]
                      calc
                        ‚à• wp - wq ‚à• * ‚à• wp - wq ‚à•
                              =
                              2 * ‚à• a ‚à• * ‚à• a ‚à• + ‚à• b ‚à• * ‚à• b ‚à• - 4 * ‚à• u - half ‚Ä¢ wq + wp ‚à• * ‚à• u - half ‚Ä¢ wq + wp ‚à•
                            :=
                            by rw [ ‚Üê this ] simp
                          _ ‚â§ 2 * ‚à• a ‚à• * ‚à• a ‚à• + ‚à• b ‚à• * ‚à• b ‚à• - 4 * Œ¥ * Œ¥ := sub_le_sub_left eq‚ÇÅ _
                          _ ‚â§ 2 * Œ¥ + div * Œ¥ + div + Œ¥ + div * Œ¥ + div - 4 * Œ¥ * Œ¥
                            :=
                            sub_le_sub_right mul_le_mul_of_nonneg_left add_le_add eq‚ÇÇ eq‚ÇÇ' by norm_num _
                          _ = 8 * Œ¥ * div + 4 * div * div := by ring
                      exact
                        add_nonneg
                          mul_nonneg mul_nonneg by norm_num zero_le_Œ¥ le_of_lt‚Çì Nat.one_div_pos_of_nat
                            mul_nonneg mul_nonneg by norm_num nat.one_div_pos_of_nat.le nat.one_div_pos_of_nat.le
                      apply tendsto.comp
                      ¬∑ convert continuous_sqrt.continuous_at exact sqrt_zero.symm
                      have
                        eq‚ÇÅ
                          : tendsto fun n : ‚Ñï => 8 * Œ¥ * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by
                            convert @ tendsto_const_nhds _ _ _ 8 * Œ¥ _ . mul tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ mul_zero ]
                      have
                        : tendsto fun n : ‚Ñï => ( 4 : ‚Ñù ) * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by
                            convert @ tendsto_const_nhds _ _ _ ( 4 : ‚Ñù ) _ . mul tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ mul_zero ]
                      have
                        eq‚ÇÇ
                          : tendsto fun n : ‚Ñï => ( 4 : ‚Ñù ) * 1 / n + 1 * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by convert this.mul tendsto_one_div_add_at_top_nhds_0_nat simp only [ mul_zero ]
                      convert eq‚ÇÅ.add eq‚ÇÇ
                      simp only [ add_zero‚Çì ]
              rcases cauchy_seq_tendsto_of_is_complete h‚ÇÅ fun n => _ seq_is_cauchy with ‚ü® v , hv , w_tendsto ‚ü©
              use v
              use hv
              have
                h_cont
                  : Continuous fun v => ‚à• u - v ‚à•
                  :=
                  Continuous.comp continuous_norm Continuous.sub continuous_const continuous_id
              have : tendsto fun n => ‚à• u - w n ‚à• at_top nhds ‚à• u - v ‚à•
              convert tendsto.comp h_cont.continuous_at w_tendsto
              exact tendsto_nhds_unique this norm_tendsto
              exact Subtype.mem _

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " Characterization of minimizers for the projection on a convex set in a real inner product\nspace. -/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `norm_eq_infi_iff_real_inner_le_zero [])
  (Command.declSig
   [(Term.implicitBinder "{" [`K] [":" (Term.app `Set [`F])] "}")
    (Term.explicitBinder "(" [`h] [":" (Term.app `Convex [(Data.Real.Basic.term‚Ñù "‚Ñù") `K])] [] ")")
    (Term.implicitBinder "{" [`u] [":" `F] "}")
    (Term.implicitBinder "{" [`v] [":" `F] "}")
    (Term.explicitBinder "(" [`hv] [":" (Init.Core.¬´term_‚àà_¬ª `v " ‚àà " `K)] [] ")")]
   (Term.typeSpec
    ":"
    (¬´term_‚Üî_¬ª
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
      "="
      (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
       "‚®Ö"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
       ", "
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
     "‚Üî"
     (Term.forall
      "‚àÄ"
      []
      ","
      (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
       "‚àÄ"
       `w
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (Term.forall
        "‚àÄ"
        []
        ","
        (¬´term_‚â§_¬ª
         (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
         "‚â§"
         (numLit "0"))))))))
  (Command.declValSimple
   ":="
   (Term.app
    `Iff.intro
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`eq `w `hw]) [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `Œ¥
             []
             ":="
             (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
              "‚®Ö"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
              ", "
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `p
             []
             ":="
             (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
              "‚ü™"
              (¬´term_-_¬ª `u "-" `v)
              ", "
              (¬´term_-_¬ª `w "-" `v)
              "‚ü´_‚Ñù"))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `q
             []
             ":="
             (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
              "^"
              (numLit "2")))))
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `this'
             []
             [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
             ":="
             (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
          [])
         (group (Tactic.have'' "have" [`zero_le_Œ¥ []] [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]) [])
         (group (Tactic.apply "apply" `le_cinfi) [])
         (group (Tactic.intro "intro" []) [])
         (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])
         (group
          (Tactic.have''
           "have"
           [`Œ¥_le []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
              ","
              (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
          [])
         (group (Tactic.intro "intro" [`w]) [])
         (group (Tactic.apply "apply" `cinfi_le) [])
         (group
          (Tactic.use
           "use"
           [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
          [])
         (group
          (Tactic.rintro
           "rintro"
           [(Tactic.rintroPat.one (Tactic.rcasesPat.ignore "_"))
            (Tactic.rintroPat.one
             (Tactic.rcasesPat.tuple
              "‚ü®"
              [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.ignore "_")]) [])
               ","
               (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
              "‚ü©"))]
           [])
          [])
         (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Œ¥_le' []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                []
                ","
                (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                 "‚àÄ"
                 `w
                 (¬´binderTerm‚àà_¬ª "‚àà" `K)
                 ","
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`w `hw] [])]
               "=>"
               (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
          [])
         (group
          (Tactic.have''
           "have"
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`Œ∏] [(Term.typeSpec ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))])]
              ","
              (Term.arrow
               (¬´term_<_¬ª (numLit "0") "<" `Œ∏)
               "‚Üí"
               (Term.arrow
                (¬´term_‚â§_¬ª `Œ∏ "‚â§" (numLit "1"))
                "‚Üí"
                (¬´term_‚â§_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p)
                 "‚â§"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q))))))])
          [])
         (group (Tactic.intro "intro" [`Œ∏ `hŒ∏‚ÇÅ `hŒ∏‚ÇÇ]) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                 "^"
                 (numLit "2"))
                "‚â§"
                (Init.Logic.¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                   "^"
                   (numLit "2"))
                  "-"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                   "*"
                   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                    "‚ü™"
                    (¬´term_-_¬ª `u "-" `v)
                    ", "
                    (¬´term_-_¬ª `w "-" `v)
                    "‚ü´_‚Ñù")))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                   "^"
                   (numLit "2"))))))]
             ":="
             (calc
              "calc"
              [(calcStep
                (¬´term_‚â§_¬ª
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                  "^"
                  (numLit "2"))
                 "‚â§"
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (Init.Logic.¬´term_+_¬ª
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                     "+"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (numLit "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                   "‚à•")
                  "^"
                  (numLit "2")))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] []) [])
                    (group
                     (Tactic.apply "apply" (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
                     [])
                    (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") []) [])
                    (group (Tactic.apply "apply" `Œ¥_le') [])
                    (group (Tactic.apply "apply" (Term.app `h [`hw `hv])) [])
                    (group
                     (exacts
                      "exacts"
                      "["
                      [(Term.app `le_of_lt‚Çì [`hŒ∏‚ÇÅ])
                       ","
                       (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                       ","
                       (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                      "]")
                     [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
                   "‚à•")
                  "^"
                  (numLit "2")))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.tacticHave_
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        []
                        [(Term.typeSpec
                          ":"
                          (¬´term_=_¬ª
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Init.Logic.¬´term_+_¬ª
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                             "+"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (numLit "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                           "="
                           (¬´term_-_¬ª
                            (¬´term_-_¬ª `u "-" `v)
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `smul_sub)
                                ","
                                (Tactic.rwRule [] `sub_smul)
                                ","
                                (Tactic.rwRule [] `one_smul)]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.simp
                              "simp"
                              []
                              ["only"]
                              ["["
                               [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                                ","
                                (Tactic.simpLemma [] [] `add_comm‚Çì)
                                ","
                                (Tactic.simpLemma [] [] `add_left_comm‚Çì)
                                ","
                                (Tactic.simpLemma [] [] `add_assoc‚Çì)
                                ","
                                (Tactic.simpLemma [] [] `neg_add_rev)]
                               "]"]
                              [])
                             [])]))))))
                     [])
                    (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]") []) [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (Init.Logic.¬´term_+_¬ª
                  (¬´term_-_¬ª
                   (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                    "^"
                    (numLit "2"))
                   "-"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                    "*"
                    (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                  "+"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                   "*"
                   (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                    "^"
                    (numLit "2")))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `norm_sub_sq)
                        ","
                        (Tactic.rwRule [] `inner_smul_right)
                        ","
                        (Tactic.rwRule [] `norm_smul)]
                       "]")
                      [])
                     [])
                    (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] []) [])
                    (group
                     (Tactic.tacticShow_
                      "show"
                      (¬´term_=_¬ª
                       (Init.Logic.¬´term_+_¬ª
                        (¬´term_-_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                         "-"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (numLit "2")
                          "*"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           `Œ∏
                           "*"
                           (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))
                         "*"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))))
                       "="
                       (Init.Logic.¬´term_+_¬ª
                        (¬´term_-_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                         "-"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                          "*"
                          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                        "+"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                         "*"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))))))
                     [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
                      [])
                     [])
                    (group (Tactic.Ring.tacticRing "ring") [])]))))]))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Init.Logic.¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                   "^"
                   (numLit "2"))
                  "-"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                   "^"
                   (numLit "2"))))
                "="
                (Init.Logic.¬´term_+_¬ª
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                  "^"
                  (numLit "2"))
                 "+"
                 (¬´term_-_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                   "*"
                   (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                    "^"
                    (numLit "2")))
                  "-"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.abel "abel" [] []) [])]))))))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          [])
         (group
          (Tactic.have''
           "have"
           [`eq‚ÇÇ []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_-_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                "*"
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                 "^"
                 (numLit "2")))
               "-"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                "*"
                (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               `Œ∏
               "*"
               (¬´term_-_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 `Œ∏
                 "*"
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                  "^"
                  (numLit "2")))
                "-"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (numLit "2")
                 "*"
                 (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
          [])
         (group (Tactic.Ring.tacticRing "ring") [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             []
             ":="
             (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_left [`this `hŒ∏‚ÇÅ])]))))
          [])
         (group (Tactic.exact "exact" `this) [])
         (group (Tactic.byCases' "by_cases'" [`hq ":"] (¬´term_=_¬ª `q "=" (numLit "0"))) [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
               [])
              (group (Tactic.have'' "have" [] [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (numLit "0")))]) [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  []
                  ":="
                  (Term.app
                   `this
                   [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
               [])
              (group (Tactic.linarith "linarith" [] [] []) [])
              (group (Tactic.exact "exact" `this) [])])))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.have'' "have" [`q_pos []] [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `q))]) [])
              (group (Tactic.apply "apply" `lt_of_le_of_ne‚Çì) [])
              (group (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")])) [])
              (group (Tactic.intro "intro" [`h]) [])
              (group (Tactic.exact "exact" (Term.app `hq [`h.symm])) [])
              (group (byContra "by_contra" [`hp]) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le‚Çì)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
               [])
              (group
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `Œ∏
                  []
                  ":="
                  (Term.app
                   `min
                   [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                    (¬´term_/_¬ª `p "/" `q)]))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÅ []]
                  [(Term.typeSpec ":" (¬´term_‚â§_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     (¬´term_‚â§_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q)
                      "‚â§"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
                     ":="
                     (Term.app
                      `mul_le_mul_of_nonneg_right
                      [(Term.app `min_le_right‚Çì [(Term.hole "_") (Term.hole "_")])
                       (Term.app `sq_nonneg [(Term.hole "_")])]))
                    (calcStep
                     (¬´term_=_¬ª (Term.hole "_") "=" `p)
                     ":="
                     (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (¬´term_‚â§_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p) "‚â§" `p))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     (¬´term_‚â§_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p)
                      "‚â§"
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            `this
                            [`Œ∏
                             (Term.app
                              `lt_min‚Çì
                              [(Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                               (Term.app `div_pos [`hp `q_pos])])
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                          [])]))))
                    (calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
               [])
              (group (Tactic.linarith "linarith" [] [] []) [])])))
          [])])))
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`h]) [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `this'
             []
             [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
             ":="
             (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
          [])
         (group (Tactic.apply "apply" `le_antisymm‚Çì) [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.apply "apply" `le_cinfi) [])
              (group (Tactic.intro "intro" [`w]) [])
              (group
               (Tactic.apply
                "apply"
                (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
               [])
              (group
               (tacticCalc_
                "calc"
                [(calcStep
                  (¬´term_‚â§_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                   "‚â§"
                   (¬´term_-_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                    "-"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (numLit "2")
                     "*"
                     (Term.app
                      `inner
                      [(¬´term_-_¬ª `u "-" `v)
                       (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)]))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (Init.Logic.¬´term_+_¬ª
                    (¬´term_-_¬ª
                     (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                      "^"
                      (numLit "2"))
                     "-"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (numLit "2")
                      "*"
                      (Term.app
                       `inner
                       [(¬´term_-_¬ª `u "-" `v)
                        (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)])))
                    "+"
                    (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                      "‚à•"
                      (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)
                      "‚à•")
                     "^"
                     (numLit "2"))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") []) [])
                      (group (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")])) [])
                      (group (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")])) [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                     "‚à•")
                    "^"
                    (numLit "2")))
                  ":="
                  `norm_sub_sq.symm)
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.have''
                        "have"
                        []
                        [(Term.typeSpec
                          ":"
                          (¬´term_=_¬ª
                           (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                           "="
                           (¬´term_-_¬ª `u "-" `w)))])
                       [])
                      (group (Tactic.abel "abel" [] []) [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                        [])
                       [])]))))])
               [])])))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.tacticShow_
                "show"
                (¬´term_‚â§_¬ª
                 (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                  "‚®Ö"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
                  ", "
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
                 "‚â§"
                 (Term.app
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
                    "=>"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
                  [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
               [])
              (group (Tactic.apply "apply" `cinfi_le) [])
              (group (Tactic.use "use" [(numLit "0")]) [])
              (group
               (Tactic.rintro
                "rintro"
                [(Tactic.rintroPat.one (Tactic.rcasesPat.one `y))
                 (Tactic.rintroPat.one
                  (Tactic.rcasesPat.tuple
                   "‚ü®"
                   [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                    ","
                    (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
                   "‚ü©"))]
                [])
               [])
              (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
          [])])))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Iff.intro
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.intro "intro" [`eq `w `hw]) [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `Œ¥
            []
            ":="
            (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
             "‚®Ö"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
             ", "
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
         [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `p
            []
            ":="
            (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
             "‚ü™"
             (¬´term_-_¬ª `u "-" `v)
             ", "
             (¬´term_-_¬ª `w "-" `v)
             "‚ü´_‚Ñù"))))
         [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `q
            []
            ":="
            (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
             "^"
             (numLit "2")))))
         [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `this'
            []
            [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
            ":="
            (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
         [])
        (group (Tactic.have'' "have" [`zero_le_Œ¥ []] [(Term.typeSpec ":" (¬´term_‚â§_¬ª (numLit "0") "‚â§" `Œ¥))]) [])
        (group (Tactic.apply "apply" `le_cinfi) [])
        (group (Tactic.intro "intro" []) [])
        (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])
        (group
         (Tactic.have''
          "have"
          [`Œ¥_le []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
             ","
             (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))])
         [])
        (group (Tactic.intro "intro" [`w]) [])
        (group (Tactic.apply "apply" `cinfi_le) [])
        (group
         (Tactic.use
          "use"
          [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")])
         [])
        (group
         (Tactic.rintro
          "rintro"
          [(Tactic.rintroPat.one (Tactic.rcasesPat.ignore "_"))
           (Tactic.rintroPat.one
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.ignore "_")]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
             "‚ü©"))]
          [])
         [])
        (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`Œ¥_le' []]
            [(Term.typeSpec
              ":"
              (Term.forall
               "‚àÄ"
               []
               ","
               (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                "‚àÄ"
                `w
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (Term.forall
                 "‚àÄ"
                 []
                 ","
                 (¬´term_‚â§_¬ª `Œ¥ "‚â§" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`w `hw] [])]
              "=>"
              (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
         [])
        (group
         (Tactic.have''
          "have"
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`Œ∏] [(Term.typeSpec ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))])]
             ","
             (Term.arrow
              (¬´term_<_¬ª (numLit "0") "<" `Œ∏)
              "‚Üí"
              (Term.arrow
               (¬´term_‚â§_¬ª `Œ∏ "‚â§" (numLit "1"))
               "‚Üí"
               (¬´term_‚â§_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p)
                "‚â§"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q))))))])
         [])
        (group (Tactic.intro "intro" [`Œ∏ `hŒ∏‚ÇÅ `hŒ∏‚ÇÇ]) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (¬´term_‚â§_¬ª
               (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                "^"
                (numLit "2"))
               "‚â§"
               (Init.Logic.¬´term_+_¬ª
                (¬´term_-_¬ª
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                  "^"
                  (numLit "2"))
                 "-"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                  "*"
                  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                   "‚ü™"
                   (¬´term_-_¬ª `u "-" `v)
                   ", "
                   (¬´term_-_¬ª `w "-" `v)
                   "‚ü´_‚Ñù")))
                "+"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                 "*"
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                  "^"
                  (numLit "2"))))))]
            ":="
            (calc
             "calc"
             [(calcStep
               (¬´term_‚â§_¬ª
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                 "^"
                 (numLit "2"))
                "‚â§"
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª
                   `u
                   "-"
                   (Init.Logic.¬´term_+_¬ª
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                    "+"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (numLit "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                  "‚à•")
                 "^"
                 (numLit "2")))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] []) [])
                   (group
                    (Tactic.apply "apply" (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
                    [])
                   (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") []) [])
                   (group (Tactic.apply "apply" `Œ¥_le') [])
                   (group (Tactic.apply "apply" (Term.app `h [`hw `hv])) [])
                   (group
                    (exacts
                     "exacts"
                     "["
                     [(Term.app `le_of_lt‚Çì [`hŒ∏‚ÇÅ])
                      ","
                      (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                      ","
                      (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                     "]")
                    [])]))))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
                  "‚à•")
                 "^"
                 (numLit "2")))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Init.Logic.¬´term_+_¬ª
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                            "+"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (numLit "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                          "="
                          (¬´term_-_¬ª
                           (¬´term_-_¬ª `u "-" `v)
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `smul_sub)
                               ","
                               (Tactic.rwRule [] `sub_smul)
                               ","
                               (Tactic.rwRule [] `one_smul)]
                              "]")
                             [])
                            [])
                           (group
                            (Tactic.simp
                             "simp"
                             []
                             ["only"]
                             ["["
                              [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                               ","
                               (Tactic.simpLemma [] [] `add_comm‚Çì)
                               ","
                               (Tactic.simpLemma [] [] `add_left_comm‚Çì)
                               ","
                               (Tactic.simpLemma [] [] `add_assoc‚Çì)
                               ","
                               (Tactic.simpLemma [] [] `neg_add_rev)]
                              "]"]
                             [])
                            [])]))))))
                    [])
                   (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]") []) [])]))))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Init.Logic.¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                   "^"
                   (numLit "2"))
                  "-"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                 "+"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                   "^"
                   (numLit "2")))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `norm_sub_sq)
                       ","
                       (Tactic.rwRule [] `inner_smul_right)
                       ","
                       (Tactic.rwRule [] `norm_smul)]
                      "]")
                     [])
                    [])
                   (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] []) [])
                   (group
                    (Tactic.tacticShow_
                     "show"
                     (¬´term_=_¬ª
                      (Init.Logic.¬´term_+_¬ª
                       (¬´term_-_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                        "-"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (numLit "2")
                         "*"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          `Œ∏
                          "*"
                          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))
                        "*"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))))
                      "="
                      (Init.Logic.¬´term_+_¬ª
                       (¬´term_-_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                        "-"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                         "*"
                         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                       "+"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                        "*"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•"))))))
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
                     [])
                    [])
                   (group (Tactic.Ring.tacticRing "ring") [])]))))]))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`eq‚ÇÅ []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Init.Logic.¬´term_+_¬ª
                (¬´term_-_¬ª
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                  "^"
                  (numLit "2"))
                 "-"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                  "*"
                  (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                "+"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                 "*"
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                  "^"
                  (numLit "2"))))
               "="
               (Init.Logic.¬´term_+_¬ª
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                 "^"
                 (numLit "2"))
                "+"
                (¬´term_-_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                   "^"
                   (numLit "2")))
                 "-"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
                  "*"
                  (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.abel "abel" [] []) [])]))))))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
         [])
        (group
         (Tactic.have''
          "have"
          [`eq‚ÇÇ []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (¬´term_-_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `Œ∏)
               "*"
               (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                "^"
                (numLit "2")))
              "-"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ∏)
               "*"
               (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
             "="
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              `Œ∏
              "*"
              (¬´term_-_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                `Œ∏
                "*"
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `w "-" `v) "‚à•")
                 "^"
                 (numLit "2")))
               "-"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (numLit "2")
                "*"
                (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
         [])
        (group (Tactic.Ring.tacticRing "ring") [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            []
            ":="
            (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_left [`this `hŒ∏‚ÇÅ])]))))
         [])
        (group (Tactic.exact "exact" `this) [])
        (group (Tactic.byCases' "by_cases'" [`hq ":"] (¬´term_=_¬ª `q "=" (numLit "0"))) [])
        (group
         (Tactic.¬´tactic¬∑._¬ª
          "¬∑"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
              [])
             (group (Tactic.have'' "have" [] [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (numLit "0")))]) [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 []
                 ":="
                 (Term.app
                  `this
                  [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
              [])
             (group (Tactic.linarith "linarith" [] [] []) [])
             (group (Tactic.exact "exact" `this) [])])))
         [])
        (group
         (Tactic.¬´tactic¬∑._¬ª
          "¬∑"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.have'' "have" [`q_pos []] [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `q))]) [])
             (group (Tactic.apply "apply" `lt_of_le_of_ne‚Çì) [])
             (group (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")])) [])
             (group (Tactic.intro "intro" [`h]) [])
             (group (Tactic.exact "exact" (Term.app `hq [`h.symm])) [])
             (group (byContra "by_contra" [`hp]) [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le‚Çì)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
              [])
             (group
              (Tactic.tacticLet_
               "let"
               (Term.letDecl
                (Term.letIdDecl
                 `Œ∏
                 []
                 ":="
                 (Term.app
                  `min
                  [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]] ")")
                   (¬´term_/_¬ª `p "/" `q)]))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`eq‚ÇÅ []]
                 [(Term.typeSpec ":" (¬´term_‚â§_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    (¬´term_‚â§_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q)
                     "‚â§"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
                    ":="
                    (Term.app
                     `mul_le_mul_of_nonneg_right
                     [(Term.app `min_le_right‚Çì [(Term.hole "_") (Term.hole "_")])
                      (Term.app `sq_nonneg [(Term.hole "_")])]))
                   (calcStep
                    (¬´term_=_¬ª (Term.hole "_") "=" `p)
                    ":="
                    (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (¬´term_‚â§_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p) "‚â§" `p))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    (¬´term_‚â§_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `p)
                     "‚â§"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª `Œ∏ "*" `q))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           `this
                           [`Œ∏
                            (Term.app
                             `lt_min‚Çì
                             [(Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                              (Term.app `div_pos [`hp `q_pos])])
                            (Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                         [])]))))
                   (calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
              [])
             (group (Tactic.linarith "linarith" [] [] []) [])])))
         [])])))
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.intro "intro" [`h]) [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `this'
            []
            [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
            ":="
            (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
         [])
        (group (Tactic.apply "apply" `le_antisymm‚Çì) [])
        (group
         (Tactic.¬´tactic¬∑._¬ª
          "¬∑"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.apply "apply" `le_cinfi) [])
             (group (Tactic.intro "intro" [`w]) [])
             (group
              (Tactic.apply
               "apply"
               (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
              [])
             (group
              (tacticCalc_
               "calc"
               [(calcStep
                 (¬´term_‚â§_¬ª
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                  "‚â§"
                  (¬´term_-_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                   "-"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (numLit "2")
                    "*"
                    (Term.app
                     `inner
                     [(¬´term_-_¬ª `u "-" `v)
                      (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)]))))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
                (calcStep
                 (¬´term_‚â§_¬ª
                  (Term.hole "_")
                  "‚â§"
                  (Init.Logic.¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                     "^"
                     (numLit "2"))
                    "-"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (numLit "2")
                     "*"
                     (Term.app
                      `inner
                      [(¬´term_-_¬ª `u "-" `v)
                       (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)])))
                   "+"
                   (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)
                     "‚à•")
                    "^"
                    (numLit "2"))))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") []) [])
                     (group (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")])) [])
                     (group (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")])) [])]))))
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                    "‚à•")
                   "^"
                   (numLit "2")))
                 ":="
                 `norm_sub_sq.symm)
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.have''
                       "have"
                       []
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                          "="
                          (¬´term_-_¬ª `u "-" `w)))])
                      [])
                     (group (Tactic.abel "abel" [] []) [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                       [])
                      [])]))))])
              [])])))
         [])
        (group
         (Tactic.¬´tactic¬∑._¬ª
          "¬∑"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.tacticShow_
               "show"
               (¬´term_‚â§_¬ª
                (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                 "‚®Ö"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
                 ", "
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
                "‚â§"
                (Term.app
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
                 [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
              [])
             (group (Tactic.apply "apply" `cinfi_le) [])
             (group (Tactic.use "use" [(numLit "0")]) [])
             (group
              (Tactic.rintro
               "rintro"
               [(Tactic.rintroPat.one (Tactic.rcasesPat.one `y))
                (Tactic.rintroPat.one
                 (Tactic.rcasesPat.tuple
                  "‚ü®"
                  [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                   ","
                   (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
                  "‚ü©"))]
               [])
              [])
             (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
         [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`h]) [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `this'
          []
          [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
          ":="
          (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
       [])
      (group (Tactic.apply "apply" `le_antisymm‚Çì) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.apply "apply" `le_cinfi) [])
           (group (Tactic.intro "intro" [`w]) [])
           (group
            (Tactic.apply "apply" (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
            [])
           (group
            (tacticCalc_
             "calc"
             [(calcStep
               (¬´term_‚â§_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                "‚â§"
                (¬´term_-_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•"))
                 "-"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (numLit "2")
                  "*"
                  (Term.app
                   `inner
                   [(¬´term_-_¬ª `u "-" `v)
                    (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)]))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
              (calcStep
               (¬´term_‚â§_¬ª
                (Term.hole "_")
                "‚â§"
                (Init.Logic.¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
                   "^"
                   (numLit "2"))
                  "-"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (numLit "2")
                   "*"
                   (Term.app
                    `inner
                    [(¬´term_-_¬ª `u "-" `v)
                     (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)])))
                 "+"
                 (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª (Term.paren "(" [`w [(Term.typeAscription ":" `F)]] ")") "-" `v)
                   "‚à•")
                  "^"
                  (numLit "2"))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") []) [])
                   (group (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")])) [])
                   (group (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")])) [])]))))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Cardinal.SetTheory.Cofinality.¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                  "‚à•"
                  (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                  "‚à•")
                 "^"
                 (numLit "2")))
               ":="
               `norm_sub_sq.symm)
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.have''
                     "have"
                     []
                     [(Term.typeSpec
                       ":"
                       (¬´term_=_¬ª
                        (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                        "="
                        (¬´term_-_¬ª `u "-" `w)))])
                    [])
                   (group (Tactic.abel "abel" [] []) [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                     [])
                    [])]))))])
            [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.tacticShow_
             "show"
             (¬´term_‚â§_¬ª
              (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
               "‚®Ö"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
               ", "
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
              "‚â§"
              (Term.app
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
               [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
            [])
           (group (Tactic.apply "apply" `cinfi_le) [])
           (group (Tactic.use "use" [(numLit "0")]) [])
           (group
            (Tactic.rintro
             "rintro"
             [(Tactic.rintroPat.one (Tactic.rcasesPat.one `y))
              (Tactic.rintroPat.one
               (Tactic.rcasesPat.tuple
                "‚ü®"
                [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                 ","
                 (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
                "‚ü©"))]
             [])
            [])
           (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticShow_
        "show"
        (¬´term_‚â§_¬ª
         (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
          "‚®Ö"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
          ", "
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
         "‚â§"
         (Term.app
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
            "=>"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
          [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
       [])
      (group (Tactic.apply "apply" `cinfi_le) [])
      (group (Tactic.use "use" [(numLit "0")]) [])
      (group
       (Tactic.rintro
        "rintro"
        [(Tactic.rintroPat.one (Tactic.rcasesPat.one `y))
         (Tactic.rintroPat.one
          (Tactic.rcasesPat.tuple
           "‚ü®"
           [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
            ","
            (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
           "‚ü©"))]
        [])
       [])
      (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rintro
   "rintro"
   [(Tactic.rintroPat.one (Tactic.rcasesPat.one `y))
    (Tactic.rintroPat.one
     (Tactic.rcasesPat.tuple
      "‚ü®"
      [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
       ","
       (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `rfl)]) [])]
      "‚ü©"))]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rintro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rintroPat.one', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rintroPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rintroPat.one', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rintroPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.use "use" [(numLit "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.use', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `cinfi_le)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `cinfi_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticShow_
   "show"
   (¬´term_‚â§_¬ª
    (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
     "‚®Ö"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
     ", "
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
    "‚â§"
    (Term.app
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
       "=>"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
     [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticShow_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
    "‚®Ö"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
    ", "
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
   "‚â§"
   (Term.app
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
      "=>"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
    [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
     "=>"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
   [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`w] [(Term.typeSpec ":" `K)])]
    "=>"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
   "‚®Ö"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `w)] [":" `K]))
   ", "
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.CompleteLattice.¬´term‚®Ö_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Characterization of minimizers for the projection on a convex set in a real inner product
    space. -/
  theorem
    norm_eq_infi_iff_real_inner_le_zero
    { K : Set F } ( h : Convex ‚Ñù K ) { u : F } { v : F } ( hv : v ‚àà K )
      : ‚à• u - v ‚à• = ‚®Ö w : K , ‚à• u - w ‚à• ‚Üî ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , ‚ü™ u - v , w - v ‚ü´_‚Ñù ‚â§ 0
    :=
      Iff.intro
        by
            intro eq w hw
              let Œ¥ := ‚®Ö w : K , ‚à• u - w ‚à•
              let p := ‚ü™ u - v , w - v ‚ü´_‚Ñù
              let q := ‚à• w - v ‚à• ^ 2
              let this' : Nonempty K := ‚ü® ‚ü® v , hv ‚ü© ‚ü©
              have zero_le_Œ¥ : 0 ‚â§ Œ¥
              apply le_cinfi
              intro
              exact norm_nonneg _
              have Œ¥_le : ‚àÄ w : K , Œ¥ ‚â§ ‚à• u - w ‚à•
              intro w
              apply cinfi_le
              use ( 0 : ‚Ñù )
              rintro _ ‚ü® _ , rfl ‚ü©
              exact norm_nonneg _
              have Œ¥_le' : ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , Œ¥ ‚â§ ‚à• u - w ‚à• := fun w hw => Œ¥_le ‚ü® w , hw ‚ü©
              have : ‚àÄ Œ∏ : ‚Ñù , 0 < Œ∏ ‚Üí Œ∏ ‚â§ 1 ‚Üí 2 * p ‚â§ Œ∏ * q
              intro Œ∏ hŒ∏‚ÇÅ hŒ∏‚ÇÇ
              have
                : ‚à• u - v ‚à• ^ 2 ‚â§ ‚à• u - v ‚à• ^ 2 - 2 * Œ∏ * ‚ü™ u - v , w - v ‚ü´_‚Ñù + Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2
                  :=
                  calc
                    ‚à• u - v ‚à• ^ 2 ‚â§ ‚à• u - Œ∏ ‚Ä¢ w + 1 - Œ∏ ‚Ä¢ v ‚à• ^ 2
                        :=
                        by
                          simp only [ sq ]
                            apply mul_self_le_mul_self norm_nonneg _
                            rw [ Eq ]
                            apply Œ¥_le'
                            apply h hw hv
                            exacts [ le_of_lt‚Çì hŒ∏‚ÇÅ , sub_nonneg . 2 hŒ∏‚ÇÇ , add_sub_cancel'_right _ _ ]
                      _ = ‚à• u - v - Œ∏ ‚Ä¢ w - v ‚à• ^ 2
                        :=
                        by
                          have
                              : u - Œ∏ ‚Ä¢ w + 1 - Œ∏ ‚Ä¢ v = u - v - Œ∏ ‚Ä¢ w - v
                                :=
                                by
                                  rw [ smul_sub , sub_smul , one_smul ]
                                    simp only [ sub_eq_add_neg , add_comm‚Çì , add_left_comm‚Çì , add_assoc‚Çì , neg_add_rev ]
                            rw [ this ]
                      _ = ‚à• u - v ‚à• ^ 2 - 2 * Œ∏ * inner u - v w - v + Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2
                        :=
                        by
                          rw [ norm_sub_sq , inner_smul_right , norm_smul ]
                            simp only [ sq ]
                            show
                              ‚à• u - v ‚à• * ‚à• u - v ‚à• - 2 * Œ∏ * inner u - v w - v
                                  +
                                  absR Œ∏ * ‚à• w - v ‚à• * absR Œ∏ * ‚à• w - v ‚à•
                                =
                                ‚à• u - v ‚à• * ‚à• u - v ‚à• - 2 * Œ∏ * inner u - v w - v + Œ∏ * Œ∏ * ‚à• w - v ‚à• * ‚à• w - v ‚à•
                            rw [ abs_of_pos hŒ∏‚ÇÅ ]
                            ring
              have
                eq‚ÇÅ
                  :
                    ‚à• u - v ‚à• ^ 2 - 2 * Œ∏ * inner u - v w - v + Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2
                      =
                      ‚à• u - v ‚à• ^ 2 + Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2 - 2 * Œ∏ * inner u - v w - v
                  :=
                  by abel
              rw [ eq‚ÇÅ , le_add_iff_nonneg_right ] at this
              have
                eq‚ÇÇ
                : Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2 - 2 * Œ∏ * inner u - v w - v = Œ∏ * Œ∏ * ‚à• w - v ‚à• ^ 2 - 2 * inner u - v w - v
              ring
              rw [ eq‚ÇÇ ] at this
              have := le_of_sub_nonneg nonneg_of_mul_nonneg_left this hŒ∏‚ÇÅ
              exact this
              by_cases' hq : q = 0
              ¬∑ rw [ hq ] at this have : p ‚â§ 0 have := this ( 1 : ‚Ñù ) by norm_num by norm_num linarith exact this
              ¬∑
                have q_pos : 0 < q
                  apply lt_of_le_of_ne‚Çì
                  exact sq_nonneg _
                  intro h
                  exact hq h.symm
                  by_contra hp
                  rw [ not_le‚Çì ] at hp
                  let Œ∏ := min ( 1 : ‚Ñù ) p / q
                  have
                    eq‚ÇÅ
                      : Œ∏ * q ‚â§ p
                      :=
                      calc
                        Œ∏ * q ‚â§ p / q * q := mul_le_mul_of_nonneg_right min_le_right‚Çì _ _ sq_nonneg _
                          _ = p := div_mul_cancel _ hq
                  have
                    : 2 * p ‚â§ p
                      :=
                      calc
                        2 * p ‚â§ Œ∏ * q := by refine' this Œ∏ lt_min‚Çì by norm_num div_pos hp q_pos by norm_num _ ‚â§ p := eq‚ÇÅ
                  linarith
          by
            intro h
              let this' : Nonempty K := ‚ü® ‚ü® v , hv ‚ü© ‚ü©
              apply le_antisymm‚Çì
              ¬∑
                apply le_cinfi
                  intro w
                  apply nonneg_le_nonneg_of_sq_le_sq norm_nonneg _
                  have := h w w . 2
                  calc
                    ‚à• u - v ‚à• * ‚à• u - v ‚à• ‚â§ ‚à• u - v ‚à• * ‚à• u - v ‚à• - 2 * inner u - v ( w : F ) - v := by linarith
                      _ ‚â§ ‚à• u - v ‚à• ^ 2 - 2 * inner u - v ( w : F ) - v + ‚à• ( w : F ) - v ‚à• ^ 2
                        :=
                        by rw [ sq ] refine' le_add_of_nonneg_right _ exact sq_nonneg _
                      _ = ‚à• u - v - w - v ‚à• ^ 2 := norm_sub_sq.symm
                      _ = ‚à• u - w ‚à• * ‚à• u - w ‚à• := by have : u - v - w - v = u - w abel rw [ this , sq ]
              ¬∑
                show ‚®Ö w : K , ‚à• u - w ‚à• ‚â§ fun w : K => ‚à• u - w ‚à• ‚ü® v , hv ‚ü©
                  apply cinfi_le
                  use 0
                  rintro y ‚ü® z , rfl ‚ü©
                  exact norm_nonneg _

variable (K : Submodule ùïú E)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    "\nExistence of projections on complete subspaces.\nLet `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.\nThen there exists a (unique) `v` in `K` that minimizes the distance `‚à•u - v‚à•` to `u`.\nThis point `v` is usually called the orthogonal projection of `u` onto `K`.\n-/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `exists_norm_eq_infi_of_complete_subspace [])
  (Command.declSig
   [(Term.explicitBinder
     "("
     [`h]
     [":"
      (Term.app
       `IsComplete
       [(Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")])]
     []
     ")")]
   (Term.typeSpec
    ":"
    (Term.forall
     "‚àÄ"
     [(Term.simpleBinder [`u] [(Term.typeSpec ":" `E)])]
     ","
     (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
      "‚àÉ"
      `v
      (¬´binderTerm‚àà_¬ª "‚àà" `K)
      ","
      (¬´term_=_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
       "="
       (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
        "‚®Ö"
        (Lean.explicitBinders
         (Lean.unbracketedExplicitBinders
          [(Lean.binderIdent `w)]
          [":" (Term.paren "(" [`K [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
        ", "
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `this'
           []
           [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
        [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `this'
           []
           [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
        [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `K'
           [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `Submodule.restrictScalars [(Data.Real.Basic.term‚Ñù "‚Ñù") `K]))))
        [])
       (group
        (Tactic.exact
         "exact"
         (Term.app
          `exists_norm_eq_infi_of_complete_convex
          [(Term.anonymousCtor "‚ü®" [(numLit "0") "," `K'.zero_mem] "‚ü©") `h `K'.convex]))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `this'
          []
          [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `this'
          []
          [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `K'
          [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `Submodule.restrictScalars [(Data.Real.Basic.term‚Ñù "‚Ñù") `K]))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `exists_norm_eq_infi_of_complete_convex
         [(Term.anonymousCtor "‚ü®" [(numLit "0") "," `K'.zero_mem] "‚ü©") `h `K'.convex]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `exists_norm_eq_infi_of_complete_convex
    [(Term.anonymousCtor "‚ü®" [(numLit "0") "," `K'.zero_mem] "‚ü©") `h `K'.convex]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `exists_norm_eq_infi_of_complete_convex
   [(Term.anonymousCtor "‚ü®" [(numLit "0") "," `K'.zero_mem] "‚ü©") `h `K'.convex])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K'.convex
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.anonymousCtor "‚ü®" [(numLit "0") "," `K'.zero_mem] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K'.zero_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exists_norm_eq_infi_of_complete_convex
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `K'
     [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `Submodule.restrictScalars [(Data.Real.Basic.term‚Ñù "‚Ñù") `K]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule.restrictScalars [(Data.Real.Basic.term‚Ñù "‚Ñù") `K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.restrictScalars
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `this'
     []
     [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `RestrictScalars.module
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Module
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `this'
     []
     [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `InnerProductSpace.isROrCToReal
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `InnerProductSpace
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.forall
   "‚àÄ"
   [(Term.simpleBinder [`u] [(Term.typeSpec ":" `E)])]
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
    "‚àÉ"
    `v
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (¬´term_=_¬ª
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
     "="
     (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
      "‚®Ö"
      (Lean.explicitBinders
       (Lean.unbracketedExplicitBinders
        [(Lean.binderIdent `w)]
        [":" (Term.paren "(" [`K [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
      ", "
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
   "‚àÉ"
   `v
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (¬´term_=_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
    "="
    (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
     "‚®Ö"
     (Lean.explicitBinders
      (Lean.unbracketedExplicitBinders
       [(Lean.binderIdent `w)]
       [":" (Term.paren "(" [`K [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
     ", "
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
   "="
   (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
    "‚®Ö"
    (Lean.explicitBinders
     (Lean.unbracketedExplicitBinders
      [(Lean.binderIdent `w)]
      [":" (Term.paren "(" [`K [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
    ", "
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
   "‚®Ö"
   (Lean.explicitBinders
    (Lean.unbracketedExplicitBinders
     [(Lean.binderIdent `w)]
     [":" (Term.paren "(" [`K [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
   ", "
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.CompleteLattice.¬´term‚®Ö_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Existence of projections on complete subspaces.
    Let `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.
    Then there exists a (unique) `v` in `K` that minimizes the distance `‚à•u - v‚à•` to `u`.
    This point `v` is usually called the orthogonal projection of `u` onto `K`.
    -/
  theorem
    exists_norm_eq_infi_of_complete_subspace
    ( h : IsComplete ( ‚Üë K : Set E ) ) : ‚àÄ u : E , ‚àÉ v ‚àà K , ‚à• u - v ‚à• = ‚®Ö w : ( K : Set E ) , ‚à• u - w ‚à•
    :=
      by
        let this' : InnerProductSpace ‚Ñù E := InnerProductSpace.isROrCToReal ùïú E
          let this' : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
          let K' : Submodule ‚Ñù E := Submodule.restrictScalars ‚Ñù K
          exact exists_norm_eq_infi_of_complete_convex ‚ü® 0 , K'.zero_mem ‚ü© h K'.convex

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    "\nCharacterization of minimizers in the projection on a subspace, in the real case.\nLet `u` be a point in a real inner product space, and let `K` be a nonempty subspace.\nThen point `v` minimizes the distance `‚à•u - v‚à•` over points in `K` if and only if\nfor all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`).\nThis is superceded by `norm_eq_infi_iff_inner_eq_zero` that gives the same conclusion over\nany `is_R_or_C` field.\n-/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `norm_eq_infi_iff_real_inner_eq_zero [])
  (Command.declSig
   [(Term.explicitBinder "(" [`K] [":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `F])] [] ")")
    (Term.implicitBinder "{" [`u] [":" `F] "}")
    (Term.implicitBinder "{" [`v] [":" `F] "}")
    (Term.explicitBinder "(" [`hv] [":" (Init.Core.¬´term_‚àà_¬ª `v " ‚àà " `K)] [] ")")]
   (Term.typeSpec
    ":"
    (¬´term_‚Üî_¬ª
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
      "="
      (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
       "‚®Ö"
       (Lean.explicitBinders
        (Lean.unbracketedExplicitBinders
         [(Lean.binderIdent `w)]
         [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`F]))]] ")")]))
       ", "
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
     "‚Üî"
     (Term.forall
      "‚àÄ"
      []
      ","
      (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
       "‚àÄ"
       `w
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (Term.forall
        "‚àÄ"
        []
        ","
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
         "="
         (numLit "0"))))))))
  (Command.declValSimple
   ":="
   (Term.app
    `Iff.intro
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`h]) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                []
                ","
                (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                 "‚àÄ"
                 `w
                 (¬´binderTerm‚àà_¬ª "‚àà" `K)
                 ","
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (¬´term_‚â§_¬ª
                   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                    "‚ü™"
                    (¬´term_-_¬ª `u "-" `v)
                    ", "
                    (¬´term_-_¬ª `w "-" `v)
                    "‚ü´_‚Ñù")
                   "‚â§"
                   (numLit "0"))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (tacticRwa__
                   "rwa"
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
                  [])
                 (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])]))))))
          [])
         (group (Tactic.intro "intro" [`w `hw]) [])
         (group
          (Tactic.have''
           "have"
           [`le []]
           [(Term.typeSpec
             ":"
             (¬´term_‚â§_¬ª
              (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
              "‚â§"
              (numLit "0")))])
          [])
         (group
          (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (Init.Logic.¬´term_+_¬ª `w "+" `v))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
             ":="
             (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv]))))
          [])
         (group
          (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
          [])
         (group (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w))]) [])
         (group
          (Tactic.simp
           "simp"
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì) "," (Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
           [])
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
          [])
         (group (Tactic.exact "exact" `h‚ÇÅ) [])
         (group
          (Tactic.have''
           "have"
           [`ge []]
           [(Term.typeSpec
             ":"
             (¬´term_‚â•_¬ª
              (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
              "‚â•"
              (numLit "0")))])
          [])
         (group
          (Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `w'' [] ":=" (Init.Logic.¬´term_+_¬ª (¬´term-_¬ª "-" `w) "+" `v))))
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K))]
             ":="
             (Term.app `Submodule.add_mem [(Term.hole "_") (Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) `hv]))))
          [])
         (group
          (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w'' `this]))))
          [])
         (group
          (Tactic.have''
           "have"
           [`h‚ÇÇ []]
           [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w)))])
          [])
         (group
          (Tactic.simp
           "simp"
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `neg_inj)
             ","
             (Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì)
             ","
             (Tactic.simpLemma [] [] `sub_eq_add_neg)]
            "]"]
           [])
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ) "," (Tactic.rwRule [] `inner_neg_right)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
          [])
         (group (Tactic.linarith "linarith" [] [] []) [])
         (group (Tactic.exact "exact" (Term.app `le_antisymm‚Çì [`le `Ge])) [])])))
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`h]) [])
         (group
          (Tactic.have''
           "have"
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              []
              ","
              (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
               "‚àÄ"
               `w
               (¬´binderTerm‚àà_¬ª "‚àà" `K)
               ","
               (Term.forall
                "‚àÄ"
                []
                ","
                (¬´term_‚â§_¬ª
                 (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `u "-" `v)
                  ", "
                  (¬´term_-_¬ª `w "-" `v)
                  "‚ü´_‚Ñù")
                 "‚â§"
                 (numLit "0"))))))])
          [])
         (group (Tactic.intro "intro" [`w `hw]) [])
         (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (¬´term_-_¬ª `w "-" `v)))) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
             ":="
             (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv]))))
          [])
         (group
          (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
          [])
         (group (Tactic.exact "exact" (Term.app `le_of_eq‚Çì [`h‚ÇÅ])) [])
         (group
          (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]") [])
          [])
         (group (exacts "exacts" "[" [(Term.app `Submodule.convex [(Term.hole "_")]) "," `hv] "]") [])])))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Iff.intro
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.intro "intro" [`h]) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h []]
            [(Term.typeSpec
              ":"
              (Term.forall
               "‚àÄ"
               []
               ","
               (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                "‚àÄ"
                `w
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (Term.forall
                 "‚àÄ"
                 []
                 ","
                 (¬´term_‚â§_¬ª
                  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                   "‚ü™"
                   (¬´term_-_¬ª `u "-" `v)
                   ", "
                   (¬´term_-_¬ª `w "-" `v)
                   "‚ü´_‚Ñù")
                  "‚â§"
                  (numLit "0"))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (tacticRwa__
                  "rwa"
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
                 [])
                (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])]))))))
         [])
        (group (Tactic.intro "intro" [`w `hw]) [])
        (group
         (Tactic.have''
          "have"
          [`le []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
             "‚â§"
             (numLit "0")))])
         [])
        (group
         (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (Init.Logic.¬´term_+_¬ª `w "+" `v))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
            ":="
            (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv]))))
         [])
        (group
         (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
         [])
        (group (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w))]) [])
        (group
         (Tactic.simp
          "simp"
          []
          ["only"]
          ["[" [(Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì) "," (Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
          [])
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
         [])
        (group (Tactic.exact "exact" `h‚ÇÅ) [])
        (group
         (Tactic.have''
          "have"
          [`ge []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â•_¬ª
             (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
             "‚â•"
             (numLit "0")))])
         [])
        (group
         (Tactic.tacticLet_
          "let"
          (Term.letDecl (Term.letIdDecl `w'' [] ":=" (Init.Logic.¬´term_+_¬ª (¬´term-_¬ª "-" `w) "+" `v))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K))]
            ":="
            (Term.app `Submodule.add_mem [(Term.hole "_") (Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) `hv]))))
         [])
        (group
         (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w'' `this]))))
         [])
        (group
         (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w)))])
         [])
        (group
         (Tactic.simp
          "simp"
          []
          ["only"]
          ["["
           [(Tactic.simpLemma [] [] `neg_inj)
            ","
            (Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì)
            ","
            (Tactic.simpLemma [] [] `sub_eq_add_neg)]
           "]"]
          [])
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ) "," (Tactic.rwRule [] `inner_neg_right)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
         [])
        (group (Tactic.linarith "linarith" [] [] []) [])
        (group (Tactic.exact "exact" (Term.app `le_antisymm‚Çì [`le `Ge])) [])])))
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.intro "intro" [`h]) [])
        (group
         (Tactic.have''
          "have"
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_‚â§_¬ª
                (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (¬´term_-_¬ª `w "-" `v)
                 "‚ü´_‚Ñù")
                "‚â§"
                (numLit "0"))))))])
         [])
        (group (Tactic.intro "intro" [`w `hw]) [])
        (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (¬´term_-_¬ª `w "-" `v)))) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
            ":="
            (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv]))))
         [])
        (group
         (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
         [])
        (group (Tactic.exact "exact" (Term.app `le_of_eq‚Çì [`h‚ÇÅ])) [])
        (group
         (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]") [])
         [])
        (group (exacts "exacts" "[" [(Term.app `Submodule.convex [(Term.hole "_")]) "," `hv] "]") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`h]) [])
      (group
       (Tactic.have''
        "have"
        []
        [(Term.typeSpec
          ":"
          (Term.forall
           "‚àÄ"
           []
           ","
           (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
            "‚àÄ"
            `w
            (¬´binderTerm‚àà_¬ª "‚àà" `K)
            ","
            (Term.forall
             "‚àÄ"
             []
             ","
             (¬´term_‚â§_¬ª
              (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
               "‚ü™"
               (¬´term_-_¬ª `u "-" `v)
               ", "
               (¬´term_-_¬ª `w "-" `v)
               "‚ü´_‚Ñù")
              "‚â§"
              (numLit "0"))))))])
       [])
      (group (Tactic.intro "intro" [`w `hw]) [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (¬´term_-_¬ª `w "-" `v)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
          ":="
          (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
       [])
      (group (Tactic.exact "exact" (Term.app `le_of_eq‚Çì [`h‚ÇÅ])) [])
      (group
       (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]") [])
       [])
      (group (exacts "exacts" "[" [(Term.app `Submodule.convex [(Term.hole "_")]) "," `hv] "]") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (exacts "exacts" "[" [(Term.app `Submodule.convex [(Term.hole "_")]) "," `hv] "]")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'exacts', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule.convex [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.convex
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_eq_infi_iff_real_inner_le_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact "exact" (Term.app `le_of_eq‚Çì [`h‚ÇÅ]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_eq‚Çì [`h‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_eq‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [`w' `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
     ":="
     (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.sub_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `w'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (¬´term_-_¬ª `w "-" `v))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   []
   [(Term.typeSpec
     ":"
     (Term.forall
      "‚àÄ"
      []
      ","
      (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
       "‚àÄ"
       `w
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (Term.forall
        "‚àÄ"
        []
        ","
        (¬´term_‚â§_¬ª
         (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
         "‚â§"
         (numLit "0"))))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_‚â§_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
      "‚â§"
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_‚â§_¬ª
     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
     "‚â§"
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_‚â§_¬ª
    (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
    "‚â§"
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
   "‚â§"
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`h]) [])
      (group
       (Tactic.have''
        "have"
        []
        [(Term.typeSpec
          ":"
          (Term.forall
           "‚àÄ"
           []
           ","
           (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
            "‚àÄ"
            `w
            (¬´binderTerm‚àà_¬ª "‚àà" `K)
            ","
            (Term.forall
             "‚àÄ"
             []
             ","
             (¬´term_‚â§_¬ª
              (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
               "‚ü™"
               (¬´term_-_¬ª `u "-" `v)
               ", "
               (¬´term_-_¬ª `w "-" `v)
               "‚ü´_‚Ñù")
              "‚â§"
              (numLit "0"))))))])
       [])
      (group (Tactic.intro "intro" [`w `hw]) [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (¬´term_-_¬ª `w "-" `v)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
          ":="
          (Term.app `Submodule.sub_mem [(Term.hole "_") `hw `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
       [])
      (group (Tactic.exact "exact" (Term.app `le_of_eq‚Çì [`h‚ÇÅ])) [])
      (group
       (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]") [])
       [])
      (group (exacts "exacts" "[" [(Term.app `Submodule.convex [(Term.hole "_")]) "," `hv] "]") [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`h]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_‚â§_¬ª
                (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (¬´term_-_¬ª `w "-" `v)
                 "‚ü´_‚Ñù")
                "‚â§"
                (numLit "0"))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (tacticRwa__
                "rwa"
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
               [])
              (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])]))))))
       [])
      (group (Tactic.intro "intro" [`w `hw]) [])
      (group
       (Tactic.have''
        "have"
        [`le []]
        [(Term.typeSpec
          ":"
          (¬´term_‚â§_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
           "‚â§"
           (numLit "0")))])
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (Init.Logic.¬´term_+_¬ª `w "+" `v)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
          ":="
          (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
       [])
      (group (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w))]) [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì) "," (Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
       [])
      (group (Tactic.exact "exact" `h‚ÇÅ) [])
      (group
       (Tactic.have''
        "have"
        [`ge []]
        [(Term.typeSpec
          ":"
          (¬´term_‚â•_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
           "‚â•"
           (numLit "0")))])
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl (Term.letIdDecl `w'' [] ":=" (Init.Logic.¬´term_+_¬ª (¬´term-_¬ª "-" `w) "+" `v))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K))]
          ":="
          (Term.app `Submodule.add_mem [(Term.hole "_") (Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w'' `this]))))
       [])
      (group
       (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w)))])
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `neg_inj)
          ","
          (Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì)
          ","
          (Tactic.simpLemma [] [] `sub_eq_add_neg)]
         "]"]
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ) "," (Tactic.rwRule [] `inner_neg_right)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
       [])
      (group (Tactic.linarith "linarith" [] [] []) [])
      (group (Tactic.exact "exact" (Term.app `le_antisymm‚Çì [`le `Ge])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `le_antisymm‚Çì [`le `Ge]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_antisymm‚Çì [`le `Ge])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Ge
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_antisymm‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ) "," (Tactic.rwRule [] `inner_neg_right)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inner_neg_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] `neg_inj)
     ","
     (Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì)
     ","
     (Tactic.simpLemma [] [] `sub_eq_add_neg)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_neg_cancel_right‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_inj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term-_¬ª "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 100, (some 100, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (¬´term_-_¬ª `w'' "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `w''
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w'' `this]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [`w'' `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w''
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K))]
     ":="
     (Term.app `Submodule.add_mem [(Term.hole "_") (Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) `hv]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule.add_mem [(Term.hole "_") (Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Submodule.neg_mem [(Term.hole "_") `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.neg_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.add_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `w''
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w'' [] ":=" (Init.Logic.¬´term_+_¬ª (¬´term-_¬ª "-" `w) "+" `v))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª (¬´term-_¬ª "-" `w) "+" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term-_¬ª "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term-_¬ª "-" `w) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   [`ge []]
   [(Term.typeSpec
     ":"
     (¬´term_‚â•_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
      "‚â•"
      (numLit "0")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â•_¬ª (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù") "‚â•" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â•_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact "exact" `h‚ÇÅ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì) "," (Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_neg_cancel_right‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (¬´term_-_¬ª `w' "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `w'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [`w' `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
     ":="
     (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule.add_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `w'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (Init.Logic.¬´term_+_¬ª `w "+" `v))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `w "+" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.have''
   "have"
   [`le []]
   [(Term.typeSpec
     ":"
     (¬´term_‚â§_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
      "‚â§"
      (numLit "0")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.have''', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù") "‚â§" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "‚àÄ"
        []
        ","
        (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
         "‚àÄ"
         `w
         (¬´binderTerm‚àà_¬ª "‚àà" `K)
         ","
         (Term.forall
          "‚àÄ"
          []
          ","
          (¬´term_‚â§_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
           "‚â§"
           (numLit "0"))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
          [])
         (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
       [])
      (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (exacts "exacts" "[" [`K.convex "," `hv] "]")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'exacts', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K.convex
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_eq_infi_iff_real_inner_le_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_‚â§_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
      "‚â§"
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_‚â§_¬ª
     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
     "‚â§"
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_‚â§_¬ª
    (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
    "‚â§"
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
   "‚â§"
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " (¬´term_-_¬ª `w "-" `v) "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`h]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_‚â§_¬ª
                (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (¬´term_-_¬ª `w "-" `v)
                 "‚ü´_‚Ñù")
                "‚â§"
                (numLit "0"))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (tacticRwa__
                "rwa"
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_eq_infi_iff_real_inner_le_zero)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
               [])
              (group (exacts "exacts" "[" [`K.convex "," `hv] "]") [])]))))))
       [])
      (group (Tactic.intro "intro" [`w `hw]) [])
      (group
       (Tactic.have''
        "have"
        [`le []]
        [(Term.typeSpec
          ":"
          (¬´term_‚â§_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
           "‚â§"
           (numLit "0")))])
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `w' [] ":=" (Init.Logic.¬´term_+_¬ª `w "+" `v)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w' " ‚àà " `K))]
          ":="
          (Term.app `Submodule.add_mem [(Term.hole "_") `hw `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w' `this]))))
       [])
      (group (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w' "-" `v) "=" `w))]) [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì) "," (Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
       [])
      (group (Tactic.exact "exact" `h‚ÇÅ) [])
      (group
       (Tactic.have''
        "have"
        [`ge []]
        [(Term.typeSpec
          ":"
          (¬´term_‚â•_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
           "‚â•"
           (numLit "0")))])
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl `w'' [] ":=" (Init.Logic.¬´term_+_¬ª (Term.paren "(" [(¬´term-_¬ª "-" `w) []] ")") "+" `v))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `w'' " ‚àà " `K))]
          ":="
          (Term.app
           `Submodule.add_mem
           [(Term.hole "_") (Term.paren "(" [(Term.app `Submodule.neg_mem [(Term.hole "_") `hw]) []] ")") `hv]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h‚ÇÅ []] [] ":=" (Term.app `h [`w'' `this]))))
       [])
      (group
       (Tactic.have'' "have" [`h‚ÇÇ []] [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `w'' "-" `v) "=" (¬´term-_¬ª "-" `w)))])
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `neg_inj)
          ","
          (Tactic.simpLemma [] [] `add_neg_cancel_right‚Çì)
          ","
          (Tactic.simpLemma [] [] `sub_eq_add_neg)]
         "]"]
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h‚ÇÇ) "," (Tactic.rwRule [] `inner_neg_right)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
       [])
      (group (Tactic.linarith "linarith" [] [] []) [])
      (group (Tactic.exact "exact" (Term.app `le_antisymm‚Çì [`le `Ge])) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Iff.intro
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (¬´term_‚Üî_¬ª
   (¬´term_=_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
    "="
    (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
     "‚®Ö"
     (Lean.explicitBinders
      (Lean.unbracketedExplicitBinders
       [(Lean.binderIdent `w)]
       [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`F]))]] ")")]))
     ", "
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
   "‚Üî"
   (Term.forall
    "‚àÄ"
    []
    ","
    (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
     "‚àÄ"
     `w
     (¬´binderTerm‚àà_¬ª "‚àà" `K)
     ","
     (Term.forall
      "‚àÄ"
      []
      ","
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
       "="
       (numLit "0"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚Üî_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_=_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
      "="
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_=_¬ª
     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
     "="
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_=_¬ª
    (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
    "="
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù") "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 21 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 20, term))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
   "="
   (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
    "‚®Ö"
    (Lean.explicitBinders
     (Lean.unbracketedExplicitBinders
      [(Lean.binderIdent `w)]
      [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`F]))]] ")")]))
    ", "
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
   "‚®Ö"
   (Lean.explicitBinders
    (Lean.unbracketedExplicitBinders
     [(Lean.binderIdent `w)]
     [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`F]))]] ")")]))
   ", "
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.CompleteLattice.¬´term‚®Ö_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Characterization of minimizers in the projection on a subspace, in the real case.
    Let `u` be a point in a real inner product space, and let `K` be a nonempty subspace.
    Then point `v` minimizes the distance `‚à•u - v‚à•` over points in `K` if and only if
    for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`).
    This is superceded by `norm_eq_infi_iff_inner_eq_zero` that gives the same conclusion over
    any `is_R_or_C` field.
    -/
  theorem
    norm_eq_infi_iff_real_inner_eq_zero
    ( K : Submodule ‚Ñù F ) { u : F } { v : F } ( hv : v ‚àà K )
      : ‚à• u - v ‚à• = ‚®Ö w : ( ‚Üë K : Set F ) , ‚à• u - w ‚à• ‚Üî ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , ‚ü™ u - v , w ‚ü´_‚Ñù = 0
    :=
      Iff.intro
        by
            intro h
              have
                h
                  : ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , ‚ü™ u - v , w - v ‚ü´_‚Ñù ‚â§ 0
                  :=
                  by rwa [ norm_eq_infi_iff_real_inner_le_zero ] at h exacts [ K.convex , hv ]
              intro w hw
              have le : ‚ü™ u - v , w ‚ü´_‚Ñù ‚â§ 0
              let w' := w + v
              have : w' ‚àà K := Submodule.add_mem _ hw hv
              have h‚ÇÅ := h w' this
              have h‚ÇÇ : w' - v = w
              simp only [ add_neg_cancel_right‚Çì , sub_eq_add_neg ]
              rw [ h‚ÇÇ ] at h‚ÇÅ
              exact h‚ÇÅ
              have ge : ‚ü™ u - v , w ‚ü´_‚Ñù ‚â• 0
              let w'' := - w + v
              have : w'' ‚àà K := Submodule.add_mem _ Submodule.neg_mem _ hw hv
              have h‚ÇÅ := h w'' this
              have h‚ÇÇ : w'' - v = - w
              simp only [ neg_inj , add_neg_cancel_right‚Çì , sub_eq_add_neg ]
              rw [ h‚ÇÇ , inner_neg_right ] at h‚ÇÅ
              linarith
              exact le_antisymm‚Çì le Ge
          by
            intro h
              have : ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , ‚ü™ u - v , w - v ‚ü´_‚Ñù ‚â§ 0
              intro w hw
              let w' := w - v
              have : w' ‚àà K := Submodule.sub_mem _ hw hv
              have h‚ÇÅ := h w' this
              exact le_of_eq‚Çì h‚ÇÅ
              rwa [ norm_eq_infi_iff_real_inner_le_zero ]
              exacts [ Submodule.convex _ , hv ]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    "\nCharacterization of minimizers in the projection on a subspace.\nLet `u` be a point in an inner product space, and let `K` be a nonempty subspace.\nThen point `v` minimizes the distance `‚à•u - v‚à•` over points in `K` if and only if\nfor all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`)\n-/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `norm_eq_infi_iff_inner_eq_zero [])
  (Command.declSig
   [(Term.implicitBinder "{" [`u] [":" `E] "}")
    (Term.implicitBinder "{" [`v] [":" `E] "}")
    (Term.explicitBinder "(" [`hv] [":" (Init.Core.¬´term_‚àà_¬ª `v " ‚àà " `K)] [] ")")]
   (Term.typeSpec
    ":"
    (¬´term_‚Üî_¬ª
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
      "="
      (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
       "‚®Ö"
       (Lean.explicitBinders
        (Lean.unbracketedExplicitBinders
         [(Lean.binderIdent `w)]
         [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
       ", "
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
     "‚Üî"
     (Term.forall
      "‚àÄ"
      []
      ","
      (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
       "‚àÄ"
       `w
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (Term.forall
        "‚àÄ"
        []
        ","
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
         "="
         (numLit "0"))))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `this'
           []
           [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
        [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `this'
           []
           [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
        [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `K'
           [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
           ":="
           (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")]))))
        [])
       (group (Tactic.constructor "constructor") [])
       (group
        (Tactic.¬´tactic¬∑._¬ª
         "¬∑"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.intro "intro" [`H]) [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`A []]
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "‚àÄ"
                   []
                   ","
                   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                    "‚àÄ"
                    `w
                    (¬´binderTerm‚àà_¬ª "‚àà" `K)
                    ","
                    (Term.forall
                     "‚àÄ"
                     []
                     ","
                     (¬´term_=_¬ª
                      (Term.app
                       `re
                       [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
                      "="
                      (numLit "0"))))))]
                ":="
                (Term.app
                 (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1"))
                 [`H]))))
             [])
            (group (Tactic.intro "intro" [`w `hw]) [])
            (group (Tactic.apply "apply" `ext) [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"] [])
                  [])])))
             [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.symm "symm") [])
                 (group
                  (tacticCalc_
                   "calc"
                   [(calcStep
                     (¬´term_=_¬ª
                      (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")])
                      "="
                      (numLit "0"))
                     ":="
                     `im.map_zero)
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Term.app
                       `re
                       [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                         "‚ü™"
                         (¬´term_-_¬ª `u "-" `v)
                         ", "
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                         "‚ü´")]))
                     ":="
                     (Term.proj
                      (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
                      "."
                      `symm))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Term.app
                       `re
                       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (¬´term-_¬ª "-" `I)
                         "*"
                         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") [])
                          [])]))))
                    (calcStep
                     (¬´term_=_¬ª
                      (Term.hole "_")
                      "="
                      (Term.app
                       `im
                       [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))))])
                  [])])))
             [])])))
        [])
       (group
        (Tactic.¬´tactic¬∑._¬ª
         "¬∑"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.intro "intro" [`H]) [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "‚àÄ"
                   []
                   ","
                   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                    "‚àÄ"
                    `w
                    (¬´binderTerm‚àà_¬ª "‚àà" `K')
                    ","
                    (Term.forall
                     "‚àÄ"
                     []
                     ","
                     (¬´term_=_¬ª
                      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
                      "="
                      (numLit "0"))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.intro "intro" [`w `hw]) [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                       "]")
                      [])
                     [])
                    (group (Tactic.exact "exact" `zero_re') [])]))))))
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.app
               (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
               [`this]))
             [])])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `this'
          []
          [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `this'
          []
          [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `K'
          [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
          ":="
          (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")]))))
       [])
      (group (Tactic.constructor "constructor") [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`H]) [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`A []]
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                   "‚àÄ"
                   `w
                   (¬´binderTerm‚àà_¬ª "‚àà" `K)
                   ","
                   (Term.forall
                    "‚àÄ"
                    []
                    ","
                    (¬´term_=_¬ª
                     (Term.app
                      `re
                      [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
                     "="
                     (numLit "0"))))))]
               ":="
               (Term.app
                (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1"))
                [`H]))))
            [])
           (group (Tactic.intro "intro" [`w `hw]) [])
           (group (Tactic.apply "apply" `ext) [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"] []) [])])))
            [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.symm "symm") [])
                (group
                 (tacticCalc_
                  "calc"
                  [(calcStep
                    (¬´term_=_¬ª
                     (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")])
                     "="
                     (numLit "0"))
                    ":="
                    `im.map_zero)
                   (calcStep
                    (¬´term_=_¬ª
                     (Term.hole "_")
                     "="
                     (Term.app
                      `re
                      [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                        "‚ü™"
                        (¬´term_-_¬ª `u "-" `v)
                        ", "
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                        "‚ü´")]))
                    ":="
                    (Term.proj
                     (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
                     "."
                     `symm))
                   (calcStep
                    (¬´term_=_¬ª
                     (Term.hole "_")
                     "="
                     (Term.app
                      `re
                      [(Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (¬´term-_¬ª "-" `I)
                        "*"
                        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") [])
                         [])]))))
                   (calcStep
                    (¬´term_=_¬ª
                     (Term.hole "_")
                     "="
                     (Term.app
                      `im
                      [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))))])
                 [])])))
            [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`H]) [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                   "‚àÄ"
                   `w
                   (¬´binderTerm‚àà_¬ª "‚àà" `K')
                   ","
                   (Term.forall
                    "‚àÄ"
                    []
                    ","
                    (¬´term_=_¬ª
                     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
                     "="
                     (numLit "0"))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.intro "intro" [`w `hw]) [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                      "]")
                     [])
                    [])
                   (group (Tactic.exact "exact" `zero_re') [])]))))))
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
              [`this]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`H]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K')
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
                "="
                (numLit "0"))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`w `hw]) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                 "]")
                [])
               [])
              (group (Tactic.exact "exact" `zero_re') [])]))))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2")) [`this]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2")) [`this]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2")) [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `K'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_eq_infi_iff_real_inner_eq_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.forall
        "‚àÄ"
        []
        ","
        (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
         "‚àÄ"
         `w
         (¬´binderTerm‚àà_¬ª "‚àà" `K')
         ","
         (Term.forall
          "‚àÄ"
          []
          ","
          (¬´term_=_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
           "="
           (numLit "0"))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`w `hw]) [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
            "]")
           [])
          [])
         (group (Tactic.exact "exact" `zero_re') [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`w `hw]) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
         "]")
        [])
       [])
      (group (Tactic.exact "exact" `zero_re') [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" `zero_re')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_re'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `H [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `real_inner_eq_re_inner
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K')
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_=_¬ª
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
      "="
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K')
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_=_¬ª
     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
     "="
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_=_¬ª
    (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
    "="
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù") "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`H]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `w
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_=_¬ª
                (Term.app
                 `re
                 [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
                "="
                (numLit "0"))))))]
          ":="
          (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1")) [`H]))))
       [])
      (group (Tactic.intro "intro" [`w `hw]) [])
      (group (Tactic.apply "apply" `ext) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"] []) [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.symm "symm") [])
           (group
            (tacticCalc_
             "calc"
             [(calcStep
               (¬´term_=_¬ª
                (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")])
                "="
                (numLit "0"))
               ":="
               `im.map_zero)
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Term.app
                 `re
                 [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                   "‚ü™"
                   (¬´term_-_¬ª `u "-" `v)
                   ", "
                   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                   "‚ü´")]))
               ":="
               (Term.proj (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])]) "." `symm))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Term.app
                 `re
                 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (¬´term-_¬ª "-" `I)
                   "*"
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") [])
                    [])]))))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (Term.app
                 `im
                 [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))))])
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.symm "symm") [])
      (group
       (tacticCalc_
        "calc"
        [(calcStep
          (¬´term_=_¬ª
           (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")])
           "="
           (numLit "0"))
          ":="
          `im.map_zero)
         (calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (Term.app
            `re
            [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
              "‚ü™"
              (¬´term_-_¬ª `u "-" `v)
              ", "
              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
              "‚ü´")]))
          ":="
          (Term.proj (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])]) "." `symm))
         (calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (Term.app
            `re
            [(Finset.Data.Finset.Fold.¬´term_*_¬ª
              (¬´term-_¬ª "-" `I)
              "*"
              (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") [])
               [])]))))
         (calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (Term.app `im [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticCalc_
   "calc"
   [(calcStep
     (¬´term_=_¬ª (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")]) "=" (numLit "0"))
     ":="
     `im.map_zero)
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Term.app
       `re
       [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (¬´term_-_¬ª `u "-" `v)
         ", "
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
         "‚ü´")]))
     ":="
     (Term.proj (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])]) "." `symm))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Term.app
       `re
       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
         (¬´term-_¬ª "-" `I)
         "*"
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") []) [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Term.app `im [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticCalc_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Term.app `im [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `im [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `im
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inner_smul_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Term.app
    `re
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (¬´term-_¬ª "-" `I)
      "*"
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `re
   [(Finset.Data.Finset.Fold.¬´term_*_¬ª
     (¬´term-_¬ª "-" `I)
     "*"
     (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (¬´term-_¬ª "-" `I)
   "*"
   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term-_¬ª "-" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term-_¬ª "-" `I) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren "(" [(¬´term-_¬ª "-" `I) []] ")")
   "*"
   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´"))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.proj (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (¬´term-_¬ª "-" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 100, (some 100, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term-_¬ª "-" `I) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `K.smul_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `K.smul_mem [(Term.paren "(" [(¬´term-_¬ª "-" `I) []] ")") `hw]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `A
   [(Term.hole "_") (Term.paren "(" [(Term.app `K.smul_mem [(Term.paren "(" [(¬´term-_¬ª "-" `I) []] ")") `hw]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Term.app
    `re
    [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
      "‚ü™"
      (¬´term_-_¬ª `u "-" `v)
      ", "
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
      "‚ü´")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `re
   [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
     "‚ü™"
     (¬´term_-_¬ª `u "-" `v)
     ", "
     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
     "‚ü´")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
   "‚ü™"
   (¬´term_-_¬ª `u "-" `v)
   ", "
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
   "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (¬´term-_¬ª "-" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 74 >? 100, (some 100, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  `im.map_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")]) "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `im [(Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `ùïú)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `im
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.symm "symm")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.symm', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `A [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `ext)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ext
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hw
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`A []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "‚àÄ"
        []
        ","
        (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
         "‚àÄ"
         `w
         (¬´binderTerm‚àà_¬ª "‚àà" `K)
         ","
         (Term.forall
          "‚àÄ"
          []
          ","
          (¬´term_=_¬ª
           (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
           "="
           (numLit "0"))))))]
     ":="
     (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1")) [`H]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1")) [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `K'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_eq_infi_iff_real_inner_eq_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_=_¬ª
      (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
      "="
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_=_¬ª
     (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
     "="
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_=_¬ª
    (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
    "="
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
   "="
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `re [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.constructor "constructor")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.constructor', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `K'
     [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `K.restrict_scalars
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Submodule
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `this'
     []
     [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `RestrictScalars.module
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Module
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `this'
     []
     [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
     ":="
     (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `InnerProductSpace.isROrCToReal
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.term‚Ñù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `InnerProductSpace
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (¬´term_‚Üî_¬ª
   (¬´term_=_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
    "="
    (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
     "‚®Ö"
     (Lean.explicitBinders
      (Lean.unbracketedExplicitBinders
       [(Lean.binderIdent `w)]
       [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
     ", "
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
   "‚Üî"
   (Term.forall
    "‚àÄ"
    []
    ","
    (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
     "‚àÄ"
     `w
     (¬´binderTerm‚àà_¬ª "‚àà" `K)
     ","
     (Term.forall
      "‚àÄ"
      []
      ","
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
       "="
       (numLit "0"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚Üî_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `w
    (¬´binderTerm‚àà_¬ª "‚àà" `K)
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_=_¬ª
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
      "="
      (numLit "0")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `w
   (¬´binderTerm‚àà_¬ª "‚àà" `K)
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_=_¬ª
     (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
     "="
     (numLit "0"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_=_¬ª
    (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
    "="
    (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´") "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `v
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 21 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 20, term))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `v) "‚à•")
   "="
   (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
    "‚®Ö"
    (Lean.explicitBinders
     (Lean.unbracketedExplicitBinders
      [(Lean.binderIdent `w)]
      [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
    ", "
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
   "‚®Ö"
   (Lean.explicitBinders
    (Lean.unbracketedExplicitBinders
     [(Lean.binderIdent `w)]
     [":" (Term.paren "(" [(Init.Coe.¬´term‚Üë_¬ª "‚Üë" `K) [(Term.typeAscription ":" (Term.app `Set [`E]))]] ")")]))
   ", "
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.CompleteLattice.¬´term‚®Ö_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `u "-" `w) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `w
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Characterization of minimizers in the projection on a subspace.
    Let `u` be a point in an inner product space, and let `K` be a nonempty subspace.
    Then point `v` minimizes the distance `‚à•u - v‚à•` over points in `K` if and only if
    for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`)
    -/
  theorem
    norm_eq_infi_iff_inner_eq_zero
    { u : E } { v : E } ( hv : v ‚àà K )
      : ‚à• u - v ‚à• = ‚®Ö w : ( ‚Üë K : Set E ) , ‚à• u - w ‚à• ‚Üî ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , ‚ü™ u - v , w ‚ü´ = 0
    :=
      by
        let this' : InnerProductSpace ‚Ñù E := InnerProductSpace.isROrCToReal ùïú E
          let this' : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
          let K' : Submodule ‚Ñù E := K.restrict_scalars ‚Ñù
          constructor
          ¬∑
            intro H
              have A : ‚àÄ , ‚àÄ w ‚àà K , ‚àÄ , re ‚ü™ u - v , w ‚ü´ = 0 := norm_eq_infi_iff_real_inner_eq_zero K' hv . 1 H
              intro w hw
              apply ext
              ¬∑ simp [ A w hw ]
              ¬∑
                symm
                  calc
                    im ( 0 : ùïú ) = 0 := im.map_zero
                      _ = re ‚ü™ u - v , - I ‚Ä¢ w ‚ü´ := A _ K.smul_mem - I hw . symm
                      _ = re - I * ‚ü™ u - v , w ‚ü´ := by rw [ inner_smul_right ]
                      _ = im ‚ü™ u - v , w ‚ü´ := by simp
          ¬∑
            intro H
              have
                : ‚àÄ , ‚àÄ w ‚àà K' , ‚àÄ , ‚ü™ u - v , w ‚ü´_‚Ñù = 0
                  :=
                  by intro w hw rw [ real_inner_eq_re_inner , H w hw ] exact zero_re'
              exact norm_eq_infi_iff_real_inner_eq_zero K' hv . 2 this

section orthogonalProjection

variable [CompleteSpace K]

/--  The orthogonal projection onto a complete subspace, as an
unbundled function.  This definition is only intended for use in
setting up the bundled version `orthogonal_projection` and should not
be used once that is defined. -/
def orthogonalProjectionFn (v : E) :=
  (exists_norm_eq_infi_of_complete_subspace K (complete_space_coe_iff_is_complete.mp ‚Äπ_‚Ä∫) v).some

variable {K}

/--  The unbundled orthogonal projection is in the given subspace.
This lemma is only intended for use in setting up the bundled version
and should not be used once that is defined. -/
theorem orthogonal_projection_fn_mem (v : E) : orthogonalProjectionFn K v ‚àà K :=
  (exists_norm_eq_infi_of_complete_subspace K (complete_space_coe_iff_is_complete.mp ‚Äπ_‚Ä∫) v).some_spec.some

/--  The characterization of the unbundled orthogonal projection.  This
lemma is only intended for use in setting up the bundled version
and should not be used once that is defined. -/
theorem orthogonal_projection_fn_inner_eq_zero (v : E) : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™v - orthogonalProjectionFn K v, w‚ü´ = 0 := by
  rw [‚Üê norm_eq_infi_iff_inner_eq_zero K (orthogonal_projection_fn_mem v)]
  exact (exists_norm_eq_infi_of_complete_subspace K (complete_space_coe_iff_is_complete.mp ‚Äπ_‚Ä∫) v).some_spec.some_spec

/--  The unbundled orthogonal projection is the unique point in `K`
with the orthogonality property.  This lemma is only intended for use
in setting up the bundled version and should not be used once that is
defined. -/
theorem eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero {u v : E} (hvm : v ‚àà K)
    (hvo : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™u - v, w‚ü´ = 0) : orthogonalProjectionFn K u = v := by
  rw [‚Üê sub_eq_zero, ‚Üê inner_self_eq_zero]
  have hvs : orthogonalProjectionFn K u - v ‚àà K := Submodule.sub_mem K (orthogonal_projection_fn_mem u) hvm
  have huo : ‚ü™u - orthogonalProjectionFn K u, orthogonalProjectionFn K u - v‚ü´ = 0 :=
    orthogonal_projection_fn_inner_eq_zero u _ hvs
  have huv : ‚ü™u - v, orthogonalProjectionFn K u - v‚ü´ = 0 := hvo _ hvs
  have houv : ‚ü™u - v - (u - orthogonalProjectionFn K u), orthogonalProjectionFn K u - v‚ü´ = 0 := by
    rw [inner_sub_left, huo, huv, sub_zero]
  rwa [sub_sub_sub_cancel_left] at houv

variable (K)

theorem orthogonal_projection_fn_norm_sq (v : E) :
    (‚à•v‚à•*‚à•v‚à•) =
      (‚à•v -
              orthogonalProjectionFn K
                v‚à•*‚à•v - orthogonalProjectionFn K v‚à•)+‚à•orthogonalProjectionFn K v‚à•*‚à•orthogonalProjectionFn K v‚à• :=
  by
  set p := orthogonalProjectionFn K v
  have h' : ‚ü™v - p, p‚ü´ = 0 := by
    exact orthogonal_projection_fn_inner_eq_zero _ _ (orthogonal_projection_fn_mem v)
  convert norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero (v - p) p h' using 2 <;> simp

/--  The orthogonal projection onto a complete subspace. -/
def orthogonalProjection : E ‚ÜíL[ùïú] K :=
  LinearMap.mkContinuous
    { toFun := fun v => ‚ü®orthogonalProjectionFn K v, orthogonal_projection_fn_mem v‚ü©,
      map_add' := fun x y => by
        have hm : (orthogonalProjectionFn K x+orthogonalProjectionFn K y) ‚àà K :=
          Submodule.add_mem K (orthogonal_projection_fn_mem x) (orthogonal_projection_fn_mem y)
        have ho : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™(x+y) - orthogonalProjectionFn K x+orthogonalProjectionFn K y, w‚ü´ = 0 := by
          intro w hw
          rw [add_sub_comm, inner_add_left, orthogonal_projection_fn_inner_eq_zero _ w hw,
            orthogonal_projection_fn_inner_eq_zero _ w hw, add_zero‚Çì]
        ext
        simp [eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hm ho],
      map_smul' := fun c x => by
        have hm : c ‚Ä¢ orthogonalProjectionFn K x ‚àà K := Submodule.smul_mem K _ (orthogonal_projection_fn_mem x)
        have ho : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™c ‚Ä¢ x - c ‚Ä¢ orthogonalProjectionFn K x, w‚ü´ = 0 := by
          intro w hw
          rw [‚Üê smul_sub, inner_smul_left, orthogonal_projection_fn_inner_eq_zero _ w hw, mul_zero]
        ext
        simp [eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hm ho] }
    1 fun x => by
    simp only [one_mul‚Çì, LinearMap.coe_mk]
    refine'
      le_of_pow_le_pow 2 (norm_nonneg _)
        (by
          norm_num)
        _
    change (‚à•orthogonalProjectionFn K x‚à•^2) ‚â§ (‚à•x‚à•^2)
    nlinarith [orthogonal_projection_fn_norm_sq K x]

variable {K}

@[simp]
theorem orthogonal_projection_fn_eq (v : E) : orthogonalProjectionFn K v = (orthogonalProjection K v : E) :=
  rfl

/--  The characterization of the orthogonal projection.  -/
@[simp]
theorem orthogonal_projection_inner_eq_zero (v : E) : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™v - orthogonalProjection K v, w‚ü´ = 0 :=
  orthogonal_projection_fn_inner_eq_zero v

/--  The difference of `v` from its orthogonal projection onto `K` is in `K·óÆ`.  -/
@[simp]
theorem sub_orthogonal_projection_mem_orthogonal (v : E) : v - orthogonalProjection K v ‚àà K·óÆ := by
  intro w hw
  rw [inner_eq_zero_sym]
  exact orthogonal_projection_inner_eq_zero _ _ hw

/--  The orthogonal projection is the unique point in `K` with the
orthogonality property. -/
theorem eq_orthogonal_projection_of_mem_of_inner_eq_zero {u v : E} (hvm : v ‚àà K) (hvo : ‚àÄ, ‚àÄ w ‚àà K, ‚àÄ, ‚ü™u - v, w‚ü´ = 0) :
    (orthogonalProjection K u : E) = v :=
  eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hvm hvo

/--  The orthogonal projections onto equal subspaces are coerced back to the same point in `E`. -/
theorem eq_orthogonal_projection_of_eq_submodule {K' : Submodule ùïú E} [CompleteSpace K'] (h : K = K') (u : E) :
    (orthogonalProjection K u : E) = (orthogonalProjection K' u : E) := by
  change orthogonalProjectionFn K u = orthogonalProjectionFn K' u
  congr
  exact h

/--  The orthogonal projection sends elements of `K` to themselves. -/
@[simp]
theorem orthogonal_projection_mem_subspace_eq_self (v : K) : orthogonalProjection K v = v := by
  ext
  apply eq_orthogonal_projection_of_mem_of_inner_eq_zero <;> simp

/--  A point equals its orthogonal projection if and only if it lies in the subspace. -/
theorem orthogonal_projection_eq_self_iff {v : E} : (orthogonalProjection K v : E) = v ‚Üî v ‚àà K := by
  refine' ‚ü®fun h => _, fun h => eq_orthogonal_projection_of_mem_of_inner_eq_zero h _‚ü©
  ¬∑
    rw [‚Üê h]
    simp
  ¬∑
    simp

theorem LinearIsometry.map_orthogonal_projection {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E']
    (f : E ‚Üí‚Çó·µ¢[ùïú] E') (p : Submodule ùïú E) [CompleteSpace p] (x : E) :
    f (orthogonalProjection p x) = orthogonalProjection (p.map f.to_linear_map) (f x) := by
  refine' (eq_orthogonal_projection_of_mem_of_inner_eq_zero (Submodule.apply_coe_mem_map _ _) $ fun y hy => _).symm
  rcases hy with ‚ü®x', hx', rfl : f x' = y‚ü©
  rw [f.coe_to_linear_map, ‚Üê f.map_sub, f.inner_map_map, orthogonal_projection_inner_eq_zero x x' hx']

/--  Orthogonal projection onto the `submodule.map` of a subspace. -/
theorem orthogonal_projection_map_apply {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E']
    (f : E ‚âÉ‚Çó·µ¢[ùïú] E') (p : Submodule ùïú E) [CompleteSpace p] (x : E') :
    (orthogonalProjection (p.map (f.to_linear_equiv : E ‚Üí‚Çó[ùïú] E')) x : E') = f (orthogonalProjection p (f.symm x)) := by
  simpa only [f.coe_to_linear_isometry, f.apply_symm_apply] using
    (f.to_linear_isometry.map_orthogonal_projection p (f.symm x)).symm

/--  The orthogonal projection onto the trivial submodule is the zero map. -/
@[simp]
theorem orthogonal_projection_bot : orthogonalProjection (‚ä• : Submodule ùïú E) = 0 := by
  ext

variable (K)

/--  The orthogonal projection has norm `‚â§ 1`. -/
theorem orthogonal_projection_norm_le : ‚à•orthogonalProjection K‚à• ‚â§ 1 :=
  LinearMap.mk_continuous_norm_le _
    (by
      norm_num)
    _

variable (ùïú)

theorem smul_orthogonal_projection_singleton {v : E} (w : E) :
    (‚à•v‚à•^2 : ùïú) ‚Ä¢ (orthogonalProjection (ùïú‚àôv) w : E) = ‚ü™v, w‚ü´ ‚Ä¢ v := by
  suffices ‚ÜëorthogonalProjection (ùïú‚àôv) ((‚à•v‚à•^2 : ùïú) ‚Ä¢ w) = ‚ü™v, w‚ü´ ‚Ä¢ v by
    simpa using this
  apply eq_orthogonal_projection_of_mem_of_inner_eq_zero
  ¬∑
    rw [Submodule.mem_span_singleton]
    use ‚ü™v, w‚ü´
  ¬∑
    intro x hx
    obtain ‚ü®c, rfl‚ü© := submodule.mem_span_singleton.mp hx
    have hv : (‚Üë‚à•v‚à•^2) = ‚ü™v, v‚ü´ := by
      norm_cast
      simp [norm_sq_eq_inner]
    simp [inner_sub_left, inner_smul_left, inner_smul_right, RingEquiv.map_div, mul_comm‚Çì, hv,
      InnerProductSpace.conj_sym, hv]

/--  Formula for orthogonal projection onto a single vector. -/
theorem orthogonal_projection_singleton {v : E} (w : E) : (orthogonalProjection (ùïú‚àôv) w : E) = (‚ü™v, w‚ü´ / (‚à•v‚à•^2)) ‚Ä¢ v :=
  by
  by_cases' hv : v = 0
  ¬∑
    rw [hv, eq_orthogonal_projection_of_eq_submodule Submodule.span_zero_singleton]
    ¬∑
      simp
    ¬∑
      infer_instance
  have hv' : ‚à•v‚à• ‚â† 0 := ne_of_gt‚Çì (norm_pos_iff.mpr hv)
  have key : ((‚à•v‚à•^2 : ùïú)‚Åª¬π*‚à•v‚à•^2) ‚Ä¢ ‚ÜëorthogonalProjection (ùïú‚àôv) w = ((‚à•v‚à•^2 : ùïú)‚Åª¬π*‚ü™v, w‚ü´) ‚Ä¢ v := by
    simp [mul_smul, smul_orthogonal_projection_singleton ùïú w]
  convert key <;> field_simp [hv']

/--  Formula for orthogonal projection onto a single unit vector. -/
theorem orthogonal_projection_unit_singleton {v : E} (hv : ‚à•v‚à• = 1) (w : E) :
    (orthogonalProjection (ùïú‚àôv) w : E) = ‚ü™v, w‚ü´ ‚Ä¢ v := by
  rw [‚Üê smul_orthogonal_projection_singleton ùïú w]
  simp [hv]

end orthogonalProjection

section reflection

variable {ùïú} (K) [CompleteSpace K]

/--  Auxiliary definition for `reflection`: the reflection as a linear equivalence. -/
def reflectionLinearEquiv : E ‚âÉ‚Çó[ùïú] E :=
  LinearEquiv.ofInvolutive (bit0 (K.subtype.comp (orthogonalProjection K).toLinearMap) - LinearMap.id) fun x => by
    simp [bit0]

/--  Reflection in a complete subspace of an inner product space.  The word "reflection" is
sometimes understood to mean specifically reflection in a codimension-one subspace, and sometimes
more generally to cover operations such as reflection in a point.  The definition here, of
reflection in a subspace, is a more general sense of the word that includes both those common
cases. -/
def reflection : E ‚âÉ‚Çó·µ¢[ùïú] E :=
  { reflectionLinearEquiv K with
    norm_map' := by
      intro x
      let w : K := orthogonalProjection K x
      let v := x - w
      have : ‚ü™v, w‚ü´ = 0 := orthogonal_projection_inner_eq_zero x w w.2
      convert norm_sub_eq_norm_add this using 2
      ¬∑
        rw [LinearEquiv.coe_mk, reflectionLinearEquiv, LinearEquiv.to_fun_eq_coe, LinearEquiv.coe_of_involutive,
          LinearMap.sub_apply, LinearMap.id_apply, bit0, LinearMap.add_apply, LinearMap.comp_apply,
          Submodule.subtype_apply, ContinuousLinearMap.to_linear_map_eq_coe, ContinuousLinearMap.coe_coe]
        dsimp [w, v]
        abel
      ¬∑
        simp only [add_sub_cancel'_right, eq_self_iff_true] }

variable {K}

/--  The result of reflecting. -/
theorem reflection_apply (p : E) : reflection K p = bit0 (‚ÜëorthogonalProjection K p) - p :=
  rfl

/--  Reflection is its own inverse. -/
@[simp]
theorem reflection_symm : (reflection K).symm = reflection K :=
  rfl

variable (K)

/--  Reflecting twice in the same subspace. -/
@[simp]
theorem reflection_reflection (p : E) : reflection K (reflection K p) = p :=
  (reflection K).left_inv p

/--  Reflection is involutive. -/
theorem reflection_involutive : Function.Involutive (reflection K) :=
  reflection_reflection K

/--  Reflection is involutive. -/
@[simp]
theorem reflection_trans_reflection : (reflection K).trans (reflection K) = LinearIsometryEquiv.refl ùïú E :=
  LinearIsometryEquiv.ext $ reflection_involutive K

variable {K}

/--  A point is its own reflection if and only if it is in the subspace. -/
theorem reflection_eq_self_iff (x : E) : reflection K x = x ‚Üî x ‚àà K := by
  rw [‚Üê orthogonal_projection_eq_self_iff, reflection_apply, sub_eq_iff_eq_add', ‚Üê two_smul ùïú, ‚Üê two_smul' ùïú]
  refine' (smul_right_injective E _).eq_iff
  exact two_ne_zero

theorem reflection_mem_subspace_eq_self {x : E} (hx : x ‚àà K) : reflection K x = x :=
  (reflection_eq_self_iff x).mpr hx

/--  Reflection in the `submodule.map` of a subspace. -/
theorem reflection_map_apply {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E'] (f : E ‚âÉ‚Çó·µ¢[ùïú] E')
    (K : Submodule ùïú E) [CompleteSpace K] (x : E') :
    reflection (K.map (f.to_linear_equiv : E ‚Üí‚Çó[ùïú] E')) x = f (reflection K (f.symm x)) := by
  simp [bit0, reflection_apply, orthogonal_projection_map_apply f K x]

/--  Reflection in the `submodule.map` of a subspace. -/
theorem reflection_map {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E'] (f : E ‚âÉ‚Çó·µ¢[ùïú] E')
    (K : Submodule ùïú E) [CompleteSpace K] :
    reflection (K.map (f.to_linear_equiv : E ‚Üí‚Çó[ùïú] E')) = f.symm.trans ((reflection K).trans f) :=
  LinearIsometryEquiv.ext $ reflection_map_apply f K

/--  Reflection through the trivial subspace {0} is just negation. -/
@[simp]
theorem reflection_bot : reflection (‚ä• : Submodule ùïú E) = LinearIsometryEquiv.neg ùïú := by
  ext <;> simp [reflection_apply]

end reflection

section Orthogonal

/--  If `K‚ÇÅ` is complete and contained in `K‚ÇÇ`, `K‚ÇÅ` and `K‚ÇÅ·óÆ ‚äì K‚ÇÇ` span `K‚ÇÇ`. -/
theorem Submodule.sup_orthogonal_inf_of_complete_space {K‚ÇÅ K‚ÇÇ : Submodule ùïú E} (h : K‚ÇÅ ‚â§ K‚ÇÇ) [CompleteSpace K‚ÇÅ] :
    K‚ÇÅ‚äîK‚ÇÅ·óÆ‚äìK‚ÇÇ = K‚ÇÇ := by
  ext x
  rw [Submodule.mem_sup]
  let v : K‚ÇÅ := orthogonalProjection K‚ÇÅ x
  have hvm : x - v ‚àà K‚ÇÅ·óÆ := sub_orthogonal_projection_mem_orthogonal x
  constructor
  ¬∑
    rintro ‚ü®y, hy, z, hz, rfl‚ü©
    exact K‚ÇÇ.add_mem (h hy) hz.2
  ¬∑
    exact fun hx => ‚ü®v, v.prop, x - v, ‚ü®hvm, K‚ÇÇ.sub_mem hx (h v.prop)‚ü©, add_sub_cancel'_right _ _‚ü©

variable {K}

/--  If `K` is complete, `K` and `K·óÆ` span the whole space. -/
theorem Submodule.sup_orthogonal_of_complete_space [CompleteSpace K] : K‚äîK·óÆ = ‚ä§ := by
  convert Submodule.sup_orthogonal_inf_of_complete_space (le_top : K ‚â§ ‚ä§)
  simp

variable (K)

/--  If `K` is complete, any `v` in `E` can be expressed as a sum of elements of `K` and `K·óÆ`. -/
theorem Submodule.exists_sum_mem_mem_orthogonal [CompleteSpace K] (v : E) : ‚àÉ y ‚àà K, ‚àÉ z ‚àà K·óÆ, v = y+z := by
  have h_mem : v ‚àà K‚äîK·óÆ := by
    simp [Submodule.sup_orthogonal_of_complete_space]
  obtain ‚ü®y, hy, z, hz, hyz‚ü© := submodule.mem_sup.mp h_mem
  exact ‚ü®y, hy, z, hz, hyz.symm‚ü©

/--  If `K` is complete, then the orthogonal complement of its orthogonal complement is itself. -/
@[simp]
theorem Submodule.orthogonal_orthogonal [CompleteSpace K] : K·óÆ·óÆ = K := by
  ext v
  constructor
  ¬∑
    obtain ‚ü®y, hy, z, hz, rfl‚ü© := K.exists_sum_mem_mem_orthogonal v
    intro hv
    have hz' : z = 0 := by
      have hyz : ‚ü™z, y‚ü´ = 0 := by
        simp [hz y hy, inner_eq_zero_sym]
      simpa [inner_add_right, hyz] using hv z hz
    simp [hy, hz']
  ¬∑
    intro hv w hw
    rw [inner_eq_zero_sym]
    exact hw v hv

theorem Submodule.orthogonal_orthogonal_eq_closure [CompleteSpace E] : K·óÆ·óÆ = K.topological_closure := by
  refine' le_antisymm‚Çì _ _
  ¬∑
    convert Submodule.orthogonal_orthogonal_monotone K.submodule_topological_closure
    have : CompleteSpace K.topological_closure := K.is_closed_topological_closure.complete_space_coe
    rw [K.topological_closure.orthogonal_orthogonal]
  ¬∑
    exact K.topological_closure_minimal K.le_orthogonal_orthogonal K·óÆ.is_closed_orthogonal

variable {K}

/--  If `K` is complete, `K` and `K·óÆ` are complements of each other. -/
theorem Submodule.is_compl_orthogonal_of_complete_space [CompleteSpace K] : IsCompl K K·óÆ :=
  ‚ü®K.orthogonal_disjoint, le_of_eq‚Çì Submodule.sup_orthogonal_of_complete_space.symm‚ü©

@[simp]
theorem Submodule.orthogonal_eq_bot_iff [CompleteSpace (K : Set E)] : K·óÆ = ‚ä• ‚Üî K = ‚ä§ := by
  refine'
    ‚ü®_, fun h => by
      rw [h, Submodule.top_orthogonal_eq_bot]‚ü©
  intro h
  have : K‚äîK·óÆ = ‚ä§ := Submodule.sup_orthogonal_of_complete_space
  rwa [h, sup_comm, bot_sup_eq] at this

/--  A point in `K` with the orthogonality property (here characterized in terms of `K·óÆ`) must be the
orthogonal projection. -/
theorem eq_orthogonal_projection_of_mem_orthogonal [CompleteSpace K] {u v : E} (hv : v ‚àà K) (hvo : u - v ‚àà K·óÆ) :
    (orthogonalProjection K u : E) = v :=
  eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hv fun w => inner_eq_zero_sym.mp ‚àò hvo w

/--  A point in `K` with the orthogonality property (here characterized in terms of `K·óÆ`) must be the
orthogonal projection. -/
theorem eq_orthogonal_projection_of_mem_orthogonal' [CompleteSpace K] {u v z : E} (hv : v ‚àà K) (hz : z ‚àà K·óÆ)
    (hu : u = v+z) : (orthogonalProjection K u : E) = v :=
  eq_orthogonal_projection_of_mem_orthogonal hv
    (by
      simpa [hu])

/--  The orthogonal projection onto `K` of an element of `K·óÆ` is zero. -/
theorem orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero [CompleteSpace K] {v : E} (hv : v ‚àà K·óÆ) :
    orthogonalProjection K v = 0 := by
  ext
  convert eq_orthogonal_projection_of_mem_orthogonal _ _ <;> simp [hv]

/--  The reflection in `K` of an element of `K·óÆ` is its negation. -/
theorem reflection_mem_subspace_orthogonal_complement_eq_neg [CompleteSpace K] {v : E} (hv : v ‚àà K·óÆ) :
    reflection K v = -v := by
  simp [reflection_apply, orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero hv]

/--  The orthogonal projection onto `K·óÆ` of an element of `K` is zero. -/
theorem orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero [CompleteSpace E] {v : E} (hv : v ‚àà K) :
    orthogonalProjection K·óÆ v = 0 :=
  orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero (K.le_orthogonal_orthogonal hv)

/--  The reflection in `K·óÆ` of an element of `K` is its negation. -/
theorem reflection_mem_subspace_orthogonal_precomplement_eq_neg [CompleteSpace E] {v : E} (hv : v ‚àà K) :
    reflection K·óÆ v = -v :=
  reflection_mem_subspace_orthogonal_complement_eq_neg (K.le_orthogonal_orthogonal hv)

/--  The orthogonal projection onto `(ùïú ‚àô v)·óÆ` of `v` is zero. -/
theorem orthogonal_projection_orthogonal_complement_singleton_eq_zero [CompleteSpace E] (v : E) :
    orthogonalProjection (ùïú‚àôv)·óÆ v = 0 :=
  orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero (Submodule.mem_span_singleton_self v)

/--  The reflection in `(ùïú ‚àô v)·óÆ` of `v` is `-v`. -/
theorem reflection_orthogonal_complement_singleton_eq_neg [CompleteSpace E] (v : E) : reflection (ùïú‚àôv)·óÆ v = -v :=
  reflection_mem_subspace_orthogonal_precomplement_eq_neg (Submodule.mem_span_singleton_self v)

theorem reflection_sub [CompleteSpace F] {v w : F} (h : ‚à•v‚à• = ‚à•w‚à•) : reflection (‚Ñù‚àôv - w)·óÆ v = w := by
  set R : F ‚âÉ‚Çó·µ¢[‚Ñù] F := reflection (‚Ñù‚àôv - w)·óÆ
  suffices (R v+R v) = w+w by
    apply
      smul_right_injective F
        (by
          norm_num : (2 : ‚Ñù) ‚â† 0)
    simpa [two_smul] using this
  have h‚ÇÅ : R (v - w) = -(v - w) := reflection_orthogonal_complement_singleton_eq_neg (v - w)
  have h‚ÇÇ : R (v+w) = v+w := by
    apply reflection_mem_subspace_eq_self
    apply mem_orthogonal_singleton_of_inner_left
    rw [real_inner_add_sub_eq_zero_iff]
    exact h
  convert congr_arg2‚Çì (¬∑+¬∑) h‚ÇÇ h‚ÇÅ using 1
  ¬∑
    simp
  ¬∑
    abel

variable (K)

/--  In a complete space `E`, a vector splits as the sum of its orthogonal projections onto a
complete submodule `K` and onto the orthogonal complement of `K`.-/
theorem eq_sum_orthogonal_projection_self_orthogonal_complement [CompleteSpace E] [CompleteSpace K] (w : E) :
    w = (orthogonalProjection K w : E)+(orthogonalProjection K·óÆ w : E) := by
  obtain ‚ü®y, hy, z, hz, hwyz‚ü© := K.exists_sum_mem_mem_orthogonal w
  convert hwyz
  ¬∑
    exact eq_orthogonal_projection_of_mem_orthogonal' hy hz hwyz
  ¬∑
    rw [add_comm‚Çì] at hwyz
    refine' eq_orthogonal_projection_of_mem_orthogonal' hz _ hwyz
    simp [hy]

/--  In a complete space `E`, the projection maps onto a complete subspace `K` and its orthogonal
complement sum to the identity. -/
theorem id_eq_sum_orthogonal_projection_self_orthogonal_complement [CompleteSpace E] [CompleteSpace K] :
    ContinuousLinearMap.id ùïú E = K.subtypeL.comp (orthogonalProjection K)+K·óÆ.subtypeL.comp (orthogonalProjection K·óÆ) :=
  by
  ext w
  exact eq_sum_orthogonal_projection_self_orthogonal_complement K w

/--  The orthogonal projection is self-adjoint. -/
theorem inner_orthogonal_projection_left_eq_right [CompleteSpace E] [CompleteSpace K] (u v : E) :
    ‚ü™‚ÜëorthogonalProjection K u, v‚ü´ = ‚ü™u, orthogonalProjection K v‚ü´ := by
  nth_rw 0[eq_sum_orthogonal_projection_self_orthogonal_complement K v]
  nth_rw 1[eq_sum_orthogonal_projection_self_orthogonal_complement K u]
  rw [inner_add_left, inner_add_right,
    Submodule.inner_right_of_mem_orthogonal (Submodule.coe_mem (orthogonalProjection K u))
      (Submodule.coe_mem (orthogonalProjection K·óÆ v)),
    Submodule.inner_left_of_mem_orthogonal (Submodule.coe_mem (orthogonalProjection K v))
      (Submodule.coe_mem (orthogonalProjection K·óÆ u))]

open FiniteDimensional

/--  Given a finite-dimensional subspace `K‚ÇÇ`, and a subspace `K‚ÇÅ`
containined in it, the dimensions of `K‚ÇÅ` and the intersection of its
orthogonal subspace with `K‚ÇÇ` add to that of `K‚ÇÇ`. -/
theorem Submodule.finrank_add_inf_finrank_orthogonal {K‚ÇÅ K‚ÇÇ : Submodule ùïú E} [FiniteDimensional ùïú K‚ÇÇ] (h : K‚ÇÅ ‚â§ K‚ÇÇ) :
    (finrank ùïú K‚ÇÅ+finrank ùïú (K‚ÇÅ·óÆ‚äìK‚ÇÇ : Submodule ùïú E)) = finrank ùïú K‚ÇÇ := by
  have := Submodule.finite_dimensional_of_le h
  have := proper_is_R_or_C ùïú K‚ÇÅ
  have hd := Submodule.dim_sup_add_dim_inf_eq K‚ÇÅ (K‚ÇÅ·óÆ‚äìK‚ÇÇ)
  rw [‚Üê inf_assoc, (Submodule.orthogonal_disjoint K‚ÇÅ).eq_bot, bot_inf_eq, finrank_bot,
    Submodule.sup_orthogonal_inf_of_complete_space h] at hd
  rw [add_zero‚Çì] at hd
  exact hd.symm

/--  Given a finite-dimensional subspace `K‚ÇÇ`, and a subspace `K‚ÇÅ`
containined in it, the dimensions of `K‚ÇÅ` and the intersection of its
orthogonal subspace with `K‚ÇÇ` add to that of `K‚ÇÇ`. -/
theorem Submodule.finrank_add_inf_finrank_orthogonal' {K‚ÇÅ K‚ÇÇ : Submodule ùïú E} [FiniteDimensional ùïú K‚ÇÇ] (h : K‚ÇÅ ‚â§ K‚ÇÇ)
    {n : ‚Ñï} (h_dim : (finrank ùïú K‚ÇÅ+n) = finrank ùïú K‚ÇÇ) : finrank ùïú (K‚ÇÅ·óÆ‚äìK‚ÇÇ : Submodule ùïú E) = n := by
  rw [‚Üê add_right_inj‚Çì (finrank ùïú K‚ÇÅ)]
  simp [Submodule.finrank_add_inf_finrank_orthogonal h, h_dim]

/--  Given a finite-dimensional space `E` and subspace `K`, the dimensions of `K` and `K·óÆ` add to
that of `E`. -/
theorem Submodule.finrank_add_finrank_orthogonal [FiniteDimensional ùïú E] (K : Submodule ùïú E) :
    (finrank ùïú K+finrank ùïú K·óÆ) = finrank ùïú E := by
  convert Submodule.finrank_add_inf_finrank_orthogonal (le_top : K ‚â§ ‚ä§) using 1
  ¬∑
    rw [inf_top_eq]
  ¬∑
    simp

/--  Given a finite-dimensional space `E` and subspace `K`, the dimensions of `K` and `K·óÆ` add to
that of `E`. -/
theorem Submodule.finrank_add_finrank_orthogonal' [FiniteDimensional ùïú E] {K : Submodule ùïú E} {n : ‚Ñï}
    (h_dim : (finrank ùïú K+n) = finrank ùïú E) : finrank ùïú K·óÆ = n := by
  rw [‚Üê add_right_inj‚Çì (finrank ùïú K)]
  simp [Submodule.finrank_add_finrank_orthogonal, h_dim]

attribute [local instance] fact_finite_dimensional_of_finrank_eq_succ

/--  In a finite-dimensional inner product space, the dimension of the orthogonal complement of the
span of a nonzero vector is one less than the dimension of the space. -/
theorem finrank_orthogonal_span_singleton {n : ‚Ñï} [_i : Fact (finrank ùïú E = n+1)] {v : E} (hv : v ‚â† 0) :
    finrank ùïú (ùïú‚àôv)·óÆ = n :=
  Submodule.finrank_add_finrank_orthogonal' $ by
    simp [finrank_span_singleton hv, _i.elim, add_comm‚Çì]

/--  An element `œÜ` of the orthogonal group of `F` can be factored as a product of reflections, and
specifically at most as many reflections as the dimension of the complement of the fixed subspace
of `œÜ`. -/
theorem LinearIsometryEquiv.reflections_generate_dim_aux [FiniteDimensional ‚Ñù F] {n : ‚Ñï} (œÜ : F ‚âÉ‚Çó·µ¢[‚Ñù] F)
    (hn : finrank ‚Ñù (ContinuousLinearMap.id ‚Ñù F - œÜ.to_continuous_linear_equiv).ker·óÆ ‚â§ n) :
    ‚àÉ l : List F, l.length ‚â§ n ‚àß œÜ = (l.map fun v => reflection (‚Ñù‚àôv)·óÆ).Prod := by
  induction' n with n IH generalizing œÜ
  ¬∑
    refine' ‚ü®[], rfl.le, _‚ü©
    have : (ContinuousLinearMap.id ‚Ñù F - œÜ.to_continuous_linear_equiv).ker = ‚ä§ := by
      rwa [Nat.le_zero_iff‚Çì, finrank_eq_zero, Submodule.orthogonal_eq_bot_iff] at hn
    symm
    ext x
    simpa [sub_eq_zero] using congr_arg‚Çì (fun f : F ‚Üí‚Çó[‚Ñù] F => f x) (linear_map.ker_eq_top.mp this)
  ¬∑
    let W := (ContinuousLinearMap.id ‚Ñù F - œÜ.to_continuous_linear_equiv).ker
    have hW : ‚àÄ, ‚àÄ w ‚àà W, ‚àÄ, œÜ w = w := fun w hw => (sub_eq_zero.mp hw).symm
    by_cases' hn' : finrank ‚Ñù W·óÆ ‚â§ n
    ¬∑
      obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ‚ü© := IH œÜ hn'
      exact ‚ü®V, hV‚ÇÅ.trans n.le_succ, hV‚ÇÇ‚ü©
    have : Nontrivial W·óÆ :=
      nontrivial_of_finrank_pos
        (by
          linarith [zero_le n] : 0 < finrank ‚Ñù W·óÆ)
    obtain ‚ü®v, hv‚ü© := exists_ne (0 : W·óÆ)
    have hœÜv : œÜ v ‚àà W·óÆ := by
      intro w hw
      rw [‚Üê hW w hw, LinearIsometryEquiv.inner_map_map]
      exact v.prop w hw
    have hv' : (v : F) ‚àâ W := by
      intro h
      exact hv ((Submodule.mem_left_iff_eq_zero_of_disjoint W.orthogonal_disjoint).mp h)
    let x : F := v - œÜ v
    let œÅ := reflection (‚Ñù‚àôx)·óÆ
    let V := (ContinuousLinearMap.id ‚Ñù F - (œÜ.trans œÅ).toContinuousLinearEquiv).ker
    have hV : ‚àÄ w, œÅ (œÜ w) = w ‚Üí w ‚àà V := by
      intro w hw
      change w - œÅ (œÜ w) = 0
      rw [sub_eq_zero, hw]
    have H‚ÇÇV : W ‚â§ V := by
      intro w hw
      apply hV
      rw [hW w hw]
      refine' reflection_mem_subspace_eq_self _
      apply mem_orthogonal_singleton_of_inner_left
      exact Submodule.sub_mem _ v.prop hœÜv _ hw
    have H‚ÇÅV : (v : F) ‚àà V := by
      apply hV
      have : œÅ v = œÜ v :=
        reflection_sub
          (by
            simp )
      simp [‚Üê this, œÅ]
    have : finrank ‚Ñù V·óÆ ‚â§ n := by
      change finrank ‚Ñù W·óÆ ‚â§ n+1 at hn
      have : (finrank ‚Ñù W+1) ‚â§ finrank ‚Ñù V :=
        Submodule.finrank_lt_finrank_of_lt (SetLike.lt_iff_le_and_exists.2 ‚ü®H‚ÇÇV, v, H‚ÇÅV, hv'‚ü©)
      have : (finrank ‚Ñù V+finrank ‚Ñù V·óÆ) = finrank ‚Ñù F := V.finrank_add_finrank_orthogonal
      have : (finrank ‚Ñù W+finrank ‚Ñù W·óÆ) = finrank ‚Ñù F := W.finrank_add_finrank_orthogonal
      linarith
    obtain ‚ü®l, hl, hœÜl‚ü© := IH (œÜ.trans œÅ) this
    refine' ‚ü®x :: l, _, _‚ü©
    ¬∑
      simp [hl, Nat.succ_le_succ‚Çì]
    have := congr_arg‚Çì (fun œà => LinearIsometryEquiv.trans œà œÅ) hœÜl
    convert this using 1
    ¬∑
      simp [‚Üê LinearIsometryEquiv.trans_assoc œÜ œÅ œÅ]
    ¬∑
      change _ = _*_
      simp

/--  The orthogonal group of `F` is generated by reflections; specifically each element `œÜ` of the
orthogonal group is a product of at most as many reflections as the dimension of `F`.

Special case of the **Cartan‚ÄìDieudonn√© theorem**. -/
theorem LinearIsometryEquiv.reflections_generate_dim [FiniteDimensional ‚Ñù F] (œÜ : F ‚âÉ‚Çó·µ¢[‚Ñù] F) :
    ‚àÉ l : List F, l.length ‚â§ finrank ‚Ñù F ‚àß œÜ = (l.map fun v => reflection (‚Ñù‚àôv)·óÆ).Prod :=
  let ‚ü®l, hl‚ÇÅ, hl‚ÇÇ‚ü© := œÜ.reflections_generate_dim_aux le_rfl
  ‚ü®l, hl‚ÇÅ.trans (Submodule.finrank_le _), hl‚ÇÇ‚ü©

/--  The orthogonal group of `F` is generated by reflections. -/
theorem LinearIsometryEquiv.reflections_generate [FiniteDimensional ‚Ñù F] :
    Subgroup.closure (Set.Range fun v : F => reflection (‚Ñù‚àôv)·óÆ) = ‚ä§ := by
  rw [Subgroup.eq_top_iff']
  intro œÜ
  rcases œÜ.reflections_generate_dim with ‚ü®l, _, rfl‚ü©
  apply (Subgroup.closure _).list_prod_mem
  intro x hx
  rcases list.mem_map.mp hx with ‚ü®a, _, hax‚ü©
  exact Subgroup.subset_closure ‚ü®a, hax‚ü©

end Orthogonal

section OrthogonalFamily

variable {Œπ : Type _}

/--  An orthogonal family of subspaces of `E` satisfies `direct_sum.submodule_is_internal` (that is,
they provide an internal direct sum decomposition of `E`) if and only if their span has trivial
orthogonal complement. -/
theorem OrthogonalFamily.submodule_is_internal_iff_of_is_complete [DecidableEq Œπ] {V : Œπ ‚Üí Submodule ùïú E}
    (hV : OrthogonalFamily ùïú V) (hc : IsComplete (‚Üësupr V : Set E)) : DirectSum.SubmoduleIsInternal V ‚Üî (supr V)·óÆ = ‚ä• :=
  by
  have : CompleteSpace (‚Ü•supr V) := hc.complete_space_coe
  simp only [DirectSum.submodule_is_internal_iff_independent_and_supr_eq_top, hV.independent, true_and‚Çì,
    Submodule.orthogonal_eq_bot_iff]

/--  An orthogonal family of subspaces of `E` satisfies `direct_sum.submodule_is_internal` (that is,
they provide an internal direct sum decomposition of `E`) if and only if their span has trivial
orthogonal complement. -/
theorem OrthogonalFamily.submodule_is_internal_iff [DecidableEq Œπ] [FiniteDimensional ùïú E] {V : Œπ ‚Üí Submodule ùïú E}
    (hV : OrthogonalFamily ùïú V) : DirectSum.SubmoduleIsInternal V ‚Üî (supr V)·óÆ = ‚ä• := by
  have h := FiniteDimensional.proper_is_R_or_C ùïú (‚Ü•supr V)
  exact hV.submodule_is_internal_iff_of_is_complete (complete_space_coe_iff_is_complete.mp inferInstance)

end OrthogonalFamily

section orthonormalBasis

/-! ### Existence of Hilbert basis, orthonormal basis, etc. -/


variable {ùïú E} {v : Set E}

open FiniteDimensional Submodule Set

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v)
/--  An orthonormal set in an `inner_product_space` is maximal, if and only if the orthogonal
complement of its span is empty. -/
theorem maximal_orthonormal_iff_orthogonal_complement_eq_bot (hv : Orthonormal ùïú (coe‚Çì : v ‚Üí E)) :
    (‚àÄ u _ : u ‚äá v, Orthonormal ùïú (coe‚Çì : u ‚Üí E) ‚Üí u = v) ‚Üî (span ùïú v)·óÆ = ‚ä• := by
  rw [Submodule.eq_bot_iff]
  constructor
  ¬∑
    contrapose!
    rintro ‚ü®x, hx', hx‚ü©
    let e := (‚à•x‚à•‚Åª¬π : ùïú) ‚Ä¢ x
    have he : ‚à•e‚à• = 1 := by
      simp [e, norm_smul_inv_norm hx]
    have he' : e ‚àà (span ùïú v)·óÆ := smul_mem' _ _ hx'
    have he'' : e ‚àâ v := by
      intro hev
      have : e = 0 := by
        have : e ‚àà span ùïú v‚äì(span ùïú v)·óÆ := ‚ü®subset_span hev, he'‚ü©
        simpa [(span ùïú v).inf_orthogonal_eq_bot] using this
      have : e ‚â† 0 := hv.ne_zero ‚ü®e, hev‚ü©
      contradiction
    refine' ‚ü®v.insert e, v.subset_insert e, ‚ü®_, _‚ü©, (v.ne_insert_of_not_mem he'').symm‚ü©
    ¬∑
      rintro ‚ü®a, ha'‚ü©
      cases' eq_or_mem_of_mem_insert ha' with ha ha
      ¬∑
        simp [ha, he]
      ¬∑
        exact hv.1 ‚ü®a, ha‚ü©
    ¬∑
      have h_end : ‚àÄ, ‚àÄ a ‚àà v, ‚àÄ, ‚ü™a, e‚ü´ = 0 := by
        intro a ha
        exact he' a (Submodule.subset_span ha)
      rintro ‚ü®a, ha'‚ü©
      cases' eq_or_mem_of_mem_insert ha' with ha ha
      ¬∑
        rintro ‚ü®b, hb'‚ü© hab'
        have hb : b ‚àà v := by
          refine' mem_of_mem_insert_of_ne hb' _
          intro hbe'
          apply hab'
          simp [ha, hbe']
        rw [inner_eq_zero_sym]
        simpa [ha] using h_end b hb
      rintro ‚ü®b, hb'‚ü© hab'
      cases' eq_or_mem_of_mem_insert hb' with hb hb
      ¬∑
        simpa [hb] using h_end a ha
      have : (‚ü®a, ha‚ü© : v) ‚â† ‚ü®b, hb‚ü© := by
        intro hab''
        apply hab'
        simpa using hab''
      exact hv.2 this
  ¬∑
    simp only [subset.antisymm_iff]
    rintro h u (huv : v ‚äÜ u) hu
    refine' ‚ü®_, huv‚ü©
    intro x hxu
    refine' ((mt (h x)) (hu.ne_zero ‚ü®x, hxu‚ü©)).imp_symm _
    intro hxv y hy
    have hxv' : (‚ü®x, hxu‚ü© : u) ‚àâ (coe‚Çì ‚Åª¬π' v : Set u) := by
      simp [huv, hxv]
    obtain ‚ü®l, hl, rfl‚ü© : ‚àÉ l ‚àà Finsupp.supported ùïú ùïú (coe‚Çì ‚Åª¬π' v : Set u), (Finsupp.total (‚Ü•u) E ùïú coe‚Çì) l = y
    ¬∑
      rw [‚Üê Finsupp.mem_span_image_iff_total]
      simp [huv, inter_eq_self_of_subset_left, hy]
    exact hu.inner_finsupp_eq_zero hxv' hl

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v)
/--  An orthonormal set in an `inner_product_space` is maximal, if and only if the closure of its
span is the whole space. -/
theorem maximal_orthonormal_iff_dense_span [CompleteSpace E] (hv : Orthonormal ùïú (coe‚Çì : v ‚Üí E)) :
    (‚àÄ u _ : u ‚äá v, Orthonormal ùïú (coe‚Çì : u ‚Üí E) ‚Üí u = v) ‚Üî (span ùïú v).topologicalClosure = ‚ä§ := by
  rw [maximal_orthonormal_iff_orthogonal_complement_eq_bot hv, ‚Üê Submodule.orthogonal_eq_top_iff,
    (span ùïú v).orthogonal_orthogonal_eq_closure]

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v)
/--  Any orthonormal subset can be extended to an orthonormal set whose span is dense. -/
theorem exists_subset_is_orthonormal_dense_span [CompleteSpace E] (hv : Orthonormal ùïú (coe‚Çì : v ‚Üí E)) :
    ‚àÉ (u : _)(_ : u ‚äá v), Orthonormal ùïú (coe‚Çì : u ‚Üí E) ‚àß (span ùïú u).topologicalClosure = ‚ä§ := by
  obtain ‚ü®u, hus, hu, hu_max‚ü© := exists_maximal_orthonormal hv
  rw [maximal_orthonormal_iff_dense_span hu] at hu_max
  exact ‚ü®u, hus, hu, hu_max‚ü©

variable (ùïú E)

/--  An inner product space admits an orthonormal set whose span is dense. -/
theorem exists_is_orthonormal_dense_span [CompleteSpace E] :
    ‚àÉ u : Set E, Orthonormal ùïú (coe‚Çì : u ‚Üí E) ‚àß (span ùïú u).topologicalClosure = ‚ä§ :=
  let ‚ü®u, hus, hu, hu_max‚ü© := exists_subset_is_orthonormal_dense_span (orthonormal_empty ùïú E)
  ‚ü®u, hu, hu_max‚ü©

variable {ùïú E}

section FiniteDimensional

variable [FiniteDimensional ùïú E]

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v)
/--  An orthonormal set in a finite-dimensional `inner_product_space` is maximal, if and only if it
is a basis. -/
theorem maximal_orthonormal_iff_basis_of_finite_dimensional (hv : Orthonormal ùïú (coe‚Çì : v ‚Üí E)) :
    (‚àÄ u _ : u ‚äá v, Orthonormal ùïú (coe‚Çì : u ‚Üí E) ‚Üí u = v) ‚Üî ‚àÉ b : Basis v ùïú E, ‚áëb = coe‚Çì := by
  have := proper_is_R_or_C ùïú (span ùïú v)
  rw [maximal_orthonormal_iff_orthogonal_complement_eq_bot hv]
  have hv_compl : IsComplete (span ùïú v : Set E) := (span ùïú v).complete_of_finite_dimensional
  rw [Submodule.orthogonal_eq_bot_iff]
  have hv_coe : range (coe‚Çì : v ‚Üí E) = v := by
    simp
  constructor
  ¬∑
    refine' fun h => ‚ü®Basis.mk hv.linear_independent _, Basis.coe_mk _ _‚ü©
    convert h
  ¬∑
    rintro ‚ü®h, coe_h‚ü©
    rw [‚Üê h.span_eq, coe_h, hv_coe]

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v)
/--  In a finite-dimensional `inner_product_space`, any orthonormal subset can be extended to an
orthonormal basis. -/
theorem exists_subset_is_orthonormal_basis (hv : Orthonormal ùïú (coe‚Çì : v ‚Üí E)) :
    ‚àÉ (u : _)(_ : u ‚äá v)(b : Basis u ùïú E), Orthonormal ùïú b ‚àß ‚áëb = coe‚Çì := by
  obtain ‚ü®u, hus, hu, hu_max‚ü© := exists_maximal_orthonormal hv
  obtain ‚ü®b, hb‚ü© := (maximal_orthonormal_iff_basis_of_finite_dimensional hu).mp hu_max
  exact
    ‚ü®u, hus, b, by
      rwa [hb], hb‚ü©

variable (ùïú E)

/--  Index for an arbitrary orthonormal basis on a finite-dimensional `inner_product_space`. -/
def OrthonormalBasisIndex : Set E :=
  Classical.some (exists_subset_is_orthonormal_basis (orthonormal_empty ùïú E))

/--  A finite-dimensional `inner_product_space` has an orthonormal basis. -/
def orthonormalBasis : Basis (OrthonormalBasisIndex ùïú E) ùïú E :=
  (exists_subset_is_orthonormal_basis (orthonormal_empty ùïú E)).some_spec.some_spec.some

theorem orthonormal_basis_orthonormal : Orthonormal ùïú (orthonormalBasis ùïú E) :=
  (exists_subset_is_orthonormal_basis (orthonormal_empty ùïú E)).some_spec.some_spec.some_spec.1

@[simp]
theorem coe_orthonormal_basis : ‚áëorthonormalBasis ùïú E = coe‚Çì :=
  (exists_subset_is_orthonormal_basis (orthonormal_empty ùïú E)).some_spec.some_spec.some_spec.2

instance : Fintype (OrthonormalBasisIndex ùïú E) :=
  @IsNoetherian.fintypeBasisIndex _ _ _ _ _ _ _ (IsNoetherian.iff_fg.2 inferInstance) (orthonormalBasis ùïú E)

variable {ùïú E}

/--  An `n`-dimensional `inner_product_space` has an orthonormal basis indexed by `fin n`. -/
def finOrthonormalBasis {n : ‚Ñï} (hn : finrank ùïú E = n) : Basis (Fin‚Çì n) ùïú E :=
  have h : Fintype.card (OrthonormalBasisIndex ùïú E) = n := by
    rw [‚Üê finrank_eq_card_basis (orthonormalBasis ùïú E), hn]
  (orthonormalBasis ùïú E).reindex (Fintype.equivFinOfCardEq h)

theorem fin_orthonormal_basis_orthonormal {n : ‚Ñï} (hn : finrank ùïú E = n) : Orthonormal ùïú (finOrthonormalBasis hn) :=
  suffices Orthonormal ùïú (orthonormalBasis _ _ ‚àò Equiv‚Çì.symm _)by
    simp only [finOrthonormalBasis, Basis.coe_reindex]
    assumption
  (orthonormal_basis_orthonormal ùïú E).comp _ (Equiv‚Çì.injective _)

section SubordinateOrthonormalBasis

open DirectSum

variable {n : ‚Ñï} (hn : finrank ùïú E = n) {Œπ : Type _} [Fintype Œπ] [DecidableEq Œπ] {V : Œπ ‚Üí Submodule ùïú E}
  (hV : submodule_is_internal V)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Lean.Elab.Command.command_Irreducible_def___
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " Exhibit a bijection between `fin n` and the index set of a certain basis of an `n`-dimensional\ninner product space `E`.  This should not be accessed directly, but only via the subsequent API. -/")]
  []
  []
  []
  []
  [])
 "irreducible_def"
 (Command.declId `DirectSum.SubmoduleIsInternal.sigmaOrthonormalBasisIndexEquiv [])
 (Command.optDeclSig
  []
  [(Term.typeSpec
    ":"
    (Data.Equiv.Basic.¬´term_‚âÉ_¬ª
     (Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª
      "Œ£"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
      ", "
      (Term.app `OrthonormalBasisIndex [`ùïú (Term.app `V [`i])]))
     " ‚âÉ "
     (Term.app `Fin‚Çì [`n])))])
 (Command.declValSimple
  ":="
  (Term.let
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `b
     []
     []
     ":="
     (Term.app
      `hV.collected_basis
      [(Term.fun
        "fun"
        (Term.basicFun [(Term.simpleBinder [`i] [])] "=>" (Term.app `orthonormalBasis [`ùïú (Term.app `V [`i])])))])))
   []
   (¬´term_$__¬ª
    `Fintype.equivFinOfCardEq
    "$"
    (Term.app
     (Term.proj (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm) "." `trans)
     [`hn])))
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Elab.Command.command_Irreducible_def___', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `b
     []
     []
     ":="
     (Term.app
      `hV.collected_basis
      [(Term.fun
        "fun"
        (Term.basicFun [(Term.simpleBinder [`i] [])] "=>" (Term.app `orthonormalBasis [`ùïú (Term.app `V [`i])])))])))
   []
   (¬´term_$__¬ª
    `Fintype.equivFinOfCardEq
    "$"
    (Term.app
     (Term.proj (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm) "." `trans)
     [`hn])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_$__¬ª
   `Fintype.equivFinOfCardEq
   "$"
   (Term.app
    (Term.proj (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm) "." `trans)
    [`hn]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_$__¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm) "." `trans) [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `FiniteDimensional.finrank_eq_card_basis [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `FiniteDimensional.finrank_eq_card_basis
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `FiniteDimensional.finrank_eq_card_basis [`b]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `Fintype.equivFinOfCardEq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `hV.collected_basis
   [(Term.fun
     "fun"
     (Term.basicFun [(Term.simpleBinder [`i] [])] "=>" (Term.app `orthonormalBasis [`ùïú (Term.app `V [`i])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [`i] [])] "=>" (Term.app `orthonormalBasis [`ùïú (Term.app `V [`i])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `orthonormalBasis [`ùïú (Term.app `V [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `V [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `V
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `V [`i]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `orthonormalBasis
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hV.collected_basis
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.optDeclSig', expected 'Lean.Parser.Command.optDeclSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Data.Equiv.Basic.¬´term_‚âÉ_¬ª
   (Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª
    "Œ£"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
    ", "
    (Term.app `OrthonormalBasisIndex [`ùïú (Term.app `V [`i])]))
   " ‚âÉ "
   (Term.app `Fin‚Çì [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Equiv.Basic.¬´term_‚âÉ_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Fin‚Çì [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Fin‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 26 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  (Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª
   "Œ£"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
   ", "
   (Term.app `OrthonormalBasisIndex [`ùïú (Term.app `V [`i])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `OrthonormalBasisIndex [`ùïú (Term.app `V [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `V [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `V
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `V [`i]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `OrthonormalBasisIndex
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'-/-- failed to format: format: uncaught backtrack exception
/--
    Exhibit a bijection between `fin n` and the index set of a certain basis of an `n`-dimensional
    inner product space `E`.  This should not be accessed directly, but only via the subsequent API. -/
  irreducible_def
  DirectSum.SubmoduleIsInternal.sigmaOrthonormalBasisIndexEquiv
  : Œ£ i , OrthonormalBasisIndex ùïú V i ‚âÉ Fin‚Çì n
  :=
    let
      b := hV.collected_basis fun i => orthonormalBasis ùïú V i
      Fintype.equivFinOfCardEq $ FiniteDimensional.finrank_eq_card_basis b . symm . trans hn

/--  An `n`-dimensional `inner_product_space` equipped with a decomposition as an internal direct
sum has an orthonormal basis indexed by `fin n` and subordinate to that direct sum. -/
irreducible_def DirectSum.SubmoduleIsInternal.subordinateOrthonormalBasis : Basis (Fin‚Çì n) ùïú E :=
  (hV.collected_basis fun i => orthonormalBasis ùïú (V i)).reindex (hV.sigma_orthonormal_basis_index_equiv hn)

/--  An `n`-dimensional `inner_product_space` equipped with a decomposition as an internal direct
sum has an orthonormal basis indexed by `fin n` and subordinate to that direct sum. This function
provides the mapping by which it is subordinate. -/
def DirectSum.SubmoduleIsInternal.subordinateOrthonormalBasisIndex (a : Fin‚Çì n) : Œπ :=
  ((hV.sigma_orthonormal_basis_index_equiv hn).symm a).1

/--  The basis constructed in `orthogonal_family.subordinate_orthonormal_basis` is orthonormal. -/
theorem DirectSum.SubmoduleIsInternal.subordinate_orthonormal_basis_orthonormal (hV' : OrthogonalFamily ùïú V) :
    Orthonormal ùïú (hV.subordinate_orthonormal_basis hn) := by
  simp only [DirectSum.SubmoduleIsInternal.subordinateOrthonormalBasis, Basis.coe_reindex]
  have : Orthonormal ùïú (hV.collected_basis fun i => orthonormalBasis ùïú (V i)) :=
    hV.collected_basis_orthonormal hV' fun i => orthonormal_basis_orthonormal ùïú (V i)
  exact this.comp _ (Equiv‚Çì.injective _)

/--  The basis constructed in `orthogonal_family.subordinate_orthonormal_basis` is subordinate to
the `orthogonal_family` in question. -/
theorem DirectSum.SubmoduleIsInternal.subordinate_orthonormal_basis_subordinate (a : Fin‚Çì n) :
    hV.subordinate_orthonormal_basis hn a ‚àà V (hV.subordinate_orthonormal_basis_index hn a) := by
  simpa only [DirectSum.SubmoduleIsInternal.subordinateOrthonormalBasis, Basis.coe_reindex] using
    hV.collected_basis_mem (fun i => orthonormalBasis ùïú (V i)) ((hV.sigma_orthonormal_basis_index_equiv hn).symm a)

end SubordinateOrthonormalBasis

end FiniteDimensional

end orthonormalBasis

