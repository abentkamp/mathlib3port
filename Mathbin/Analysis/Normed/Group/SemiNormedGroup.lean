import Mathbin.Analysis.Normed.Group.Hom
import Mathbin.CategoryTheory.Limits.Shapes.Zero

/-!
# The category of seminormed groups

We define `SemiNormedGroup`, the category of seminormed groups and normed group homs between them,
as well as `SemiNormedGroup‚ÇÅ`, the subcategory of norm non-increasing morphisms.
-/


noncomputable section

universe u

open CategoryTheory

/-- The category of seminormed abelian groups and bounded group homomorphisms. -/
def SemiNormedGroup‚Çì : Type (u + 1) :=
  bundled SemiNormedGroup

namespace SemiNormedGroup‚Çì

instance bundled_hom : bundled_hom @NormedGroupHom :=
  ‚ü®@NormedGroupHom.toFun, @NormedGroupHom.id, @NormedGroupHom.comp, @NormedGroupHom.coe_inj‚ü©

deriving instance large_category, concrete_category for SemiNormedGroup‚Çì

instance : CoeSort SemiNormedGroup‚Çì (Type u) :=
  bundled.has_coe_to_sort

/-- Construct a bundled `SemiNormedGroup` from the underlying type and typeclass. -/
def of (M : Type u) [SemiNormedGroup M] : SemiNormedGroup‚Çì :=
  bundled.of M

instance (M : SemiNormedGroup‚Çì) : SemiNormedGroup M :=
  M.str

@[simp]
theorem coe_of (V : Type u) [SemiNormedGroup V] : (SemiNormedGroup‚Çì.of V : Type u) = V :=
  rfl

@[simp]
theorem coe_id (V : SemiNormedGroup‚Çì) : ‚áëùüô V = id :=
  rfl

@[simp]
theorem coe_comp {M N K : SemiNormedGroup‚Çì} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl

instance : HasZero SemiNormedGroup‚Çì :=
  ‚ü®of PUnit‚ü©

instance : Inhabited SemiNormedGroup‚Çì :=
  ‚ü®0‚ü©

instance : limits.has_zero_morphisms.{u, u + 1} SemiNormedGroup‚Çì :=
  {  }

@[simp]
theorem zero_apply {V W : SemiNormedGroup‚Çì} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl

instance has_zero_object : limits.has_zero_object SemiNormedGroup‚Çì.{u} where
  zero := 0
  uniqueTo := fun X =>
    { default := 0,
      uniq := fun a => by
        ext ‚ü®‚ü©
        exact a.map_zero }
  uniqueFrom := fun X =>
    { default := 0,
      uniq := fun f => by
        ext }

theorem iso_isometry_of_norm_noninc {V W : SemiNormedGroup‚Çì} (i : V ‚âÖ W) (h1 : i.hom.norm_noninc)
    (h2 : i.inv.norm_noninc) : Isometry i.hom := by
  apply NormedGroupHom.isometry_of_norm
  intro v
  apply le_antisymm‚Çì (h1 v)
  calc ‚à•v‚à• = ‚à•i.inv (i.hom v)‚à• := by
      rw [coe_hom_inv_id]_ ‚â§ ‚à•i.hom v‚à• := h2 _

end SemiNormedGroup‚Çì

/-- `SemiNormedGroup‚ÇÅ` is a type synonym for `SemiNormedGroup`,
which we shall equip with the category structure consisting only of the norm non-increasing maps.
-/
def SemiNormedGroup‚ÇÅ : Type (u + 1) :=
  bundled SemiNormedGroup

namespace SemiNormedGroup‚ÇÅ

instance : CoeSort SemiNormedGroup‚ÇÅ (Type u) :=
  bundled.has_coe_to_sort

instance : large_category.{u} SemiNormedGroup‚ÇÅ where
  hom := fun X Y => { f : NormedGroupHom X Y // f.norm_noninc }
  id := fun X => ‚ü®NormedGroupHom.id X, NormedGroupHom.NormNoninc.id‚ü©
  comp := fun X Y Z f g => ‚ü®(g : NormedGroupHom Y Z).comp (f : NormedGroupHom X Y), g.2.comp f.2‚ü©

@[ext]
theorem hom_ext {M N : SemiNormedGroup‚ÇÅ} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) : f = g :=
  Subtype.eq (NormedGroupHom.ext (congr_fun‚Çì w))

instance : concrete_category.{u} SemiNormedGroup‚ÇÅ where
  forget := { obj := fun X => X, map := fun X Y f => f }
  forget_faithful := {  }

/-- Construct a bundled `SemiNormedGroup‚ÇÅ` from the underlying type and typeclass. -/
def of (M : Type u) [SemiNormedGroup M] : SemiNormedGroup‚ÇÅ :=
  bundled.of M

instance (M : SemiNormedGroup‚ÇÅ) : SemiNormedGroup M :=
  M.str

/-- Promote a morphism in `SemiNormedGroup` to a morphism in `SemiNormedGroup‚ÇÅ`. -/
def mk_hom {M N : SemiNormedGroup‚Çì} (f : M ‚ü∂ N) (i : f.norm_noninc) : SemiNormedGroup‚ÇÅ.of M ‚ü∂ SemiNormedGroup‚ÇÅ.of N :=
  ‚ü®f, i‚ü©

@[simp]
theorem mk_hom_apply {M N : SemiNormedGroup‚Çì} (f : M ‚ü∂ N) (i : f.norm_noninc) x : mk_hom f i x = f x :=
  rfl

/-- Promote an isomorphism in `SemiNormedGroup` to an isomorphism in `SemiNormedGroup‚ÇÅ`. -/
@[simps]
def mk_iso {M N : SemiNormedGroup‚Çì} (f : M ‚âÖ N) (i : f.hom.norm_noninc) (i' : f.inv.norm_noninc) :
    SemiNormedGroup‚ÇÅ.of M ‚âÖ SemiNormedGroup‚ÇÅ.of N where
  hom := mk_hom f.hom i
  inv := mk_hom f.inv i'
  hom_inv_id' := by
    apply Subtype.eq
    exact f.hom_inv_id
  inv_hom_id' := by
    apply Subtype.eq
    exact f.inv_hom_id

instance : has_forget‚ÇÇ SemiNormedGroup‚ÇÅ SemiNormedGroup‚Çì where
  forget‚ÇÇ := { obj := fun X => X, map := fun X Y f => f.1 }

@[simp]
theorem coe_of (V : Type u) [SemiNormedGroup V] : (SemiNormedGroup‚ÇÅ.of V : Type u) = V :=
  rfl

@[simp]
theorem coe_id (V : SemiNormedGroup‚ÇÅ) : ‚áëùüô V = id :=
  rfl

@[simp]
theorem coe_comp {M N K : SemiNormedGroup‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl

@[simp]
theorem coe_comp' {M N K : SemiNormedGroup‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
    (f ‚â´ g : NormedGroupHom M K) = (‚Üëg : NormedGroupHom N K).comp (‚Üëf) :=
  rfl

instance : HasZero SemiNormedGroup‚ÇÅ :=
  ‚ü®of PUnit‚ü©

instance : Inhabited SemiNormedGroup‚ÇÅ :=
  ‚ü®0‚ü©

instance : limits.has_zero_morphisms.{u, u + 1} SemiNormedGroup‚ÇÅ where
  HasZero := fun X Y => { zero := ‚ü®0, NormedGroupHom.NormNoninc.zero‚ü© }
  comp_zero' := fun X Y f Z => by
    ext
    rfl
  zero_comp' := fun X Y Z f => by
    ext
    simp [coe_fn_coe_base']

@[simp]
theorem zero_apply {V W : SemiNormedGroup‚ÇÅ} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl

instance has_zero_object : limits.has_zero_object SemiNormedGroup‚ÇÅ.{u} where
  zero := 0
  uniqueTo := fun X =>
    { default := 0,
      uniq := fun a => by
        ext ‚ü®‚ü©
        exact a.1.map_zero }
  uniqueFrom := fun X =>
    { default := 0,
      uniq := fun f => by
        ext }

theorem iso_isometry {V W : SemiNormedGroup‚ÇÅ} (i : V ‚âÖ W) : Isometry i.hom := by
  apply NormedGroupHom.isometry_of_norm
  intro v
  apply le_antisymm‚Çì (i.hom.2 v)
  calc ‚à•v‚à• = ‚à•i.inv (i.hom v)‚à• := by
      rw [coe_hom_inv_id]_ ‚â§ ‚à•i.hom v‚à• := i.inv.2 _

end SemiNormedGroup‚ÇÅ

