import Mathbin.Topology.MetricSpace.Baire
import Mathbin.Analysis.NormedSpace.OperatorNorm
import Mathbin.Analysis.NormedSpace.AffineIsometry

/-!
# Banach open mapping theorem

This file contains the Banach open mapping theorem, i.e., the fact that a bijective
bounded linear map between Banach spaces has a bounded inverse.
-/


open Function Metric Set Filter Finset

open_locale Classical TopologicalSpace BigOperators Nnreal

variable {ùïú : Type _} [NondiscreteNormedField ùïú] {E : Type _} [NormedGroup E] [NormedSpace ùïú E] {F : Type _}
  [NormedGroup F] [NormedSpace ùïú F] (f : E ‚ÜíL[ùïú] F)

include ùïú

namespace ContinuousLinearMap

/--  A (possibly nonlinear) right inverse to a continuous linear map, which doesn't have to be
linear itself but which satisfies a bound `‚à•inverse x‚à• ‚â§ C * ‚à•x‚à•`. A surjective continuous linear
map doesn't always have a continuous linear right inverse, but it always has a nonlinear inverse
in this sense, by Banach's open mapping theorem. -/
structure nonlinear_right_inverse where
  toFun : F ‚Üí E
  nnnorm : ‚Ñù‚â•0
  bound' : ‚àÄ y, ‚à•to_fun y‚à• ‚â§ nnnorm*‚à•y‚à•
  right_inv' : ‚àÄ y, f (to_fun y) = y

instance : CoeFun (nonlinear_right_inverse f) fun _ => F ‚Üí E :=
  ‚ü®fun fsymm => fsymm.to_fun‚ü©

@[simp]
theorem nonlinear_right_inverse.right_inv {f : E ‚ÜíL[ùïú] F} (fsymm : nonlinear_right_inverse f) (y : F) :
    f (fsymm y) = y :=
  fsymm.right_inv' y

theorem nonlinear_right_inverse.bound {f : E ‚ÜíL[ùïú] F} (fsymm : nonlinear_right_inverse f) (y : F) :
    ‚à•fsymm y‚à• ‚â§ fsymm.nnnorm*‚à•y‚à• :=
  fsymm.bound' y

end ContinuousLinearMap

/--  Given a continuous linear equivalence, the inverse is in particular an instance of
`nonlinear_right_inverse` (which turns out to be linear). -/
noncomputable def ContinuousLinearEquiv.toNonlinearRightInverse (f : E ‚âÉL[ùïú] F) :
    ContinuousLinearMap.NonlinearRightInverse (f : E ‚ÜíL[ùïú] F) :=
  { toFun := f.inv_fun, nnnorm := nnnorm (f.symm : F ‚ÜíL[ùïú] E),
    bound' := fun y => ContinuousLinearMap.le_op_norm (f.symm : F ‚ÜíL[ùïú] E) _, right_inv' := f.apply_symm_apply }

noncomputable instance (f : E ‚âÉL[ùïú] F) : Inhabited (ContinuousLinearMap.NonlinearRightInverse (f : E ‚ÜíL[ùïú] F)) :=
  ‚ü®f.to_nonlinear_right_inverse‚ü©

/-! ### Proof of the Banach open mapping theorem -/


variable [CompleteSpace F]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    "\nFirst step of the proof of the Banach open mapping theorem (using completeness of `F`):\nby Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.\nRescaling everything, it follows that any `y ‚àà F` is arbitrarily well approached by\nimages of elements of norm at most `C * ‚à•y‚à•`.\nFor further use, we will only need such an element whose image\nis within distance `‚à•y‚à•/2` of `y`, to apply an iterative process. -/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `exists_approx_preimage_norm_le [])
  (Command.declSig
   [(Term.explicitBinder "(" [`surj] [":" (Term.app `surjective [`f])] [] ")")]
   (Term.typeSpec
    ":"
    (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
     "‚àÉ"
     `C
     (Mathlib.ExtendedBinder.¬´binderTerm‚â•_¬ª "‚â•" (numLit "0"))
     ","
     (Term.forall
      "‚àÄ"
      [(Term.simpleBinder [`y] [])]
      ","
      (¬´term‚àÉ_,_¬ª
       "‚àÉ"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
       ","
       (¬´term_‚àß_¬ª
        (¬´term_‚â§_¬ª
         (Term.app `dist [(Term.app `f [`x]) `y])
         "‚â§"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
        "‚àß"
        (¬´term_‚â§_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
         "‚â§"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`A []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
               "‚ãÉ"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] [":" (term‚Ñï "‚Ñï")]))
               ", "
               (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))]))
              "="
              `univ))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `subset.antisymm
                  [(Term.app `subset_univ [(Term.hole "_")])
                   (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))]))
                [])
               (group
                (Tactic.rcases
                 "rcases"
                 [(Tactic.casesTarget [] (Term.app `surj [`y]))]
                 ["with"
                  (Tactic.rcasesPat.tuple
                   "‚ü®"
                   [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
                    ","
                    (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx)]) [])]
                   "‚ü©")])
                [])
               (group
                (Tactic.rcases
                 "rcases"
                 [(Tactic.casesTarget
                   []
                   (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")]))]
                 ["with"
                  (Tactic.rcasesPat.tuple
                   "‚ü®"
                   [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
                    ","
                    (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hn)]) [])]
                   "‚ü©")])
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  (Term.proj `mem_Union "." (fieldIdx "2"))
                  [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")]))
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
                  [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")]))
                [])
               (group
                (tacticRwa__
                 "rwa"
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                  "]")
                 [])
                [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (¬´term‚àÉ_,_¬ª
              "‚àÉ"
              (Lean.explicitBinders
               [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `n)] ":" (term‚Ñï "‚Ñï") ")")
                (Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `x)] ":" (Term.hole "_") ")")])
              ","
              (Init.Core.¬´term_‚àà_¬ª
               `x
               " ‚àà "
               (Term.app
                `Interior
                [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])]))))]
           ":="
           (Term.app
            `nonempty_interior_of_Union_of_closed
            [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure)) `A]))))
        [])
       (group
        (Tactic.simp
         "simp"
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `mem_interior_iff_mem_nhds) "," (Tactic.simpLemma [] [] `Metric.mem_nhds_iff)]
          "]"]
         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
        [])
       (group
        (Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `this)]
         ["with"
          (Tactic.rcasesPat.tuple
           "‚ü®"
           [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
            ","
            (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `a)]) [])
            ","
            (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµ)]) [])
            ","
            (Tactic.rcasesPatLo
             (Tactic.rcasesPatMed
              [(Tactic.rcasesPat.tuple
                "‚ü®"
                [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµpos)]) [])
                 ","
                 (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `H)]) [])]
                "‚ü©")])
             [])]
           "‚ü©")])
        [])
       (group
        (Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] (Term.app `NormedField.exists_one_lt_norm [`ùïú]))]
         ["with"
          (Tactic.rcasesPat.tuple
           "‚ü®"
           [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `c)]) [])
            ","
            (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hc)]) [])]
           "‚ü©")])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "‚ü®"
          [(Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
             "*"
             (numLit "2"))
            "*"
            `n)
           ","
           (Term.hole "_")
           ","
           (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
          "‚ü©"))
        [])
       (group
        (Tactic.¬´tactic¬∑._¬ª
         "¬∑"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.refine'
              "refine'"
              (Term.app
               `mul_nonneg
               [(Term.app
                 `mul_nonneg
                 [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
                (Term.hole "_")]))
             [])
            (group
             (exacts
              "exacts"
              "["
              [(Term.app
                (Term.proj `inv_nonneg "." (fieldIdx "2"))
                [(Term.app
                  `div_nonneg
                  [(Term.app `le_of_lt‚Çì [`Œµpos])
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])])
               ","
               `n.cast_nonneg]
              "]")
             [])])))
        [])
       (group
        (Tactic.¬´tactic¬∑._¬ª
         "¬∑"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.byCases' "by_cases'" [`hy ":"] (¬´term_=_¬ª `y "=" (numLit "0"))) [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.use "use" [(numLit "0")]) [])
                 (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] []) [])])))
             [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget [] (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy]))]
                   ["with"
                    (Tactic.rcasesPat.tuple
                     "‚ü®"
                     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `d)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hd)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `ydlt)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `leyd)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `dinv)]) [])]
                     "‚ü©")])
                  [])
                 (group
                  (Tactic.tacticLet_
                   "let"
                   (Term.letDecl
                    (Term.letIdDecl
                     `Œ¥
                     []
                     ":="
                     (¬´term_/_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                      "/"
                      (numLit "4")))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`Œ¥pos []]
                     [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `Œ¥))]
                     ":="
                     (Term.app
                      `div_pos
                      [(Term.app
                        `mul_pos
                        [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
                         (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Init.Core.¬´term_‚àà_¬ª
                        (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                        " ‚àà "
                        (Term.app `ball [`a `Œµ])))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.simp
                           "simp"
                           []
                           []
                           ["["
                            [(Tactic.simpLemma [] [] `dist_eq_norm)
                             ","
                             (Tactic.simpLemma
                              []
                              []
                              (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
                            "]"]
                           [])
                          [])]))))))
                  [])
                 (group
                  (Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget
                     []
                     (Term.app
                      (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                      [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
                   ["with"
                    (Tactic.rcasesPat.tuple
                     "‚ü®"
                     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅim)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÅ)]) [])]
                     "‚ü©")])
                  [])
                 (group
                  (Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget
                     []
                     (Term.app
                      (Term.proj
                       (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                       "."
                       (fieldIdx "1"))
                      [`z‚ÇÅim]))]
                   ["with"
                    (Tactic.rcasesPat.tuple
                     "‚ü®"
                     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÅ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÅ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÅ)]) [])]
                     "‚ü©")])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÅ)] "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                    "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÅ] []))])
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ])))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.¬´tactic¬∑._¬ª
                           "¬∑"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
                          [])]))))))
                  [])
                 (group
                  (Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget
                     []
                     (Term.app
                      (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                      [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
                   ["with"
                    (Tactic.rcasesPat.tuple
                     "‚ü®"
                     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇim)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÇ)]) [])]
                     "‚ü©")])
                  [])
                 (group
                  (Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget
                     []
                     (Term.app
                      (Term.proj
                       (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                       "."
                       (fieldIdx "1"))
                      [`z‚ÇÇim]))]
                   ["with"
                    (Tactic.rcasesPat.tuple
                     "‚ü®"
                     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÇ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÇ)]) [])
                      ","
                      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÇ)]) [])]
                     "‚ü©")])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÇ)] "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÇ] []))])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                    "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÇ] []))])
                  [])
                 (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)))) [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`I []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                         "‚à•")
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        (¬´term_=_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                          "‚à•")
                         "="
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           (¬´term_-_¬ª
                            (Term.app `f [`x‚ÇÅ])
                            "-"
                            (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                           "-"
                           (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
                          "‚à•"))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group (Tactic.congr "congr" [(numLit "1")] []) [])
                            (group
                             (Tactic.simp
                              "simp"
                              []
                              ["only"]
                              ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
                              [])
                             [])
                            (group (Tactic.abel "abel" [] []) [])]))))
                       (calcStep
                        (¬´term_‚â§_¬ª
                         (Term.hole "_")
                         "‚â§"
                         (Init.Logic.¬´term_+_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª
                            (Term.app `f [`x‚ÇÅ])
                            "-"
                            (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                           "‚à•")
                          "+"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
                        ":="
                        (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
                       (calcStep
                        (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group (Tactic.apply "apply" `add_le_add) [])
                            (group
                             (Tactic.¬´tactic¬∑._¬ª
                              "¬∑"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq
                                    "["
                                    [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                                    "]")
                                   [])
                                  [])
                                 (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
                             [])
                            (group
                             (Tactic.¬´tactic¬∑._¬ª
                              "¬∑"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq
                                    "["
                                    [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                                    "]")
                                   [])
                                  [])
                                 (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
                        ":="
                        (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`J []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                          "-"
                          `y)
                         "‚à•")
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        (¬´term_=_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                           "-"
                           `y)
                          "‚à•")
                         "="
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
                            " ‚Ä¢ "
                            `y))
                          "‚à•"))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (tacticRwa__
                              "rwa"
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
                                ","
                                (Tactic.rwRule [] `inv_mul_cancel)
                                ","
                                (Tactic.rwRule [] `one_smul)]
                               "]")
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                           (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
                           " ‚Ä¢ "
                           (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                          "‚à•"))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                           "‚à•"
                           (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                           "‚à•")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                               "]")
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_‚â§_¬ª
                         (Term.hole "_")
                         "‚â§"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                          "*"
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
                            (group
                             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") [])
                             [])
                            (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (¬´term_/_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                          "/"
                          (numLit "2")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
                            (group (Tactic.Ring.tacticRing "ring") [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.simp
                              "simp"
                              []
                              []
                              ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm)] "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`J] []))])
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`K []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                         "‚à•")
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                           "*"
                           (numLit "2"))
                          "*"
                          (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        (¬´term_=_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                          "‚à•")
                         "="
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                               "]")
                              [])
                             [])]))))
                       (calcStep
                        (¬´term_‚â§_¬ª
                         (Term.hole "_")
                         "‚â§"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                          "*"
                          (Init.Logic.¬´term_+_¬ª `n "+" `n)))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               `mul_le_mul
                               [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                             [])
                            (group
                             (Tactic.¬´tactic¬∑._¬ª
                              "¬∑"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    `le_trans‚Çì
                                    [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                                     (Term.app
                                      `add_le_add
                                      [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
                                  [])])))
                             [])
                            (group
                             (Tactic.¬´tactic¬∑._¬ª
                              "¬∑"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.apply
                                   "apply"
                                   (Term.app
                                    `mul_nonneg
                                    [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                                     (Term.app `norm_nonneg [(Term.hole "_")])]))
                                  [])
                                 (group
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    (Term.proj `inv_nonneg "." (fieldIdx "2"))
                                    [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
                                  [])])))
                             [])]))))
                       (calcStep
                        (¬´term_=_¬ª
                         (Term.hole "_")
                         "="
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Finset.Data.Finset.Fold.¬´term_*_¬ª
                             (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                            "*"
                            (numLit "2"))
                           "*"
                           (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.anonymousCtor
                    "‚ü®"
                    [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K]
                    "‚ü©"))
                  [])])))
             [])])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
              "‚ãÉ"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] [":" (term‚Ñï "‚Ñï")]))
              ", "
              (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))]))
             "="
             `univ))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `subset.antisymm
                 [(Term.app `subset_univ [(Term.hole "_")])
                  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))]))
               [])
              (group
               (Tactic.rcases
                "rcases"
                [(Tactic.casesTarget [] (Term.app `surj [`y]))]
                ["with"
                 (Tactic.rcasesPat.tuple
                  "‚ü®"
                  [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
                   ","
                   (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx)]) [])]
                  "‚ü©")])
               [])
              (group
               (Tactic.rcases
                "rcases"
                [(Tactic.casesTarget [] (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")]))]
                ["with"
                 (Tactic.rcasesPat.tuple
                  "‚ü®"
                  [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
                   ","
                   (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hn)]) [])]
                  "‚ü©")])
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")]))
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
                 [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")]))
               [])
              (group
               (tacticRwa__
                "rwa"
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                 "]")
                [])
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (¬´term‚àÉ_,_¬ª
             "‚àÉ"
             (Lean.explicitBinders
              [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `n)] ":" (term‚Ñï "‚Ñï") ")")
               (Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `x)] ":" (Term.hole "_") ")")])
             ","
             (Init.Core.¬´term_‚àà_¬ª
              `x
              " ‚àà "
              (Term.app
               `Interior
               [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])]))))]
          ":="
          (Term.app
           `nonempty_interior_of_Union_of_closed
           [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure)) `A]))))
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `mem_interior_iff_mem_nhds) "," (Tactic.simpLemma [] [] `Metric.mem_nhds_iff)]
         "]"]
        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] `this)]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `a)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµ)]) [])
           ","
           (Tactic.rcasesPatLo
            (Tactic.rcasesPatMed
             [(Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµpos)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `H)]) [])]
               "‚ü©")])
            [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] (Term.app `NormedField.exists_one_lt_norm [`ùïú]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `c)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hc)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.anonymousCtor
         "‚ü®"
         [(Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
            "*"
            (numLit "2"))
           "*"
           `n)
          ","
          (Term.hole "_")
          ","
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
         "‚ü©"))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.refine'
             "refine'"
             (Term.app
              `mul_nonneg
              [(Term.app
                `mul_nonneg
                [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
               (Term.hole "_")]))
            [])
           (group
            (exacts
             "exacts"
             "["
             [(Term.app
               (Term.proj `inv_nonneg "." (fieldIdx "2"))
               [(Term.app
                 `div_nonneg
                 [(Term.app `le_of_lt‚Çì [`Œµpos])
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])])
              ","
              `n.cast_nonneg]
             "]")
            [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.byCases' "by_cases'" [`hy ":"] (¬´term_=_¬ª `y "=" (numLit "0"))) [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.use "use" [(numLit "0")]) [])
                (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] []) [])])))
            [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget [] (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy]))]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `d)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hd)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `ydlt)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `leyd)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `dinv)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `Œ¥
                    []
                    ":="
                    (¬´term_/_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                     "/"
                     (numLit "4")))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`Œ¥pos []]
                    [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `Œ¥))]
                    ":="
                    (Term.app
                     `div_pos
                     [(Term.app
                       `mul_pos
                       [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
                        (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.¬´term_‚àà_¬ª
                       (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                       " ‚àà "
                       (Term.app `ball [`a `Œµ])))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.simp
                          "simp"
                          []
                          []
                          ["["
                           [(Tactic.simpLemma [] [] `dist_eq_norm)
                            ","
                            (Tactic.simpLemma
                             []
                             []
                             (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
                           "]"]
                          [])
                         [])]))))))
                 [])
                (group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget
                    []
                    (Term.app
                     (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                     [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅim)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÅ)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget
                    []
                    (Term.app
                     (Term.proj
                      (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                      "."
                      (fieldIdx "1"))
                     [`z‚ÇÅim]))]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÅ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÅ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÅ)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÅ)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                   "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÅ] []))])
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ])))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.¬´tactic¬∑._¬ª
                          "¬∑"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
                         [])]))))))
                 [])
                (group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget
                    []
                    (Term.app
                     (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                     [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇim)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÇ)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget
                    []
                    (Term.app
                     (Term.proj
                      (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                      "."
                      (fieldIdx "1"))
                     [`z‚ÇÇim]))]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÇ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÇ)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÇ)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÇ)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÇ] []))])
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
                   "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÇ] []))])
                 [])
                (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)))) [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`I []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                        "‚à•")
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       (¬´term_=_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                         "‚à•")
                        "="
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          (¬´term_-_¬ª
                           (Term.app `f [`x‚ÇÅ])
                           "-"
                           (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                          "-"
                          (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
                         "‚à•"))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.congr "congr" [(numLit "1")] []) [])
                           (group
                            (Tactic.simp
                             "simp"
                             []
                             ["only"]
                             ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
                             [])
                            [])
                           (group (Tactic.abel "abel" [] []) [])]))))
                      (calcStep
                       (¬´term_‚â§_¬ª
                        (Term.hole "_")
                        "‚â§"
                        (Init.Logic.¬´term_+_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª
                           (Term.app `f [`x‚ÇÅ])
                           "-"
                           (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                          "‚à•")
                         "+"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
                       ":="
                       (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
                      (calcStep
                       (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.apply "apply" `add_le_add) [])
                           (group
                            (Tactic.¬´tactic¬∑._¬ª
                             "¬∑"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.rwSeq
                                  "rw"
                                  []
                                  (Tactic.rwRuleSeq
                                   "["
                                   [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                                   "]")
                                  [])
                                 [])
                                (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
                            [])
                           (group
                            (Tactic.¬´tactic¬∑._¬ª
                             "¬∑"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.rwSeq
                                  "rw"
                                  []
                                  (Tactic.rwRuleSeq
                                   "["
                                   [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                                   "]")
                                  [])
                                 [])
                                (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
                       ":="
                       (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))]))))
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`J []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (¬´term_-_¬ª
                         (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                         "-"
                         `y)
                        "‚à•")
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       (¬´term_=_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                          "-"
                          `y)
                         "‚à•")
                        "="
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (¬´term_-_¬ª
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
                           " ‚Ä¢ "
                           `y))
                         "‚à•"))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (tacticRwa__
                             "rwa"
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
                               ","
                               (Tactic.rwRule [] `inv_mul_cancel)
                               ","
                               (Tactic.rwRule [] `one_smul)]
                              "]")
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                          (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
                          " ‚Ä¢ "
                          (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                         "‚à•"))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                          "‚à•"
                          (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                          "‚à•")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                              "]")
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_‚â§_¬ª
                        (Term.hole "_")
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                         "*"
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
                           (group
                            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") [])
                            [])
                           (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_/_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                         "/"
                         (numLit "2")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
                           (group (Tactic.Ring.tacticRing "ring") [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)]
                              "]")
                             [])
                            [])
                           (group
                            (Tactic.simp
                             "simp"
                             []
                             []
                             ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`J] []))])
                 [])
                (group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`K []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                        "‚à•"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                        "‚à•")
                       "‚â§"
                       (Finset.Data.Finset.Fold.¬´term_*_¬ª
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                          "*"
                          (numLit "2"))
                         "*"
                         (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       (¬´term_=_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                         "‚à•"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                         "‚à•")
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                              "]")
                             [])
                            [])]))))
                      (calcStep
                       (¬´term_‚â§_¬ª
                        (Term.hole "_")
                        "‚â§"
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                         "*"
                         (Init.Logic.¬´term_+_¬ª `n "+" `n)))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.refine'
                             "refine'"
                             (Term.app
                              `mul_le_mul
                              [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                            [])
                           (group
                            (Tactic.¬´tactic¬∑._¬ª
                             "¬∑"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.exact
                                  "exact"
                                  (Term.app
                                   `le_trans‚Çì
                                   [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                                    (Term.app
                                     `add_le_add
                                     [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
                                 [])])))
                            [])
                           (group
                            (Tactic.¬´tactic¬∑._¬ª
                             "¬∑"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.apply
                                  "apply"
                                  (Term.app
                                   `mul_nonneg
                                   [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                                    (Term.app `norm_nonneg [(Term.hole "_")])]))
                                 [])
                                (group
                                 (Tactic.exact
                                  "exact"
                                  (Term.app
                                   (Term.proj `inv_nonneg "." (fieldIdx "2"))
                                   [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
                                 [])])))
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (Finset.Data.Finset.Fold.¬´term_*_¬ª
                         (Finset.Data.Finset.Fold.¬´term_*_¬ª
                          (Finset.Data.Finset.Fold.¬´term_*_¬ª
                           (Finset.Data.Finset.Fold.¬´term_*_¬ª
                            (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                           "*"
                           (numLit "2"))
                          "*"
                          (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.anonymousCtor
                   "‚ü®"
                   [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K]
                   "‚ü©"))
                 [])])))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.byCases' "by_cases'" [`hy ":"] (¬´term_=_¬ª `y "=" (numLit "0"))) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.use "use" [(numLit "0")]) [])
           (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] []) [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy]))]
             ["with"
              (Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `d)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hd)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `ydlt)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `leyd)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `dinv)]) [])]
               "‚ü©")])
            [])
           (group
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `Œ¥
               []
               ":="
               (¬´term_/_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                "/"
                (numLit "4")))))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`Œ¥pos []]
               [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `Œ¥))]
               ":="
               (Term.app
                `div_pos
                [(Term.app
                  `mul_pos
                  [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
                   (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.¬´term_‚àà_¬ª
                  (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                  " ‚àà "
                  (Term.app `ball [`a `Œµ])))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["["
                      [(Tactic.simpLemma [] [] `dist_eq_norm)
                       ","
                       (Tactic.simpLemma [] [] (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
                      "]"]
                     [])
                    [])]))))))
            [])
           (group
            (Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
             ["with"
              (Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅim)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÅ)]) [])]
               "‚ü©")])
            [])
           (group
            (Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
                [`z‚ÇÅim]))]
             ["with"
              (Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÅ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÅ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÅ)]) [])]
               "‚ü©")])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÅ)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÅ] []))])
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ])))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.¬´tactic¬∑._¬ª
                     "¬∑"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
                    [])]))))))
            [])
           (group
            (Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
                [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
             ["with"
              (Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇim)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÇ)]) [])]
               "‚ü©")])
            [])
           (group
            (Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
                [`z‚ÇÇim]))]
             ["with"
              (Tactic.rcasesPat.tuple
               "‚ü®"
               [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÇ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÇ)]) [])
                ","
                (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÇ)]) [])]
               "‚ü©")])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÇ)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÇ] []))])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÇ] []))])
            [])
           (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)))) [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`I []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚â§_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                   "‚à•")
                  "‚â§"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))]
               ":="
               (calc
                "calc"
                [(calcStep
                  (¬´term_=_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                    "‚à•")
                   "="
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª
                     (¬´term_-_¬ª
                      (Term.app `f [`x‚ÇÅ])
                      "-"
                      (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                     "-"
                     (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
                    "‚à•"))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.congr "congr" [(numLit "1")] []) [])
                      (group
                       (Tactic.simp
                        "simp"
                        []
                        ["only"]
                        ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
                        [])
                       [])
                      (group (Tactic.abel "abel" [] []) [])]))))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (Init.Logic.¬´term_+_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª
                      (Term.app `f [`x‚ÇÅ])
                      "-"
                      (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                     "‚à•")
                    "+"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
                  ":="
                  (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
                 (calcStep
                  (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.apply "apply" `add_le_add) [])
                      (group
                       (Tactic.¬´tactic¬∑._¬ª
                        "¬∑"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                              "]")
                             [])
                            [])
                           (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
                       [])
                      (group
                       (Tactic.¬´tactic¬∑._¬ª
                        "¬∑"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                              "]")
                             [])
                            [])
                           (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
                  ":="
                  (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))]))))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`J []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚â§_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (¬´term_-_¬ª
                    (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                    "-"
                    `y)
                   "‚à•")
                  "‚â§"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
               ":="
               (calc
                "calc"
                [(calcStep
                  (¬´term_=_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª
                     (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
                     "-"
                     `y)
                    "‚à•")
                   "="
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (¬´term_-_¬ª
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
                      " ‚Ä¢ "
                      `y))
                    "‚à•"))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (tacticRwa__
                        "rwa"
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
                          ","
                          (Tactic.rwRule [] `inv_mul_cancel)
                          ","
                          (Tactic.rwRule [] `one_smul)]
                         "]")
                        [])
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                     (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
                     " ‚Ä¢ "
                     (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                    "‚à•"))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
                        [])
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                     "‚à•")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                         "]")
                        [])
                       [])]))))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                    "*"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
                      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") []) [])
                      (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_/_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                    "/"
                    (numLit "2")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
                      (group (Tactic.Ring.tacticRing "ring") [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
                        [])
                       [])
                      (group
                       (Tactic.simp
                        "simp"
                        []
                        []
                        ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
                        [])
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`J] []))])
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`K []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚â§_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                   "‚à•"
                   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                   "‚à•")
                  "‚â§"
                  (Finset.Data.Finset.Fold.¬´term_*_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                     "*"
                     (numLit "2"))
                    "*"
                    (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
               ":="
               (calc
                "calc"
                [(calcStep
                  (¬´term_=_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                    "‚à•"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
                    "‚à•")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                         "]")
                        [])
                       [])]))))
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                    "*"
                    (Init.Logic.¬´term_+_¬ª `n "+" `n)))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `mul_le_mul
                         [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                       [])
                      (group
                       (Tactic.¬´tactic¬∑._¬ª
                        "¬∑"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `le_trans‚Çì
                              [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                               (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
                            [])])))
                       [])
                      (group
                       (Tactic.¬´tactic¬∑._¬ª
                        "¬∑"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.apply
                             "apply"
                             (Term.app
                              `mul_nonneg
                              [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                               (Term.app `norm_nonneg [(Term.hole "_")])]))
                            [])
                           (group
                            (Tactic.exact
                             "exact"
                             (Term.app
                              (Term.proj `inv_nonneg "." (fieldIdx "2"))
                              [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
                            [])])))
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (Finset.Data.Finset.Fold.¬´term_*_¬ª
                       (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                      "*"
                      (numLit "2"))
                     "*"
                     (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.anonymousCtor
              "‚ü®"
              [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K]
              "‚ü©"))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `d)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hd)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `ydlt)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `leyd)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `dinv)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `Œ¥
          []
          ":="
          (¬´term_/_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
           "/"
           (numLit "4")))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`Œ¥pos []]
          [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `Œ¥))]
          ":="
          (Term.app
           `div_pos
           [(Term.app
             `mul_pos
             [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
              (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.¬´term_‚àà_¬ª
             (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
             " ‚àà "
             (Term.app `ball [`a `Œµ])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.simp
                "simp"
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `dist_eq_norm)
                  ","
                  (Tactic.simpLemma [] [] (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
                 "]"]
                [])
               [])]))))))
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget
          []
          (Term.app
           (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
           [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅim)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÅ)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget
          []
          (Term.app
           (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
           [`z‚ÇÅim]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÅ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÅ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÅ)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÅ)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
         "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÅ] []))])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
               [])]))))))
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget
          []
          (Term.app
           (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
           [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇim)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÇ)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget
          []
          (Term.app
           (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
           [`z‚ÇÇim]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÇ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÇ)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÇ)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÇ)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÇ] []))])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
         "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÇ] []))])
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`I []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
              "‚à•"
              (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
              "‚à•")
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))]
          ":="
          (calc
           "calc"
           [(calcStep
             (¬´term_=_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
               "‚à•")
              "="
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª
                (¬´term_-_¬ª
                 (Term.app `f [`x‚ÇÅ])
                 "-"
                 (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                "-"
                (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
               "‚à•"))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.congr "congr" [(numLit "1")] []) [])
                 (group
                  (Tactic.simp
                   "simp"
                   []
                   ["only"]
                   ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
                   [])
                  [])
                 (group (Tactic.abel "abel" [] []) [])]))))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (Init.Logic.¬´term_+_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                "‚à•"
                (¬´term_-_¬ª
                 (Term.app `f [`x‚ÇÅ])
                 "-"
                 (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
                "‚à•")
               "+"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
             ":="
             (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
            (calcStep
             (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.apply "apply" `add_le_add) [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                         "]")
                        [])
                       [])
                      (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
                  [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)]
                         "]")
                        [])
                       [])
                      (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
                  [])]))))
            (calcStep
             (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
             ":="
             (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`J []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
              "‚à•"
              (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
              "‚à•")
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
          ":="
          (calc
           "calc"
           [(calcStep
             (¬´term_=_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
               "‚à•")
              "="
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (¬´term_-_¬ª
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
                "-"
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
                 " ‚Ä¢ "
                 `y))
               "‚à•"))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (tacticRwa__
                   "rwa"
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
                     ","
                     (Tactic.rwRule [] `inv_mul_cancel)
                     ","
                     (Tactic.rwRule [] `one_smul)]
                    "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
                " ‚Ä¢ "
                (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
               "‚à•"))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                "‚à•"
                (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
                "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                    "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
               "*"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
                 (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") []) [])
                 (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (¬´term_/_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
               "/"
               (numLit "2")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
                 (group (Tactic.Ring.tacticRing "ring") [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
                   [])
                  [])
                 (group
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
                   [])
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`J] []))])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`K []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
              "‚à•"
              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
              "‚à•")
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                "*"
                (numLit "2"))
               "*"
               (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
          ":="
          (calc
           "calc"
           [(calcStep
             (¬´term_=_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
               "‚à•")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)]
                    "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
               "*"
               (Init.Logic.¬´term_+_¬ª `n "+" `n)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `mul_le_mul
                    [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                  [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `le_trans‚Çì
                         [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                          (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
                       [])])))
                  [])
                 (group
                  (Tactic.¬´tactic¬∑._¬ª
                   "¬∑"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.apply
                        "apply"
                        (Term.app
                         `mul_nonneg
                         [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                          (Term.app `norm_nonneg [(Term.hole "_")])]))
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.app
                         (Term.proj `inv_nonneg "." (fieldIdx "2"))
                         [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
                       [])])))
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª
                  (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
                 "*"
                 (numLit "2"))
                "*"
                (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.anonymousCtor
         "‚ü®"
         [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K]
         "‚ü©"))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.anonymousCtor "‚ü®" [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K] "‚ü©"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "," `J "," `K] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `J
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`K []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
         "‚à•")
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
           "*"
           (numLit "2"))
          "*"
          (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
     ":="
     (calc
      "calc"
      [(calcStep
        (¬´term_=_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
          "‚à•")
         "="
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
              [])
             [])]))))
       (calcStep
        (¬´term_‚â§_¬ª
         (Term.hole "_")
         "‚â§"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
          "*"
          (Init.Logic.¬´term_+_¬ª `n "+" `n)))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.refine'
              "refine'"
              (Term.app `mul_le_mul [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
             [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `le_trans‚Çì
                    [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                     (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
                  [])])))
             [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.apply
                   "apply"
                   (Term.app
                    `mul_nonneg
                    [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                     (Term.app `norm_nonneg [(Term.hole "_")])]))
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.app
                    (Term.proj `inv_nonneg "." (fieldIdx "2"))
                    [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
                  [])])))
             [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª
             (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
            "*"
            (numLit "2"))
           "*"
           (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
       "‚à•")
      "="
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
           [])
          [])]))))
    (calcStep
     (¬´term_‚â§_¬ª
      (Term.hole "_")
      "‚â§"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
       "*"
       (Init.Logic.¬´term_+_¬ª `n "+" `n)))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app `mul_le_mul [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.exact
                "exact"
                (Term.app
                 `le_trans‚Çì
                 [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
                  (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
               [])])))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.apply
                "apply"
                (Term.app
                 `mul_nonneg
                 [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
                  (Term.app `norm_nonneg [(Term.hole "_")])]))
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `inv_nonneg "." (fieldIdx "2"))
                 [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
               [])])))
          [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
         "*"
         (numLit "2"))
        "*"
        (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.Ring.tacticRing "ring")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Tactic.Ring.tacticRing', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
      "*"
      (numLit "2"))
     "*"
     (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     "*"
     (numLit "2"))
    "*"
    (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
    "*"
    (numLit "2"))
   "*"
   (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Coe.¬´term‚Üë_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 999 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 999, (some 999, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
   "*"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª `Œµ "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     []]
    ")")
   "*"
   (numLit "2"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.paren
       "("
       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
        []]
       ")")
      "*"
      (numLit "2"))
     []]
    ")")
   "*"
   (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app `mul_le_mul [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.exact
             "exact"
             (Term.app
              `le_trans‚Çì
              [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
               (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
            [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.apply
             "apply"
             (Term.app
              `mul_nonneg
              [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
               (Term.app `norm_nonneg [(Term.hole "_")])]))
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              (Term.proj `inv_nonneg "." (fieldIdx "2"))
              [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.apply
        "apply"
        (Term.app
         `mul_nonneg
         [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
          (Term.app `norm_nonneg [(Term.hole "_")])]))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [(Term.app `half_pos [`Œµpos])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `half_pos [`Œµpos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµpos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `half_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `half_pos [`Œµpos]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_of_lt‚Çì [(Term.paren "(" [(Term.app `half_pos [`Œµpos]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `inv_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `inv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply
   "apply"
   (Term.app
    `mul_nonneg
    [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
     (Term.app `norm_nonneg [(Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_nonneg
   [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
    (Term.app `norm_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mul_nonneg [(Term.hole "_") (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.exact
        "exact"
        (Term.app
         `le_trans‚Çì
         [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
          (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `le_trans‚Çì
    [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
     (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_trans‚Çì
   [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
    (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_le_add [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [`hx‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_lt‚Çì [`hx‚ÇÇ]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_of_lt‚Çì [`hx‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `add_le_add
   [(Term.paren "(" [(Term.app `le_of_lt‚Çì [`hx‚ÇÅ]) []] ")") (Term.paren "(" [(Term.app `le_of_lt‚Çì [`hx‚ÇÇ]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_sub_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_trans‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app `mul_le_mul [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul [`dinv (Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `dinv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Term.hole "_")
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
    "*"
    (Init.Logic.¬´term_+_¬ª `n "+" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
   "*"
   (Init.Logic.¬´term_+_¬ª `n "+" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `n "+" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª `Œµ "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     []]
    ")")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `NormedField.norm_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
    "‚à•")
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `x‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
    "‚à•")
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
      "*"
      (numLit "2"))
     "*"
     (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     "*"
     (numLit "2"))
    "*"
    (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
    "*"
    (numLit "2"))
   "*"
   (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Coe.¬´term‚Üë_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 999 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 999, (some 999, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
   "*"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª `Œµ "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     []]
    ")")
   "*"
   (numLit "2"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Term.paren
       "("
       [(Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
        []]
       ")")
      "*"
      (numLit "2"))
     []]
    ")")
   "*"
   (Init.Coe.¬´term‚Üë_¬ª "‚Üë" `n))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`J] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `J
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`J []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
         "‚à•")
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
     ":="
     (calc
      "calc"
      [(calcStep
        (¬´term_=_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
          "‚à•")
         "="
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª
           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
           "-"
           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
            (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
            " ‚Ä¢ "
            `y))
          "‚à•"))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
                ","
                (Tactic.rwRule [] `inv_mul_cancel)
                ","
                (Tactic.rwRule [] `one_smul)]
               "]")
              [])
             [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
           (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
           " ‚Ä¢ "
           (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
          "‚à•"))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
              [])
             [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
           "‚à•"
           (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
           "‚à•")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
              [])
             [])]))))
       (calcStep
        (¬´term_‚â§_¬ª
         (Term.hole "_")
         "‚â§"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
          "*"
          (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
            (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") []) [])
            (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (¬´term_/_¬ª
          (Finset.Data.Finset.Fold.¬´term_*_¬ª
           (Finset.Data.Finset.Fold.¬´term_*_¬ª
            (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
          "/"
          (numLit "2")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
            (group (Tactic.Ring.tacticRing "ring") [])]))))
       (calcStep
        (¬´term_=_¬ª (Term.hole "_") "=" (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
              [])
             [])
            (group
             (Tactic.simp
              "simp"
              []
              []
              ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
              [])
             [])]))))
       (calcStep
        (¬´term_=_¬ª
         (Term.hole "_")
         "="
         (Finset.Data.Finset.Fold.¬´term_*_¬ª
          (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
       "‚à•")
      "="
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
        "-"
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
         (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
         " ‚Ä¢ "
         `y))
       "‚à•"))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
             ","
             (Tactic.rwRule [] `inv_mul_cancel)
             ","
             (Tactic.rwRule [] `one_smul)]
            "]")
           [])
          [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
        " ‚Ä¢ "
        (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
       "‚à•"))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
           [])
          [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
        "‚à•"
        (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
        "‚à•")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
           [])
          [])]))))
    (calcStep
     (¬´term_‚â§_¬ª
      (Term.hole "_")
      "‚â§"
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
       "*"
       (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
         (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") []) [])
         (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (¬´term_/_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Finset.Data.Finset.Fold.¬´term_*_¬ª
         (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
       "/"
       (numLit "2")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
         (group (Tactic.Ring.tacticRing "ring") [])]))))
    (calcStep
     (¬´term_=_¬ª (Term.hole "_") "=" (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
           [])
          [])
         (group
          (Tactic.simp
           "simp"
           []
           []
           ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"]
           [])
          [])]))))
    (calcStep
     (¬´term_=_¬ª
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.Ring.tacticRing "ring")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Tactic.Ring.tacticRing', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª (numLit "1") "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
        [])
       [])
      (group
       (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"] [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `norm_eq_zero) "," (Tactic.simpLemma [] [] `hd)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hd
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_eq_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_mul_cancel) "," (Tactic.rwRule [] `one_mul‚Çì)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_mul‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inv_mul_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Term.hole "_") "=" (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•") "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] []) [])
      (group (Tactic.Ring.tacticRing "ring") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.Ring.tacticRing "ring")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Tactic.Ring.tacticRing', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `Œ¥)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (¬´term_/_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
    "/"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•"))
     []]
    ")")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I])) [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") []) [])
      (group (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inv_nonneg)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul_of_nonneg_left [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Term.hole "_")
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
    "*"
    (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
   "*"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `norm_smul) "," (Tactic.rwRule [] `NormedField.norm_inv)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `NormedField.norm_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `norm_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
     "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•") "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_smul) "," (Tactic.rwRule [] `smul_sub)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `smul_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.hole "_")
   "="
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
     " ‚Ä¢ "
     (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
    " ‚Ä¢ "
    (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
   " ‚Ä¢ "
   (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
          ","
          (Tactic.rwRule [] `inv_mul_cancel)
          ","
          (Tactic.rwRule [] `one_smul)]
         "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] (Term.app `f.map_smul [(Term.hole "_")]))
     ","
     (Tactic.rwRule [] `inv_mul_cancel)
     ","
     (Tactic.rwRule [] `one_smul)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inv_mul_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f.map_smul [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f.map_smul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
    "‚à•")
   "="
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª
     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
     "-"
     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d) " ‚Ä¢ " `y))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
    "-"
    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d) " ‚Ä¢ " `y))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
   "-"
   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d) " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d) " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 0, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") "*" `d) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " (Term.app `f [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 73, (some 73, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
    "‚à•")
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª (numLit "1") "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)]) "-" `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (Init.Logic.¬´term_‚Åª¬π¬ª `d "‚Åª¬π") " ‚Ä¢ " `x) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`I []]
     [(Term.typeSpec
       ":"
       (¬´term_‚â§_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
         "‚à•"
         (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
         "‚à•")
        "‚â§"
        (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)))]
     ":="
     (calc
      "calc"
      [(calcStep
        (¬´term_=_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
          "‚à•")
         "="
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
          "‚à•"
          (¬´term_-_¬ª
           (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
           "-"
           (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
          "‚à•"))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.congr "congr" [(numLit "1")] []) [])
            (group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
              [])
             [])
            (group (Tactic.abel "abel" [] []) [])]))))
       (calcStep
        (¬´term_‚â§_¬ª
         (Term.hole "_")
         "‚â§"
         (Init.Logic.¬´term_+_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
           "‚à•"
           (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
           "‚à•")
          "+"
          (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
        ":="
        (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
       (calcStep
        (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.apply "apply" `add_le_add) [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                   [])
                  [])
                 (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
             [])
            (group
             (Tactic.¬´tactic¬∑._¬ª
              "¬∑"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                   [])
                  [])
                 (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
             [])]))))
       (calcStep
        (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
        ":="
        (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     (¬´term_=_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
       "‚à•")
      "="
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
       "‚à•"
       (¬´term_-_¬ª
        (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
        "-"
        (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
       "‚à•"))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.congr "congr" [(numLit "1")] []) [])
         (group
          (Tactic.simp
           "simp"
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
           [])
          [])
         (group (Tactic.abel "abel" [] []) [])]))))
    (calcStep
     (¬´term_‚â§_¬ª
      (Term.hole "_")
      "‚â§"
      (Init.Logic.¬´term_+_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
        "‚à•"
        (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
        "‚à•")
       "+"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
     ":="
     (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")]))
    (calcStep
     (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.apply "apply" `add_le_add) [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                [])
               [])
              (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                [])
               [])
              (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
          [])]))))
    (calcStep
     (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
     ":="
     (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app `two_mul [(Term.hole "_")]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `two_mul [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `two_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `two_mul [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Term.hole "_") "=" (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.apply "apply" `add_le_add) [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
             [])
            [])
           (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
             [])
            [])
           (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
        [])
       [])
      (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÇ]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [`h‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
        [])
       [])
      (group (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `le_of_lt‚Çì [`h‚ÇÅ]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_lt‚Çì [`h‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `add_le_add)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `Œ¥ "+" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `norm_sub_le [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_sub_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Term.hole "_")
   "‚â§"
   (Init.Logic.¬´term_+_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
     "‚à•"
     (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
     "‚à•")
    "+"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
    "‚à•")
   "+"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.congr "congr" [(numLit "1")] []) [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"]
        [])
       [])
      (group (Tactic.abel "abel" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.abel', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `x) "," (Tactic.simpLemma [] [] `f.map_sub)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `f.map_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.congr "congr" [(numLit "1")] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.congr', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
    "‚à•")
   "="
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª
     (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
     "-"
     (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
    "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª
    (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
    "-"
    (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª
   (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
   "-"
   (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_-_¬ª (Term.app `f [`x‚ÇÇ]) "-" `a) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(¬´term_-_¬ª (Term.app `f [`x‚ÇÅ]) "-" (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_‚â§_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
    "‚à•"
    (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
    "‚à•")
   "‚â§"
   (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_‚â§_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
   "‚à•"
   (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
   "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª (Term.app `f [`x]) "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `x‚ÇÅ "-" `x‚ÇÇ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `x‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
    "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÇ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÇ)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÇ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `xz‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget
     []
     (Term.app
      (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
      [`z‚ÇÇim]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÇ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÇ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÇ)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
   [`z‚ÇÇim])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z‚ÇÇim
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget
     []
     (Term.app (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1")) [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÇim)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÇ)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1")) [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `H [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `H [`this]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Metric.mem_closure_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) []) (group (Tactic.exact "exact" `Œµpos) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" `Œµpos)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµpos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª `a " ‚àà " (Term.app `ball [`a `Œµ]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ball [`a `Œµ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
    "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hx‚ÇÅ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `xz‚ÇÅ)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h‚ÇÅ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `xz‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget
     []
     (Term.app
      (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
      [`z‚ÇÅim]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x‚ÇÅ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx‚ÇÅ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `xz‚ÇÅ)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
   [`z‚ÇÅim])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z‚ÇÅim
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget
     []
     (Term.app (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1")) [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅ)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z‚ÇÅim)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `h‚ÇÅ)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1")) [(Term.app `H [`this]) (Term.hole "_") `Œ¥pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `H [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `H [`this]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Metric.mem_closure_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Metric.mem_closure_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.¬´term_‚àà_¬ª
        (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
        " ‚àà "
        (Term.app `ball [`a `Œµ])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `dist_eq_norm)
             ","
             (Tactic.simpLemma [] [] (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
            "]"]
           [])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `dist_eq_norm)
          ","
          (Tactic.simpLemma [] [] (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `dist_eq_norm)
     ","
     (Tactic.simpLemma [] [] (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])]))]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_of_le_of_lt‚Çì [`ydlt.le (Term.app `half_lt_self [`Œµpos])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `half_lt_self [`Œµpos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµpos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `half_lt_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `half_lt_self [`Œµpos]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ydlt.le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª
   (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
   " ‚àà "
   (Term.app `ball [`a `Œµ]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ball [`a `Œµ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_+_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.¬´term_‚Ä¢_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Logic.¬´term_+_¬ª `a "+" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `d " ‚Ä¢ " `y)) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`Œ¥pos []]
     [(Term.typeSpec ":" (¬´term_<_¬ª (numLit "0") "<" `Œ¥))]
     ":="
     (Term.app
      `div_pos
      [(Term.app
        `mul_pos
        [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
         (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_pos
   [(Term.app
     `mul_pos
     [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
      (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `mul_pos
   [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
    (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `norm_pos_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `norm_pos_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hd
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `norm_pos_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `norm_pos_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_pos
   [(Term.paren "(" [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hd]) []] ")")
    (Term.paren "(" [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`hy]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_<_¬ª (numLit "0") "<" `Œ¥)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œ¥
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticLet_
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `Œ¥
     []
     ":="
     (¬´term_/_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
      "/"
      (numLit "4")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticLet_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_/_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
   "/"
   (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `d "‚à•")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `d)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hd)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `ydlt)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `leyd)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `dinv)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `rescale_to_shell [`hc (Term.app `half_pos [`Œµpos]) `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `half_pos [`Œµpos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµpos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `half_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `half_pos [`Œµpos]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `rescale_to_shell
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.use "use" [(numLit "0")]) [])
      (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.use "use" [(numLit "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.use', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.byCases' "by_cases'" [`hy ":"] (¬´term_=_¬ª `y "=" (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.byCases'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª `y "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´:¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `mul_nonneg
         [(Term.app
           `mul_nonneg
           [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
          (Term.hole "_")]))
       [])
      (group
       (exacts
        "exacts"
        "["
        [(Term.app
          (Term.proj `inv_nonneg "." (fieldIdx "2"))
          [(Term.app
            `div_nonneg
            [(Term.app `le_of_lt‚Çì [`Œµpos])
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])])
         ","
         `n.cast_nonneg]
        "]")
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (exacts
   "exacts"
   "["
   [(Term.app
     (Term.proj `inv_nonneg "." (fieldIdx "2"))
     [(Term.app
       `div_nonneg
       [(Term.app `le_of_lt‚Çì [`Œµpos])
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])])
    ","
    `n.cast_nonneg]
   "]")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'exacts', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.cast_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `inv_nonneg "." (fieldIdx "2"))
   [(Term.app
     `div_nonneg
     [(Term.app `le_of_lt‚Çì [`Œµpos])
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_nonneg
   [(Term.app `le_of_lt‚Çì [`Œµpos])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_of_lt‚Çì [`Œµpos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Œµpos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_lt‚Çì
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_lt‚Çì [`Œµpos]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_nonneg
   [(Term.paren "(" [(Term.app `le_of_lt‚Çì [`Œµpos]) []] ")")
    (Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `inv_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `inv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `mul_nonneg
    [(Term.app
      `mul_nonneg
      [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
     (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_nonneg
   [(Term.app
     `mul_nonneg
     [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app
   `mul_nonneg
   [(Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mul_nonneg [(Term.hole "_") (Term.app `norm_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mul_nonneg [(Term.hole "_") (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren
     "("
     [(Term.app `mul_nonneg [(Term.hole "_") (Term.paren "(" [(Term.app `norm_nonneg [(Term.hole "_")]) []] ")")]) []]
     ")")
    (Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.anonymousCtor
    "‚ü®"
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Finset.Data.Finset.Fold.¬´term_*_¬ª
        (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
       "*"
       (numLit "2"))
      "*"
      `n)
     ","
     (Term.hole "_")
     ","
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
    "‚ü©"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "‚ü®"
   [(Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Finset.Data.Finset.Fold.¬´term_*_¬ª
       (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
      "*"
      (numLit "2"))
     "*"
     `n)
    ","
    (Term.hole "_")
    ","
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
   "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Finset.Data.Finset.Fold.¬´term_*_¬ª
     (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
     "*"
     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
    "*"
    (numLit "2"))
   "*"
   `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Finset.Data.Finset.Fold.¬´term_*_¬ª
    (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
    "*"
    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
   "*"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.¬´term_*_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Init.Logic.¬´term_‚Åª¬π¬ª (¬´term_/_¬ª `Œµ "/" (numLit "2")) "‚Åª¬π")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.¬´term_‚Åª¬π¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (¬´term_/_¬ª `Œµ "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `Œµ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
   "*"
   (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.¬´term_*_¬ª
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.¬´term_*_¬ª
      (Init.Logic.¬´term_‚Åª¬π¬ª (Term.paren "(" [(¬´term_/_¬ª `Œµ "/" (numLit "2")) []] ")") "‚Åª¬π")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `c "‚à•"))
     []]
    ")")
   "*"
   (numLit "2"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] (Term.app `NormedField.exists_one_lt_norm [`ùïú]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `c)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hc)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `NormedField.exists_one_lt_norm [`ùïú])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `NormedField.exists_one_lt_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] `this)]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `a)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµ)]) [])
      ","
      (Tactic.rcasesPatLo
       (Tactic.rcasesPatMed
        [(Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `Œµpos)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `H)]) [])]
          "‚ü©")])
       [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `mem_interior_iff_mem_nhds) "," (Tactic.simpLemma [] [] `Metric.mem_nhds_iff)] "]"]
   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Metric.mem_nhds_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_interior_iff_mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (¬´term‚àÉ_,_¬ª
        "‚àÉ"
        (Lean.explicitBinders
         [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `n)] ":" (term‚Ñï "‚Ñï") ")")
          (Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `x)] ":" (Term.hole "_") ")")])
        ","
        (Init.Core.¬´term_‚àà_¬ª
         `x
         " ‚àà "
         (Term.app
          `Interior
          [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])]))))]
     ":="
     (Term.app
      `nonempty_interior_of_Union_of_closed
      [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure)) `A]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `nonempty_interior_of_Union_of_closed
   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure)) `A])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `is_closed_closure
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" `is_closed_closure)) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nonempty_interior_of_Union_of_closed
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term‚àÉ_,_¬ª
   "‚àÉ"
   (Lean.explicitBinders
    [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `n)] ":" (term‚Ñï "‚Ñï") ")")
     (Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `x)] ":" (Term.hole "_") ")")])
   ","
   (Init.Core.¬´term_‚àà_¬ª
    `x
    " ‚àà "
    (Term.app
     `Interior
     [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚àÉ_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª
   `x
   " ‚àà "
   (Term.app
    `Interior
    [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Interior
   [(Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ball [(numLit "0") `n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Closure
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Closure
   [(Term.paren "(" [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n])) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.bracketedExplicitBinders', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.bracketedExplicitBinders', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'term‚Ñï', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`A []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
         "‚ãÉ"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] [":" (term‚Ñï "‚Ñï")]))
         ", "
         (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))]))
        "="
        `univ))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app
            `subset.antisymm
            [(Term.app `subset_univ [(Term.hole "_")])
             (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))]))
          [])
         (group
          (Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app `surj [`y]))]
           ["with"
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx)]) [])]
             "‚ü©")])
          [])
         (group
          (Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")]))]
           ["with"
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hn)]) [])]
             "‚ü©")])
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")]))
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
            [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")]))
          [])
         (group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
            "]")
           [])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `subset.antisymm
         [(Term.app `subset_univ [(Term.hole "_")])
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))]))
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] (Term.app `surj [`y]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")]))]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hn)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         (Term.proj `mem_Union "." (fieldIdx "2"))
         [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")]))
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
         [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")]))
       [])
      (group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
         "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `mem_ball) "," (Tactic.rwRule [] `dist_eq_norm) "," (Tactic.rwRule [] `sub_zero)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `dist_eq_norm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
    [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
   [(Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [`x "," (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `hx] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mem_image [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    (Term.proj `mem_Union "." (fieldIdx "2"))
    [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_Union "." (fieldIdx "2"))
   [(Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [`n "," (Term.app `subset_closure [(Term.hole "_")])] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `subset_closure [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `subset_closure
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_Union
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `n)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hn)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exists_nat_gt [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exists_nat_gt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] (Term.app `surj [`y]))]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hx)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `surj [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `surj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `subset.antisymm
    [(Term.app `subset_univ [(Term.hole "_")])
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `subset.antisymm
   [(Term.app `subset_univ [(Term.hole "_")])
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y `hy] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `subset_univ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `subset_univ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `subset_univ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `subset.antisymm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
    "‚ãÉ"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] [":" (term‚Ñï "‚Ñï")]))
    ", "
    (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))]))
   "="
   `univ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `univ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
   "‚ãÉ"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] [":" (term‚Ñï "‚Ñï")]))
   ", "
   (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ball [(numLit "0") `n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ball
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `ball [(numLit "0") `n])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Closure
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    First step of the proof of the Banach open mapping theorem (using completeness of `F`):
    by Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.
    Rescaling everything, it follows that any `y ‚àà F` is arbitrarily well approached by
    images of elements of norm at most `C * ‚à•y‚à•`.
    For further use, we will only need such an element whose image
    is within distance `‚à•y‚à•/2` of `y`, to apply an iterative process. -/
  theorem
    exists_approx_preimage_norm_le
    ( surj : surjective f ) : ‚àÉ C ‚â• 0 , ‚àÄ y , ‚àÉ x , dist f x y ‚â§ 1 / 2 * ‚à• y ‚à• ‚àß ‚à• x ‚à• ‚â§ C * ‚à• y ‚à•
    :=
      by
        have
            A
              : ‚ãÉ n : ‚Ñï , Closure f '' ball 0 n = univ
              :=
              by
                refine' subset.antisymm subset_univ _ fun y hy => _
                  rcases surj y with ‚ü® x , hx ‚ü©
                  rcases exists_nat_gt ‚à• x ‚à• with ‚ü® n , hn ‚ü©
                  refine' mem_Union . 2 ‚ü® n , subset_closure _ ‚ü©
                  refine' mem_image _ _ _ . 2 ‚ü® x , ‚ü® _ , hx ‚ü© ‚ü©
                  rwa [ mem_ball , dist_eq_norm , sub_zero ]
          have
            : ‚àÉ ( n : ‚Ñï ) ( x : _ ) , x ‚àà Interior Closure f '' ball 0 n
              :=
              nonempty_interior_of_Union_of_closed fun n => is_closed_closure A
          simp only [ mem_interior_iff_mem_nhds , Metric.mem_nhds_iff ] at this
          rcases this with ‚ü® n , a , Œµ , ‚ü® Œµpos , H ‚ü© ‚ü©
          rcases NormedField.exists_one_lt_norm ùïú with ‚ü® c , hc ‚ü©
          refine' ‚ü® Œµ / 2 ‚Åª¬π * ‚à• c ‚à• * 2 * n , _ , fun y => _ ‚ü©
          ¬∑
            refine' mul_nonneg mul_nonneg mul_nonneg _ norm_nonneg _ by norm_num _
              exacts [ inv_nonneg . 2 div_nonneg le_of_lt‚Çì Œµpos by norm_num , n.cast_nonneg ]
          ¬∑
            by_cases' hy : y = 0
              ¬∑ use 0 simp [ hy ]
              ¬∑
                rcases rescale_to_shell hc half_pos Œµpos hy with ‚ü® d , hd , ydlt , leyd , dinv ‚ü©
                  let Œ¥ := ‚à• d ‚à• * ‚à• y ‚à• / 4
                  have Œ¥pos : 0 < Œ¥ := div_pos mul_pos norm_pos_iff . 2 hd norm_pos_iff . 2 hy by norm_num
                  have : a + d ‚Ä¢ y ‚àà ball a Œµ := by simp [ dist_eq_norm , lt_of_le_of_lt‚Çì ydlt.le half_lt_self Œµpos ]
                  rcases Metric.mem_closure_iff . 1 H this _ Œ¥pos with ‚ü® z‚ÇÅ , z‚ÇÅim , h‚ÇÅ ‚ü©
                  rcases mem_image _ _ _ . 1 z‚ÇÅim with ‚ü® x‚ÇÅ , hx‚ÇÅ , xz‚ÇÅ ‚ü©
                  rw [ ‚Üê xz‚ÇÅ ] at h‚ÇÅ
                  rw [ mem_ball , dist_eq_norm , sub_zero ] at hx‚ÇÅ
                  have : a ‚àà ball a Œµ := by ¬∑ simp exact Œµpos
                  rcases Metric.mem_closure_iff . 1 H this _ Œ¥pos with ‚ü® z‚ÇÇ , z‚ÇÇim , h‚ÇÇ ‚ü©
                  rcases mem_image _ _ _ . 1 z‚ÇÇim with ‚ü® x‚ÇÇ , hx‚ÇÇ , xz‚ÇÇ ‚ü©
                  rw [ ‚Üê xz‚ÇÇ ] at h‚ÇÇ
                  rw [ mem_ball , dist_eq_norm , sub_zero ] at hx‚ÇÇ
                  let x := x‚ÇÅ - x‚ÇÇ
                  have
                    I
                      : ‚à• f x - d ‚Ä¢ y ‚à• ‚â§ 2 * Œ¥
                      :=
                      calc
                        ‚à• f x - d ‚Ä¢ y ‚à• = ‚à• f x‚ÇÅ - a + d ‚Ä¢ y - f x‚ÇÇ - a ‚à• := by congr 1 simp only [ x , f.map_sub ] abel
                          _ ‚â§ ‚à• f x‚ÇÅ - a + d ‚Ä¢ y ‚à• + ‚à• f x‚ÇÇ - a ‚à• := norm_sub_le _ _
                          _ ‚â§ Œ¥ + Œ¥
                            :=
                            by
                              apply add_le_add
                                ¬∑ rw [ ‚Üê dist_eq_norm , dist_comm ] exact le_of_lt‚Çì h‚ÇÅ
                                ¬∑ rw [ ‚Üê dist_eq_norm , dist_comm ] exact le_of_lt‚Çì h‚ÇÇ
                          _ = 2 * Œ¥ := two_mul _ . symm
                  have
                    J
                      : ‚à• f d ‚Åª¬π ‚Ä¢ x - y ‚à• ‚â§ 1 / 2 * ‚à• y ‚à•
                      :=
                      calc
                        ‚à• f d ‚Åª¬π ‚Ä¢ x - y ‚à• = ‚à• d ‚Åª¬π ‚Ä¢ f x - d ‚Åª¬π * d ‚Ä¢ y ‚à•
                            :=
                            by rwa [ f.map_smul _ , inv_mul_cancel , one_smul ]
                          _ = ‚à• d ‚Åª¬π ‚Ä¢ f x - d ‚Ä¢ y ‚à• := by rw [ mul_smul , smul_sub ]
                          _ = ‚à• d ‚à• ‚Åª¬π * ‚à• f x - d ‚Ä¢ y ‚à• := by rw [ norm_smul , NormedField.norm_inv ]
                          _ ‚â§ ‚à• d ‚à• ‚Åª¬π * 2 * Œ¥
                            :=
                            by apply mul_le_mul_of_nonneg_left I rw [ inv_nonneg ] exact norm_nonneg _
                          _ = ‚à• d ‚à• ‚Åª¬π * ‚à• d ‚à• * ‚à• y ‚à• / 2 := by simp only [ Œ¥ ] ring
                          _ = ‚à• y ‚à• / 2 := by rw [ inv_mul_cancel , one_mul‚Çì ] simp [ norm_eq_zero , hd ]
                          _ = 1 / 2 * ‚à• y ‚à• := by ring
                  rw [ ‚Üê dist_eq_norm ] at J
                  have
                    K
                      : ‚à• d ‚Åª¬π ‚Ä¢ x ‚à• ‚â§ Œµ / 2 ‚Åª¬π * ‚à• c ‚à• * 2 * ‚Üë n * ‚à• y ‚à•
                      :=
                      calc
                        ‚à• d ‚Åª¬π ‚Ä¢ x ‚à• = ‚à• d ‚à• ‚Åª¬π * ‚à• x‚ÇÅ - x‚ÇÇ ‚à• := by rw [ norm_smul , NormedField.norm_inv ]
                          _ ‚â§ Œµ / 2 ‚Åª¬π * ‚à• c ‚à• * ‚à• y ‚à• * n + n
                            :=
                            by
                              refine' mul_le_mul dinv _ norm_nonneg _ _
                                ¬∑ exact le_trans‚Çì norm_sub_le _ _ add_le_add le_of_lt‚Çì hx‚ÇÅ le_of_lt‚Çì hx‚ÇÇ
                                ¬∑
                                  apply mul_nonneg mul_nonneg _ norm_nonneg _ norm_nonneg _
                                    exact inv_nonneg . 2 le_of_lt‚Çì half_pos Œµpos
                          _ = Œµ / 2 ‚Åª¬π * ‚à• c ‚à• * 2 * ‚Üë n * ‚à• y ‚à• := by ring
                  exact ‚ü® d ‚Åª¬π ‚Ä¢ x , J , K ‚ü©

variable [CompleteSpace E]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " The Banach open mapping theorem: if a bounded linear map between Banach spaces is onto, then\nany point has a preimage with controlled norm. -/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `exists_preimage_norm_le [])
  (Command.declSig
   [(Term.explicitBinder "(" [`surj] [":" (Term.app `surjective [`f])] [] ")")]
   (Term.typeSpec
    ":"
    (Mathlib.ExtendedBinder.¬´term‚àÉ___,_¬ª
     "‚àÉ"
     `C
     (Mathlib.ExtendedBinder.¬´binderTerm>_¬ª ">" (numLit "0"))
     ","
     (Term.forall
      "‚àÄ"
      [(Term.simpleBinder [`y] [])]
      ","
      (¬´term‚àÉ_,_¬ª
       "‚àÉ"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
       ","
       (¬´term_‚àß_¬ª
        (¬´term_=_¬ª (Term.app `f [`x]) "=" `y)
        "‚àß"
        (¬´term_‚â§_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
         "‚â§"
         (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.obtain
         "obtain"
         [(Tactic.rcasesPatMed
           [(Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `C)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `C0)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hC)]) [])]
             "‚ü©")])]
         []
         [":=" [(Term.app `exists_approx_preimage_norm_le [`f `surj])]])
        [])
       (group (Tactic.choose "choose" [`g `hg] ["using" `hC]) [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `h
           []
           ":="
           (Term.fun
            "fun"
            (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (¬´term_-_¬ª `y "-" (Term.app `f [(Term.app `g [`y])])))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hle []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`y] [])]
              ","
              (¬´term_‚â§_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `h [`y]) "‚à•")
               "‚â§"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`y]) [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                 [])
                [])
               (group (Tactic.exact "exact" (Term.proj (Term.app `hg [`y]) "." (fieldIdx "1"))) [])]))))))
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "‚ü®"
          [(Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
           ","
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
           ","
           (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
          "‚ü©"))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hnle []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
              ","
              (¬´term_‚â§_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                "‚à•"
                (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])
                "‚à•")
               "‚â§"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`n]) [])
               (group
                (Tactic.induction'
                 "induction'"
                 [(Tactic.casesTarget [] `n)]
                 []
                 ["with" [(Lean.binderIdent `n) (Lean.binderIdent `IH)]]
                 [])
                [])
               (group
                (Tactic.¬´tactic¬∑._¬ª
                 "¬∑"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.simp
                      "simp"
                      []
                      ["only"]
                      ["["
                       [(Tactic.simpLemma [] [] `one_div)
                        ","
                        (Tactic.simpLemma [] [] `Nat.nat_zero_eq_zero)
                        ","
                        (Tactic.simpLemma [] [] `one_mul‚Çì)
                        ","
                        (Tactic.simpLemma [] [] `iterate_zero_apply)
                        ","
                        (Tactic.simpLemma [] [] `pow_zero‚Çì)]
                       "]"]
                      [])
                     [])])))
                [])
               (group
                (Tactic.¬´tactic¬∑._¬ª
                 "¬∑"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `iterate_succ')] "]") []) [])
                    (group
                     (Tactic.apply "apply" (Term.app `le_trans‚Çì [(Term.app `hle [(Term.hole "_")]) (Term.hole "_")]))
                     [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ‚Çì) "," (Tactic.rwRule [] `mul_assoc‚Çì)] "]")
                      [])
                     [])
                    (group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`IH])) [])
                    (group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                [])]))))))
        [])
       (group
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `u
           []
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`n] [])]
             "=>"
             (Term.app `g [(Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`ule []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`n] [])]
              ","
              (¬´term_‚â§_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")
               "‚â§"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                "*"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`n]) [])
               (group
                (Tactic.apply
                 "apply"
                 (Term.app
                  `le_trans‚Çì
                  [(Term.proj (Term.app `hg [(Term.hole "_")]) "." (fieldIdx "2")) (Term.hole "_")]))
                [])
               (group
                (tacticCalc_
                 "calc"
                 [(calcStep
                   (¬´term_‚â§_¬ª
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     `C
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                      "‚à•"
                      (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])
                      "‚à•"))
                    "‚â§"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     `C
                     "*"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª
                      (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
                   ":="
                   (Term.app `mul_le_mul_of_nonneg_left [(Term.app `hnle [`n]) `C0]))
                  (calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                     "*"
                     (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
                [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`sNu []]
           [(Term.typeSpec
             ":"
             (Term.app
              `Summable
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n] [])]
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")))]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `summable_of_nonneg_of_le
                  [(Term.fun
                    "fun"
                    (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
                   `ule
                   (Term.hole "_")]))
                [])
               (group
                (Tactic.exact
                 "exact"
                 (Term.app
                  `Summable.mul_right
                  [(Term.hole "_")
                   (Term.app
                    `summable_geometric_of_lt_1
                    [(Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])]))
                [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`su []]
           [(Term.typeSpec ":" (Term.app `Summable [`u]))]
           ":="
           (Term.app `summable_of_summable_norm [`sNu]))))
        [])
       (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (Term.app `tsum [`u])))) [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`x_ineq []]
           [(Term.typeSpec
             ":"
             (¬´term_‚â§_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
           ":="
           (calc
            "calc"
            [(calcStep
              (¬´term_‚â§_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
               "‚â§"
               (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
                "‚àë'"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                ", "
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")))
              ":="
              (Term.app `norm_tsum_le_tsum_norm [`sNu]))
             (calcStep
              (¬´term_‚â§_¬ª
               (Term.hole "_")
               "‚â§"
               (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
                "‚àë'"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                ", "
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                 "*"
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))
              ":="
              (Term.app
               `tsum_le_tsum
               [`ule `sNu (Term.app `Summable.mul_right [(Term.hole "_") `summable_geometric_two])]))
             (calcStep
              (¬´term_=_¬ª
               (Term.hole "_")
               "="
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
                 "‚àë'"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                 ", "
                 (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n))
                "*"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
              ":="
              `tsum_mul_right)
             (calcStep
              (¬´term_=_¬ª
               (Term.hole "_")
               "="
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C)
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `tsum_geometric_two) "," (Tactic.rwRule [] `mul_assoc‚Çì)]
                     "]")
                    [])
                   [])]))))
             (calcStep
              (¬´term_‚â§_¬ª
               (Term.hole "_")
               "‚â§"
               (Init.Logic.¬´term_+_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª
                 (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C)
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
                "+"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
              ":="
              (Term.app `le_add_of_nonneg_right [(Term.app `norm_nonneg [`y])]))
             (calcStep
              (¬´term_=_¬ª
               (Term.hole "_")
               "="
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`fsumeq []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
              ","
              (¬´term_=_¬ª
               (Term.app
                `f
                [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                  "‚àë"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`n])
                  ", "
                  (Term.app `u [`i]))])
               "="
               (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`n]) [])
               (group
                (Tactic.induction'
                 "induction'"
                 [(Tactic.casesTarget [] `n)]
                 []
                 ["with" [(Lean.binderIdent `n) (Lean.binderIdent `IH)]]
                 [])
                [])
               (group
                (Tactic.¬´tactic¬∑._¬ª
                 "¬∑"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `f.map_zero)] "]"] []) [])])))
                [])
               (group
                (Tactic.¬´tactic¬∑._¬ª
                 "¬∑"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `sum_range_succ)
                        ","
                        (Tactic.rwRule [] `f.map_add)
                        ","
                        (Tactic.rwRule [] `IH)
                        ","
                        (Tactic.rwRule [] `iterate_succ')
                        ","
                        (Tactic.rwRule [] `sub_add)]
                       "]")
                      [])
                     [])])))
                [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n] [])]
                 "=>"
                 (Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                  "‚àë"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`n])
                  ", "
                  (Term.app `u [`i]))))
               `at_top
               (Term.app (Topology.Basic.termùìù "ùìù") [`x])]))]
           ":="
           `su.has_sum.tendsto_sum_nat)))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`L‚ÇÅ []]
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n] [])]
                 "=>"
                 (Term.app
                  `f
                  [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                    "‚àë"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [`n])
                    ", "
                    (Term.app `u [`i]))])))
               `at_top
               (Term.app (Topology.Basic.termùìù "ùìù") [(Term.app `f [`x])])]))]
           ":="
           (Term.app (Term.proj (Term.app `f.continuous.tendsto [(Term.hole "_")]) "." `comp) [`this]))))
        [])
       (group
        (Tactic.simp
         "simp"
         []
         ["only"]
         ["[" [(Tactic.simpLemma [] [] `fsumeq)] "]"]
         [(Tactic.location "at" (Tactic.locationHyp [`L‚ÇÅ] []))])
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`L‚ÇÇ []]
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n] [])]
                 "=>"
                 (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))))
               `at_top
               (Term.app (Topology.Basic.termùìù "ùìù") [(¬´term_-_¬ª `y "-" (numLit "0"))])]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.refine' "refine'" (Term.app `tendsto_const_nhds.sub [(Term.hole "_")])) [])
               (group
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_iff_norm_tendsto_zero)] "]") [])
                [])
               (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sub_zero)] "]"] []) [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `squeeze_zero
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [(Term.hole "_")] [])]
                     "=>"
                     (Term.app `norm_nonneg [(Term.hole "_")])))
                   `hnle
                   (Term.hole "_")]))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["‚Üê"] (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")]))]
                  "]")
                 [])
                [])
               (group
                (Tactic.¬´tactic_<;>_¬ª
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
                   [`tendsto_const_nhds]))
                 "<;>"
                 (Lean.Tactic.normNum "norm_num" [] []))
                [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`feq []]
           [(Term.typeSpec ":" (¬´term_=_¬ª (Term.app `f [`x]) "=" (¬´term_-_¬ª `y "-" (numLit "0"))))]
           ":="
           (Term.app `tendsto_nhds_unique [`L‚ÇÅ `L‚ÇÇ]))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_zero)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`feq] []))])
        [])
       (group (Tactic.exact "exact" (Term.anonymousCtor "‚ü®" [`x "," `feq "," `x_ineq] "‚ü©")) [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.obtain
        "obtain"
        [(Tactic.rcasesPatMed
          [(Tactic.rcasesPat.tuple
            "‚ü®"
            [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `C)]) [])
             ","
             (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `C0)]) [])
             ","
             (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hC)]) [])]
            "‚ü©")])]
        []
        [":=" [(Term.app `exists_approx_preimage_norm_le [`f `surj])]])
       [])
      (group (Tactic.choose "choose" [`g `hg] ["using" `hC]) [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `h
          []
          ":="
          (Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (¬´term_-_¬ª `y "-" (Term.app `f [(Term.app `g [`y])])))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hle []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`y] [])]
             ","
             (¬´term_‚â§_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `h [`y]) "‚à•")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (¬´term_/_¬ª (numLit "1") "/" (numLit "2"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`y]) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `dist_eq_norm) "," (Tactic.rwRule [] `dist_comm)] "]")
                [])
               [])
              (group (Tactic.exact "exact" (Term.proj (Term.app `hg [`y]) "." (fieldIdx "1"))) [])]))))))
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.anonymousCtor
         "‚ü®"
         [(Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
          ","
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
          ","
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`y] [])] "=>" (Term.hole "_")))]
         "‚ü©"))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hnle []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
             ","
             (¬´term_‚â§_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
               "‚à•"
               (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])
               "‚à•")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`n]) [])
              (group
               (Tactic.induction'
                "induction'"
                [(Tactic.casesTarget [] `n)]
                []
                ["with" [(Lean.binderIdent `n) (Lean.binderIdent `IH)]]
                [])
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.simp
                     "simp"
                     []
                     ["only"]
                     ["["
                      [(Tactic.simpLemma [] [] `one_div)
                       ","
                       (Tactic.simpLemma [] [] `Nat.nat_zero_eq_zero)
                       ","
                       (Tactic.simpLemma [] [] `one_mul‚Çì)
                       ","
                       (Tactic.simpLemma [] [] `iterate_zero_apply)
                       ","
                       (Tactic.simpLemma [] [] `pow_zero‚Çì)]
                      "]"]
                     [])
                    [])])))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `iterate_succ')] "]") []) [])
                   (group
                    (Tactic.apply "apply" (Term.app `le_trans‚Çì [(Term.app `hle [(Term.hole "_")]) (Term.hole "_")]))
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ‚Çì) "," (Tactic.rwRule [] `mul_assoc‚Çì)] "]")
                     [])
                    [])
                   (group (Tactic.apply "apply" (Term.app `mul_le_mul_of_nonneg_left [`IH])) [])
                   (group (Lean.Tactic.normNum "norm_num" [] []) [])])))
               [])]))))))
       [])
      (group
       (Tactic.tacticLet_
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `u
          []
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`n] [])]
            "=>"
            (Term.app `g [(Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`ule []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`n] [])]
             ","
             (¬´term_‚â§_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")
              "‚â§"
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
               "*"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`n]) [])
              (group
               (Tactic.apply
                "apply"
                (Term.app `le_trans‚Çì [(Term.proj (Term.app `hg [(Term.hole "_")]) "." (fieldIdx "2")) (Term.hole "_")]))
               [])
              (group
               (tacticCalc_
                "calc"
                [(calcStep
                  (¬´term_‚â§_¬ª
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    `C
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª
                     "‚à•"
                     (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])
                     "‚à•"))
                   "‚â§"
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    `C
                    "*"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª
                     (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
                  ":="
                  (Term.app `mul_le_mul_of_nonneg_left [(Term.app `hnle [`n]) `C0]))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Finset.Data.Finset.Fold.¬´term_*_¬ª
                    (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                    "*"
                    (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))])
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`sNu []]
          [(Term.typeSpec
            ":"
            (Term.app
             `Summable
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")))]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `summable_of_nonneg_of_le
                 [(Term.fun
                   "fun"
                   (Term.basicFun [(Term.simpleBinder [`n] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
                  `ule
                  (Term.hole "_")]))
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `Summable.mul_right
                 [(Term.hole "_")
                  (Term.app
                   `summable_geometric_of_lt_1
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])]))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`su []]
          [(Term.typeSpec ":" (Term.app `Summable [`u]))]
          ":="
          (Term.app `summable_of_summable_norm [`sNu]))))
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `x [] ":=" (Term.app `tsum [`u])))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`x_ineq []]
          [(Term.typeSpec
            ":"
            (¬´term_‚â§_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
             "‚â§"
             (Finset.Data.Finset.Fold.¬´term_*_¬ª
              (Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))]
          ":="
          (calc
           "calc"
           [(calcStep
             (¬´term_‚â§_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `x "‚à•")
              "‚â§"
              (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
               "‚àë'"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               ", "
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" (Term.app `u [`n]) "‚à•")))
             ":="
             (Term.app `norm_tsum_le_tsum_norm [`sNu]))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
               "‚àë'"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               ", "
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n)
                "*"
                (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))))
             ":="
             (Term.app
              `tsum_le_tsum
              [`ule `sNu (Term.app `Summable.mul_right [(Term.hole "_") `summable_geometric_two])]))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Topology.Algebra.InfiniteSum.¬´term‚àë'_,_¬ª
                "‚àë'"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                ", "
                (¬´term_^_¬ª (¬´term_/_¬ª (numLit "1") "/" (numLit "2")) "^" `n))
               "*"
               (Finset.Data.Finset.Fold.¬´term_*_¬ª `C "*" (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))))
             ":="
             `tsum_mul_right)
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C)
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `tsum_geometric_two) "," (Tactic.rwRule [] `mul_assoc‚Çì)]
                    "]")
                   [])
                  [])]))))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (Init.Logic.¬´term_+_¬ª
               (Finset.Data.Finset.Fold.¬´term_*_¬ª
                (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C)
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•"))
               "+"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
             ":="
             (Term.app `le_add_of_nonneg_right [(Term.app `norm_nonneg [`y])]))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Finset.Data.Finset.Fold.¬´term_*_¬ª
               (Init.Logic.¬´term_+_¬ª (Finset.Data.Finset.Fold.¬´term_*_¬ª (numLit "2") "*" `C) "+" (numLit "1"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.Ring.tacticRing "ring") [])]))))]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`fsumeq []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             [(Term.simpleBinder [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))])]
             ","
             (¬´term_=_¬ª
              (Term.app
               `f
               [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                 "‚àë"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`n])
                 ", "
                 (Term.app `u [`i]))])
              "="
              (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`n]) [])
              (group
               (Tactic.induction'
                "induction'"
                [(Tactic.casesTarget [] `n)]
                []
                ["with" [(Lean.binderIdent `n) (Lean.binderIdent `IH)]]
                [])
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `f.map_zero)] "]"] []) [])])))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `sum_range_succ)
                       ","
                       (Tactic.rwRule [] `f.map_add)
                       ","
                       (Tactic.rwRule [] `IH)
                       ","
                       (Tactic.rwRule [] `iterate_succ')
                       ","
                       (Tactic.rwRule [] `sub_add)]
                      "]")
                     [])
                    [])])))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                 "‚àë"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`n])
                 ", "
                 (Term.app `u [`i]))))
              `at_top
              (Term.app (Topology.Basic.termùìù "ùìù") [`x])]))]
          ":="
          `su.has_sum.tendsto_sum_nat)))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`L‚ÇÅ []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (Term.app
                 `f
                 [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
                   "‚àë"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [`n])
                   ", "
                   (Term.app `u [`i]))])))
              `at_top
              (Term.app (Topology.Basic.termùìù "ùìù") [(Term.app `f [`x])])]))]
          ":="
          (Term.app (Term.proj (Term.app `f.continuous.tendsto [(Term.hole "_")]) "." `comp) [`this]))))
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `fsumeq)] "]"]
        [(Tactic.location "at" (Tactic.locationHyp [`L‚ÇÅ] []))])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`L‚ÇÇ []]
          [(Term.typeSpec
            ":"
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n] [])]
                "=>"
                (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))))
              `at_top
              (Term.app (Topology.Basic.termùìù "ùìù") [(¬´term_-_¬ª `y "-" (numLit "0"))])]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.refine' "refine'" (Term.app `tendsto_const_nhds.sub [(Term.hole "_")])) [])
              (group
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_iff_norm_tendsto_zero)] "]") [])
               [])
              (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sub_zero)] "]"] []) [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `squeeze_zero
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [(Term.hole "_")] [])]
                    "=>"
                    (Term.app `norm_nonneg [(Term.hole "_")])))
                  `hnle
                  (Term.hole "_")]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["‚Üê"] (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")]))]
                 "]")
                [])
               [])
              (group
               (Tactic.¬´tactic_<;>_¬ª
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
                  [`tendsto_const_nhds]))
                "<;>"
                (Lean.Tactic.normNum "norm_num" [] []))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`feq []]
          [(Term.typeSpec ":" (¬´term_=_¬ª (Term.app `f [`x]) "=" (¬´term_-_¬ª `y "-" (numLit "0"))))]
          ":="
          (Term.app `tendsto_nhds_unique [`L‚ÇÅ `L‚ÇÇ]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_zero)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`feq] []))])
       [])
      (group (Tactic.exact "exact" (Term.anonymousCtor "‚ü®" [`x "," `feq "," `x_ineq] "‚ü©")) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.anonymousCtor "‚ü®" [`x "," `feq "," `x_ineq] "‚ü©"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "‚ü®" [`x "," `feq "," `x_ineq] "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x_ineq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `feq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_zero)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`feq] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `feq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`feq []]
     [(Term.typeSpec ":" (¬´term_=_¬ª (Term.app `f [`x]) "=" (¬´term_-_¬ª `y "-" (numLit "0"))))]
     ":="
     (Term.app `tendsto_nhds_unique [`L‚ÇÅ `L‚ÇÇ]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tendsto_nhds_unique [`L‚ÇÅ `L‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `L‚ÇÇ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `L‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto_nhds_unique
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª (Term.app `f [`x]) "=" (¬´term_-_¬ª `y "-" (numLit "0")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `y "-" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`L‚ÇÇ []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [])]
           "=>"
           (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))))
         `at_top
         (Term.app (Topology.Basic.termùìù "ùìù") [(¬´term_-_¬ª `y "-" (numLit "0"))])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.refine' "refine'" (Term.app `tendsto_const_nhds.sub [(Term.hole "_")])) [])
         (group
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_iff_norm_tendsto_zero)] "]") [])
          [])
         (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sub_zero)] "]"] []) [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            `squeeze_zero
            [(Term.fun
              "fun"
              (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
             `hnle
             (Term.hole "_")]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule ["‚Üê"] (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")]))]
            "]")
           [])
          [])
         (group
          (Tactic.¬´tactic_<;>_¬ª
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
             [`tendsto_const_nhds]))
           "<;>"
           (Lean.Tactic.normNum "norm_num" [] []))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.refine' "refine'" (Term.app `tendsto_const_nhds.sub [(Term.hole "_")])) [])
      (group
       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_iff_norm_tendsto_zero)] "]") [])
       [])
      (group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sub_zero)] "]"] []) [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `squeeze_zero
         [(Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
          `hnle
          (Term.hole "_")]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["‚Üê"] (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")]))]
         "]")
        [])
       [])
      (group
       (Tactic.¬´tactic_<;>_¬ª
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
          [`tendsto_const_nhds]))
        "<;>"
        (Lean.Tactic.normNum "norm_num" [] []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic_<;>_¬ª
   (Tactic.refine'
    "refine'"
    (Term.app
     (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
     [`tendsto_const_nhds]))
   "<;>"
   (Lean.Tactic.normNum "norm_num" [] []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic_<;>_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
    [`tendsto_const_nhds]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
   [`tendsto_const_nhds])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_const_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) "." `mul)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto_pow_at_top_nhds_0_of_lt_1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `tendsto_pow_at_top_nhds_0_of_lt_1 [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["‚Üê"] (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")]))]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `zero_mul [(Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª "‚à•" `y "‚à•")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚à•_‚à•¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `zero_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `squeeze_zero
    [(Term.fun
      "fun"
      (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
     `hnle
     (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `squeeze_zero
   [(Term.fun
     "fun"
     (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
    `hnle
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `hnle
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `norm_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun [(Term.simpleBinder [(Term.hole "_")] [])] "=>" (Term.app `norm_nonneg [(Term.hole "_")])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `squeeze_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sub_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_iff_norm_tendsto_zero)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_iff_norm_tendsto_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine' "refine'" (Term.app `tendsto_const_nhds.sub [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tendsto_const_nhds.sub [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto_const_nhds.sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))))
    `at_top
    (Term.app (Topology.Basic.termùìù "ùìù") [(¬´term_-_¬ª `y "-" (numLit "0"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.termùìù "ùìù") [(¬´term_-_¬ª `y "-" (numLit "0"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `y "-" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(¬´term_-_¬ª `y "-" (numLit "0")) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.termùìù "ùìù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.termùìù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Topology.Basic.termùìù "ùìù") [(Term.paren "(" [(¬´term_-_¬ª `y "-" (numLit "0")) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_-_¬ª `y "-" (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (¬´term_-_¬ª `y "-" (Term.app (Term.paren "(" [(Nat.Init.Data.Nat.Lemmas.¬´term_^[_]¬ª `h "^[" `n "]") []] ")") [`y]))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `fsumeq)] "]"]
   [(Tactic.location "at" (Tactic.locationHyp [`L‚ÇÅ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `L‚ÇÅ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `fsumeq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`L‚ÇÅ []]
     [(Term.typeSpec
       ":"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`n] [])]
           "=>"
           (Term.app
            `f
            [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
              "‚àë"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [`n])
              ", "
              (Term.app `u [`i]))])))
         `at_top
         (Term.app (Topology.Basic.termùìù "ùìù") [(Term.app `f [`x])])]))]
     ":="
     (Term.app (Term.proj (Term.app `f.continuous.tendsto [(Term.hole "_")]) "." `comp) [`this]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.app `f.continuous.tendsto [(Term.hole "_")]) "." `comp) [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `f.continuous.tendsto [(Term.hole "_")]) "." `comp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `f.continuous.tendsto [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f.continuous.tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f.continuous.tendsto [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Term.app
       `f
       [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
         "‚àë"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
         " in "
         (Term.app `range [`n])
         ", "
         (Term.app `u [`i]))])))
    `at_top
    (Term.app (Topology.Basic.termùìù "ùìù") [(Term.app `f [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.termùìù "ùìù") [(Term.app `f [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.termùìù "ùìù")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.termùìù', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Topology.Basic.termùìù "ùìù") [(Term.paren "(" [(Term.app `f [`x]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `at_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Term.app
     `f
     [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
       "‚àë"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
       " in "
       (Term.app `range [`n])
       ", "
       (Term.app `u [`i]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `f
   [(Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
     "‚àë"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
     " in "
     (Term.app `range [`n])
     ", "
     (Term.app `u [`i]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª
   "‚àë"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
   " in "
   (Term.app `range [`n])
   ", "
   (Term.app `u [`i]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.¬´term‚àë_in_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `u [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The Banach open mapping theorem: if a bounded linear map between Banach spaces is onto, then
    any point has a preimage with controlled norm. -/
  theorem
    exists_preimage_norm_le
    ( surj : surjective f ) : ‚àÉ C > 0 , ‚àÄ y , ‚àÉ x , f x = y ‚àß ‚à• x ‚à• ‚â§ C * ‚à• y ‚à•
    :=
      by
        obtain ‚ü® C , C0 , hC ‚ü© := exists_approx_preimage_norm_le f surj
          choose g hg using hC
          let h := fun y => y - f g y
          have hle : ‚àÄ y , ‚à• h y ‚à• ‚â§ 1 / 2 * ‚à• y ‚à• := by intro y rw [ ‚Üê dist_eq_norm , dist_comm ] exact hg y . 1
          refine' ‚ü® 2 * C + 1 , by linarith , fun y => _ ‚ü©
          have
            hnle
              : ‚àÄ n : ‚Ñï , ‚à• h ^[ n ] y ‚à• ‚â§ 1 / 2 ^ n * ‚à• y ‚à•
              :=
              by
                intro n
                  induction' n with n IH
                  ¬∑ simp only [ one_div , Nat.nat_zero_eq_zero , one_mul‚Çì , iterate_zero_apply , pow_zero‚Çì ]
                  ¬∑
                    rw [ iterate_succ' ]
                      apply le_trans‚Çì hle _ _
                      rw [ pow_succ‚Çì , mul_assoc‚Çì ]
                      apply mul_le_mul_of_nonneg_left IH
                      norm_num
          let u := fun n => g h ^[ n ] y
          have
            ule
              : ‚àÄ n , ‚à• u n ‚à• ‚â§ 1 / 2 ^ n * C * ‚à• y ‚à•
              :=
              by
                intro n
                  apply le_trans‚Çì hg _ . 2 _
                  calc
                    C * ‚à• h ^[ n ] y ‚à• ‚â§ C * 1 / 2 ^ n * ‚à• y ‚à• := mul_le_mul_of_nonneg_left hnle n C0
                      _ = 1 / 2 ^ n * C * ‚à• y ‚à• := by ring
          have
            sNu
              : Summable fun n => ‚à• u n ‚à•
              :=
              by
                refine' summable_of_nonneg_of_le fun n => norm_nonneg _ ule _
                  exact Summable.mul_right _ summable_geometric_of_lt_1 by norm_num by norm_num
          have su : Summable u := summable_of_summable_norm sNu
          let x := tsum u
          have
            x_ineq
              : ‚à• x ‚à• ‚â§ 2 * C + 1 * ‚à• y ‚à•
              :=
              calc
                ‚à• x ‚à• ‚â§ ‚àë' n , ‚à• u n ‚à• := norm_tsum_le_tsum_norm sNu
                  _ ‚â§ ‚àë' n , 1 / 2 ^ n * C * ‚à• y ‚à• := tsum_le_tsum ule sNu Summable.mul_right _ summable_geometric_two
                  _ = ‚àë' n , 1 / 2 ^ n * C * ‚à• y ‚à• := tsum_mul_right
                  _ = 2 * C * ‚à• y ‚à• := by rw [ tsum_geometric_two , mul_assoc‚Çì ]
                  _ ‚â§ 2 * C * ‚à• y ‚à• + ‚à• y ‚à• := le_add_of_nonneg_right norm_nonneg y
                  _ = 2 * C + 1 * ‚à• y ‚à• := by ring
          have
            fsumeq
              : ‚àÄ n : ‚Ñï , f ‚àë i in range n , u i = y - h ^[ n ] y
              :=
              by
                intro n
                  induction' n with n IH
                  ¬∑ simp [ f.map_zero ]
                  ¬∑ rw [ sum_range_succ , f.map_add , IH , iterate_succ' , sub_add ]
          have : tendsto fun n => ‚àë i in range n , u i at_top ùìù x := su.has_sum.tendsto_sum_nat
          have L‚ÇÅ : tendsto fun n => f ‚àë i in range n , u i at_top ùìù f x := f.continuous.tendsto _ . comp this
          simp only [ fsumeq ] at L‚ÇÅ
          have
            L‚ÇÇ
              : tendsto fun n => y - h ^[ n ] y at_top ùìù y - 0
              :=
              by
                refine' tendsto_const_nhds.sub _
                  rw [ tendsto_iff_norm_tendsto_zero ]
                  simp only [ sub_zero ]
                  refine' squeeze_zero fun _ => norm_nonneg _ hnle _
                  rw [ ‚Üê zero_mul ‚à• y ‚à• ]
                  refine' tendsto_pow_at_top_nhds_0_of_lt_1 _ _ . mul tendsto_const_nhds <;> norm_num
          have feq : f x = y - 0 := tendsto_nhds_unique L‚ÇÅ L‚ÇÇ
          rw [ sub_zero ] at feq
          exact ‚ü® x , feq , x_ineq ‚ü©

/--  The Banach open mapping theorem: a surjective bounded linear map between Banach spaces is
open. -/
theorem open_mapping (surj : surjective f) : IsOpenMap f := by
  intro s hs
  rcases exists_preimage_norm_le f surj with ‚ü®C, Cpos, hC‚ü©
  refine' is_open_iff.2 fun y yfs => _
  rcases mem_image_iff_bex.1 yfs with ‚ü®x, xs, fxy‚ü©
  rcases is_open_iff.1 hs x xs with ‚ü®Œµ, Œµpos, hŒµ‚ü©
  refine' ‚ü®Œµ / C, div_pos Œµpos Cpos, fun z hz => _‚ü©
  rcases hC (z - y) with ‚ü®w, wim, wnorm‚ü©
  have : f (x+w) = z := by
    ¬∑
      rw [f.map_add, wim, fxy, add_sub_cancel'_right]
  rw [‚Üê this]
  have : (x+w) ‚àà ball x Œµ :=
    calc dist (x+w) x = ‚à•w‚à• := by
      rw [dist_eq_norm]
      simp
      _ ‚â§ C*‚à•z - y‚à• := wnorm
      _ < C*Œµ / C := by
      apply mul_lt_mul_of_pos_left _ Cpos
      rwa [mem_ball, dist_eq_norm] at hz
      _ = Œµ := mul_div_cancel' _ (ne_of_gt‚Çì Cpos)
      
  exact Set.mem_image_of_mem _ (hŒµ this)

theorem open_mapping_affine {P Q : Type _} [MetricSpace P] [NormedAddTorsor E P] [MetricSpace Q] [NormedAddTorsor F Q]
    {f : P ‚Üí·µÉ[ùïú] Q} (hf : Continuous f) (surj : surjective f) : IsOpenMap f := by
  rw [‚Üê AffineMap.is_open_map_linear_iff]
  exact
    open_mapping { f.linear with cont := affine_map.continuous_linear_iff.mpr hf }
      (f.surjective_iff_linear_surjective.mpr surj)

/-! ### Applications of the Banach open mapping theorem -/


namespace ContinuousLinearMap

theorem exists_nonlinear_right_inverse_of_surjective (f : E ‚ÜíL[ùïú] F) (hsurj : f.range = ‚ä§) :
    ‚àÉ fsymm : nonlinear_right_inverse f, 0 < fsymm.nnnorm := by
  choose C hC fsymm h using exists_preimage_norm_le _ (linear_map.range_eq_top.mp hsurj)
  use { toFun := fsymm, nnnorm := ‚ü®C, hC.lt.le‚ü©, bound' := fun y => (h y).2, right_inv' := fun y => (h y).1 }
  exact hC

/--  A surjective continuous linear map between Banach spaces admits a (possibly nonlinear)
controlled right inverse. In general, it is not possible to ensure that such a right inverse
is linear (take for instance the map from `E` to `E/F` where `F` is a closed subspace of `E`
without a closed complement. Then it doesn't have a continuous linear right inverse.) -/
noncomputable irreducible_def nonlinear_right_inverse_of_surjective (f : E ‚ÜíL[ùïú] F) (hsurj : f.range = ‚ä§) :
  nonlinear_right_inverse f :=
  Classical.some (exists_nonlinear_right_inverse_of_surjective f hsurj)

theorem nonlinear_right_inverse_of_surjective_nnnorm_pos (f : E ‚ÜíL[ùïú] F) (hsurj : f.range = ‚ä§) :
    0 < (nonlinear_right_inverse_of_surjective f hsurj).nnnorm := by
  rw [nonlinear_right_inverse_of_surjective]
  exact Classical.some_spec (exists_nonlinear_right_inverse_of_surjective f hsurj)

end ContinuousLinearMap

namespace LinearEquiv

/--  If a bounded linear map is a bijection, then its inverse is also a bounded linear map. -/
@[continuity]
theorem continuous_symm (e : E ‚âÉ‚Çó[ùïú] F) (h : Continuous e) : Continuous e.symm := by
  rw [continuous_def]
  intro s hs
  rw [‚Üê e.image_eq_preimage]
  rw [‚Üê e.coe_coe] at h‚ä¢
  exact open_mapping ‚ü®‚Üëe, h‚ü© e.surjective s hs

/--  Associating to a linear equivalence between Banach spaces a continuous linear equivalence when
the direct map is continuous, thanks to the Banach open mapping theorem that ensures that the
inverse map is also continuous. -/
def to_continuous_linear_equiv_of_continuous (e : E ‚âÉ‚Çó[ùïú] F) (h : Continuous e) : E ‚âÉL[ùïú] F :=
  { e with continuous_to_fun := h, continuous_inv_fun := e.continuous_symm h }

@[simp]
theorem coe_fn_to_continuous_linear_equiv_of_continuous (e : E ‚âÉ‚Çó[ùïú] F) (h : Continuous e) :
    ‚áëe.to_continuous_linear_equiv_of_continuous h = e :=
  rfl

@[simp]
theorem coe_fn_to_continuous_linear_equiv_of_continuous_symm (e : E ‚âÉ‚Çó[ùïú] F) (h : Continuous e) :
    ‚áë(e.to_continuous_linear_equiv_of_continuous h).symm = e.symm :=
  rfl

end LinearEquiv

namespace ContinuousLinearEquiv

/--  Convert a bijective continuous linear map `f : E ‚ÜíL[ùïú] F` between two Banach spaces
to a continuous linear equivalence. -/
noncomputable def of_bijective (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) : E ‚âÉL[ùïú] F :=
  (LinearEquiv.ofBijective (‚Üëf) (LinearMap.ker_eq_bot.mp hinj)
        (LinearMap.range_eq_top.mp hsurj)).toContinuousLinearEquivOfContinuous
    f.continuous

@[simp]
theorem coe_fn_of_bijective (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) : ‚áëof_bijective f hinj hsurj = f :=
  rfl

theorem coe_of_bijective (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) : ‚Üëof_bijective f hinj hsurj = f := by
  ext
  rfl

@[simp]
theorem of_bijective_symm_apply_apply (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) (x : E) :
    (of_bijective f hinj hsurj).symm (f x) = x :=
  (of_bijective f hinj hsurj).symm_apply_apply x

@[simp]
theorem of_bijective_apply_symm_apply (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) (y : F) :
    f ((of_bijective f hinj hsurj).symm y) = y :=
  (of_bijective f hinj hsurj).apply_symm_apply y

end ContinuousLinearEquiv

namespace ContinuousLinearMap

/--  Intermediate definition used to show
`continuous_linear_map.closed_complemented_range_of_is_compl_of_ker_eq_bot`.

This is `f.coprod G.subtypeL` as an `continuous_linear_equiv`. -/
noncomputable def coprod_subtypeL_equiv_of_is_compl (f : E ‚ÜíL[ùïú] F) {G : Submodule ùïú F} (h : IsCompl f.range G)
    [CompleteSpace G] (hker : f.ker = ‚ä•) : (E √ó G) ‚âÉL[ùïú] F :=
  ContinuousLinearEquiv.ofBijective (f.coprod G.subtypeL)
    (by
      rw [ker_coprod_of_disjoint_range]
      ¬∑
        rw [hker, Submodule.ker_subtypeL, Submodule.prod_bot]
      ¬∑
        rw [Submodule.range_subtypeL]
        exact h.disjoint)
    (by
      simp only [range_coprod, h.sup_eq_top, Submodule.range_subtypeL])

theorem range_eq_map_coprod_subtypeL_equiv_of_is_compl (f : E ‚ÜíL[ùïú] F) {G : Submodule ùïú F} (h : IsCompl f.range G)
    [CompleteSpace G] (hker : f.ker = ‚ä•) :
    f.range =
      ((‚ä§ : Submodule ùïú E).Prod (‚ä• : Submodule ùïú G)).map (f.coprod_subtypeL_equiv_of_is_compl h hker : E √ó G ‚Üí‚Çó[ùïú] F) :=
  by
  rw [coprod_subtypeL_equiv_of_is_compl, _root_.coe_coe, ContinuousLinearEquiv.coe_of_bijective, coe_coprod,
    LinearMap.coprod_map_prod, Submodule.map_bot, sup_bot_eq, Submodule.map_top, range]

theorem closed_complemented_range_of_is_compl_of_ker_eq_bot (f : E ‚ÜíL[ùïú] F) (G : Submodule ùïú F) (h : IsCompl f.range G)
    (hG : IsClosed (G : Set F)) (hker : f.ker = ‚ä•) : IsClosed (f.range : Set F) := by
  have : CompleteSpace G := complete_space_coe_iff_is_complete.2 hG.is_complete
  let g := coprod_subtypeL_equiv_of_is_compl f h hker
  rw [congr_arg‚Çì coe‚Çì (range_eq_map_coprod_subtypeL_equiv_of_is_compl f h hker)]
  apply g.to_homeomorph.is_closed_image.2
  exact is_closed_univ.prod is_closed_singleton

end ContinuousLinearMap

