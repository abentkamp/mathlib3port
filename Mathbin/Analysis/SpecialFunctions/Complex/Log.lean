import Mathbin.Analysis.SpecialFunctions.Complex.Arg 
import Mathbin.Analysis.SpecialFunctions.Log

/-!
# The complex `log` function

Basic properties, relationship with `exp`.
-/


noncomputable theory

namespace Complex

open Set Filter

open_locale Real TopologicalSpace

/-- Inverse of the `exp` function. Returns values such that `(log x).im > - œÄ` and `(log x).im ‚â§ œÄ`.
  `log 0 = 0`-/
@[pp_nodot]
noncomputable def log (x : ‚ÑÇ) : ‚ÑÇ :=
  x.abs.log+arg x*I

theorem log_re (x : ‚ÑÇ) : x.log.re = x.abs.log :=
  by 
    simp [log]

theorem log_im (x : ‚ÑÇ) : x.log.im = x.arg :=
  by 
    simp [log]

theorem neg_pi_lt_log_im (x : ‚ÑÇ) : -œÄ < (log x).im :=
  by 
    simp only [log_im, neg_pi_lt_arg]

theorem log_im_le_pi (x : ‚ÑÇ) : (log x).im ‚â§ œÄ :=
  by 
    simp only [log_im, arg_le_pi]

theorem exp_log {x : ‚ÑÇ} (hx : x ‚â† 0) : exp (log x) = x :=
  by 
    rw [log, exp_add_mul_I, ‚Üêof_real_sin, sin_arg, ‚Üêof_real_cos, cos_arg hx, ‚Üêof_real_exp, Real.exp_log (abs_pos.2 hx),
      mul_add‚Çì, of_real_div, of_real_div, mul_div_cancel' _ (of_real_ne_zero.2 (mt abs_eq_zero.1 hx)), ‚Üêmul_assoc‚Çì,
      mul_div_cancel' _ (of_real_ne_zero.2 (mt abs_eq_zero.1 hx)), re_add_im]

@[simp]
theorem range_exp : range exp = ¬´expr ·∂ú¬ª {0} :=
  Set.ext$
    fun x =>
      ‚ü®by 
          rintro ‚ü®x, rfl‚ü©
          exact exp_ne_zero x,
        fun hx => ‚ü®log x, exp_log hx‚ü©‚ü©

theorem exp_inj_of_neg_pi_lt_of_le_pi {x y : ‚ÑÇ} (hx‚ÇÅ : -œÄ < x.im) (hx‚ÇÇ : x.im ‚â§ œÄ) (hy‚ÇÅ : -œÄ < y.im) (hy‚ÇÇ : y.im ‚â§ œÄ)
  (hxy : exp x = exp y) : x = y :=
  by 
    rw [exp_eq_exp_re_mul_sin_add_cos, exp_eq_exp_re_mul_sin_add_cos y] at hxy <;>
      exact
        Complex.ext
          (Real.exp_injective$
            by 
              simpa [abs_mul, abs_cos_add_sin_mul_I] using congr_arg‚Çì Complex.abs hxy)
          (by 
            simpa [(of_real_exp _).symm, -of_real_exp, arg_real_mul _ (Real.exp_pos _), arg_cos_add_sin_mul_I hx‚ÇÅ hx‚ÇÇ,
              arg_cos_add_sin_mul_I hy‚ÇÅ hy‚ÇÇ] using congr_arg‚Çì arg hxy)

theorem log_exp {x : ‚ÑÇ} (hx‚ÇÅ : -œÄ < x.im) (hx‚ÇÇ : x.im ‚â§ œÄ) : log (exp x) = x :=
  exp_inj_of_neg_pi_lt_of_le_pi
    (by 
      rw [log_im] <;> exact neg_pi_lt_arg _)
    (by 
      rw [log_im] <;> exact arg_le_pi _)
    hx‚ÇÅ hx‚ÇÇ
    (by 
      rw [exp_log (exp_ne_zero _)])

theorem of_real_log {x : ‚Ñù} (hx : 0 ‚â§ x) : (x.log : ‚ÑÇ) = log x :=
  Complex.ext
    (by 
      rw [log_re, of_real_re, abs_of_nonneg hx])
    (by 
      rw [of_real_im, log_im, arg_of_real_of_nonneg hx])

theorem log_of_real_re (x : ‚Ñù) : (log (x : ‚ÑÇ)).re = Real.log x :=
  by 
    simp [log_re]

@[simp]
theorem log_zero : log 0 = 0 :=
  by 
    simp [log]

@[simp]
theorem log_one : log 1 = 0 :=
  by 
    simp [log]

theorem log_neg_one : log (-1) = œÄ*I :=
  by 
    simp [log]

theorem log_I : log I = (œÄ / 2)*I :=
  by 
    simp [log]

theorem log_neg_I : log (-I) = (-(œÄ / 2))*I :=
  by 
    simp [log]

theorem two_pi_I_ne_zero : ((2*œÄ)*I : ‚ÑÇ) ‚â† 0 :=
  by 
    normNum [Real.pi_ne_zero, I_ne_zero]

theorem exp_eq_one_iff {x : ‚ÑÇ} : exp x = 1 ‚Üî ‚àÉ n : ‚Ñ§, x = n*(2*œÄ)*I :=
  have  : (Real.exp x.re*Real.cos x.im) = 1 ‚Üí Real.cos x.im ‚â† -1 :=
    fun h‚ÇÅ h‚ÇÇ =>
      by 
        rw [h‚ÇÇ, mul_neg_eq_neg_mul_symm, mul_one‚Çì, neg_eq_iff_neg_eq] at h‚ÇÅ 
        have  := Real.exp_pos x.re 
        rw [‚Üêh‚ÇÅ] at this 
        exact
          absurd this
            (by 
              normNum)
  calc exp x = 1 ‚Üî (exp x).re = 1 ‚àß (exp x).im = 0 :=
    by 
      simp [Complex.ext_iff]
    _ ‚Üî Real.cos x.im = 1 ‚àß Real.sin x.im = 0 ‚àß x.re = 0 :=
    by 
      rw [exp_eq_exp_re_mul_sin_add_cos]
      simp [Complex.ext_iff, cos_of_real_re, sin_of_real_re, exp_of_real_re, Real.exp_ne_zero]
      split  <;> finish [Real.sin_eq_zero_iff_cos_eq]
    _ ‚Üî (‚àÉ n : ‚Ñ§, (¬´expr‚Üë ¬ª n*2*œÄ) = x.im) ‚àß (‚àÉ n : ‚Ñ§, (¬´expr‚Üë ¬ª n*œÄ) = x.im) ‚àß x.re = 0 :=
    by 
      rw [Real.sin_eq_zero_iff, Real.cos_eq_one_iff]
    _ ‚Üî ‚àÉ n : ‚Ñ§, x = n*(2*œÄ)*I :=
    ‚ü®fun ‚ü®‚ü®n, hn‚ü©, ‚ü®m, hm‚ü©, h‚ü© =>
        ‚ü®n,
          by 
            simp [Complex.ext_iff, hn.symm, h]‚ü©,
      fun ‚ü®n, hn‚ü© =>
        ‚ü®‚ü®n,
            by 
              simp [hn]‚ü©,
          ‚ü®2*n,
            by 
              simp [hn, mul_comm‚Çì, mul_assoc‚Çì, mul_left_comm‚Çì]‚ü©,
          by 
            simp [hn]‚ü©‚ü©
    

theorem exp_eq_exp_iff_exp_sub_eq_one {x y : ‚ÑÇ} : exp x = exp y ‚Üî exp (x - y) = 1 :=
  by 
    rw [exp_sub, div_eq_one_iff_eq (exp_ne_zero _)]

theorem exp_eq_exp_iff_exists_int {x y : ‚ÑÇ} : exp x = exp y ‚Üî ‚àÉ n : ‚Ñ§, x = y+n*(2*œÄ)*I :=
  by 
    simp only [exp_eq_exp_iff_exp_sub_eq_one, exp_eq_one_iff, sub_eq_iff_eq_add']

@[simp]
theorem countable_preimage_exp {s : Set ‚ÑÇ} : countable (exp ‚Åª¬π' s) ‚Üî countable s :=
  by 
    refine' ‚ü®fun hs => _, fun hs => _‚ü©
    ¬∑
      refine' ((hs.image exp).insert 0).mono _ 
      rw [image_preimage_eq_inter_range, range_exp, ‚Üêdiff_eq, ‚Üêunion_singleton, diff_union_self]
      exact subset_union_left _ _
    ¬∑
      rw [‚ÜêbUnion_preimage_singleton]
      refine' hs.bUnion fun z hz => _ 
      rcases em (‚àÉ w, exp w = z) with (‚ü®w, rfl‚ü© | hne)
      ¬∑
        simp only [preimage, mem_singleton_iff, exp_eq_exp_iff_exists_int, set_of_exists]
        exact countable_Union fun m => countable_singleton _
      ¬∑
        pushNeg  at hne 
        simp [preimage, hne]

alias countable_preimage_exp ‚Üî _ Set.Countable.preimage_cexp

theorem tendsto_log_nhds_within_im_neg_of_re_neg_of_im_zero {z : ‚ÑÇ} (hre : z.re < 0) (him : z.im = 0) :
  tendsto log (ùìù[{ z : ‚ÑÇ | z.im < 0 }] z) (ùìù$ Real.log (abs z) - œÄ*I) :=
  by 
    have  :=
      (continuous_of_real.continuous_at.comp_continuous_within_at
              (continuous_abs.continuous_within_at.log _)).Tendsto.add
        (((continuous_of_real.tendsto _).comp$ tendsto_arg_nhds_within_im_neg_of_re_neg_of_im_zero hre him).mul
          tendsto_const_nhds)
    convert this
    ¬∑
      simp [sub_eq_add_neg]
    ¬∑
      lift z to ‚Ñù using him 
      simpa using hre.ne

theorem continuous_within_at_log_of_re_neg_of_im_zero {z : ‚ÑÇ} (hre : z.re < 0) (him : z.im = 0) :
  ContinuousWithinAt log { z : ‚ÑÇ | 0 ‚â§ z.im } z :=
  by 
    have  :=
      (continuous_of_real.continuous_at.comp_continuous_within_at
              (continuous_abs.continuous_within_at.log _)).Tendsto.add
        ((continuous_of_real.continuous_at.comp_continuous_within_at$
              continuous_within_at_arg_of_re_neg_of_im_zero hre him).mul
          tendsto_const_nhds)
    convert this
    ¬∑
      lift z to ‚Ñù using him 
      simpa using hre.ne

theorem tendsto_log_nhds_within_im_nonneg_of_re_neg_of_im_zero {z : ‚ÑÇ} (hre : z.re < 0) (him : z.im = 0) :
  tendsto log (ùìù[{ z : ‚ÑÇ | 0 ‚â§ z.im }] z) (ùìù$ Real.log (abs z)+œÄ*I) :=
  by 
    simpa only [log, arg_eq_pi_iff.2 ‚ü®hre, him‚ü©] using (continuous_within_at_log_of_re_neg_of_im_zero hre him).Tendsto

end Complex

section LogDeriv

open Complex Filter

open_locale TopologicalSpace

variable{Œ± : Type _}

theorem continuous_at_clog {x : ‚ÑÇ} (h : 0 < x.re ‚à® x.im ‚â† 0) : ContinuousAt log x :=
  by 
    refine' ContinuousAt.add _ _
    ¬∑
      refine' continuous_of_real.continuous_at.comp _ 
      refine' (Real.continuous_at_log _).comp complex.continuous_abs.continuous_at 
      rw [abs_ne_zero]
      intro hx 
      cases h
      ¬∑
        refine' h.ne.symm _ 
        rw [hx]
        exact zero_re
      ¬∑
        refine' h _ 
        rw [hx]
        exact zero_im
    ¬∑
      have h_cont_mul : Continuous fun x : ‚ÑÇ => x*I 
      exact continuous_id'.mul continuous_const 
      refine' h_cont_mul.continuous_at.comp (continuous_of_real.continuous_at.comp _)
      exact continuous_at_arg h

theorem Filter.Tendsto.clog {l : Filter Œ±} {f : Œ± ‚Üí ‚ÑÇ} {x : ‚ÑÇ} (h : tendsto f l (ùìù x)) (hx : 0 < x.re ‚à® x.im ‚â† 0) :
  tendsto (fun t => log (f t)) l (ùìù$ log x) :=
  (continuous_at_clog hx).Tendsto.comp h

variable[TopologicalSpace Œ±]

theorem ContinuousAt.clog {f : Œ± ‚Üí ‚ÑÇ} {x : Œ±} (h‚ÇÅ : ContinuousAt f x) (h‚ÇÇ : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  ContinuousAt (fun t => log (f t)) x :=
  h‚ÇÅ.clog h‚ÇÇ

theorem ContinuousWithinAt.clog {f : Œ± ‚Üí ‚ÑÇ} {s : Set Œ±} {x : Œ±} (h‚ÇÅ : ContinuousWithinAt f s x)
  (h‚ÇÇ : 0 < (f x).re ‚à® (f x).im ‚â† 0) : ContinuousWithinAt (fun t => log (f t)) s x :=
  h‚ÇÅ.clog h‚ÇÇ

theorem ContinuousOn.clog {f : Œ± ‚Üí ‚ÑÇ} {s : Set Œ±} (h‚ÇÅ : ContinuousOn f s)
  (h‚ÇÇ : ‚àÄ x _ : x ‚àà s, 0 < (f x).re ‚à® (f x).im ‚â† 0) : ContinuousOn (fun t => log (f t)) s :=
  fun x hx => (h‚ÇÅ x hx).clog (h‚ÇÇ x hx)

theorem Continuous.clog {f : Œ± ‚Üí ‚ÑÇ} (h‚ÇÅ : Continuous f) (h‚ÇÇ : ‚àÄ x, 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  Continuous fun t => log (f t) :=
  continuous_iff_continuous_at.2$ fun x => h‚ÇÅ.continuous_at.clog (h‚ÇÇ x)

end LogDeriv

