import Mathbin.Analysis.SpecialFunctions.Trigonometric.Complex 
import Mathbin.Analysis.SpecialFunctions.Trigonometric.Deriv

/-!
# Complex trigonometric functions

Basic facts and derivatives for the complex trigonometric functions.
-/


noncomputable section 

namespace Complex

open Set Filter

open_locale Real

theorem has_strict_deriv_at_tan {x : ‚ÑÇ} (h : cos x ‚â† 0) : HasStrictDerivAt tan (1 / (cos x^2)) x :=
  by 
    convert (has_strict_deriv_at_sin x).div (has_strict_deriv_at_cos x) h 
    rw [‚Üêsin_sq_add_cos_sq x]
    ring

theorem has_deriv_at_tan {x : ‚ÑÇ} (h : cos x ‚â† 0) : HasDerivAt tan (1 / (cos x^2)) x :=
  (has_strict_deriv_at_tan h).HasDerivAt

open_locale TopologicalSpace

theorem tendsto_abs_tan_of_cos_eq_zero {x : ‚ÑÇ} (hx : cos x = 0) : tendsto (fun x => abs (tan x)) (ùìù[{x}·∂ú] x) at_top :=
  by 
    simp only [tan_eq_sin_div_cos, ‚Üênorm_eq_abs, NormedField.norm_div]
    have A : sin x ‚â† 0 :=
      fun h =>
        by 
          simpa [*, sq] using sin_sq_add_cos_sq x 
    have B : tendsto cos (ùìù[{x}·∂ú] x) (ùìù[{0}·∂ú] 0)
    ¬∑
      refine' tendsto_inf.2 ‚ü®tendsto.mono_left _ inf_le_left, tendsto_principal.2 _‚ü©
      exacts[continuous_cos.tendsto' x 0 hx, hx ‚ñ∏ (has_deriv_at_cos _).eventually_ne (neg_ne_zero.2 A)]
    exact
      continuous_sin.continuous_within_at.norm.mul_at_top (norm_pos_iff.2 A)
        (tendsto_norm_nhds_within_zero.comp B).inv_tendsto_zero

theorem tendsto_abs_tan_at_top (k : ‚Ñ§) :
  tendsto (fun x => abs (tan x)) (ùìù[{(((2*k)+1)*œÄ) / 2}·∂ú] ((((2*k)+1)*œÄ) / 2)) at_top :=
  tendsto_abs_tan_of_cos_eq_zero$ cos_eq_zero_iff.2 ‚ü®k, rfl‚ü©

@[simp]
theorem continuous_at_tan {x : ‚ÑÇ} : ContinuousAt tan x ‚Üî cos x ‚â† 0 :=
  by 
    refine' ‚ü®fun hc h‚ÇÄ => _, fun h => (has_deriv_at_tan h).ContinuousAt‚ü©
    exact
      not_tendsto_nhds_of_tendsto_at_top (tendsto_abs_tan_of_cos_eq_zero h‚ÇÄ) _ (hc.norm.tendsto.mono_left inf_le_left)

@[simp]
theorem differentiable_at_tan {x : ‚ÑÇ} : DifferentiableAt ‚ÑÇ tan x ‚Üî cos x ‚â† 0 :=
  ‚ü®fun h => continuous_at_tan.1 h.continuous_at, fun h => (has_deriv_at_tan h).DifferentiableAt‚ü©

@[simp]
theorem deriv_tan (x : ‚ÑÇ) : deriv tan x = 1 / (cos x^2) :=
  if h : cos x = 0 then
    have  : ¬¨DifferentiableAt ‚ÑÇ tan x := mt differentiable_at_tan.1 (not_not.2 h)
    by 
      simp [deriv_zero_of_not_differentiable_at this, h, sq]
  else (has_deriv_at_tan h).deriv

@[simp]
theorem times_cont_diff_at_tan {x : ‚ÑÇ} {n : WithTop ‚Ñï} : TimesContDiffAt ‚ÑÇ n tan x ‚Üî cos x ‚â† 0 :=
  ‚ü®fun h => continuous_at_tan.1 h.continuous_at,
    times_cont_diff_sin.TimesContDiffAt.div times_cont_diff_cos.TimesContDiffAt‚ü©

end Complex

