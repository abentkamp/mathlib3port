import Mathbin.CategoryTheory.ConcreteCategory.BundledHom

/-!
# Category instances for structures that use unbundled homs

This file provides basic infrastructure to define concrete
categories using unbundled homs (see `class unbundled_hom`), and
define forgetful functors between them (see
`unbundled_hom.mk_has_forget‚ÇÇ`).
-/


universe v u

namespace CategoryTheory

/-- A class for unbundled homs used to define a category. `hom` must
take two types `Œ±`, `Œ≤` and instances of the corresponding structures,
and return a predicate on `Œ± ‚Üí Œ≤`. -/
class unbundled_hom {c : Type u ‚Üí Type u} (hom : ‚àÄ {Œ± Œ≤}, c Œ± ‚Üí c Œ≤ ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Prop) where
  hom_id {} : ‚àÄ {Œ±} ia : c Œ±, hom ia ia id
  hom_comp {} :
    ‚àÄ {Œ± Œ≤ Œ≥} {IŒ± : c Œ±} {IŒ≤ : c Œ≤} {IŒ≥ : c Œ≥} {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} hg : hom IŒ≤ IŒ≥ g hf : hom IŒ± IŒ≤ f,
      hom IŒ± IŒ≥ (g ‚àò f)

namespace UnbundledHom

variable (c : Type u ‚Üí Type u) (hom : ‚àÄ ‚¶ÉŒ± Œ≤‚¶Ñ, c Œ± ‚Üí c Œ≤ ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Prop) [ùíû : unbundled_hom hom]

include ùíû

instance bundled_hom : bundled_hom fun Œ± Œ≤ IŒ± : c Œ± IŒ≤ : c Œ≤ => Subtype (hom IŒ± IŒ≤) where
  toFun := fun _ _ _ _ => Subtype.val
  id := fun Œ± IŒ± => ‚ü®id, hom_id hom IŒ±‚ü©
  id_to_fun := by
    intros <;> rfl
  comp := fun _ _ _ _ _ _ g f => ‚ü®g.1 ‚àò f.1, hom_comp c g.2 f.2‚ü©
  comp_to_fun := by
    intros <;> rfl
  hom_ext := by
    intros <;> apply Subtype.eq

section HasForget‚ÇÇ

variable {c hom} {c' : Type u ‚Üí Type u} {hom' : ‚àÄ ‚¶ÉŒ± Œ≤‚¶Ñ, c' Œ± ‚Üí c' Œ≤ ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Prop} [ùíû' : unbundled_hom hom']

include ùíû'

variable (obj : ‚àÄ ‚¶ÉŒ±‚¶Ñ, c Œ± ‚Üí c' Œ±) (map : ‚àÄ ‚¶ÉŒ± Œ≤ IŒ± IŒ≤ f‚¶Ñ, @hom Œ± Œ≤ IŒ± IŒ≤ f ‚Üí hom' (obj IŒ±) (obj IŒ≤) f)

/-- A custom constructor for forgetful functor
between concrete categories defined using `unbundled_hom`. -/
def mk_has_forget‚ÇÇ : has_forget‚ÇÇ (bundled c) (bundled c') :=
  bundled_hom.mk_has_forget‚ÇÇ obj (fun X Y f => ‚ü®f.val, map f.property‚ü©) fun _ _ _ => rfl

end HasForget‚ÇÇ

end UnbundledHom

end CategoryTheory

