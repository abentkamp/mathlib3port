import Mathbin.CategoryTheory.Endomorphism

/-!
# Conjugate morphisms by isomorphisms

An isomorphism `Œ± : X ‚âÖ Y` defines
- a monoid isomorphism `conj : End X ‚âÉ* End Y` by `Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom`;
- a group isomorphism `conj_Aut : Aut X ‚âÉ* Aut Y` by `Œ±.conj_Aut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ±`.

For completeness, we also define `hom_congr : (X ‚âÖ X‚ÇÅ) ‚Üí (Y ‚âÖ Y‚ÇÅ) ‚Üí (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ)`,
cf. `equiv.arrow_congr`.
-/


universe v u

namespace CategoryTheory

namespace Iso

variable {C : Type u} [category.{v} C]

/--  If `X` is isomorphic to `X‚ÇÅ` and `Y` is isomorphic to `Y‚ÇÅ`, then
there is a natural bijection between `X ‚ü∂ Y` and `X‚ÇÅ ‚ü∂ Y‚ÇÅ`. See also `equiv.arrow_congr`. -/
def hom_congr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) : (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ) :=
  { toFun := fun f => Œ±.inv ‚â´ f ‚â´ Œ≤.hom, invFun := fun f => Œ±.hom ‚â´ f ‚â´ Œ≤.inv,
    left_inv := fun f =>
      show Œ±.hom ‚â´ (Œ±.inv ‚â´ f ‚â´ Œ≤.hom) ‚â´ Œ≤.inv = f by
        rw [category.assoc, category.assoc, Œ≤.hom_inv_id, Œ±.hom_inv_id_assoc, category.comp_id],
    right_inv := fun f =>
      show Œ±.inv ‚â´ (Œ±.hom ‚â´ f ‚â´ Œ≤.inv) ‚â´ Œ≤.hom = f by
        rw [category.assoc, category.assoc, Œ≤.inv_hom_id, Œ±.inv_hom_id_assoc, category.comp_id] }

@[simp]
theorem hom_congr_apply {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) : Œ±.hom_congr Œ≤ f = Œ±.inv ‚â´ f ‚â´ Œ≤.hom :=
  rfl

theorem hom_congr_comp {X Y Z X‚ÇÅ Y‚ÇÅ Z‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (Œ≥ : Z ‚âÖ Z‚ÇÅ) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    Œ±.hom_congr Œ≥ (f ‚â´ g) = Œ±.hom_congr Œ≤ f ‚â´ Œ≤.hom_congr Œ≥ g := by
  simp

@[simp]
theorem hom_congr_refl {X Y : C} (f : X ‚ü∂ Y) : (iso.refl X).homCongr (iso.refl Y) f = f := by
  simp

@[simp]
theorem hom_congr_trans {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : C} (Œ±‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) (Œ±‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÉ) (Œ≤‚ÇÇ : Y‚ÇÇ ‚âÖ Y‚ÇÉ)
    (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) : (Œ±‚ÇÅ ‚â™‚â´ Œ±‚ÇÇ).homCongr (Œ≤‚ÇÅ ‚â™‚â´ Œ≤‚ÇÇ) f = (Œ±‚ÇÅ.hom_congr Œ≤‚ÇÅ).trans (Œ±‚ÇÇ.hom_congr Œ≤‚ÇÇ) f := by
  simp

@[simp]
theorem hom_congr_symm {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (Œ± : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) : (Œ±.hom_congr Œ≤).symm = Œ±.symm.hom_congr Œ≤.symm :=
  rfl

variable {X Y : C} (Œ± : X ‚âÖ Y)

/--  An isomorphism between two objects defines a monoid isomorphism between their
monoid of endomorphisms. -/
def conj : End X ‚âÉ* End Y :=
  { hom_congr Œ± Œ± with map_mul' := fun f g => hom_congr_comp Œ± Œ± Œ± g f }

theorem conj_apply (f : End X) : Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom :=
  rfl

@[simp]
theorem conj_comp (f g : End X) : Œ±.conj (f ‚â´ g) = Œ±.conj f ‚â´ Œ±.conj g :=
  Œ±.conj.map_mul g f

@[simp]
theorem conj_id : Œ±.conj (ùüô X) = ùüô Y :=
  Œ±.conj.map_one

@[simp]
theorem refl_conj (f : End X) : (iso.refl X).conj f = f := by
  rw [conj_apply, iso.refl_inv, iso.refl_hom, category.id_comp, category.comp_id]

@[simp]
theorem trans_conj {Z : C} (Œ≤ : Y ‚âÖ Z) (f : End X) : (Œ± ‚â™‚â´ Œ≤).conj f = Œ≤.conj (Œ±.conj f) :=
  hom_congr_trans Œ± Œ± Œ≤ Œ≤ f

@[simp]
theorem symm_self_conj (f : End X) : Œ±.symm.conj (Œ±.conj f) = f := by
  rw [‚Üê trans_conj, Œ±.self_symm_id, refl_conj]

@[simp]
theorem self_symm_conj (f : End Y) : Œ±.conj (Œ±.symm.conj f) = f :=
  Œ±.symm.symm_self_conj f

@[simp]
theorem conj_pow (f : End X) (n : ‚Ñï) : Œ±.conj (f ^ n) = Œ±.conj f ^ n :=
  Œ±.conj.to_monoid_hom.map_pow f n

/--  `conj` defines a group isomorphisms between groups of automorphisms -/
def conj_Aut : Aut X ‚âÉ* Aut Y :=
  (Aut.units_End_equiv_Aut X).symm.trans $ (Units.mapEquiv Œ±.conj).trans $ Aut.units_End_equiv_Aut Y

theorem conj_Aut_apply (f : Aut X) : Œ±.conj_Aut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ± := by
  cases f <;> cases Œ± <;> ext <;> rfl

@[simp]
theorem conj_Aut_hom (f : Aut X) : (Œ±.conj_Aut f).Hom = Œ±.conj f.hom :=
  rfl

@[simp]
theorem trans_conj_Aut {Z : C} (Œ≤ : Y ‚âÖ Z) (f : Aut X) : (Œ± ‚â™‚â´ Œ≤).conjAut f = Œ≤.conj_Aut (Œ±.conj_Aut f) := by
  simp only [conj_Aut_apply, iso.trans_symm, iso.trans_assoc]

@[simp]
theorem conj_Aut_mul (f g : Aut X) : Œ±.conj_Aut (f*g) = Œ±.conj_Aut f*Œ±.conj_Aut g :=
  Œ±.conj_Aut.map_mul f g

@[simp]
theorem conj_Aut_trans (f g : Aut X) : Œ±.conj_Aut (f ‚â™‚â´ g) = Œ±.conj_Aut f ‚â™‚â´ Œ±.conj_Aut g :=
  conj_Aut_mul Œ± g f

@[simp]
theorem conj_Aut_pow (f : Aut X) (n : ‚Ñï) : Œ±.conj_Aut (f ^ n) = Œ±.conj_Aut f ^ n :=
  Œ±.conj_Aut.to_monoid_hom.map_pow f n

@[simp]
theorem conj_Aut_zpow (f : Aut X) (n : ‚Ñ§) : Œ±.conj_Aut (f ^ n) = Œ±.conj_Aut f ^ n :=
  Œ±.conj_Aut.to_monoid_hom.map_zpow f n

end Iso

namespace Functor

universe v‚ÇÅ u‚ÇÅ

variable {C : Type u} [category.{v} C] {D : Type u‚ÇÅ} [category.{v‚ÇÅ} D] (F : C ‚•§ D)

theorem map_hom_congr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) :
    F.map (iso.hom_congr Œ± Œ≤ f) = iso.hom_congr (F.map_iso Œ±) (F.map_iso Œ≤) (F.map f) := by
  simp

theorem map_conj {X Y : C} (Œ± : X ‚âÖ Y) (f : End X) : F.map (Œ±.conj f) = (F.map_iso Œ±).conj (F.map f) :=
  map_hom_congr F Œ± Œ± f

theorem map_conj_Aut (F : C ‚•§ D) {X Y : C} (Œ± : X ‚âÖ Y) (f : Aut X) :
    F.map_iso (Œ±.conj_Aut f) = (F.map_iso Œ±).conjAut (F.map_iso f) := by
  ext <;> simp only [map_iso_hom, iso.conj_Aut_hom, F.map_conj]

end Functor

end CategoryTheory

