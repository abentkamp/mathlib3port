import Mathbin.CategoryTheory.Monoidal.Mon_

/-!
# The category of module objects over a monoid object.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open CategoryTheory

open CategoryTheory.MonoidalCategory

variable (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] [monoidal_category.{v‚ÇÅ} C]

variable {C}

/-- A module object for a monoid object, all internal to some monoidal category. -/
structure Mod‚Çì (A : Mon_ C) where
  x : C
  act : A.X ‚äó X ‚ü∂ X
  one_act' : (A.one ‚äó ùüô X) ‚â´ act = (Œª_ X).Hom := by
    run_tac
      obviously
  assoc' : (A.mul ‚äó ùüô X) ‚â´ act = (Œ±_ A.X A.X X).Hom ‚â´ (ùüô A.X ‚äó act) ‚â´ act := by
    run_tac
      obviously

restate_axiom Mod‚Çì.one_act'

restate_axiom Mod‚Çì.assoc'

attribute [simp, reassoc] Mod‚Çì.one_act Mod‚Çì.assoc

namespace Mod‚Çì

variable {A : Mon_ C} (M : Mod‚Çì A)

theorem assoc_flip : (ùüô A.X ‚äó M.act) ‚â´ M.act = (Œ±_ A.X A.X M.X).inv ‚â´ (A.mul ‚äó ùüô M.X) ‚â´ M.act := by
  simp

/-- A morphism of module objects. -/
@[ext]
structure hom (M N : Mod‚Çì A) where
  Hom : M.X ‚ü∂ N.X
  act_hom' : M.act ‚â´ hom = (ùüô A.X ‚äó hom) ‚â´ N.act := by
    run_tac
      obviously

restate_axiom hom.act_hom'

attribute [simp, reassoc] hom.act_hom

/-- The identity morphism on a module object. -/
@[simps]
def id (M : Mod‚Çì A) : hom M M where
  Hom := ùüô M.X

instance hom_inhabited (M : Mod‚Çì A) : Inhabited (hom M M) :=
  ‚ü®id M‚ü©

/-- Composition of module object morphisms. -/
@[simps]
def comp {M N O : Mod‚Çì A} (f : hom M N) (g : hom N O) : hom M O where
  Hom := f.hom ‚â´ g.hom

instance : category (Mod‚Çì A) where
  Hom := fun M N => hom M N
  id := id
  comp := fun M N O f g => comp f g

@[simp]
theorem id_hom' (M : Mod‚Çì A) : (ùüô M : hom M M).Hom = ùüô M.X :=
  rfl

@[simp]
theorem comp_hom' {M N K : Mod‚Çì A} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : hom M K).Hom = f.hom ‚â´ g.hom :=
  rfl

variable (A)

/-- A monoid object as a module over itself. -/
@[simps]
def regular : Mod‚Çì A where
  x := A.X
  act := A.mul

instance : Inhabited (Mod‚Çì A) :=
  ‚ü®regular A‚ü©

/-- The forgetful functor from module objects to the ambient category. -/
def forget : Mod‚Çì A ‚•§ C where
  obj := fun A => A.X
  map := fun A B f => f.hom

open CategoryTheory.MonoidalCategory

/-- A morphism of monoid objects induces a "restriction" or "comap" functor
between the categories of module objects.
-/
@[simps]
def comap {A B : Mon_ C} (f : A ‚ü∂ B) : Mod‚Çì B ‚•§ Mod‚Çì A where
  obj := fun M =>
    { x := M.X, act := (f.hom ‚äó ùüô M.X) ‚â´ M.act,
      one_act' := by
        slice_lhs 1 2 => rw [‚Üê comp_tensor_id]
        rw [f.one_hom, one_act],
      assoc' := by
        slice_rhs 2 3 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
        rw [id_tensor_comp]
        slice_rhs 4 5 => rw [Mod‚Çì.assoc_flip]
        slice_rhs 3 4 => rw [associator_inv_naturality]
        slice_rhs 2 3 => rw [‚Üê tensor_id, associator_inv_naturality]
        slice_rhs 1 3 => rw [iso.hom_inv_id_assoc]
        slice_rhs 1 2 => rw [‚Üê comp_tensor_id, tensor_id_comp_id_tensor]
        slice_rhs 1 2 => rw [‚Üê comp_tensor_id, ‚Üê f.mul_hom]
        rw [comp_tensor_id, category.assoc] }
  map := fun M N g =>
    { Hom := g.hom,
      act_hom' := by
        dsimp
        slice_rhs 1 2 => rw [id_tensor_comp_tensor_id, ‚Üê tensor_id_comp_id_tensor]
        slice_rhs 2 3 => rw [‚Üê g.act_hom]
        rw [category.assoc] }

end Mod‚Çì

