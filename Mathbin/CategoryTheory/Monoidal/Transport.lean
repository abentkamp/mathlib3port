import Mathbin.CategoryTheory.Monoidal.NaturalTransformation

/-!
# Transport a monoidal structure along an equivalence.

When `C` and `D` are equivalent as categories,
we can transport a monoidal structure on `C` along the equivalence,
obtaining a monoidal structure on `D`.

We don't yet prove anything about this transported structure!
The next step would be to show that the original functor can be upgraded
to a monoidal functor with respect to this new structure.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open CategoryTheory

open CategoryTheory.Category

open CategoryTheory.MonoidalCategory

namespace CategoryTheory.Monoidal

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C][monoidal_category.{v‚ÇÅ} C]

variable{D : Type u‚ÇÇ}[category.{v‚ÇÇ} D]

/--
Transport a monoidal structure along an equivalence of (plain) categories.
-/
@[simps]
def transport (e : C ‚âå D) : monoidal_category.{v‚ÇÇ} D :=
  { tensorObj := fun X Y => e.functor.obj (e.inverse.obj X ‚äó e.inverse.obj Y),
    tensorHom := fun W X Y Z f g => e.functor.map (e.inverse.map f ‚äó e.inverse.map g),
    tensorUnit := e.functor.obj (ùüô_ C),
    associator :=
      fun X Y Z =>
        e.functor.map_iso
          (((e.unit_iso.app _).symm ‚äó iso.refl _) ‚â™‚â´
            Œ±_ (e.inverse.obj X) (e.inverse.obj Y) (e.inverse.obj Z) ‚â™‚â´ (iso.refl _ ‚äó e.unit_iso.app _)),
    leftUnitor :=
      fun X => e.functor.map_iso (((e.unit_iso.app _).symm ‚äó iso.refl _) ‚â™‚â´ Œª_ (e.inverse.obj X)) ‚â™‚â´ e.counit_iso.app _,
    rightUnitor :=
      fun X => e.functor.map_iso ((iso.refl _ ‚äó (e.unit_iso.app _).symm) ‚â™‚â´ œÅ_ (e.inverse.obj X)) ‚â™‚â´ e.counit_iso.app _,
    triangle' :=
      fun X Y =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, comp_tensor_id, equivalence.unit_inverse_comp, assoc,
            equivalence.inv_fun_map, comp_id, functor.map_comp, id_tensor_comp, e.inverse.map_id]
          simp only [‚Üêe.functor.map_comp]
          congr 2
          sliceLHS 2 3 => rw [‚Üêid_tensor_comp]simp dsimp rw [tensor_id]
          rw [category.id_comp, ‚Üêassociator_naturality_assoc, triangle],
    pentagon' :=
      fun W X Y Z =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, comp_tensor_id, assoc, equivalence.inv_fun_map, functor.map_comp,
            id_tensor_comp, e.inverse.map_id]
          simp only [‚Üêe.functor.map_comp]
          congr 2
          sliceLHS 4 5 => rw [‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [category.id_comp, category.assoc]
          sliceLHS 5 6 => rw [‚Üêid_tensor_comp, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [category.id_comp, category.assoc]
          sliceRHS 2 3 => rw [id_tensor_comp_tensor_id, ‚Üêtensor_id_comp_id_tensor]
          sliceRHS 1 2 => rw [‚Üêtensor_id, ‚Üêassociator_naturality]
          sliceRHS 3 4 => rw [‚Üêtensor_id, associator_naturality]
          sliceRHS 2 3 => rw [‚Üêpentagon]
          simp only [category.assoc]
          congr 2
          sliceLHS 1 2 => rw [associator_naturality]
          simp only [category.assoc]
          congr 1
          sliceLHS 1 2 => rw [‚Üêid_tensor_comp, ‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id, tensor_id]
          simp only [category.id_comp, category.assoc],
    left_unitor_naturality' :=
      fun X Y f =>
        by 
          dsimp 
          simp only [functor.map_comp, Functor.map_id, category.assoc]
          erw [‚Üêe.counit_iso.hom.naturality]
          simp only [functor.comp_map, ‚Üêe.functor.map_comp_assoc]
          congr 2
          rw [e.inverse.map_id, id_tensor_comp_tensor_id_assoc, ‚Üêtensor_id_comp_id_tensor_assoc,
            left_unitor_naturality],
    right_unitor_naturality' :=
      fun X Y f =>
        by 
          dsimp 
          simp only [functor.map_comp, Functor.map_id, category.assoc]
          erw [‚Üêe.counit_iso.hom.naturality]
          simp only [functor.comp_map, ‚Üêe.functor.map_comp_assoc]
          congr 2
          rw [e.inverse.map_id, tensor_id_comp_id_tensor_assoc, ‚Üêid_tensor_comp_tensor_id_assoc,
            right_unitor_naturality],
    associator_naturality' :=
      fun X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ f‚ÇÅ f‚ÇÇ f‚ÇÉ =>
        by 
          dsimp 
          simp only [equivalence.inv_fun_map, functor.map_comp, category.assoc]
          simp only [‚Üêe.functor.map_comp]
          congr 1
          convLHS => rw [‚Üêtensor_id_comp_id_tensor]
          sliceLHS 2 3 => rw [id_tensor_comp_tensor_id, ‚Üêtensor_id_comp_id_tensor, ‚Üêtensor_id]
          simp only [category.assoc]
          sliceLHS 3 4 => rw [associator_naturality]
          convLHS => simp only [comp_tensor_id]
          sliceLHS 3 4 => rw [‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [category.id_comp, category.assoc]
          sliceLHS 2 3 => rw [associator_naturality]
          simp only [category.assoc]
          congr 2
          sliceLHS 1 1 => rw [‚Üêtensor_id_comp_id_tensor]
          sliceLHS 2 3 => rw [‚Üêid_tensor_comp, tensor_id_comp_id_tensor]
          sliceLHS 1 2 => rw [tensor_id_comp_id_tensor]
          convRHS => congr skip rw [‚Üêid_tensor_comp_tensor_id, id_tensor_comp]
          simp only [category.assoc]
          sliceRHS 1 2 => rw [‚Üêid_tensor_comp, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [category.id_comp, category.assoc]
          convRHS => rw [id_tensor_comp]
          sliceRHS 2 3 => rw [id_tensor_comp_tensor_id, ‚Üêtensor_id_comp_id_tensor]
          sliceRHS 1 2 => rw [id_tensor_comp_tensor_id] }

-- error in CategoryTheory.Monoidal.Transport: ././Mathport/Syntax/Translate/Basic.lean:704:9: unsupported derive handler category
/-- A type synonym for `D`, which will carry the transported monoidal structure. -/
@[derive #[expr category], nolint #[ident unused_arguments]]
def transported (e : ¬´expr ‚âå ¬ª(C, D)) :=
D

instance  (e : C ‚âå D) : monoidal_category (transported e) :=
  transport e

instance  (e : C ‚âå D) : Inhabited (transported e) :=
  ‚ü®ùüô_ _‚ü©

/--
We can upgrade `e.functor` to a lax monoidal functor from `C` to `D` with the transported structure.
-/
@[simps]
def lax_to_transported (e : C ‚âå D) : lax_monoidal_functor C (transported e) :=
  { e.functor with Œµ := ùüô (e.functor.obj (ùüô_ C)), Œº := fun X Y => e.functor.map (e.unit_inv.app X ‚äó e.unit_inv.app Y),
    Œº_natural' :=
      fun X Y X' Y' f g =>
        by 
          dsimp 
          simp only [equivalence.inv_fun_map, functor.map_comp, tensor_comp, category.assoc]
          simp only [‚Üêe.functor.map_comp]
          congr 1
          rw [‚Üêtensor_comp, iso.hom_inv_id_app, iso.hom_inv_id_app, ‚Üêtensor_comp]
          dsimp 
          rw [comp_id, comp_id],
    associativity' :=
      fun X Y Z =>
        by 
          dsimp 
          simp only [comp_tensor_id, assoc, equivalence.inv_fun_map, functor.map_comp, id_tensor_comp, e.inverse.map_id]
          simp only [‚Üêe.functor.map_comp]
          congr 2
          sliceLHS 3 3 => rw [‚Üêtensor_id_comp_id_tensor]
          sliceLHS 2 3 => rw [‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [id_comp]
          sliceRHS 2 3 => rw [‚Üêid_tensor_comp, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [id_comp]
          convRHS => rw [‚Üêid_tensor_comp_tensor_id _ (e.unit_inv.app X)]
          dsimp only [functor.comp_obj]
          sliceRHS 3 4 => rw [‚Üêid_tensor_comp, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp only [id_comp]
          simp [associator_naturality],
    left_unitality' :=
      fun X =>
        by 
          dsimp 
          simp only [tensor_id, assoc, id_comp, functor.map_comp, e.inverse.map_id]
          rw [equivalence.counit_app_functor]
          simp only [‚Üêe.functor.map_comp]
          congr 1
          rw [‚Üêleft_unitor_naturality]
          simp ,
    right_unitality' :=
      fun X =>
        by 
          dsimp 
          simp only [tensor_id, assoc, id_comp, functor.map_comp, e.inverse.map_id]
          rw [equivalence.counit_app_functor]
          simp only [‚Üêe.functor.map_comp]
          congr 1
          rw [‚Üêright_unitor_naturality]
          simp  }

/--
We can upgrade `e.functor` to a monoidal functor from `C` to `D` with the transported structure.
-/
@[simps]
def to_transported (e : C ‚âå D) : monoidal_functor C (transported e) :=
  { lax_to_transported e with
    Œµ_is_iso :=
      by 
        dsimp 
        infer_instance,
    Œº_is_iso :=
      fun X Y =>
        by 
          dsimp 
          infer_instance }

/--
We can upgrade `e.inverse` to a lax monoidal functor from `D` with the transported structure to `C`.
-/
@[simps]
def lax_from_transported (e : C ‚âå D) : lax_monoidal_functor (transported e) C :=
  { e.inverse with Œµ := e.unit.app (ùüô_ C), Œº := fun X Y => e.unit.app (e.inverse.obj X ‚äó e.inverse.obj Y),
    Œº_natural' :=
      fun X Y X' Y' f g =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, equivalence.inv_fun_map],
    associativity' :=
      fun X Y Z =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, assoc, equivalence.inv_fun_map, functor.map_comp]
          sliceLHS 1 2 => rw [‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp ,
    left_unitality' :=
      fun X =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, equivalence.unit_inverse_comp, assoc, equivalence.inv_fun_map, comp_id,
            functor.map_comp]
          sliceRHS 1 2 => rw [‚Üêcomp_tensor_id, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp ,
    right_unitality' :=
      fun X =>
        by 
          dsimp 
          simp only [iso.hom_inv_id_app_assoc, equivalence.unit_inverse_comp, assoc, equivalence.inv_fun_map, comp_id,
            functor.map_comp]
          sliceRHS 1 2 => rw [‚Üêid_tensor_comp, iso.hom_inv_id_app]dsimp rw [tensor_id]
          simp  }

/--
We can upgrade `e.inverse` to a monoidal functor from `D` with the transported structure to `C`.
-/
@[simps]
def from_transported (e : C ‚âå D) : monoidal_functor (transported e) C :=
  { lax_from_transported e with
    Œµ_is_iso :=
      by 
        dsimp 
        infer_instance,
    Œº_is_iso :=
      fun X Y =>
        by 
          dsimp 
          infer_instance }

/-- The unit isomorphism upgrades to a monoidal isomorphism. -/
@[simps]
def transported_monoidal_unit_iso (e : C ‚âå D) :
  lax_monoidal_functor.id C ‚âÖ lax_to_transported e ‚äó‚ãô lax_from_transported e :=
  monoidal_nat_iso.of_components (fun X => e.unit_iso.app X) (fun X Y f => e.unit.naturality f)
    (by 
      dsimp 
      simp )
    fun X Y =>
      by 
        dsimp 
        simp only [iso.hom_inv_id_app_assoc, id_comp, equivalence.inv_fun_map]
        sliceRHS 1 2 => rw [‚Üêtensor_comp, iso.hom_inv_id_app, iso.hom_inv_id_app]dsimp rw [tensor_id]
        simp 

/-- The counit isomorphism upgrades to a monoidal isomorphism. -/
@[simps]
def transported_monoidal_counit_iso (e : C ‚âå D) :
  lax_from_transported e ‚äó‚ãô lax_to_transported e ‚âÖ lax_monoidal_functor.id (transported e) :=
  monoidal_nat_iso.of_components (fun X => e.counit_iso.app X) (fun X Y f => e.counit.naturality f)
    (by 
      dsimp 
      simp )
    fun X Y =>
      by 
        dsimp 
        simp only [iso.hom_inv_id_app_assoc, id_comp, equivalence.inv_fun_map]
        simp only [equivalence.counit_app_functor, ‚Üêe.functor.map_id, ‚Üêe.functor.map_comp]
        congr 1
        simp [equivalence.unit_inv_app_inverse]
        dsimp 
        simp 

end CategoryTheory.Monoidal

