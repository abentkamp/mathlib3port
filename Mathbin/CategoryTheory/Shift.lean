import Mathbin.CategoryTheory.Limits.Shapes.Zero
import Mathbin.CategoryTheory.Monoidal.End
import Mathbin.CategoryTheory.Monoidal.Discrete

/-!
# Shift

A `shift` on a category `C` indexed by a monoid `A` is is nothing more than a monoidal functor
from `A` to `C ‚•§ C`. A typical example to keep in mind might be the category of
complexes `‚ãØ ‚Üí C_{n-1} ‚Üí C_n ‚Üí C_{n+1} ‚Üí ‚ãØ`. It has a shift indexed by `‚Ñ§`, where we assign to
each `n : ‚Ñ§` the functor `C ‚•§ C` that re-indexing the terms, so the degree `i` term of `shift n C`
would be the degree `i+n`-th term of `C`.

## Main definitions
* `has_shift`: A typeclass asserting the existence of a shift functor.
* `shift_equiv`: When the indexing monoid is a group, then the functor indexed by `n` and `-n` forms
  an self-equivalence of `C`.
* `shift_comm`: When the indexing monoid is commutative, then shifts commute as well.

## Implementation Notes

Most of the definitions in this file is marked as an `abbreviation` so that the simp lemmas in
`category_theory/monoidal/End` could apply.

-/


namespace CategoryTheory

noncomputable section

universe v u

variable (C : Type u) (A : Type _) [category.{v} C]

attribute [local instance] endofunctor_monoidal_category

attribute [local reducible] endofunctor_monoidal_category Discrete.addMonoidal

section EqToHom

variable {A C}

variable [AddMonoid‚Çì A] (F : monoidal_functor (discrete A) (C ‚•§ C))

@[simp, reassoc]
theorem eq_to_hom_Œº_app {i j i' j' : A} (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') (X : C) :
    eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (F.Œº i' j').app X =
      (F.Œº i j).app X ‚â´
        eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[simp, reassoc]
theorem Œº_inv_app_eq_to_hom {i j i' j' : A} (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') (X : C) :
    (F.Œº_iso i j).inv.app X ‚â´
        eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) =
      eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (F.Œº_iso i' j').inv.app X :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

end EqToHom

variable {A C}

/-- A monoidal functor from a group `A` into `C ‚•§ C` induces
a self-equivalence of `C` for each `n : A`. -/
@[simps Functor inverse unit_iso_hom unit_iso_inv counit_iso_hom counit_iso_inv]
def add_neg_equiv [AddGroup‚Çì A] (F : monoidal_functor (discrete A) (C ‚•§ C)) (n : A) : C ‚âå C :=
  equiv_of_tensor_iso_unit F n (-n : A) (eq_to_iso (add_neg_self‚Çì n)) (eq_to_iso (neg_add_self‚Çì n))
    (Subsingleton.elim‚Çì _ _)

section Defs

variable (A C) [AddMonoid‚Çì A]

/-- A category has a shift indexed by an additive monoid `A`
if there is a monoidal functor from `A` to `C ‚•§ C`. -/
class has_shift (C : Type u) (A : Type _) [category.{v} C] [AddMonoid‚Çì A] where
  shift : monoidal_functor (discrete A) (C ‚•§ C)

/-- A helper structure to construct the shift functor `(discrete A) ‚•§ (C ‚•§ C)`. -/
@[nolint has_inhabited_instance]
structure shift_mk_core where
  f : A ‚Üí C ‚•§ C
  Œµ : ùü≠ C ‚âÖ F 0
  Œº : ‚àÄ n m : A, F n ‚ãô F m ‚âÖ F (n + m)
  associativity :
    ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ : A X : C,
      (F m‚ÇÉ).map ((Œº m‚ÇÅ m‚ÇÇ).Hom.app X) ‚â´
          (Œº (m‚ÇÅ + m‚ÇÇ) m‚ÇÉ).Hom.app X ‚â´
            eq_to_hom
              (by
                congr 2
                exact add_assoc‚Çì _ _ _) =
        (Œº m‚ÇÇ m‚ÇÉ).Hom.app ((F m‚ÇÅ).obj X) ‚â´ (Œº m‚ÇÅ (m‚ÇÇ + m‚ÇÉ)).Hom.app X := by
    run_tac
      obviously
  left_unitality :
    ‚àÄ n : A X : C,
      (F n).map (Œµ.hom.app X) ‚â´ (Œº 0 n).Hom.app X =
        eq_to_hom
          (by
            dsimp
            rw [zero_add‚Çì]) := by
    run_tac
      obviously
  right_unitality :
    ‚àÄ n : A X : C,
      Œµ.hom.app ((F n).obj X) ‚â´ (Œº n 0).Hom.app X =
        eq_to_hom
          (by
            dsimp
            rw [add_zero‚Çì]) := by
    run_tac
      obviously

/-- Constructs a `has_shift C A` instance from `shift_mk_core`. -/
@[simps]
def has_shift_mk (h : shift_mk_core C A) : has_shift C A :=
  ‚ü®{ discrete.functor h.F with Œµ := h.Œµ.hom, Œº := fun m n => (h.Œº m n).Hom,
      Œº_natural' := by
        rintro _ _ _ _ ‚ü®‚ü®rfl‚ü©‚ü© ‚ü®‚ü®rfl‚ü©‚ü©
        ext
        dsimp
        simp
        dsimp
        simp ,
      associativity' := by
        introv
        ext
        dsimp
        simpa using h.associativity _ _ _ _,
      left_unitality' := by
        introv
        ext
        dsimp
        rw [category.id_comp, ‚Üê category.assoc, h.left_unitality]
        simp ,
      right_unitality' := by
        introv
        ext
        dsimp
        rw [Functor.map_id, category.comp_id, ‚Üê category.assoc, h.right_unitality]
        simp }‚ü©

variable [has_shift C A]

/-- The monoidal functor from `A` to `C ‚•§ C` given a `has_shift` instance. -/
def shift_monoidal_functor : monoidal_functor (discrete A) (C ‚•§ C) :=
  has_shift.shift

variable {A}

/-- The shift autoequivalence, moving objects and morphisms 'up'. -/
abbrev shift_functor (i : A) : C ‚•§ C :=
  (shift_monoidal_functor C A).obj i

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
abbrev shift_functor_add (i j : A) : shift_functor C (i + j) ‚âÖ shift_functor C i ‚ãô shift_functor C j :=
  ((shift_monoidal_functor C A).ŒºIso i j).symm

variable (A)

/-- Shifting by zero is the identity functor. -/
abbrev shift_functor_zero : shift_functor C (0 : A) ‚âÖ ùü≠ C :=
  (shift_monoidal_functor C A).ŒµIso.symm

notation X "‚ü¶" n "‚üß" => (shift_functor _ n).obj X

notation f "‚ü¶" n "‚üß'" => (shift_functor _ n).map f

end Defs

section Examples

variable [has_shift C ‚Ñ§]

example {X Y : C} (f : X ‚ü∂ Y) : X‚ü¶(1 : ‚Ñ§)‚üß ‚ü∂ Y‚ü¶1‚üß :=
  f‚ü¶1‚üß'

example {X Y : C} (f : X ‚ü∂ Y) : X‚ü¶(-2 : ‚Ñ§)‚üß ‚ü∂ Y‚ü¶-2‚üß :=
  f‚ü¶-2‚üß'

end Examples

section AddMonoid‚Çì

variable {C A} [AddMonoid‚Çì A] [has_shift C A] (X Y : C) (f : X ‚ü∂ Y)

@[simp]
theorem has_shift.shift_obj_obj (n : A) (X : C) : (has_shift.shift.obj n).obj X = X‚ü¶n‚üß :=
  rfl

/-- Shifting by `i + j` is the same as shifting by `i` and then shifting by `j`. -/
abbrev shift_add (i j : A) : X‚ü¶i + j‚üß ‚âÖ X‚ü¶i‚üß‚ü¶j‚üß :=
  (shift_functor_add C i j).app _

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÅ (i i' j : A) (h : i = i') :
    (shift_add X i j).Hom ‚â´
        eq_to_hom
          (by
            rw [h]) =
      eq_to_hom
          (by
            rw [h]) ‚â´
        (shift_add X i' j).Hom :=
  by
  cases h
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÇ (i j j' : A) (h : j = j') :
    (shift_add X i j).Hom ‚â´
        eq_to_hom
          (by
            rw [h]) =
      eq_to_hom
          (by
            rw [h]) ‚â´
        (shift_add X i j').Hom :=
  by
  cases h
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem shift_add_hom_comp_eq_to_hom‚ÇÅ‚ÇÇ (i j i' j' : A) (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') :
    (shift_add X i j).Hom ‚â´
        eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) =
      eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (shift_add X i' j').Hom :=
  by
  cases h‚ÇÅ
  cases h‚ÇÇ
  rw [eq_to_hom_refl, eq_to_hom_refl, category.id_comp, category.comp_id]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÅ (i i' j : A) (h : i = i') :
    eq_to_hom
          (by
            rw [h]) ‚â´
        (shift_add X i' j).inv =
      (shift_add X i j).inv ‚â´
        eq_to_hom
          (by
            rw [h]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÅ]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÇ (i j j' : A) (h : j = j') :
    eq_to_hom
          (by
            rw [h]) ‚â´
        (shift_add X i j').inv =
      (shift_add X i j).inv ‚â´
        eq_to_hom
          (by
            rw [h]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÇ]

@[reassoc]
theorem eq_to_hom_comp_shift_add_inv‚ÇÅ‚ÇÇ (i j i' j' : A) (h‚ÇÅ : i = i') (h‚ÇÇ : j = j') :
    eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) ‚â´
        (shift_add X i' j').inv =
      (shift_add X i j).inv ‚â´
        eq_to_hom
          (by
            rw [h‚ÇÅ, h‚ÇÇ]) :=
  by
  rw [iso.comp_inv_eq, category.assoc, iso.eq_inv_comp, shift_add_hom_comp_eq_to_hom‚ÇÅ‚ÇÇ]

theorem shift_shift' (i j : A) : f‚ü¶i‚üß'‚ü¶j‚üß' = (shift_add X i j).inv ‚â´ f‚ü¶i + j‚üß' ‚â´ (shift_add Y i j).Hom := by
  symm
  apply nat_iso.naturality_1

variable (A)

/-- Shifting by zero is the identity functor. -/
abbrev shift_zero : X‚ü¶0‚üß ‚âÖ X :=
  (shift_functor_zero C A).app _

theorem shift_zero' : f‚ü¶(0 : A)‚üß' = (shift_zero A X).Hom ‚â´ f ‚â´ (shift_zero A Y).inv := by
  symm
  apply nat_iso.naturality_2

end AddMonoid‚Çì

section OpaqueEqToIso

variable {Œπ : Type _} {i j k : Œπ}

/-- This definition is used instead of `eq_to_iso` so that the proof of `i = j` is visible
to the simplifier -/
def opaque_eq_to_iso (h : i = j) : @iso (discrete Œπ) _ i j :=
  eq_to_iso h

@[simp]
theorem opaque_eq_to_iso_symm (h : i = j) : (opaque_eq_to_iso h).symm = opaque_eq_to_iso h.symm :=
  rfl

@[simp]
theorem opaque_eq_to_iso_inv (h : i = j) : (opaque_eq_to_iso h).inv = (opaque_eq_to_iso h.symm).Hom :=
  rfl

@[simp, reassoc]
theorem map_opaque_eq_to_iso_comp_app (F : discrete Œπ ‚•§ C ‚•§ C) (h : i = j) (h' : j = k) (X : C) :
    (F.map (opaque_eq_to_iso h).Hom).app X ‚â´ (F.map (opaque_eq_to_iso h').Hom).app X =
      (F.map (opaque_eq_to_iso $ h.trans h').Hom).app X :=
  by
  delta' opaque_eq_to_iso
  simp

end OpaqueEqToIso

section AddGroup‚Çì

variable (C) {A} [AddGroup‚Çì A] [has_shift C A]

variable (X Y : C) (f : X ‚ü∂ Y)

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
abbrev shift_functor_comp_shift_functor_neg (i : A) : shift_functor C i ‚ãô shift_functor C (-i) ‚âÖ ùü≠ C :=
  unit_of_tensor_iso_unit (shift_monoidal_functor C A) i (-i : A) (opaque_eq_to_iso (add_neg_self‚Çì i))

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
abbrev shift_functor_neg_comp_shift_functor (i : A) : shift_functor C (-i) ‚ãô shift_functor C i ‚âÖ ùü≠ C :=
  unit_of_tensor_iso_unit (shift_monoidal_functor C A) (-i : A) i (opaque_eq_to_iso (neg_add_self‚Çì i))

section

variable (C)

/-- Shifting by `n` is a faithful functor. -/
instance shift_functor_faithful (i : A) : faithful (shift_functor C i) :=
  faithful.of_comp_iso (shift_functor_comp_shift_functor_neg C i)

/-- Shifting by `n` is a full functor. -/
instance shift_functor_full (i : A) : full (shift_functor C i) :=
  have : full (shift_functor C i ‚ãô shift_functor C (-i)) := full.of_iso (shift_functor_comp_shift_functor_neg C i).symm
  full.of_comp_faithful _ (shift_functor C (-i))

/-- Shifting by `n` is an essentially surjective functor. -/
instance shift_functor_ess_surj (i : A) : ess_surj (shift_functor C i) where
  mem_ess_image := fun Y => ‚ü®Y‚ü¶-i‚üß, ‚ü®(shift_functor_neg_comp_shift_functor C i).app Y‚ü©‚ü©

/-- Shifting by `n` is an equivalence. -/
noncomputable instance shift_functor_is_equivalence (n : A) : is_equivalence (shift_functor C n) :=
  equivalence.of_fully_faithfully_ess_surj _

end

variable {C}

/-- Shifting by `i` and then shifting by `-i` is the identity. -/
abbrev shift_shift_neg (i : A) : X‚ü¶i‚üß‚ü¶-i‚üß ‚âÖ X :=
  (shift_functor_comp_shift_functor_neg C i).app _

/-- Shifting by `-i` and then shifting by `i` is the identity. -/
abbrev shift_neg_shift (i : A) : X‚ü¶-i‚üß‚ü¶i‚üß ‚âÖ X :=
  (shift_functor_neg_comp_shift_functor C i).app _

variable {X Y}

theorem shift_shift_neg' (i : A) : f‚ü¶i‚üß'‚ü¶-i‚üß' = (shift_shift_neg X i).Hom ‚â´ f ‚â´ (shift_shift_neg Y i).inv := by
  symm
  apply nat_iso.naturality_2

theorem shift_neg_shift' (i : A) : f‚ü¶-i‚üß'‚ü¶i‚üß' = (shift_neg_shift X i).Hom ‚â´ f ‚â´ (shift_neg_shift Y i).inv := by
  symm
  apply nat_iso.naturality_2

theorem shift_equiv_triangle (n : A) (X : C) :
    (shift_shift_neg X n).inv‚ü¶n‚üß' ‚â´ (shift_neg_shift (X‚ü¶n‚üß) n).Hom = ùüô (X‚ü¶n‚üß) :=
  (add_neg_equiv (shift_monoidal_functor C A) n).functor_unit_iso_comp X

theorem shift_shift_neg_hom_shift (n : A) (X : C) : (shift_shift_neg X n).Hom‚ü¶n‚üß' = (shift_neg_shift (X‚ü¶n‚üß) n).Hom := by
  simp

theorem shift_shift_neg_inv_shift (n : A) (X : C) : (shift_shift_neg X n).inv‚ü¶n‚üß' = (shift_neg_shift (X‚ü¶n‚üß) n).inv := by
  ext
  rw [‚Üê shift_shift_neg_hom_shift, ‚Üê functor.map_comp, iso.hom_inv_id, Functor.map_id]

@[simp]
theorem shift_shift_neg_shift_eq (n : A) (X : C) :
    (shift_functor C n).mapIso (shift_shift_neg X n) = shift_neg_shift (X‚ü¶n‚üß) n :=
  CategoryTheory.Iso.ext $ shift_shift_neg_hom_shift _ _

variable (C)

/-- Shifting by `n` and shifting by `-n` forms an equivalence. -/
@[simps]
def shift_equiv (n : A) : C ‚âå C :=
  { add_neg_equiv (shift_monoidal_functor C A) n with Functor := shift_functor C n, inverse := shift_functor C (-n) }

variable {C}

open CategoryTheory.Limits

variable [has_zero_morphisms C]

@[simp]
theorem shift_zero_eq_zero (X Y : C) (n : A) : (0 : X ‚ü∂ Y)‚ü¶n‚üß' = (0 : X‚ü¶n‚üß ‚ü∂ Y‚ü¶n‚üß) := by
  apply is_equivalence_preserves_zero_morphisms _ (shift_functor C n)

end AddGroup‚Çì

section AddCommMonoid‚Çì

variable {C A} [AddCommMonoid‚Çì A] [has_shift C A]

variable (X Y : C) (f : X ‚ü∂ Y)

/-- When shifts are indexed by an additive commutative monoid, then shifts commute. -/
def shift_comm (i j : A) : X‚ü¶i‚üß‚ü¶j‚üß ‚âÖ X‚ü¶j‚üß‚ü¶i‚üß :=
  (shift_add X i j).symm ‚â™‚â´
    ((shift_monoidal_functor C A).toFunctor.mapIso (opaque_eq_to_iso $ add_comm‚Çì i j : _)).app X ‚â™‚â´ shift_add X j i

@[simp]
theorem shift_comm_symm (i j : A) : (shift_comm X i j).symm = shift_comm X j i := by
  ext
  dsimp [shift_comm]
  simpa

variable {X Y}

/-- When shifts are indexed by an additive commutative monoid, then shifts commute. -/
theorem shift_comm' (i j : A) : f‚ü¶i‚üß'‚ü¶j‚üß' = (shift_comm _ _ _).Hom ‚â´ f‚ü¶j‚üß'‚ü¶i‚üß' ‚â´ (shift_comm _ _ _).Hom := by
  simp [shift_comm]

@[reassoc]
theorem shift_comm_hom_comp (i j : A) : (shift_comm X i j).Hom ‚â´ f‚ü¶j‚üß'‚ü¶i‚üß' = f‚ü¶i‚üß'‚ü¶j‚üß' ‚â´ (shift_comm Y i j).Hom := by
  rw [shift_comm', ‚Üê shift_comm_symm, iso.symm_hom, iso.inv_hom_id_assoc]

end AddCommMonoid‚Çì

end CategoryTheory

