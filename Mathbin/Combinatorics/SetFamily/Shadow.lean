import Mathbin.Data.Finset.Lattice
import Mathbin.Logic.Function.Iterate

/-!
# Shadows

This file defines shadows of a set family. The shadow of a set family is the set family of sets we
get by removing any element from any set of the original family. If one pictures `finset Œ±` as a big
hypercube (each dimension being membership of a given element), then taking the shadow corresponds
to projecting each finset down once in all available directions.

## Main definitions

The `shadow` of a set family is everything we can get by removing an element from each set.

## Notation

`‚àÇ ùíú` is notation for `shadow ùíú`. It is situated in locale `finset_family`.

We also maintain the convention that `a, b : Œ±` are elements of the ground type, `s, t : finset Œ±`
are finsets, and `ùíú, ‚Ñ¨ : finset (finset Œ±)` are finset families.

## References

* https://github.com/b-mehta/maths-notes/blob/master/iii/mich/combinatorics.pdf
* http://discretemath.imp.fu-berlin.de/DMII-2015-16/kruskal.pdf

## Tags

shadow, set family
-/


open Finset Nat

variable {Œ± : Type _}

namespace Finset

variable [DecidableEq Œ±] {ùíú : Finset (Finset Œ±)} {s t : Finset Œ±} {a : Œ±} {k : ‚Ñï}

/--  The shadow of a set family `ùíú` is all sets we can get by removing one element from any set in
`ùíú`, and the (`k` times) iterated shadow (`shadow^[k]`) is all sets we can get by removing `k`
elements from any set in `ùíú`. -/
def shadow (ùíú : Finset (Finset Œ±)) : Finset (Finset Œ±) :=
  ùíú.sup fun s => s.image (erase s)

localized [FinsetFamily] notation:90 "‚àÇ " => Finset.shadow

/--  The shadow of the empty set is empty. -/
@[simp]
theorem shadow_empty : (‚àÇ ) (‚àÖ : Finset (Finset Œ±)) = ‚àÖ :=
  rfl

/--  The shadow is monotone. -/
@[mono]
theorem shadow_monotone : Monotone (shadow : Finset (Finset Œ±) ‚Üí Finset (Finset Œ±)) := fun ùíú ‚Ñ¨ => sup_mono

/--  `s` is in the shadow of `ùíú` iff there is an `t ‚àà ùíú` from which we can remove one element to
get `s`. -/
theorem mem_shadow_iff : s ‚àà (‚àÇ ) ùíú ‚Üî ‚àÉ t ‚àà ùíú, ‚àÉ a ‚àà t, erase t a = s := by
  simp only [shadow, mem_sup, mem_image]

theorem erase_mem_shadow (hs : s ‚àà ùíú) (ha : a ‚àà s) : erase s a ‚àà (‚àÇ ) ùíú :=
  mem_shadow_iff.2 ‚ü®s, hs, a, ha, rfl‚ü©

-- ././Mathport/Syntax/Translate/Basic.lean:477:2: warning: expanding binder collection (a ¬´expr ‚àâ ¬ª s)
/--  `t` is in the shadow of `ùíú` iff we can add an element to it so that the resulting finset is in
`ùíú`. -/
theorem mem_shadow_iff_insert_mem : s ‚àà (‚àÇ ) ùíú ‚Üî ‚àÉ (a : _)(_ : a ‚àâ s), insert a s ‚àà ùíú := by
  refine' mem_shadow_iff.trans ‚ü®_, _‚ü©
  ¬∑
    rintro ‚ü®s, hs, a, ha, rfl‚ü©
    refine' ‚ü®a, not_mem_erase a s, _‚ü©
    rwa [insert_erase ha]
  ¬∑
    rintro ‚ü®a, ha, hs‚ü©
    exact ‚ü®insert a s, hs, a, mem_insert_self _ _, erase_insert ha‚ü©

/--  `s ‚àà ‚àÇ ùíú` iff `s` is exactly one element less than something from `ùíú` -/
theorem mem_shadow_iff_exists_mem_card_add_one : s ‚àà (‚àÇ ) ùíú ‚Üî ‚àÉ t ‚àà ùíú, s ‚äÜ t ‚àß t.card = s.card+1 := by
  refine' mem_shadow_iff_insert_mem.trans ‚ü®_, _‚ü©
  ¬∑
    rintro ‚ü®a, ha, hs‚ü©
    exact ‚ü®insert a s, hs, subset_insert _ _, card_insert_of_not_mem ha‚ü©
  ¬∑
    rintro ‚ü®t, ht, hst, h‚ü©
    obtain ‚ü®a, ha‚ü© : ‚àÉ a, t \ s = {a} :=
      card_eq_one.1
        (by
          rw [card_sdiff hst, h, add_tsub_cancel_left])
    exact
      ‚ü®a, fun hat => not_mem_sdiff_of_mem_right hat ((ha.ge : _ ‚äÜ _) $ mem_singleton_self a), by
        rwa [insert_eq a s, ‚Üê ha, sdiff_union_of_subset hst]‚ü©

/--  Being in the shadow of `ùíú` means we have a superset in `ùíú`. -/
theorem exists_subset_of_mem_shadow (hs : s ‚àà (‚àÇ ) ùíú) : ‚àÉ t ‚àà ùíú, s ‚äÜ t :=
  let ‚ü®t, ht, hst‚ü© := mem_shadow_iff_exists_mem_card_add_one.1 hs
  ‚ü®t, ht, hst.1‚ü©

/--  `t ‚àà ‚àÇ^k ùíú` iff `t` is exactly `k` elements less than something in `ùíú`. -/
theorem mem_shadow_iff_exists_mem_card_add : s ‚àà (‚àÇ ^[k]) ùíú ‚Üî ‚àÉ t ‚àà ùíú, s ‚äÜ t ‚àß t.card = s.card+k := by
  induction' k with k ih generalizing ùíú s
  ¬∑
    refine' ‚ü®fun hs => ‚ü®s, hs, subset.refl _, rfl‚ü©, _‚ü©
    rintro ‚ü®t, ht, hst, hcard‚ü©
    rwa [eq_of_subset_of_card_le hst hcard.le]
  simp only [exists_prop, Function.comp_app, Function.iterate_succ]
  refine' ih.trans _
  clear ih
  constructor
  ¬∑
    rintro ‚ü®t, ht, hst, hcardst‚ü©
    obtain ‚ü®u, hu, htu, hcardtu‚ü© := mem_shadow_iff_exists_mem_card_add_one.1 ht
    refine' ‚ü®u, hu, hst.trans htu, _‚ü©
    rw [hcardtu, hcardst]
    rfl
  ¬∑
    rintro ‚ü®t, ht, hst, hcard‚ü©
    obtain ‚ü®u, hsu, hut, hu‚ü© :=
      Finset.exists_intermediate_set k
        (by
          rw [add_comm‚Çì, hcard]
          exact le_succ _)
        hst
    rw [add_comm‚Çì] at hu
    refine' ‚ü®u, mem_shadow_iff_exists_mem_card_add_one.2 ‚ü®t, ht, hut, _‚ü©, hsu, hu‚ü©
    rw [hcard, hu]
    rfl

end Finset

