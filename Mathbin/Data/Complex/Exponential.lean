import Mathbin.Algebra.GeomSum
import Mathbin.Data.Complex.Basic
import Mathbin.Data.Nat.Choose.Sum

/-!
# Exponential, trigonometric and hyperbolic trigonometric functions

This file contains the definitions of the real and complex exponential, sine, cosine, tangent,
hyperbolic sine, hyperbolic cosine, and hyperbolic tangent functions.

-/


local notation "abs'" => HasAbs.abs

open IsAbsoluteValue

open_locale Classical BigOperators Nat ComplexConjugate

section

open Real IsAbsoluteValue Finset

section

variable {α : Type _} {β : Type _} [Ringₓ β] [LinearOrderedField α] [Archimedean α] {abv : β → α} [IsAbsoluteValue abv]

theorem is_cau_of_decreasing_bounded (f : ℕ → α) {a : α} {m : ℕ} (ham : ∀, ∀ n ≥ m, ∀, |f n| ≤ a)
    (hnm : ∀, ∀ n ≥ m, ∀, f n.succ ≤ f n) : IsCauSeq abs f := fun ε ε0 =>
  let ⟨k, hk⟩ := Archimedean.arch a ε0
  have h : ∃ l, ∀, ∀ n ≥ m, ∀, a - l • ε < f n :=
    ⟨(k+k)+1, fun n hnm =>
      lt_of_lt_of_leₓ
        (show a - (k+k+1) • ε < -|f n| from
          lt_neg.1 $
            lt_of_le_of_ltₓ (ham n hnm)
              (by
                rw [neg_sub, lt_sub_iff_add_lt, add_nsmul, add_nsmul, one_nsmul]
                exact add_lt_add_of_le_of_lt hk (lt_of_le_of_ltₓ hk (lt_add_of_pos_right _ ε0))))
        (neg_le.2 $ abs_neg (f n) ▸ le_abs_self _)⟩
  let l := Nat.findₓ h
  have hl : ∀ n : ℕ, n ≥ m → f n > a - l • ε := Nat.find_specₓ h
  have hl0 : l ≠ 0 := fun hl0 =>
    not_lt_of_geₓ (ham m (le_reflₓ _))
      (lt_of_lt_of_leₓ
        (by
          have := hl m (le_reflₓ m) <;> simpa [hl0] using this)
        (le_abs_self (f m)))
  by
  cases' not_forall.1 (Nat.find_minₓ h (Nat.pred_ltₓ hl0)) with i hi
  rw [not_imp, not_ltₓ] at hi
  exists i
  intro j hj
  have hfij : f j ≤ f i := (Nat.rel_of_forall_rel_succ_of_le_of_le (· ≥ ·) hnm hi.1 hj).le
  rw [abs_of_nonpos (sub_nonpos.2 hfij), neg_sub, sub_lt_iff_lt_add']
  calc f i ≤ a - Nat.pred l • ε := hi.2_ = (a - l • ε)+ε := by
    conv =>
      rhs rw [← Nat.succ_pred_eq_of_posₓ (Nat.pos_of_ne_zeroₓ hl0), succ_nsmul', sub_add, add_sub_cancel]_ < f j+ε :=
    add_lt_add_right (hl j (le_transₓ hi.1 hj)) _

theorem is_cau_of_mono_bounded (f : ℕ → α) {a : α} {m : ℕ} (ham : ∀, ∀ n ≥ m, ∀, |f n| ≤ a)
    (hnm : ∀, ∀ n ≥ m, ∀, f n ≤ f n.succ) : IsCauSeq abs f := by
  refine'
    @Eq.recOnₓ (ℕ → α) _ (IsCauSeq abs) _ _
      (-⟨_,
            @is_cau_of_decreasing_bounded _ _ _ (fun n => -f n) a m
              (by
                simpa)
              (by
                simpa)⟩ :
          CauSeq α abs).2
  ext
  exact neg_negₓ _

end

section NoArchimedean

variable {α : Type _} {β : Type _} [Ringₓ β] [LinearOrderedField α] {abv : β → α} [IsAbsoluteValue abv]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_series_of_abv_le_cau [])
  (Command.declSig
   [(Term.implicitBinder "{" [`f] [":" (Term.arrow (termℕ "ℕ") "→" `β)] "}")
    (Term.implicitBinder "{" [`g] [":" (Term.arrow (termℕ "ℕ") "→" `α)] "}")
    (Term.explicitBinder "(" [`n] [":" (termℕ "ℕ")] [] ")")]
   (Term.typeSpec
    ":"
    (Term.arrow
     (Term.forall
      "∀"
      [(Term.simpleBinder [`m] [])]
      ","
      (Term.arrow («term_≤_» `n "≤" `m) "→" («term_≤_» (Term.app `abv [(Term.app `f [`m])]) "≤" (Term.app `g [`m]))))
     "→"
     (Term.arrow
      (Term.app
       `IsCauSeq
       [`abs
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`n] [])]
          "=>"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [`n])
           ", "
           (Term.app `g [`i]))))])
      "→"
      (Term.app
       `IsCauSeq
       [`abv
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`n] [])]
          "=>"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [`n])
           ", "
           (Term.app `f [`i]))))])))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group (Tactic.intro "intro" [`hm `hg `ε `ε0]) [])
       (group
        (Tactic.cases'
         "cases'"
         [(Tactic.casesTarget
           []
           (Term.app
            `hg
            [(«term_/_» `ε "/" (numLit "2"))
             (Term.app
              `div_pos
              [`ε0
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])]))]
         []
         ["with" [(Lean.binderIdent `i) (Lean.binderIdent `hi)]])
        [])
       (group (Tactic.existsi "exists" [(Term.app `max [`n `i])]) [])
       (group (Tactic.intro "intro" [`j `ji]) [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hi₁ []]
           []
           ":="
           (Term.app `hi [`j (Term.app `le_transₓ [(Term.app `le_max_rightₓ [`n `i]) `ji])]))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hi₂ []]
           []
           ":="
           (Term.app `hi [(Term.app `max [`n `i]) (Term.app `le_max_rightₓ [`n `i])]))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`sub_le []]
           []
           ":="
           (Term.app
            `abs_sub_le
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`j])
              ", "
              (Term.app `g [`k]))
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`i])
              ", "
              (Term.app `g [`k]))
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(Term.app `max [`n `i])])
              ", "
              (Term.app `g [`k]))]))))
        [])
       (group
        (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `add_lt_add [`hi₁ `hi₂]))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            []
            (Term.app
             `abs_sub_comm
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(Term.app `max [`n `i])])
               ", "
               (Term.app `g [`k]))]))
           ","
           (Tactic.rwRule [] (Term.app `add_halves [`ε]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `lt_of_le_of_ltₓ
          [(Term.app
            `le_transₓ
            [(Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])]) `sub_le])
           `this]))
        [])
       (group
        (Tactic.generalize
         "generalize"
         [(Tactic.generalizeArg [`hk ":"] («term_-_» `j "-" (Term.app `max [`n `i])) "=" `k)])
        [])
       (group (Tactic.clear "clear" [`this `hi₂ `hi₁ `hi `ε0 `ε `hg `sub_le]) [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `tsub_eq_iff_eq_add_of_le [`ji]))] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        [])
       (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk)] "]") []) [])
       (group (Tactic.clear "clear" [`hk `ji `j]) [])
       (group
        (Tactic.induction'
         "induction'"
         [(Tactic.casesTarget [] `k)]
         []
         ["with" [(Lean.binderIdent `k') (Lean.binderIdent `hi)]]
         [])
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] [])
             [])])))
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `Nat.succ_add)
                ","
                (Tactic.simpLemma [] [] `sum_range_succ_comm)
                ","
                (Tactic.simpLemma [] [] `sub_eq_add_neg)
                ","
                (Tactic.simpLemma [] [] `add_assocₓ)]
               "]"]
              [])
             [])
            (group
             (Tactic.refine'
              "refine'"
              (Term.app
               `le_transₓ
               [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
             [])
            (group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.app
               `add_le_add
               [(Term.app
                 `hm
                 [(Term.hole "_")
                  (Term.app
                   `le_add_of_nonneg_of_le
                   [(Term.app `Nat.zero_leₓ [(Term.hole "_")])
                    (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
                `hi]))
             [])])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`hm `hg `ε `ε0]) [])
      (group
       (Tactic.cases'
        "cases'"
        [(Tactic.casesTarget
          []
          (Term.app
           `hg
           [(«term_/_» `ε "/" (numLit "2"))
            (Term.app
             `div_pos
             [`ε0
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])]))]
        []
        ["with" [(Lean.binderIdent `i) (Lean.binderIdent `hi)]])
       [])
      (group (Tactic.existsi "exists" [(Term.app `max [`n `i])]) [])
      (group (Tactic.intro "intro" [`j `ji]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hi₁ []]
          []
          ":="
          (Term.app `hi [`j (Term.app `le_transₓ [(Term.app `le_max_rightₓ [`n `i]) `ji])]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hi₂ []]
          []
          ":="
          (Term.app `hi [(Term.app `max [`n `i]) (Term.app `le_max_rightₓ [`n `i])]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`sub_le []]
          []
          ":="
          (Term.app
           `abs_sub_le
           [(Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [`j])
             ", "
             (Term.app `g [`k]))
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [`i])
             ", "
             (Term.app `g [`k]))
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [(Term.app `max [`n `i])])
             ", "
             (Term.app `g [`k]))]))))
       [])
      (group
       (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `add_lt_add [`hi₁ `hi₂]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule
           []
           (Term.app
            `abs_sub_comm
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(Term.app `max [`n `i])])
              ", "
              (Term.app `g [`k]))]))
          ","
          (Tactic.rwRule [] (Term.app `add_halves [`ε]))]
         "]")
        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `lt_of_le_of_ltₓ
         [(Term.app
           `le_transₓ
           [(Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])]) `sub_le])
          `this]))
       [])
      (group
       (Tactic.generalize
        "generalize"
        [(Tactic.generalizeArg [`hk ":"] («term_-_» `j "-" (Term.app `max [`n `i])) "=" `k)])
       [])
      (group (Tactic.clear "clear" [`this `hi₂ `hi₁ `hi `ε0 `ε `hg `sub_le]) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `tsub_eq_iff_eq_add_of_le [`ji]))] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk)] "]") []) [])
      (group (Tactic.clear "clear" [`hk `ji `j]) [])
      (group
       (Tactic.induction'
        "induction'"
        [(Tactic.casesTarget [] `k)]
        []
        ["with" [(Lean.binderIdent `k') (Lean.binderIdent `hi)]]
        [])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simp
             "simp"
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `Nat.succ_add)
               ","
               (Tactic.simpLemma [] [] `sum_range_succ_comm)
               ","
               (Tactic.simpLemma [] [] `sub_eq_add_neg)
               ","
               (Tactic.simpLemma [] [] `add_assocₓ)]
              "]"]
             [])
            [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `le_transₓ
              [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
            [])
           (group
            (Tactic.simp
             "simp"
             []
             ["only"]
             ["[" [(Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
             [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              `add_le_add
              [(Term.app
                `hm
                [(Term.hole "_")
                 (Term.app
                  `le_add_of_nonneg_of_le
                  [(Term.app `Nat.zero_leₓ [(Term.hole "_")])
                   (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
               `hi]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `Nat.succ_add)
          ","
          (Tactic.simpLemma [] [] `sum_range_succ_comm)
          ","
          (Tactic.simpLemma [] [] `sub_eq_add_neg)
          ","
          (Tactic.simpLemma [] [] `add_assocₓ)]
         "]"]
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
        [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `add_le_add
         [(Term.app
           `hm
           [(Term.hole "_")
            (Term.app
             `le_add_of_nonneg_of_le
             [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
          `hi]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `add_le_add
    [(Term.app
      `hm
      [(Term.hole "_")
       (Term.app
        `le_add_of_nonneg_of_le
        [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
     `hi]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_le_add
   [(Term.app
     `hm
     [(Term.hole "_")
      (Term.app
       `le_add_of_nonneg_of_le
       [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
    `hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `hm
   [(Term.hole "_")
    (Term.app
     `le_add_of_nonneg_of_le
     [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_add_of_nonneg_of_le
   [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_max_leftₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Nat.zero_leₓ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.zero_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_add_of_nonneg_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `le_add_of_nonneg_of_le
   [(Term.paren "(" [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) []] ")")
    (Term.paren "(" [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `hm
   [(Term.hole "_")
    (Term.paren
     "("
     [(Term.app
       `le_add_of_nonneg_of_le
       [(Term.paren "(" [(Term.app `Nat.zero_leₓ [(Term.hole "_")]) []] ")")
        (Term.paren "(" [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `sub_eq_add_neg)] "]"]
   [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] `Nat.succ_add)
     ","
     (Tactic.simpLemma [] [] `sum_range_succ_comm)
     ","
     (Tactic.simpLemma [] [] `sub_eq_add_neg)
     ","
     (Tactic.simpLemma [] [] `add_assocₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_range_succ_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.succ_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_zero [`abv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.induction'
   "induction'"
   [(Tactic.casesTarget [] `k)]
   []
   ["with" [(Lean.binderIdent `k') (Lean.binderIdent `hi)]]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.induction'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.clear "clear" [`hk `ji `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.clear', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ji
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `tsub_eq_iff_eq_add_of_le [`ji]))] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tsub_eq_iff_eq_add_of_le [`ji])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ji
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_eq_iff_eq_add_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.clear "clear" [`this `hi₂ `hi₁ `hi `ε0 `ε `hg `sub_le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.clear', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ε
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ε0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hi₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hi₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.generalize "generalize" [(Tactic.generalizeArg [`hk ":"] («term_-_» `j "-" (Term.app `max [`n `i])) "=" `k)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.generalize', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.generalizeArg', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `j "-" (Term.app `max [`n `i]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `max [`n `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `max
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«:»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `lt_of_le_of_ltₓ
    [(Term.app `le_transₓ [(Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])]) `sub_le])
     `this]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `lt_of_le_of_ltₓ
   [(Term.app `le_transₓ [(Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])]) `sub_le])
    `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_transₓ [(Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])]) `sub_le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_transₓ [(Term.hole "_") (Term.app `le_abs_self [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_abs_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_abs_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_abs_self [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_transₓ [(Term.hole "_") (Term.paren "(" [(Term.app `le_abs_self [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `le_transₓ
   [(Term.paren
     "("
     [(Term.app `le_transₓ [(Term.hole "_") (Term.paren "(" [(Term.app `le_abs_self [(Term.hole "_")]) []] ")")]) []]
     ")")
    `sub_le])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule
      []
      (Term.app
       `abs_sub_comm
       [(Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
         " in "
         (Term.app `range [(Term.app `max [`n `i])])
         ", "
         (Term.app `g [`k]))]))
     ","
     (Tactic.rwRule [] (Term.app `add_halves [`ε]))]
    "]")
   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_halves [`ε])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ε
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_halves
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `abs_sub_comm
   [(Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [(Term.app `max [`n `i])])
     ", "
     (Term.app `g [`k]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
   " in "
   (Term.app `range [(Term.app `max [`n `i])])
   ", "
   (Term.app `g [`k]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `g [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(Term.app `max [`n `i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `max [`n `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `max
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `max [`n `i]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_series_of_abv_le_cau
  { f : ℕ → β } { g : ℕ → α } ( n : ℕ )
    :
      ∀ m , n ≤ m → abv f m ≤ g m
        →
        IsCauSeq abs fun n => ∑ i in range n , g i → IsCauSeq abv fun n => ∑ i in range n , f i
  :=
    by
      intro hm hg ε ε0
        cases' hg ε / 2 div_pos ε0 by norm_num with i hi
        exists max n i
        intro j ji
        have hi₁ := hi j le_transₓ le_max_rightₓ n i ji
        have hi₂ := hi max n i le_max_rightₓ n i
        have sub_le := abs_sub_le ∑ k in range j , g k ∑ k in range i , g k ∑ k in range max n i , g k
        have := add_lt_add hi₁ hi₂
        rw [ abs_sub_comm ∑ k in range max n i , g k , add_halves ε ] at this
        refine' lt_of_le_of_ltₓ le_transₓ le_transₓ _ le_abs_self _ sub_le this
        generalize hk : j - max n i = k
        clear this hi₂ hi₁ hi ε0 ε hg sub_le
        rw [ tsub_eq_iff_eq_add_of_le ji ] at hk
        rw [ hk ]
        clear hk ji j
        induction' k with k' hi
        · simp [ abv_zero abv ]
        ·
          simp only [ Nat.succ_add , sum_range_succ_comm , sub_eq_add_neg , add_assocₓ ]
            refine' le_transₓ abv_add _ _ _ _
            simp only [ sub_eq_add_neg ] at hi
            exact add_le_add hm _ le_add_of_nonneg_of_le Nat.zero_leₓ _ le_max_leftₓ _ _ hi

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_series_of_abv_cau [])
  (Command.declSig
   [(Term.implicitBinder "{" [`f] [":" (Term.arrow (termℕ "ℕ") "→" `β)] "}")]
   (Term.typeSpec
    ":"
    (Term.arrow
     (Term.app
      `IsCauSeq
      [`abs
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m] [])]
         "=>"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
          " in "
          (Term.app `range [`m])
          ", "
          (Term.app `abv [(Term.app `f [`n])]))))])
     "→"
     (Term.app
      `IsCauSeq
      [`abv
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m] [])]
         "=>"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
          " in "
          (Term.app `range [`m])
          ", "
          (Term.app `f [`n]))))]))))
  (Command.declValSimple
   ":="
   (Term.app
    `is_cau_series_of_abv_le_cau
    [(numLit "0")
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n `h] [])] "=>" (Term.app `le_reflₓ [(Term.hole "_")])))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `is_cau_series_of_abv_le_cau
   [(numLit "0")
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n `h] [])] "=>" (Term.app `le_reflₓ [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`n `h] [])] "=>" (Term.app `le_reflₓ [(Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_reflₓ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_reflₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_series_of_abv_le_cau
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.arrow
   (Term.app
    `IsCauSeq
    [`abs
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m] [])]
       "=>"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
        " in "
        (Term.app `range [`m])
        ", "
        (Term.app `abv [(Term.app `f [`n])]))))])
   "→"
   (Term.app
    `IsCauSeq
    [`abv
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m] [])]
       "=>"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
        " in "
        (Term.app `range [`m])
        ", "
        (Term.app `f [`n]))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `IsCauSeq
   [`abv
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m] [])]
      "=>"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
       " in "
       (Term.app `range [`m])
       ", "
       (Term.app `f [`n]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m] [])]
    "=>"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
     " in "
     (Term.app `range [`m])
     ", "
     (Term.app `f [`n]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
   " in "
   (Term.app `range [`m])
   ", "
   (Term.app `f [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_series_of_abv_cau
  { f : ℕ → β } : IsCauSeq abs fun m => ∑ n in range m , abv f n → IsCauSeq abv fun m => ∑ n in range m , f n
  := is_cau_series_of_abv_le_cau 0 fun n h => le_reflₓ _

end NoArchimedean

section

variable {α : Type _} {β : Type _} [Ringₓ β] [LinearOrderedField α] [Archimedean α] {abv : β → α} [IsAbsoluteValue abv]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_geo_series [])
  (Command.declSig
   [(Term.implicitBinder "{" [`β] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.instBinder "[" [] (Term.app `Field [`β]) "]")
    (Term.implicitBinder "{" [`abv] [":" (Term.arrow `β "→" `α)] "}")
    (Term.instBinder "[" [] (Term.app `IsAbsoluteValue [`abv]) "]")
    (Term.explicitBinder "(" [`x] [":" `β] [] ")")
    (Term.explicitBinder "(" [`hx1] [":" («term_<_» (Term.app `abv [`x]) "<" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    (Term.app
     `IsCauSeq
     [`abv
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`n] [])]
        "=>"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`n])
         ", "
         («term_^_» `x "^" `m))))])))
  (Command.declValSimple
   ":="
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hx1' []]
      [(Term.typeSpec ":" («term_≠_» (Term.app `abv [`x]) "≠" (numLit "1")))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`h] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.simpa
              "simpa"
              []
              []
              ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
              []
              ["using" `hx1])
             [])])))))))
    []
    (Term.app
     `is_cau_series_of_abv_cau
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            ["("
             "config"
             ":="
             (Term.structInst
              "{"
              []
              [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
              (Term.optEllipsis [])
              []
              "}")
             ")"]
            ["only"]
            ["[" [(Tactic.simpLemma [] [] (Term.app `abv_pow [`abv]))] "]"]
            [])
           [])
          (group
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                   "=>"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                    " in "
                    (Term.app `range [`m])
                    ", "
                    («term_^_» (Term.app `abv [`x]) "^" `n))))
                 "="
                 (Term.fun
                  "fun"
                  (Term.basicFun [(Term.simpleBinder [`m] [])] "=>" (Term.app `geomSum [(Term.app `abv [`x]) `m])))))]
              ":="
              `rfl)))
           [])
          (group
           (Tactic.simp
            "simp"
            ["("
             "config"
             ":="
             (Term.structInst
              "{"
              []
              [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
              (Term.optEllipsis [])
              []
              "}")
             ")"]
            ["only"]
            ["[" [(Tactic.simpLemma [] [] `this) "," (Tactic.simpLemma [] [] (Term.app `geom_sum_eq [`hx1']))] "]"]
            [])
           [])
          (group
           (Tactic.Conv.conv
            "conv"
            []
            ["in" («term_/_» (Term.hole "_") "/" (Term.hole "_"))]
            "=>"
            (Tactic.Conv.convSeq
             (Tactic.Conv.convSeq1Indented
              [(group
                (Tactic.Conv.convRw__
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `neg_div_neg_eq)
                   ","
                   (Tactic.rwRule [] `neg_sub)
                   ","
                   (Tactic.rwRule [] `neg_sub)]
                  "]"))
                [])])))
           [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.explicit "@" `is_cau_of_mono_bounded)
             [(Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              («term_/_»
               (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
               "/"
               («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
              (numLit "0")
              (Term.hole "_")
              (Term.hole "_")]))
           [])
          (group
           (Tactic.«tactic·._»
            "·"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`n `hn]) [])
               (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") []) [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `div_le_div_of_le
                  [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                   (Term.app
                    `sub_le_self
                    [(Term.hole "_")
                     (Term.subst
                      (Term.app `abv_pow [`abv `x `n])
                      "▸"
                      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `div_nonneg
                  [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
                   («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
                [])
               (group (Tactic.clear "clear" [`hn]) [])
               (group
                (Tactic.induction'
                 "induction'"
                 [(Tactic.casesTarget [] `n)]
                 []
                 ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
                 [])
                [])
               (group
                (Tactic.«tactic·._»
                 "·"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
                [])
               (group
                (Tactic.«tactic·._»
                 "·"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `pow_succₓ)
                        ","
                        (Tactic.rwRule
                         ["←"]
                         (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
                       "]")
                      [])
                     [])
                    (group
                     (Tactic.refine'
                      "refine'"
                      (Term.app
                       `mul_le_mul
                       [(Term.app `le_of_ltₓ [`hx1])
                        `ih
                        (Term.subst
                         (Term.app `abv_pow [`abv `x `n])
                         "▸"
                         [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                     [])])))
                [])])))
           [])
          (group
           (Tactic.«tactic·._»
            "·"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`n `hn]) [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `div_le_div_of_le
                  [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                   (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)]))
                   ","
                   (Tactic.rwRule [] `pow_succₓ)]
                  "]")
                 [])
                [])
               (group
                (Tactic.exact
                 "exact"
                 (Term.app
                  `mul_le_mul_of_nonneg_right
                  [(Term.app `le_of_ltₓ [`hx1])
                   (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
                [])])))
           [])])))]))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hx1' []]
     [(Term.typeSpec ":" («term_≠_» (Term.app `abv [`x]) "≠" (numLit "1")))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`h] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simpa
             "simpa"
             []
             []
             ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
             []
             ["using" `hx1])
            [])])))))))
   []
   (Term.app
    `is_cau_series_of_abv_cau
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           ["("
            "config"
            ":="
            (Term.structInst
             "{"
             []
             [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
             (Term.optEllipsis [])
             []
             "}")
            ")"]
           ["only"]
           ["[" [(Tactic.simpLemma [] [] (Term.app `abv_pow [`abv]))] "]"]
           [])
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               («term_=_»
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                  "=>"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                   " in "
                   (Term.app `range [`m])
                   ", "
                   («term_^_» (Term.app `abv [`x]) "^" `n))))
                "="
                (Term.fun
                 "fun"
                 (Term.basicFun [(Term.simpleBinder [`m] [])] "=>" (Term.app `geomSum [(Term.app `abv [`x]) `m])))))]
             ":="
             `rfl)))
          [])
         (group
          (Tactic.simp
           "simp"
           ["("
            "config"
            ":="
            (Term.structInst
             "{"
             []
             [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
             (Term.optEllipsis [])
             []
             "}")
            ")"]
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `this) "," (Tactic.simpLemma [] [] (Term.app `geom_sum_eq [`hx1']))] "]"]
           [])
          [])
         (group
          (Tactic.Conv.conv
           "conv"
           []
           ["in" («term_/_» (Term.hole "_") "/" (Term.hole "_"))]
           "=>"
           (Tactic.Conv.convSeq
            (Tactic.Conv.convSeq1Indented
             [(group
               (Tactic.Conv.convRw__
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `neg_div_neg_eq) "," (Tactic.rwRule [] `neg_sub) "," (Tactic.rwRule [] `neg_sub)]
                 "]"))
               [])])))
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.explicit "@" `is_cau_of_mono_bounded)
            [(Term.hole "_")
             (Term.hole "_")
             (Term.hole "_")
             (Term.hole "_")
             («term_/_»
              (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
              "/"
              («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
             (numLit "0")
             (Term.hole "_")
             (Term.hole "_")]))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`n `hn]) [])
              (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") []) [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `div_le_div_of_le
                 [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                  (Term.app
                   `sub_le_self
                   [(Term.hole "_")
                    (Term.subst
                     (Term.app `abv_pow [`abv `x `n])
                     "▸"
                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `div_nonneg
                 [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
                  («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
               [])
              (group (Tactic.clear "clear" [`hn]) [])
              (group
               (Tactic.induction'
                "induction'"
                [(Tactic.casesTarget [] `n)]
                []
                ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
                [])
               [])
              (group
               (Tactic.«tactic·._»
                "·"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
               [])
              (group
               (Tactic.«tactic·._»
                "·"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `pow_succₓ)
                       ","
                       (Tactic.rwRule
                        ["←"]
                        (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
                      "]")
                     [])
                    [])
                   (group
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `mul_le_mul
                      [(Term.app `le_of_ltₓ [`hx1])
                       `ih
                       (Term.subst
                        (Term.app `abv_pow [`abv `x `n])
                        "▸"
                        [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                    [])])))
               [])])))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`n `hn]) [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `div_le_div_of_le
                 [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                  (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)]))
                  ","
                  (Tactic.rwRule [] `pow_succₓ)]
                 "]")
                [])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_le_mul_of_nonneg_right
                 [(Term.app `le_of_ltₓ [`hx1])
                  (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
               [])])))
          [])])))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `is_cau_series_of_abv_cau
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.simp
          "simp"
          ["("
           "config"
           ":="
           (Term.structInst
            "{"
            []
            [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
            (Term.optEllipsis [])
            []
            "}")
           ")"]
          ["only"]
          ["[" [(Tactic.simpLemma [] [] (Term.app `abv_pow [`abv]))] "]"]
          [])
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                 "=>"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                  " in "
                  (Term.app `range [`m])
                  ", "
                  («term_^_» (Term.app `abv [`x]) "^" `n))))
               "="
               (Term.fun
                "fun"
                (Term.basicFun [(Term.simpleBinder [`m] [])] "=>" (Term.app `geomSum [(Term.app `abv [`x]) `m])))))]
            ":="
            `rfl)))
         [])
        (group
         (Tactic.simp
          "simp"
          ["("
           "config"
           ":="
           (Term.structInst
            "{"
            []
            [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
            (Term.optEllipsis [])
            []
            "}")
           ")"]
          ["only"]
          ["[" [(Tactic.simpLemma [] [] `this) "," (Tactic.simpLemma [] [] (Term.app `geom_sum_eq [`hx1']))] "]"]
          [])
         [])
        (group
         (Tactic.Conv.conv
          "conv"
          []
          ["in" («term_/_» (Term.hole "_") "/" (Term.hole "_"))]
          "=>"
          (Tactic.Conv.convSeq
           (Tactic.Conv.convSeq1Indented
            [(group
              (Tactic.Conv.convRw__
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule ["←"] `neg_div_neg_eq) "," (Tactic.rwRule [] `neg_sub) "," (Tactic.rwRule [] `neg_sub)]
                "]"))
              [])])))
         [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app
           (Term.explicit "@" `is_cau_of_mono_bounded)
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            («term_/_»
             (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
             "/"
             («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
            (numLit "0")
            (Term.hole "_")
            (Term.hole "_")]))
         [])
        (group
         (Tactic.«tactic·._»
          "·"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.intro "intro" [`n `hn]) [])
             (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") []) [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `div_le_div_of_le
                [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                 (Term.app
                  `sub_le_self
                  [(Term.hole "_")
                   (Term.subst
                    (Term.app `abv_pow [`abv `x `n])
                    "▸"
                    [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
              [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `div_nonneg
                [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
                 («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
              [])
             (group (Tactic.clear "clear" [`hn]) [])
             (group
              (Tactic.induction'
               "induction'"
               [(Tactic.casesTarget [] `n)]
               []
               ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
               [])
              [])
             (group
              (Tactic.«tactic·._»
               "·"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
              [])
             (group
              (Tactic.«tactic·._»
               "·"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `pow_succₓ)
                      ","
                      (Tactic.rwRule
                       ["←"]
                       (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `mul_le_mul
                     [(Term.app `le_of_ltₓ [`hx1])
                      `ih
                      (Term.subst
                       (Term.app `abv_pow [`abv `x `n])
                       "▸"
                       [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                   [])])))
              [])])))
         [])
        (group
         (Tactic.«tactic·._»
          "·"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.intro "intro" [`n `hn]) [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `div_le_div_of_le
                [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
                 (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)]))
                 ","
                 (Tactic.rwRule [] `pow_succₓ)]
                "]")
               [])
              [])
             (group
              (Tactic.exact
               "exact"
               (Term.app
                `mul_le_mul_of_nonneg_right
                [(Term.app `le_of_ltₓ [`hx1])
                 (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
              [])])))
         [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        ["("
         "config"
         ":="
         (Term.structInst
          "{"
          []
          [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
          (Term.optEllipsis [])
          []
          "}")
         ")"]
        ["only"]
        ["[" [(Tactic.simpLemma [] [] (Term.app `abv_pow [`abv]))] "]"]
        [])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            («term_=_»
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
               "=>"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                " in "
                (Term.app `range [`m])
                ", "
                («term_^_» (Term.app `abv [`x]) "^" `n))))
             "="
             (Term.fun
              "fun"
              (Term.basicFun [(Term.simpleBinder [`m] [])] "=>" (Term.app `geomSum [(Term.app `abv [`x]) `m])))))]
          ":="
          `rfl)))
       [])
      (group
       (Tactic.simp
        "simp"
        ["("
         "config"
         ":="
         (Term.structInst
          "{"
          []
          [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
          (Term.optEllipsis [])
          []
          "}")
         ")"]
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `this) "," (Tactic.simpLemma [] [] (Term.app `geom_sum_eq [`hx1']))] "]"]
        [])
       [])
      (group
       (Tactic.Conv.conv
        "conv"
        []
        ["in" («term_/_» (Term.hole "_") "/" (Term.hole "_"))]
        "=>"
        (Tactic.Conv.convSeq
         (Tactic.Conv.convSeq1Indented
          [(group
            (Tactic.Conv.convRw__
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] `neg_div_neg_eq) "," (Tactic.rwRule [] `neg_sub) "," (Tactic.rwRule [] `neg_sub)]
              "]"))
            [])])))
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         (Term.explicit "@" `is_cau_of_mono_bounded)
         [(Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          («term_/_»
           (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
           "/"
           («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
          (numLit "0")
          (Term.hole "_")
          (Term.hole "_")]))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`n `hn]) [])
           (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") []) [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `div_le_div_of_le
              [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
               (Term.app
                `sub_le_self
                [(Term.hole "_")
                 (Term.subst
                  (Term.app `abv_pow [`abv `x `n])
                  "▸"
                  [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
            [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `div_nonneg
              [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
               («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
            [])
           (group (Tactic.clear "clear" [`hn]) [])
           (group
            (Tactic.induction'
             "induction'"
             [(Tactic.casesTarget [] `n)]
             []
             ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
             [])
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `pow_succₓ)
                    ","
                    (Tactic.rwRule
                     ["←"]
                     (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `mul_le_mul
                   [(Term.app `le_of_ltₓ [`hx1])
                    `ih
                    (Term.subst
                     (Term.app `abv_pow [`abv `x `n])
                     "▸"
                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
                 [])])))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`n `hn]) [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `div_le_div_of_le
              [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
               (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)]))
               ","
               (Tactic.rwRule [] `pow_succₓ)]
              "]")
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              `mul_le_mul_of_nonneg_right
              [(Term.app `le_of_ltₓ [`hx1])
               (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`n `hn]) [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `div_le_div_of_le
         [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
          (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)]))
          ","
          (Tactic.rwRule [] `pow_succₓ)]
         "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `mul_le_mul_of_nonneg_right
         [(Term.app `le_of_ltₓ [`hx1])
          (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `mul_le_mul_of_nonneg_right
    [(Term.app `le_of_ltₓ [`hx1])
     (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_le_mul_of_nonneg_right
   [(Term.app `le_of_ltₓ [`hx1])
    (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_nonneg [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `pow_nonneg
   [(Term.paren "(" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []] ")") (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_of_ltₓ [`hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_ltₓ [`hx1]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)])) "," (Tactic.rwRule [] `pow_succₓ)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `one_mulₓ [(«term_^_» (Term.hole "_") "^" `n)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» (Term.hole "_") "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» (Term.hole "_") "^" `n) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `one_mulₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `div_le_div_of_le
    [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
     (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_le_div_of_le
   [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
    (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_le_sub_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `sub_le_sub_left [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `sub_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `sub_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`n `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`n `hn]) [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") []) [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `div_le_div_of_le
         [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
          (Term.app
           `sub_le_self
           [(Term.hole "_")
            (Term.subst
             (Term.app `abv_pow [`abv `x `n])
             "▸"
             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `div_nonneg
         [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
          («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
       [])
      (group (Tactic.clear "clear" [`hn]) [])
      (group
       (Tactic.induction'
        "induction'"
        [(Tactic.casesTarget [] `n)]
        []
        ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
        [])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `pow_succₓ)
               ","
               (Tactic.rwRule
                ["←"]
                (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
              "]")
             [])
            [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `mul_le_mul
              [(Term.app `le_of_ltₓ [`hx1])
               `ih
               (Term.subst
                (Term.app `abv_pow [`abv `x `n])
                "▸"
                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `pow_succₓ)
          ","
          (Tactic.rwRule
           ["←"]
           (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `mul_le_mul
         [(Term.app `le_of_ltₓ [`hx1])
          `ih
          (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.refine'
   "refine'"
   (Term.app
    `mul_le_mul
    [(Term.app `le_of_ltₓ [`hx1])
     `ih
     (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_le_mul
   [(Term.app `le_of_ltₓ [`hx1])
    `ih
    (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  (Term.app `abv_pow [`abv `x `n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ih
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_of_ltₓ [`hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_ltₓ [`hx1]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `pow_succₓ)
     ","
     (Tactic.rwRule ["←"] (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")]))]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `one_mulₓ [(Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `one_mulₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._» "·" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.induction'
   "induction'"
   [(Tactic.casesTarget [] `n)]
   []
   ["with" [(Lean.binderIdent `n) (Lean.binderIdent `ih)]]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.induction'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.clear "clear" [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.clear', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `div_nonneg
    [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
     («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_nonneg
   [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
    («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_ltₓ [`hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.proj `sub_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `sub_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» (Term.proj `sub_nonneg "." (fieldIdx "2")) "$" (Term.app `le_of_ltₓ [`hx1])) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `sub_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `sub_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [(Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `div_le_div_of_le
    [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
     (Term.app
      `sub_le_self
      [(Term.hole "_")
       (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_le_div_of_le
   [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
    (Term.app
     `sub_le_self
     [(Term.hole "_")
      (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `sub_le_self
   [(Term.hole "_")
    (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  (Term.app `abv_pow [`abv `x `n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_le_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `sub_le_self
   [(Term.hole "_")
    (Term.paren
     "("
     [(Term.subst (Term.app `abv_pow [`abv `x `n]) "▸" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `sub_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `sub_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» `le_of_ltₓ "$" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hx1])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `abs_of_nonneg)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_of_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`n `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    (Term.explicit "@" `is_cau_of_mono_bounded)
    [(Term.hole "_")
     (Term.hole "_")
     (Term.hole "_")
     (Term.hole "_")
     («term_/_»
      (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
      "/"
      («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
     (numLit "0")
     (Term.hole "_")
     (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.explicit "@" `is_cau_of_mono_bounded)
   [(Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    (Term.hole "_")
    («term_/_»
     (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
     "/"
     («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
    (numLit "0")
    (Term.hole "_")
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_/_»
   (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
   "/"
   («term_-_» (numLit "1") "-" (Term.app `abv [`x])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» (numLit "1") "-" (Term.app `abv [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» (numLit "1") "-" (Term.app `abv [`x])) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" `α)]] ")")
   "/"
   (Term.paren "(" [(«term_-_» (numLit "1") "-" (Term.app `abv [`x])) []] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `is_cau_of_mono_bounded)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `is_cau_of_mono_bounded
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.Conv.conv
   "conv"
   []
   ["in" («term_/_» (Term.hole "_") "/" (Term.hole "_"))]
   "=>"
   (Tactic.Conv.convSeq
    (Tactic.Conv.convSeq1Indented
     [(group
       (Tactic.Conv.convRw__
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] `neg_div_neg_eq) "," (Tactic.rwRule [] `neg_sub) "," (Tactic.rwRule [] `neg_sub)]
         "]"))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.Conv.conv', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.Conv.convRw__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_div_neg_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (Term.hole "_") "/" (Term.hole "_"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   ["("
    "config"
    ":="
    (Term.structInst
     "{"
     []
     [(group (Term.structInstField (Term.structInstLVal `eta []) ":=" `Bool.false._@._internal._hyg.0) [])]
     (Term.optEllipsis [])
     []
     "}")
    ")"]
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `this) "," (Tactic.simpLemma [] [] (Term.app `geom_sum_eq [`hx1']))] "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `geom_sum_eq [`hx1'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `geom_sum_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«)»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«)»', expected 'Lean.Parser.Tactic.discharger'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_geo_series
  { β : Type _ } [ Field β ] { abv : β → α } [ IsAbsoluteValue abv ] ( x : β ) ( hx1 : abv x < 1 )
    : IsCauSeq abv fun n => ∑ m in range n , x ^ m
  :=
    have
      hx1' : abv x ≠ 1 := fun h => by simpa [ h , lt_irreflₓ ] using hx1
      is_cau_series_of_abv_cau
        by
          simp ( config := { eta := Bool.false._@._internal._hyg.0 } ) only [ abv_pow abv ]
            have : fun m : ℕ => ∑ n in range m , abv x ^ n = fun m => geomSum abv x m := rfl
            simp ( config := { eta := Bool.false._@._internal._hyg.0 } ) only [ this , geom_sum_eq hx1' ]
            conv in _ / _ => rw [ ← neg_div_neg_eq , neg_sub , neg_sub ]
            refine' @ is_cau_of_mono_bounded _ _ _ _ ( 1 : α ) / 1 - abv x 0 _ _
            ·
              intro n hn
                rw [ abs_of_nonneg ]
                refine' div_le_div_of_le le_of_ltₓ $ sub_pos . 2 hx1 sub_le_self _ abv_pow abv x n ▸ abv_nonneg _ _
                refine' div_nonneg sub_nonneg . 2 _ sub_nonneg . 2 $ le_of_ltₓ hx1
                clear hn
                induction' n with n ih
                · simp
                ·
                  rw [ pow_succₓ , ← one_mulₓ ( 1 : α ) ]
                    refine' mul_le_mul le_of_ltₓ hx1 ih abv_pow abv x n ▸ abv_nonneg _ _ by norm_num
            ·
              intro n hn
                refine' div_le_div_of_le le_of_ltₓ $ sub_pos . 2 hx1 sub_le_sub_left _ _
                rw [ ← one_mulₓ _ ^ n , pow_succₓ ]
                exact mul_le_mul_of_nonneg_right le_of_ltₓ hx1 pow_nonneg abv_nonneg _ _ _

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_geo_series_const [])
  (Command.declSig
   [(Term.explicitBinder "(" [`a] [":" `α] [] ")")
    (Term.implicitBinder "{" [`x] [":" `α] "}")
    (Term.explicitBinder "(" [`hx1] [":" («term_<_» (Algebra.Abs.«term|_|» "|" `x "|") "<" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    (Term.app
     `IsCauSeq
     [`abs
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`m] [])]
        "=>"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
         " in "
         (Term.app `range [`m])
         ", "
         (Finset.Data.Finset.Fold.«term_*_» `a "*" («term_^_» `x "^" `n)))))])))
  (Command.declValSimple
   ":="
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Term.app
         `IsCauSeq
         [`abs
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`m] [])]
            "=>"
            (Finset.Data.Finset.Fold.«term_*_»
             `a
             "*"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
              " in "
              (Term.app `range [`m])
              ", "
              («term_^_» `x "^" `n)))))]))]
      ":="
      (Term.proj
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.app `CauSeq.const [`abs `a])
        "*"
        (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩"))
       "."
       (fieldIdx "2"))))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_sum)] "]"] [] []) [])]))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.app
        `IsCauSeq
        [`abs
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`m] [])]
           "=>"
           (Finset.Data.Finset.Fold.«term_*_»
            `a
            "*"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
             " in "
             (Term.app `range [`m])
             ", "
             («term_^_» `x "^" `n)))))]))]
     ":="
     (Term.proj
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `CauSeq.const [`abs `a])
       "*"
       (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩"))
      "."
      (fieldIdx "2"))))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_sum)] "]"] [] []) [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_sum)] "]"] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_sum)] "]"] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.proj
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `CauSeq.const [`abs `a])
    "*"
    (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩"))
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `CauSeq.const [`abs `a])
   "*"
   (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `is_cau_geo_series [`x `hx1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_geo_series
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `CauSeq.const [`abs `a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CauSeq.const
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.app `CauSeq.const [`abs `a])
   "*"
   (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_geo_series [`x `hx1])] "⟩"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `IsCauSeq
   [`abs
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m] [])]
      "=>"
      (Finset.Data.Finset.Fold.«term_*_»
       `a
       "*"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
        " in "
        (Term.app `range [`m])
        ", "
        («term_^_» `x "^" `n)))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m] [])]
    "=>"
    (Finset.Data.Finset.Fold.«term_*_»
     `a
     "*"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
      " in "
      (Term.app `range [`m])
      ", "
      («term_^_» `x "^" `n)))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   `a
   "*"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
    " in "
    (Term.app `range [`m])
    ", "
    («term_^_» `x "^" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
   " in "
   (Term.app `range [`m])
   ", "
   («term_^_» `x "^" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» `x "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_geo_series_const
  ( a : α ) { x : α } ( hx1 : | x | < 1 ) : IsCauSeq abs fun m => ∑ n in range m , a * x ^ n
  :=
    have
      : IsCauSeq abs fun m => a * ∑ n in range m , x ^ n := CauSeq.const abs a * ⟨ _ , is_cau_geo_series x hx1 ⟩ . 2
      by simpa only [ mul_sum ]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `series_ratio_test [])
  (Command.declSig
   [(Term.implicitBinder "{" [`f] [":" (Term.arrow (termℕ "ℕ") "→" `β)] "}")
    (Term.explicitBinder "(" [`n] [":" (termℕ "ℕ")] [] ")")
    (Term.explicitBinder "(" [`r] [":" `α] [] ")")
    (Term.explicitBinder "(" [`hr0] [":" («term_≤_» (numLit "0") "≤" `r)] [] ")")
    (Term.explicitBinder "(" [`hr1] [":" («term_<_» `r "<" (numLit "1"))] [] ")")
    (Term.explicitBinder
     "("
     [`h]
     [":"
      (Term.forall
       "∀"
       [(Term.simpleBinder [`m] [])]
       ","
       (Term.arrow
        («term_≤_» `n "≤" `m)
        "→"
        («term_≤_»
         (Term.app `abv [(Term.app `f [`m.succ])])
         "≤"
         (Finset.Data.Finset.Fold.«term_*_» `r "*" (Term.app `abv [(Term.app `f [`m])])))))]
     []
     ")")]
   (Term.typeSpec
    ":"
    (Term.app
     `IsCauSeq
     [`abv
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`m] [])]
        "=>"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
         " in "
         (Term.app `range [`m])
         ", "
         (Term.app `f [`n]))))])))
  (Command.declValSimple
   ":="
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`har1 []]
      [(Term.typeSpec ":" («term_<_» (Algebra.Abs.«term|_|» "|" `r "|") "<" (numLit "1")))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_nonneg [`hr0]))] "]") [])
           [])])))))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.refine'
          "refine'"
          (Term.app
           `is_cau_series_of_abv_le_cau
           [`n.succ
            (Term.hole "_")
            (Term.app
             `is_cau_geo_series_const
             [(Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `f [`n.succ])])
               "*"
               («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
              `har1])]))
         [])
        (group (Tactic.intro "intro" [`m `hmn]) [])
        (group
         (Tactic.cases'
          "cases'"
          [(Tactic.casesTarget [] (Term.app `Classical.em [(«term_=_» `r "=" (numLit "0"))]))]
          []
          ["with" [(Lean.binderIdent `r_zero) (Lean.binderIdent `r_ne_zero)]])
         [])
        (group
         (Tactic.«tactic·._»
          "·"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`m_pos []]
                 []
                 ":="
                 (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn]))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 []
                 ":="
                 (Term.app
                  `h
                  [`m.pred
                   (Term.app
                    `Nat.le_of_succ_le_succₓ
                    [(Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (tacticRwa__
                           "rwa"
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
                           [])
                          [])])))])]))))
              [])
             (group
              (Tactic.simpa
               "simpa"
               []
               []
               ["["
                [(Tactic.simpLemma [] [] `r_zero)
                 ","
                 (Tactic.simpLemma [] [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))
                 ","
                 (Tactic.simpLemma [] [] `pow_succₓ)]
                "]"]
               []
               [])
              [])])))
         [])
        (group (Tactic.generalize "generalize" [(Tactic.generalizeArg [`hk ":"] («term_-_» `m "-" `n.succ) "=" `k)]) [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`r_pos []]
            [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `r))]
            ":="
            (Term.app `lt_of_le_of_neₓ [`hr0 (Term.app `Ne.symm [`r_ne_zero])]))))
         [])
        (group
         (Tactic.replace
          "replace"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hk []]
            [(Term.typeSpec ":" («term_=_» `m "=" (Init.Logic.«term_+_» `k "+" `n.succ)))]
            ":="
            (Term.app (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1")) [`hk]))))
         [])
        (group
         (Tactic.induction'
          "induction'"
          [(Tactic.casesTarget [] `k)]
          []
          ["with" [(Lean.binderIdent `k) (Lean.binderIdent `ih)]]
          ["generalizing" [`m `n]])
         [])
        (group
         (Tactic.«tactic·._»
          "·"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `hk)
                 ","
                 (Tactic.rwRule [] `zero_addₓ)
                 ","
                 (Tactic.rwRule [] `mul_right_commₓ)
                 ","
                 (Tactic.rwRule [] (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")]))
                 ","
                 (Tactic.rwRule ["←"] `div_eq_mul_inv)
                 ","
                 (Tactic.rwRule [] `mul_div_cancel)]
                "]")
               [])
              [])
             (group
              (Tactic.exact
               "exact"
               (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm))
              [])])))
         [])
        (group
         (Tactic.«tactic·._»
          "·"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`kn []]
                 [(Term.typeSpec ":" («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]")
                        [])
                       "<;>"
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `add_le_add
                         [(Term.app `zero_le [(Term.hole "_")])
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
                      [])]))))))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `hk)
                 ","
                 (Tactic.rwRule [] `Nat.succ_add)
                 ","
                 (Tactic.rwRule [] (Term.app `pow_succ'ₓ [`r]))
                 ","
                 (Tactic.rwRule ["←"] `mul_assocₓ)]
                "]")
               [])
              [])
             (group
              (Tactic.exact
               "exact"
               (Term.app
                `le_transₓ
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
                       "<;>"
                       (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
                      [])])))
                 (Term.app
                  `mul_le_mul_of_nonneg_right
                  [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])]))
              [])])))
         [])]))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`har1 []]
     [(Term.typeSpec ":" («term_<_» (Algebra.Abs.«term|_|» "|" `r "|") "<" (numLit "1")))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_nonneg [`hr0]))] "]") [])
          [])])))))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.refine'
         "refine'"
         (Term.app
          `is_cau_series_of_abv_le_cau
          [`n.succ
           (Term.hole "_")
           (Term.app
            `is_cau_geo_series_const
            [(Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `f [`n.succ])])
              "*"
              («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
             `har1])]))
        [])
       (group (Tactic.intro "intro" [`m `hmn]) [])
       (group
        (Tactic.cases'
         "cases'"
         [(Tactic.casesTarget [] (Term.app `Classical.em [(«term_=_» `r "=" (numLit "0"))]))]
         []
         ["with" [(Lean.binderIdent `r_zero) (Lean.binderIdent `r_ne_zero)]])
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl [`m_pos []] [] ":=" (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn]))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 `h
                 [`m.pred
                  (Term.app
                   `Nat.le_of_succ_le_succₓ
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (tacticRwa__
                          "rwa"
                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
                          [])
                         [])])))])]))))
             [])
            (group
             (Tactic.simpa
              "simpa"
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `r_zero)
                ","
                (Tactic.simpLemma [] [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))
                ","
                (Tactic.simpLemma [] [] `pow_succₓ)]
               "]"]
              []
              [])
             [])])))
        [])
       (group (Tactic.generalize "generalize" [(Tactic.generalizeArg [`hk ":"] («term_-_» `m "-" `n.succ) "=" `k)]) [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`r_pos []]
           [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `r))]
           ":="
           (Term.app `lt_of_le_of_neₓ [`hr0 (Term.app `Ne.symm [`r_ne_zero])]))))
        [])
       (group
        (Tactic.replace
         "replace"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hk []]
           [(Term.typeSpec ":" («term_=_» `m "=" (Init.Logic.«term_+_» `k "+" `n.succ)))]
           ":="
           (Term.app (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1")) [`hk]))))
        [])
       (group
        (Tactic.induction'
         "induction'"
         [(Tactic.casesTarget [] `k)]
         []
         ["with" [(Lean.binderIdent `k) (Lean.binderIdent `ih)]]
         ["generalizing" [`m `n]])
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hk)
                ","
                (Tactic.rwRule [] `zero_addₓ)
                ","
                (Tactic.rwRule [] `mul_right_commₓ)
                ","
                (Tactic.rwRule [] (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")]))
                ","
                (Tactic.rwRule ["←"] `div_eq_mul_inv)
                ","
                (Tactic.rwRule [] `mul_div_cancel)]
               "]")
              [])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm))
             [])])))
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`kn []]
                [(Term.typeSpec ":" («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]")
                       [])
                      "<;>"
                      (Tactic.exact
                       "exact"
                       (Term.app
                        `add_le_add
                        [(Term.app `zero_le [(Term.hole "_")])
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
                     [])]))))))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hk)
                ","
                (Tactic.rwRule [] `Nat.succ_add)
                ","
                (Tactic.rwRule [] (Term.app `pow_succ'ₓ [`r]))
                ","
                (Tactic.rwRule ["←"] `mul_assocₓ)]
               "]")
              [])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.app
               `le_transₓ
               [(Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
                      "<;>"
                      (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
                     [])])))
                (Term.app
                 `mul_le_mul_of_nonneg_right
                 [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])]))
             [])])))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `is_cau_series_of_abv_le_cau
         [`n.succ
          (Term.hole "_")
          (Term.app
           `is_cau_geo_series_const
           [(Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `f [`n.succ])])
             "*"
             («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
            `har1])]))
       [])
      (group (Tactic.intro "intro" [`m `hmn]) [])
      (group
       (Tactic.cases'
        "cases'"
        [(Tactic.casesTarget [] (Term.app `Classical.em [(«term_=_» `r "=" (numLit "0"))]))]
        []
        ["with" [(Lean.binderIdent `r_zero) (Lean.binderIdent `r_ne_zero)]])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl [`m_pos []] [] ":=" (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn]))))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                `h
                [`m.pred
                 (Term.app
                  `Nat.le_of_succ_le_succₓ
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (tacticRwa__
                         "rwa"
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
                         [])
                        [])])))])]))))
            [])
           (group
            (Tactic.simpa
             "simpa"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `r_zero)
               ","
               (Tactic.simpLemma [] [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))
               ","
               (Tactic.simpLemma [] [] `pow_succₓ)]
              "]"]
             []
             [])
            [])])))
       [])
      (group (Tactic.generalize "generalize" [(Tactic.generalizeArg [`hk ":"] («term_-_» `m "-" `n.succ) "=" `k)]) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`r_pos []]
          [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `r))]
          ":="
          (Term.app `lt_of_le_of_neₓ [`hr0 (Term.app `Ne.symm [`r_ne_zero])]))))
       [])
      (group
       (Tactic.replace
        "replace"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hk []]
          [(Term.typeSpec ":" («term_=_» `m "=" (Init.Logic.«term_+_» `k "+" `n.succ)))]
          ":="
          (Term.app (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1")) [`hk]))))
       [])
      (group
       (Tactic.induction'
        "induction'"
        [(Tactic.casesTarget [] `k)]
        []
        ["with" [(Lean.binderIdent `k) (Lean.binderIdent `ih)]]
        ["generalizing" [`m `n]])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hk)
               ","
               (Tactic.rwRule [] `zero_addₓ)
               ","
               (Tactic.rwRule [] `mul_right_commₓ)
               ","
               (Tactic.rwRule [] (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")]))
               ","
               (Tactic.rwRule ["←"] `div_eq_mul_inv)
               ","
               (Tactic.rwRule [] `mul_div_cancel)]
              "]")
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`kn []]
               [(Term.typeSpec ":" («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]")
                      [])
                     "<;>"
                     (Tactic.exact
                      "exact"
                      (Term.app
                       `add_le_add
                       [(Term.app `zero_le [(Term.hole "_")])
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
                    [])]))))))
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hk)
               ","
               (Tactic.rwRule [] `Nat.succ_add)
               ","
               (Tactic.rwRule [] (Term.app `pow_succ'ₓ [`r]))
               ","
               (Tactic.rwRule ["←"] `mul_assocₓ)]
              "]")
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              `le_transₓ
              [(Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
                     "<;>"
                     (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
                    [])])))
               (Term.app
                `mul_le_mul_of_nonneg_right
                [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`kn []]
          [(Term.typeSpec ":" («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]")
                 [])
                "<;>"
                (Tactic.exact
                 "exact"
                 (Term.app
                  `add_le_add
                  [(Term.app `zero_le [(Term.hole "_")])
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
               [])]))))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `hk)
          ","
          (Tactic.rwRule [] `Nat.succ_add)
          ","
          (Tactic.rwRule [] (Term.app `pow_succ'ₓ [`r]))
          ","
          (Tactic.rwRule ["←"] `mul_assocₓ)]
         "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `le_transₓ
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
                "<;>"
                (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
               [])])))
          (Term.app
           `mul_le_mul_of_nonneg_right
           [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `le_transₓ
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
           "<;>"
           (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
          [])])))
     (Term.app
      `mul_le_mul_of_nonneg_right
      [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_transₓ
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
          "<;>"
          (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
         [])])))
    (Term.app
     `mul_le_mul_of_nonneg_right
     [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul_of_nonneg_right [(Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl]) `hr0])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hr0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `ih [(Init.Logic.«term_+_» `k "+" `n.succ) `n `h `kn `rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `kn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Logic.«term_+_» `k "+" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `k "+" `n.succ) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ih
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `ih [(Term.paren "(" [(Init.Logic.«term_+_» `k "+" `n.succ) []] ")") `n `h `kn `rfl]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_le_mul_of_nonneg_right
   [(Term.paren
     "("
     [(Term.app `ih [(Term.paren "(" [(Init.Logic.«term_+_» `k "+" `n.succ) []] ")") `n `h `kn `rfl]) []]
     ")")
    `hr0])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
        "<;>"
        (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
   "<;>"
   (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `h [(Term.hole "_") (Term.app `Nat.le_of_succ_leₓ [`kn])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_of_succ_leₓ [`kn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `kn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_succ_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.le_of_succ_leₓ [`kn]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_commₓ)] "]") [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app `h [(Term.hole "_") (Term.paren "(" [(Term.app `Nat.le_of_succ_leₓ [`kn]) []] ")")])))
       [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `hk)
     ","
     (Tactic.rwRule [] `Nat.succ_add)
     ","
     (Tactic.rwRule [] (Term.app `pow_succ'ₓ [`r]))
     ","
     (Tactic.rwRule ["←"] `mul_assocₓ)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_succ'ₓ [`r])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_succ'ₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.succ_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`kn []]
     [(Term.typeSpec ":" («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]") [])
           "<;>"
           (Tactic.exact
            "exact"
            (Term.app
             `add_le_add
             [(Term.app `zero_le [(Term.hole "_")])
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]") [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `add_le_add
          [(Term.app `zero_le [(Term.hole "_")])
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]") [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `add_le_add
     [(Term.app `zero_le [(Term.hole "_")])
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `add_le_add
    [(Term.app `zero_le [(Term.hole "_")])
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_le_add
   [(Term.app `zero_le [(Term.hole "_")])
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `zero_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `zero_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `zero_le [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] (Term.app `zero_addₓ [`n.succ]))] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `zero_addₓ [`n.succ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `zero_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≥_» (Init.Logic.«term_+_» `k "+" `n.succ) "≥" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≥_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Logic.«term_+_» `k "+" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `k "+" `n.succ) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `hk)
          ","
          (Tactic.rwRule [] `zero_addₓ)
          ","
          (Tactic.rwRule [] `mul_right_commₓ)
          ","
          (Tactic.rwRule [] (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")]))
          ","
          (Tactic.rwRule ["←"] `div_eq_mul_inv)
          ","
          (Tactic.rwRule [] `mul_div_cancel)]
         "]")
        [])
       [])
      (group
       (Tactic.exact "exact" (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `ne_of_ltₓ [(Term.app `pow_pos [`r_pos (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_pos [`r_pos (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `r_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `pow_pos [`r_pos (Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ne_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `ne_of_ltₓ [(Term.paren "(" [(Term.app `pow_pos [`r_pos (Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `hk)
     ","
     (Tactic.rwRule [] `zero_addₓ)
     ","
     (Tactic.rwRule [] `mul_right_commₓ)
     ","
     (Tactic.rwRule [] (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")]))
     ","
     (Tactic.rwRule ["←"] `div_eq_mul_inv)
     ","
     (Tactic.rwRule [] `mul_div_cancel)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_eq_mul_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `inv_pow₀ [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inv_pow₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_right_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.induction'
   "induction'"
   [(Tactic.casesTarget [] `k)]
   []
   ["with" [(Lean.binderIdent `k) (Lean.binderIdent `ih)]]
   ["generalizing" [`m `n]])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.induction'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.replace
   "replace"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hk []]
     [(Term.typeSpec ":" («term_=_» `m "=" (Init.Logic.«term_+_» `k "+" `n.succ)))]
     ":="
     (Term.app (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1")) [`hk]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.replace', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1")) [`hk])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hk
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `tsub_eq_iff_eq_add_of_le [`hmn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hmn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_eq_iff_eq_add_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `tsub_eq_iff_eq_add_of_le [`hmn]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» `m "=" (Init.Logic.«term_+_» `k "+" `n.succ))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» `k "+" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`r_pos []]
     [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `r))]
     ":="
     (Term.app `lt_of_le_of_neₓ [`hr0 (Term.app `Ne.symm [`r_ne_zero])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_of_le_of_neₓ [`hr0 (Term.app `Ne.symm [`r_ne_zero])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Ne.symm [`r_ne_zero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Ne.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Ne.symm [`r_ne_zero]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hr0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_neₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (numLit "0") "<" `r)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.generalize "generalize" [(Tactic.generalizeArg [`hk ":"] («term_-_» `m "-" `n.succ) "=" `k)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.generalize', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.generalizeArg', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `m "-" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«:»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl [`m_pos []] [] ":=" (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          []
          ":="
          (Term.app
           `h
           [`m.pred
            (Term.app
             `Nat.le_of_succ_le_succₓ
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (tacticRwa__
                    "rwa"
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
                    [])
                   [])])))])]))))
       [])
      (group
       (Tactic.simpa
        "simpa"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `r_zero)
          ","
          (Tactic.simpLemma [] [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))
          ","
          (Tactic.simpLemma [] [] `pow_succₓ)]
         "]"]
        []
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa
   "simpa"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `r_zero)
     ","
     (Tactic.simpLemma [] [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))
     ","
     (Tactic.simpLemma [] [] `pow_succₓ)]
    "]"]
   []
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ_pred_eq_of_posₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     []
     ":="
     (Term.app
      `h
      [`m.pred
       (Term.app
        `Nat.le_of_succ_le_succₓ
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (tacticRwa__
               "rwa"
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
               [])
              [])])))])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `h
   [`m.pred
    (Term.app
     `Nat.le_of_succ_le_succₓ
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
            [])
           [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Nat.le_of_succ_le_succₓ
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (tacticRwa__
          "rwa"
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
          [])
         [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ_pred_eq_of_posₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
        [])
       [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_succ_le_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Nat.le_of_succ_le_succₓ
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `Nat.succ_pred_eq_of_posₓ [`m_pos]))] "]")
            [])
           [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m.pred
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl [`m_pos []] [] ":=" (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_of_lt_of_leₓ [(Term.app `Nat.succ_posₓ [`n]) `hmn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hmn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Nat.succ_posₓ [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ_posₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.succ_posₓ [`n]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_lt_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.cases'
   "cases'"
   [(Tactic.casesTarget [] (Term.app `Classical.em [(«term_=_» `r "=" (numLit "0"))]))]
   []
   ["with" [(Lean.binderIdent `r_zero) (Lean.binderIdent `r_ne_zero)]])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.cases'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.binderIdent', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Classical.em [(«term_=_» `r "=" (numLit "0"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» `r "=" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_=_» `r "=" (numLit "0")) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Classical.em
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`m `hmn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hmn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `is_cau_series_of_abv_le_cau
    [`n.succ
     (Term.hole "_")
     (Term.app
      `is_cau_geo_series_const
      [(Finset.Data.Finset.Fold.«term_*_»
        (Term.app `abv [(Term.app `f [`n.succ])])
        "*"
        («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
       `har1])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `is_cau_series_of_abv_le_cau
   [`n.succ
    (Term.hole "_")
    (Term.app
     `is_cau_geo_series_const
     [(Finset.Data.Finset.Fold.«term_*_»
       (Term.app `abv [(Term.app `f [`n.succ])])
       "*"
       («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
      `har1])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `is_cau_geo_series_const
   [(Finset.Data.Finset.Fold.«term_*_»
     (Term.app `abv [(Term.app `f [`n.succ])])
     "*"
     («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
    `har1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `har1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `abv [(Term.app `f [`n.succ])])
   "*"
   («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Init.Logic.«term_⁻¹» `r "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `abv [(Term.app `f [`n.succ])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`n.succ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f [`n.succ]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.app `abv [(Term.paren "(" [(Term.app `f [`n.succ]) []] ")")])
   "*"
   («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_geo_series_const
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `is_cau_geo_series_const
   [(Term.paren
     "("
     [(Finset.Data.Finset.Fold.«term_*_»
       (Term.app `abv [(Term.paren "(" [(Term.app `f [`n.succ]) []] ")")])
       "*"
       («term_^_» (Init.Logic.«term_⁻¹» `r "⁻¹") "^" `n.succ))
      []]
     ")")
    `har1])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_series_of_abv_le_cau
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_nonneg [`hr0]))] "]") [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_nonneg [`hr0]))] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs_of_nonneg [`hr0])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hr0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_of_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (Algebra.Abs.«term|_|» "|" `r "|") "<" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Algebra.Abs.«term|_|» "|" `r "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app
   `IsCauSeq
   [`abv
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m] [])]
      "=>"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
       " in "
       (Term.app `range [`m])
       ", "
       (Term.app `f [`n]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m] [])]
    "=>"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
     " in "
     (Term.app `range [`m])
     ", "
     (Term.app `f [`n]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
   " in "
   (Term.app `range [`m])
   ", "
   (Term.app `f [`n]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  series_ratio_test
  { f : ℕ → β } ( n : ℕ ) ( r : α ) ( hr0 : 0 ≤ r ) ( hr1 : r < 1 ) ( h : ∀ m , n ≤ m → abv f m.succ ≤ r * abv f m )
    : IsCauSeq abv fun m => ∑ n in range m , f n
  :=
    have
      har1 : | r | < 1 := by rwa [ abs_of_nonneg hr0 ]
      by
        refine' is_cau_series_of_abv_le_cau n.succ _ is_cau_geo_series_const abv f n.succ * r ⁻¹ ^ n.succ har1
          intro m hmn
          cases' Classical.em r = 0 with r_zero r_ne_zero
          ·
            have m_pos := lt_of_lt_of_leₓ Nat.succ_posₓ n hmn
              have := h m.pred Nat.le_of_succ_le_succₓ by rwa [ Nat.succ_pred_eq_of_posₓ m_pos ]
              simpa [ r_zero , Nat.succ_pred_eq_of_posₓ m_pos , pow_succₓ ]
          generalize hk : m - n.succ = k
          have r_pos : 0 < r := lt_of_le_of_neₓ hr0 Ne.symm r_ne_zero
          replace hk : m = k + n.succ := tsub_eq_iff_eq_add_of_le hmn . 1 hk
          induction' k with k ih generalizing m n
          ·
            rw [ hk , zero_addₓ , mul_right_commₓ , inv_pow₀ _ _ , ← div_eq_mul_inv , mul_div_cancel ]
              exact ne_of_ltₓ pow_pos r_pos _ . symm
          ·
            have kn : k + n.succ ≥ n.succ := by rw [ ← zero_addₓ n.succ ] <;> exact add_le_add zero_le _ by simp
              rw [ hk , Nat.succ_add , pow_succ'ₓ r , ← mul_assocₓ ]
              exact
                le_transₓ
                  by rw [ mul_commₓ ] <;> exact h _ Nat.le_of_succ_leₓ kn
                    mul_le_mul_of_nonneg_right ih k + n.succ n h kn rfl hr0

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `sum_range_diag_flip [])
  (Command.declSig
   [(Term.implicitBinder "{" [`α] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.instBinder "[" [] (Term.app `AddCommMonoidₓ [`α]) "]")
    (Term.explicitBinder "(" [`n] [":" (termℕ "ℕ")] [] ")")
    (Term.explicitBinder "(" [`f] [":" (Term.arrow (termℕ "ℕ") "→" (Term.arrow (termℕ "ℕ") "→" `α))] [] ")")]
   (Term.typeSpec
    ":"
    («term_=_»
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [`n])
      ", "
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
       " in "
       (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
       ", "
       (Term.app `f [`k («term_-_» `m "-" `k)])))
     "="
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [`n])
      ", "
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
       " in "
       (Term.app `range [(«term_-_» `n "-" `m)])
       ", "
       (Term.app `f [`m `k]))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sum_sigma') "," (Tactic.rwRule [] `sum_sigma')] "]")
          [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `sum_bij
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`a (Term.hole "_")] [])]
              "=>"
              (Term.anonymousCtor
               "⟨"
               [(Term.proj `a "." (fieldIdx "2"))
                ","
                («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
               "⟩")))
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`a `ha] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₁ []]
                 [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
                 ":="
                 (Term.app
                  (Term.proj `mem_range "." (fieldIdx "1"))
                  [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₂ []]
                  [(Term.typeSpec
                    ":"
                    («term_<_»
                     (Term.proj `a "." (fieldIdx "2"))
                     "<"
                     (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
                  ":="
                  (Term.app
                   (Term.proj `mem_range "." (fieldIdx "1"))
                   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
                []
                (Term.app
                 (Term.proj `mem_sigma "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "⟨"
                   [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
                    ","
                    (Term.app
                     (Term.proj `mem_range "." (fieldIdx "2"))
                     [(Term.app
                       (Term.proj
                        (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])])
                        "."
                        (fieldIdx "2"))
                       [`h₁])])]
                   "⟩")])))))
            (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
               (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
               (Term.simpleBinder [`ha `hb `h] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`ha []]
                 [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
                 ":="
                 (Term.anonymousCtor
                  "⟨"
                  [(Term.app
                    (Term.proj `mem_range "." (fieldIdx "1"))
                    [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
                   ","
                   (Term.app
                    `Nat.le_of_lt_succₓ
                    [(Term.app
                      (Term.proj `mem_range "." (fieldIdx "1"))
                      [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
                  "⟩")))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hb []]
                  [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
                  ":="
                  (Term.anonymousCtor
                   "⟨"
                   [(Term.app
                     (Term.proj `mem_range "." (fieldIdx "1"))
                     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
                    ","
                    (Term.app
                     `Nat.le_of_lt_succₓ
                     [(Term.app
                       (Term.proj `mem_range "." (fieldIdx "1"))
                       [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
                   "⟩")))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h []]
                   [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
                   ":="
                   (Term.app `Sigma.mk.inj [`h])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h' []]
                    [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
                    ":="
                    (Term.app
                     (Term.proj
                      (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))])
                      "."
                      (fieldIdx "1"))
                     [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
                  []
                  (Term.app
                   (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
                   [(Term.anonymousCtor
                     "⟨"
                     [(Term.subst
                       (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
                       "▸"
                       [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
                      ","
                      (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
                     "⟩")])))))))
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`ha []]
                 [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
                 ":="
                 (Term.anonymousCtor
                  "⟨"
                  [(Term.app
                    (Term.proj `mem_range "." (fieldIdx "1"))
                    [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
                   ","
                   (Term.app
                    (Term.proj `mem_range "." (fieldIdx "1"))
                    [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
                  "⟩")))
               []
               (Term.anonymousCtor
                "⟨"
                [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
                 ","
                 (Term.anonymousCtor
                  "⟨"
                  [(Term.app
                    (Term.proj `mem_sigma "." (fieldIdx "2"))
                    [(Term.anonymousCtor
                      "⟨"
                      [(Term.app
                        (Term.proj `mem_range "." (fieldIdx "2"))
                        [(Term.app
                          (Term.proj `lt_tsub_iff_right "." (fieldIdx "1"))
                          [(Term.proj `ha "." (fieldIdx "2"))])])
                       ","
                       (Term.app
                        (Term.proj `mem_range "." (fieldIdx "2"))
                        [(Term.app
                          `Nat.lt_succ_of_leₓ
                          [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
                      "⟩")])
                   ","
                   (Term.app
                    (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
                    [(Term.anonymousCtor
                      "⟨"
                      [`rfl
                       ","
                       (Term.app
                        `heq_of_eq
                        [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
                      "⟩")])]
                  "⟩")]
                "⟩"))))])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sum_sigma') "," (Tactic.rwRule [] `sum_sigma')] "]")
         [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `sum_bij
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`a (Term.hole "_")] [])]
             "=>"
             (Term.anonymousCtor
              "⟨"
              [(Term.proj `a "." (fieldIdx "2"))
               ","
               («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
              "⟩")))
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`a `ha] [])]
             "=>"
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₁ []]
                [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
                ":="
                (Term.app
                 (Term.proj `mem_range "." (fieldIdx "1"))
                 [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₂ []]
                 [(Term.typeSpec
                   ":"
                   («term_<_»
                    (Term.proj `a "." (fieldIdx "2"))
                    "<"
                    (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
                 ":="
                 (Term.app
                  (Term.proj `mem_range "." (fieldIdx "1"))
                  [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
               []
               (Term.app
                (Term.proj `mem_sigma "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "⟨"
                  [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
                   ","
                   (Term.app
                    (Term.proj `mem_range "." (fieldIdx "2"))
                    [(Term.app
                      (Term.proj
                       (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])])
                       "."
                       (fieldIdx "2"))
                      [`h₁])])]
                  "⟩")])))))
           (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
              (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
              (Term.simpleBinder [`ha `hb `h] [])]
             "=>"
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`ha []]
                [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
                ":="
                (Term.anonymousCtor
                 "⟨"
                 [(Term.app
                   (Term.proj `mem_range "." (fieldIdx "1"))
                   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
                  ","
                  (Term.app
                   `Nat.le_of_lt_succₓ
                   [(Term.app
                     (Term.proj `mem_range "." (fieldIdx "1"))
                     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
                 "⟩")))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hb []]
                 [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
                 ":="
                 (Term.anonymousCtor
                  "⟨"
                  [(Term.app
                    (Term.proj `mem_range "." (fieldIdx "1"))
                    [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
                   ","
                   (Term.app
                    `Nat.le_of_lt_succₓ
                    [(Term.app
                      (Term.proj `mem_range "." (fieldIdx "1"))
                      [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
                  "⟩")))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h []]
                  [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
                  ":="
                  (Term.app `Sigma.mk.inj [`h])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h' []]
                   [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
                   ":="
                   (Term.app
                    (Term.proj
                     (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))])
                     "."
                     (fieldIdx "1"))
                    [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
                 []
                 (Term.app
                  (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
                  [(Term.anonymousCtor
                    "⟨"
                    [(Term.subst
                      (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
                      "▸"
                      [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
                     ","
                     (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
                    "⟩")])))))))
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
             "=>"
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`ha []]
                [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
                ":="
                (Term.anonymousCtor
                 "⟨"
                 [(Term.app
                   (Term.proj `mem_range "." (fieldIdx "1"))
                   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
                  ","
                  (Term.app
                   (Term.proj `mem_range "." (fieldIdx "1"))
                   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
                 "⟩")))
              []
              (Term.anonymousCtor
               "⟨"
               [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
                ","
                (Term.anonymousCtor
                 "⟨"
                 [(Term.app
                   (Term.proj `mem_sigma "." (fieldIdx "2"))
                   [(Term.anonymousCtor
                     "⟨"
                     [(Term.app
                       (Term.proj `mem_range "." (fieldIdx "2"))
                       [(Term.app
                         (Term.proj `lt_tsub_iff_right "." (fieldIdx "1"))
                         [(Term.proj `ha "." (fieldIdx "2"))])])
                      ","
                      (Term.app
                       (Term.proj `mem_range "." (fieldIdx "2"))
                       [(Term.app
                         `Nat.lt_succ_of_leₓ
                         [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
                     "⟩")])
                  ","
                  (Term.app
                   (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
                   [(Term.anonymousCtor
                     "⟨"
                     [`rfl
                      ","
                      (Term.app
                       `heq_of_eq
                       [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
                     "⟩")])]
                 "⟩")]
               "⟩"))))])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq
    "rw"
    []
    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sum_sigma') "," (Tactic.rwRule [] `sum_sigma')] "]")
    [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `sum_bij
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a (Term.hole "_")] [])]
        "=>"
        (Term.anonymousCtor
         "⟨"
         [(Term.proj `a "." (fieldIdx "2"))
          ","
          («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
         "⟩")))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a `ha] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₁ []]
           [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
           ":="
           (Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₂ []]
            [(Term.typeSpec
              ":"
              («term_<_»
               (Term.proj `a "." (fieldIdx "2"))
               "<"
               (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
            ":="
            (Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
          []
          (Term.app
           (Term.proj `mem_sigma "." (fieldIdx "2"))
           [(Term.anonymousCtor
             "⟨"
             [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
              ","
              (Term.app
               (Term.proj `mem_range "." (fieldIdx "2"))
               [(Term.app
                 (Term.proj
                  (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])])
                  "."
                  (fieldIdx "2"))
                 [`h₁])])]
             "⟩")])))))
      (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
         (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
         (Term.simpleBinder [`ha `hb `h] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`ha []]
           [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
           ":="
           (Term.anonymousCtor
            "⟨"
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
             ","
             (Term.app
              `Nat.le_of_lt_succₓ
              [(Term.app
                (Term.proj `mem_range "." (fieldIdx "1"))
                [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
            "⟩")))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hb []]
            [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
            ":="
            (Term.anonymousCtor
             "⟨"
             [(Term.app
               (Term.proj `mem_range "." (fieldIdx "1"))
               [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
              ","
              (Term.app
               `Nat.le_of_lt_succₓ
               [(Term.app
                 (Term.proj `mem_range "." (fieldIdx "1"))
                 [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
             "⟩")))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h []]
             [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
             ":="
             (Term.app `Sigma.mk.inj [`h])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h' []]
              [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
              ":="
              (Term.app
               (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
               [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
            []
            (Term.app
             (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
             [(Term.anonymousCtor
               "⟨"
               [(Term.subst
                 (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
                 "▸"
                 [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
                ","
                (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
               "⟩")])))))))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`ha []]
           [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
           ":="
           (Term.anonymousCtor
            "⟨"
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
             ","
             (Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
            "⟩")))
         []
         (Term.anonymousCtor
          "⟨"
          [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
           ","
           (Term.anonymousCtor
            "⟨"
            [(Term.app
              (Term.proj `mem_sigma "." (fieldIdx "2"))
              [(Term.anonymousCtor
                "⟨"
                [(Term.app
                  (Term.proj `mem_range "." (fieldIdx "2"))
                  [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
                 ","
                 (Term.app
                  (Term.proj `mem_range "." (fieldIdx "2"))
                  [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
                "⟩")])
             ","
             (Term.app
              (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
              [(Term.anonymousCtor
                "⟨"
                [`rfl
                 ","
                 (Term.app
                  `heq_of_eq
                  [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
                "⟩")])]
            "⟩")]
          "⟩"))))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `sum_bij
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a (Term.hole "_")] [])]
       "=>"
       (Term.anonymousCtor
        "⟨"
        [(Term.proj `a "." (fieldIdx "2"))
         ","
         («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
        "⟩")))
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a `ha] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₁ []]
          [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
          ":="
          (Term.app
           (Term.proj `mem_range "." (fieldIdx "1"))
           [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₂ []]
           [(Term.typeSpec
             ":"
             («term_<_»
              (Term.proj `a "." (fieldIdx "2"))
              "<"
              (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
           ":="
           (Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
         []
         (Term.app
          (Term.proj `mem_sigma "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "⟨"
            [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
             ","
             (Term.app
              (Term.proj `mem_range "." (fieldIdx "2"))
              [(Term.app
                (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
                [`h₁])])]
            "⟩")])))))
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
        (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
        (Term.simpleBinder [`ha `hb `h] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`ha []]
          [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
          ":="
          (Term.anonymousCtor
           "⟨"
           [(Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
            ","
            (Term.app
             `Nat.le_of_lt_succₓ
             [(Term.app
               (Term.proj `mem_range "." (fieldIdx "1"))
               [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
           "⟩")))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hb []]
           [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
           ":="
           (Term.anonymousCtor
            "⟨"
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
             ","
             (Term.app
              `Nat.le_of_lt_succₓ
              [(Term.app
                (Term.proj `mem_range "." (fieldIdx "1"))
                [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
            "⟩")))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h []]
            [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
            ":="
            (Term.app `Sigma.mk.inj [`h])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h' []]
             [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
             ":="
             (Term.app
              (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
              [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
           []
           (Term.app
            (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "⟨"
              [(Term.subst
                (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
                "▸"
                [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
               ","
               (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
              "⟩")])))))))
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`ha []]
          [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
          ":="
          (Term.anonymousCtor
           "⟨"
           [(Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
            ","
            (Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
           "⟩")))
        []
        (Term.anonymousCtor
         "⟨"
         [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
          ","
          (Term.anonymousCtor
           "⟨"
           [(Term.app
             (Term.proj `mem_sigma "." (fieldIdx "2"))
             [(Term.anonymousCtor
               "⟨"
               [(Term.app
                 (Term.proj `mem_range "." (fieldIdx "2"))
                 [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
                ","
                (Term.app
                 (Term.proj `mem_range "." (fieldIdx "2"))
                 [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
               "⟩")])
            ","
            (Term.app
             (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
             [(Term.anonymousCtor
               "⟨"
               [`rfl
                ","
                (Term.app
                 `heq_of_eq
                 [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
               "⟩")])]
           "⟩")]
         "⟩"))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `sum_bij
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`a (Term.hole "_")] [])]
      "=>"
      (Term.anonymousCtor
       "⟨"
       [(Term.proj `a "." (fieldIdx "2"))
        ","
        («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
       "⟩")))
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`a `ha] [])]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₁ []]
         [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
         ":="
         (Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          [(Term.typeSpec
            ":"
            («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
          ":="
          (Term.app
           (Term.proj `mem_range "." (fieldIdx "1"))
           [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
        []
        (Term.app
         (Term.proj `mem_sigma "." (fieldIdx "2"))
         [(Term.anonymousCtor
           "⟨"
           [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
            ","
            (Term.app
             (Term.proj `mem_range "." (fieldIdx "2"))
             [(Term.app
               (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
               [`h₁])])]
           "⟩")])))))
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
       (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
       (Term.simpleBinder [`ha `hb `h] [])]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`ha []]
         [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
         ":="
         (Term.anonymousCtor
          "⟨"
          [(Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
           ","
           (Term.app
            `Nat.le_of_lt_succₓ
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
          "⟩")))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hb []]
          [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
          ":="
          (Term.anonymousCtor
           "⟨"
           [(Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
            ","
            (Term.app
             `Nat.le_of_lt_succₓ
             [(Term.app
               (Term.proj `mem_range "." (fieldIdx "1"))
               [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
           "⟩")))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h []]
           [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
           ":="
           (Term.app `Sigma.mk.inj [`h])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h' []]
            [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
            ":="
            (Term.app
             (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
             [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
          []
          (Term.app
           (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
           [(Term.anonymousCtor
             "⟨"
             [(Term.subst
               (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
               "▸"
               [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
              ","
              (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
             "⟩")])))))))
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`ha []]
         [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
         ":="
         (Term.anonymousCtor
          "⟨"
          [(Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
           ","
           (Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
          "⟩")))
       []
       (Term.anonymousCtor
        "⟨"
        [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
         ","
         (Term.anonymousCtor
          "⟨"
          [(Term.app
            (Term.proj `mem_sigma "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "⟨"
              [(Term.app
                (Term.proj `mem_range "." (fieldIdx "2"))
                [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
               ","
               (Term.app
                (Term.proj `mem_range "." (fieldIdx "2"))
                [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
              "⟩")])
           ","
           (Term.app
            (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "⟨"
              [`rfl
               ","
               (Term.app
                `heq_of_eq
                [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
              "⟩")])]
          "⟩")]
        "⟩"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩") (Term.simpleBinder [`ha] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ha []]
       [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
       ":="
       (Term.anonymousCtor
        "⟨"
        [(Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
         ","
         (Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
        "⟩")))
     []
     (Term.anonymousCtor
      "⟨"
      [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
       ","
       (Term.anonymousCtor
        "⟨"
        [(Term.app
          (Term.proj `mem_sigma "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "⟨"
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "2"))
              [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
             ","
             (Term.app
              (Term.proj `mem_range "." (fieldIdx "2"))
              [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
            "⟩")])
         ","
         (Term.app
          (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "⟨"
            [`rfl
             ","
             (Term.app
              `heq_of_eq
              [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
            "⟩")])]
        "⟩")]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`ha []]
     [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))))]
     ":="
     (Term.anonymousCtor
      "⟨"
      [(Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
       ","
       (Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
      "⟩")))
   []
   (Term.anonymousCtor
    "⟨"
    [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
     ","
     (Term.anonymousCtor
      "⟨"
      [(Term.app
        (Term.proj `mem_sigma "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "⟨"
          [(Term.app
            (Term.proj `mem_range "." (fieldIdx "2"))
            [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
           ","
           (Term.app
            (Term.proj `mem_range "." (fieldIdx "2"))
            [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
          "⟩")])
       ","
       (Term.app
        (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "⟨"
          [`rfl
           ","
           (Term.app
            `heq_of_eq
            [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
          "⟩")])]
      "⟩")]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
    ","
    (Term.anonymousCtor
     "⟨"
     [(Term.app
       (Term.proj `mem_sigma "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "⟨"
         [(Term.app
           (Term.proj `mem_range "." (fieldIdx "2"))
           [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
          ","
          (Term.app
           (Term.proj `mem_range "." (fieldIdx "2"))
           [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
         "⟩")])
      ","
      (Term.app
       (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "⟨"
         [`rfl
          ","
          (Term.app
           `heq_of_eq
           [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
         "⟩")])]
     "⟩")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.app
     (Term.proj `mem_sigma "." (fieldIdx "2"))
     [(Term.anonymousCtor
       "⟨"
       [(Term.app
         (Term.proj `mem_range "." (fieldIdx "2"))
         [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
        ","
        (Term.app
         (Term.proj `mem_range "." (fieldIdx "2"))
         [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
       "⟩")])
    ","
    (Term.app
     (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
     [(Term.anonymousCtor
       "⟨"
       [`rfl
        ","
        (Term.app
         `heq_of_eq
         [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
       "⟩")])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
   [(Term.anonymousCtor
     "⟨"
     [`rfl
      ","
      (Term.app `heq_of_eq [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
     "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`rfl
    ","
    (Term.app `heq_of_eq [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `heq_of_eq [(Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_tsub_cancel_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `add_tsub_cancel_right [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `heq_of_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Sigma.mk.inj_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_sigma "." (fieldIdx "2"))
   [(Term.anonymousCtor
     "⟨"
     [(Term.app
       (Term.proj `mem_range "." (fieldIdx "2"))
       [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
      ","
      (Term.app
       (Term.proj `mem_range "." (fieldIdx "2"))
       [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
     "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "2"))
     [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
    ","
    (Term.app
     (Term.proj `mem_range "." (fieldIdx "2"))
     [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "2"))
   [(Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.lt_succ_of_leₓ [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_add_leftₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.lt_succ_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Nat.lt_succ_of_leₓ
   [(Term.paren "(" [(Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "2"))
   [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `ha "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `lt_tsub_iff_right "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `lt_tsub_iff_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [(Term.proj `ha "." (fieldIdx "2"))]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [(Init.Logic.«term_+_» `a₂ "+" `a₁) "," `a₁] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» `a₂ "+" `a₁)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.anonymousCtor
   "⟨"
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
    ","
    (Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_<_» `a₂ "<" («term_-_» `n "-" `a₁)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∧_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» `a₂ "<" («term_-_» `n "-" `a₁))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `n "-" `a₁)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  («term_<_» `a₁ "<" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
     (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
     (Term.simpleBinder [`ha `hb `h] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ha []]
       [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
       ":="
       (Term.anonymousCtor
        "⟨"
        [(Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
         ","
         (Term.app
          `Nat.le_of_lt_succₓ
          [(Term.app
            (Term.proj `mem_range "." (fieldIdx "1"))
            [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
        "⟩")))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hb []]
        [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
        ":="
        (Term.anonymousCtor
         "⟨"
         [(Term.app
           (Term.proj `mem_range "." (fieldIdx "1"))
           [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
          ","
          (Term.app
           `Nat.le_of_lt_succₓ
           [(Term.app
             (Term.proj `mem_range "." (fieldIdx "1"))
             [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
         "⟩")))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h []]
         [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
         ":="
         (Term.app `Sigma.mk.inj [`h])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h' []]
          [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
          ":="
          (Term.app
           (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
           [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
        []
        (Term.app
         (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
         [(Term.anonymousCtor
           "⟨"
           [(Term.subst
             (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
             "▸"
             [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
            ","
            (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
           "⟩")])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`ha []]
     [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
     ":="
     (Term.anonymousCtor
      "⟨"
      [(Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
       ","
       (Term.app
        `Nat.le_of_lt_succₓ
        [(Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
      "⟩")))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hb []]
      [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
      ":="
      (Term.anonymousCtor
       "⟨"
       [(Term.app
         (Term.proj `mem_range "." (fieldIdx "1"))
         [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
        ","
        (Term.app
         `Nat.le_of_lt_succₓ
         [(Term.app
           (Term.proj `mem_range "." (fieldIdx "1"))
           [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
       "⟩")))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h []]
       [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
       ":="
       (Term.app `Sigma.mk.inj [`h])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h' []]
        [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
        ":="
        (Term.app
         (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
         [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
      []
      (Term.app
       (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "⟨"
         [(Term.subst
           (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
           "▸"
           [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
          ","
          (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
         "⟩")])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hb []]
     [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
     ":="
     (Term.anonymousCtor
      "⟨"
      [(Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
       ","
       (Term.app
        `Nat.le_of_lt_succₓ
        [(Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
      "⟩")))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h []]
      [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
      ":="
      (Term.app `Sigma.mk.inj [`h])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h' []]
       [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
       ":="
       (Term.app
        (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
        [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
     []
     (Term.app
      (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
      [(Term.anonymousCtor
        "⟨"
        [(Term.subst
          (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
          "▸"
          [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
         ","
         (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
        "⟩")]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h []]
     [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
     ":="
     (Term.app `Sigma.mk.inj [`h])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h' []]
      [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
      ":="
      (Term.app
       (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
       [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
    []
    (Term.app
     (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
     [(Term.anonymousCtor
       "⟨"
       [(Term.subst
         (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
         "▸"
         [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
        ","
        (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
       "⟩")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h' []]
     [(Term.typeSpec ":" («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)))]
     ":="
     (Term.app
      (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
      [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])))
   []
   (Term.app
    (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
    [(Term.anonymousCtor
      "⟨"
      [(Term.subst
        (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
        "▸"
        [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
       ","
       (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
      "⟩")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
   [(Term.anonymousCtor
     "⟨"
     [(Term.subst
       (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
       "▸"
       [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
      ","
      (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
     "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.subst
     (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
     "▸"
     [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
    ","
    (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `h "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `heq_of_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.subst
   (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
   "▸"
   [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  (Term.proj `h "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  `h'.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `hb "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_add_cancel_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Sigma.mk.inj_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
   [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `h "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `eq_of_heq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `ha "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_eq_iff_eq_add_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» `a₁ "=" (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» («term_-_» `b₁ "-" `b₂) "+" `a₂)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_-_» `b₁ "-" `b₂)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `b₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `b₁ "-" `b₂) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `Sigma.mk.inj [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Sigma.mk.inj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∧_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  («term_=_» `a₂ "=" `b₂)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.anonymousCtor
   "⟨"
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
    ","
    (Term.app
     `Nat.le_of_lt_succₓ
     [(Term.app
       (Term.proj `mem_range "." (fieldIdx "1"))
       [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Nat.le_of_lt_succₓ
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj
     (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) []] ")")
     "."
     (fieldIdx "2"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_lt_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∧_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `b₂ "≤" `b₁)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `b₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  («term_<_» `b₁ "<" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `b₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.anonymousCtor
   "⟨"
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
    ","
    (Term.app
     `Nat.le_of_lt_succₓ
     [(Term.app
       (Term.proj `mem_range "." (fieldIdx "1"))
       [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Nat.le_of_lt_succₓ
   [(Term.app
     (Term.proj `mem_range "." (fieldIdx "1"))
     [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj
     (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []] ")")
     "."
     (fieldIdx "2"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_lt_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∧_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `a₂ "≤" `a₁)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  («term_<_» `a₁ "<" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.anonymousCtor "⟨" [`a₁ "," `a₂] "⟩")
     (Term.anonymousCtor "⟨" [`b₁ "," `b₂] "⟩")
     (Term.simpleBinder [`ha `hb `h] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ha []]
       [(Term.typeSpec ":" («term_∧_» («term_<_» `a₁ "<" `n) "∧" («term_≤_» `a₂ "≤" `a₁)))]
       ":="
       (Term.anonymousCtor
        "⟨"
        [(Term.app
          (Term.proj `mem_range "." (fieldIdx "1"))
          [(Term.proj
            (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []] ")")
            "."
            (fieldIdx "1"))])
         ","
         (Term.app
          `Nat.le_of_lt_succₓ
          [(Term.paren
            "("
            [(Term.app
              (Term.proj `mem_range "." (fieldIdx "1"))
              [(Term.proj
                (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []] ")")
                "."
                (fieldIdx "2"))])
             []]
            ")")])]
        "⟩")))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hb []]
        [(Term.typeSpec ":" («term_∧_» («term_<_» `b₁ "<" `n) "∧" («term_≤_» `b₂ "≤" `b₁)))]
        ":="
        (Term.anonymousCtor
         "⟨"
         [(Term.app
           (Term.proj `mem_range "." (fieldIdx "1"))
           [(Term.proj
             (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) []] ")")
             "."
             (fieldIdx "1"))])
          ","
          (Term.app
           `Nat.le_of_lt_succₓ
           [(Term.paren
             "("
             [(Term.app
               (Term.proj `mem_range "." (fieldIdx "1"))
               [(Term.proj
                 (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`hb]) []] ")")
                 "."
                 (fieldIdx "2"))])
              []]
             ")")])]
         "⟩")))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h []]
         [(Term.typeSpec ":" («term_∧_» («term_=_» `a₂ "=" `b₂) "∧" (Term.hole "_")))]
         ":="
         (Term.app `Sigma.mk.inj [`h])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h' []]
          [(Term.typeSpec
            ":"
            («term_=_» `a₁ "=" (Init.Logic.«term_+_» (Term.paren "(" [(«term_-_» `b₁ "-" `b₂) []] ")") "+" `a₂)))]
          ":="
          (Term.app
           (Term.proj
            (Term.paren "(" [(Term.app `tsub_eq_iff_eq_add_of_le [(Term.proj `ha "." (fieldIdx "2"))]) []] ")")
            "."
            (fieldIdx "1"))
           [(Term.paren "(" [(Term.app `eq_of_heq [(Term.proj `h "." (fieldIdx "2"))]) []] ")")])))
        []
        (Term.app
         (Term.proj `Sigma.mk.inj_iff "." (fieldIdx "2"))
         [(Term.anonymousCtor
           "⟨"
           [(Term.subst
             (Term.app `tsub_add_cancel_of_le [(Term.proj `hb "." (fieldIdx "2"))])
             "▸"
             [(Term.subst `h'.symm "▸" [(Term.subst (Term.proj `h "." (fieldIdx "1")) "▸" [`rfl])])])
            ","
            (Term.app `heq_of_eq [(Term.proj `h "." (fieldIdx "1"))])]
           "⟩")])))))))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl)) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a `ha] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₁ []]
       [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
       ":="
       (Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₂ []]
        [(Term.typeSpec
          ":"
          («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
        ":="
        (Term.app
         (Term.proj `mem_range "." (fieldIdx "1"))
         [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
      []
      (Term.app
       (Term.proj `mem_sigma "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "⟨"
         [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
          ","
          (Term.app
           (Term.proj `mem_range "." (fieldIdx "2"))
           [(Term.app
             (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
             [`h₁])])]
         "⟩")])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
     ":="
     (Term.app
      (Term.proj `mem_range "." (fieldIdx "1"))
      [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₂ []]
      [(Term.typeSpec
        ":"
        («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
      ":="
      (Term.app
       (Term.proj `mem_range "." (fieldIdx "1"))
       [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
    []
    (Term.app
     (Term.proj `mem_sigma "." (fieldIdx "2"))
     [(Term.anonymousCtor
       "⟨"
       [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
        ","
        (Term.app
         (Term.proj `mem_range "." (fieldIdx "2"))
         [(Term.app
           (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
           [`h₁])])]
       "⟩")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     [(Term.typeSpec
       ":"
       («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
     ":="
     (Term.app
      (Term.proj `mem_range "." (fieldIdx "1"))
      [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])))
   []
   (Term.app
    (Term.proj `mem_sigma "." (fieldIdx "2"))
    [(Term.anonymousCtor
      "⟨"
      [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
       ","
       (Term.app
        (Term.proj `mem_range "." (fieldIdx "2"))
        [(Term.app
          (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
          [`h₁])])]
      "⟩")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_sigma "." (fieldIdx "2"))
   [(Term.anonymousCtor
     "⟨"
     [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
      ","
      (Term.app
       (Term.proj `mem_range "." (fieldIdx "2"))
       [(Term.app
         (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
         [`h₁])])]
     "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
    ","
    (Term.app
     (Term.proj `mem_range "." (fieldIdx "2"))
     [(Term.app
       (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
       [`h₁])])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "2"))
   [(Term.app
     (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
     [`h₁])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
   [`h₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `tsub_lt_tsub_iff_right [(Term.app `Nat.le_of_lt_succₓ [`h₂])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_of_lt_succₓ [`h₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_lt_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.le_of_lt_succₓ [`h₂]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_lt_tsub_iff_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `tsub_lt_tsub_iff_right [(Term.paren "(" [(Term.app `Nat.le_of_lt_succₓ [`h₂]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app `tsub_lt_tsub_iff_right [(Term.paren "(" [(Term.app `Nat.le_of_lt_succₓ [`h₂]) []] ")")]) []]
     ")")
    "."
    (fieldIdx "2"))
   [`h₁])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `mem_range "." (fieldIdx "2")) [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_of_lt_of_leₓ [`h₂ `h₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_lt_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj `mem_range "." (fieldIdx "1"))
   [(Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_sigma "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_sigma
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a `ha] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₁ []]
       [(Term.typeSpec ":" («term_<_» (Term.proj `a "." (fieldIdx "1")) "<" `n))]
       ":="
       (Term.app
        (Term.proj `mem_range "." (fieldIdx "1"))
        [(Term.proj
          (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []] ")")
          "."
          (fieldIdx "1"))])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₂ []]
        [(Term.typeSpec
          ":"
          («term_<_» (Term.proj `a "." (fieldIdx "2")) "<" (Term.app `Nat.succ [(Term.proj `a "." (fieldIdx "1"))])))]
        ":="
        (Term.app
         (Term.proj `mem_range "." (fieldIdx "1"))
         [(Term.proj
           (Term.paren "(" [(Term.app (Term.proj `mem_sigma "." (fieldIdx "1")) [`ha]) []] ")")
           "."
           (fieldIdx "2"))])))
      []
      (Term.app
       (Term.proj `mem_sigma "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "⟨"
         [(Term.app
           (Term.proj `mem_range "." (fieldIdx "2"))
           [(Term.paren "(" [(Term.app `lt_of_lt_of_leₓ [`h₂ `h₁]) []] ")")])
          ","
          (Term.app
           (Term.proj `mem_range "." (fieldIdx "2"))
           [(Term.paren
             "("
             [(Term.app
               (Term.proj
                (Term.paren
                 "("
                 [(Term.app `tsub_lt_tsub_iff_right [(Term.paren "(" [(Term.app `Nat.le_of_lt_succₓ [`h₂]) []] ")")])
                  []]
                 ")")
                "."
                (fieldIdx "2"))
               [`h₁])
              []]
             ")")])]
         "⟩")])))))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a (Term.hole "_")] [])]
    "=>"
    (Term.anonymousCtor
     "⟨"
     [(Term.proj `a "." (fieldIdx "2"))
      ","
      («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.proj `a "." (fieldIdx "2"))
    ","
    («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a (Term.hole "_")] [])]
    "=>"
    (Term.anonymousCtor
     "⟨"
     [(Term.proj `a "." (fieldIdx "2"))
      ","
      («term_-_» (Term.proj `a "." (fieldIdx "1")) "-" (Term.proj `a "." (fieldIdx "2")))]
     "⟩")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_bij
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sum_sigma') "," (Tactic.rwRule [] `sum_sigma')] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_sigma'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_sigma'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_=_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`n])
    ", "
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
     ", "
     (Term.app `f [`k («term_-_» `m "-" `k)])))
   "="
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`n])
    ", "
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [(«term_-_» `n "-" `m)])
     ", "
     (Term.app `f [`m `k]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
    " in "
    (Term.app `range [(«term_-_» `n "-" `m)])
    ", "
    (Term.app `f [`m `k])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
   " in "
   (Term.app `range [(«term_-_» `n "-" `m)])
   ", "
   (Term.app `f [`m `k]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`m `k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(«term_-_» `n "-" `m)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `n "-" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `n "-" `m) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  sum_range_diag_flip
  { α : Type _ } [ AddCommMonoidₓ α ] ( n : ℕ ) ( f : ℕ → ℕ → α )
    : ∑ m in range n , ∑ k in range m + 1 , f k m - k = ∑ m in range n , ∑ k in range n - m , f m k
  :=
    by
      rw [ sum_sigma' , sum_sigma' ]
        <;>
        exact
          sum_bij
            fun a _ => ⟨ a . 2 , a . 1 - a . 2 ⟩
              fun
                a ha
                  =>
                  have
                    h₁ : a . 1 < n := mem_range . 1 mem_sigma . 1 ha . 1
                    have
                      h₂ : a . 2 < Nat.succ a . 1 := mem_range . 1 mem_sigma . 1 ha . 2
                      mem_sigma . 2
                        ⟨
                          mem_range . 2 lt_of_lt_of_leₓ h₂ h₁
                            ,
                            mem_range . 2 tsub_lt_tsub_iff_right Nat.le_of_lt_succₓ h₂ . 2 h₁
                          ⟩
              fun _ _ => rfl
              fun
                ⟨ a₁ , a₂ ⟩ ⟨ b₁ , b₂ ⟩ ha hb h
                  =>
                  have
                    ha
                      : a₁ < n ∧ a₂ ≤ a₁
                      :=
                      ⟨ mem_range . 1 mem_sigma . 1 ha . 1 , Nat.le_of_lt_succₓ mem_range . 1 mem_sigma . 1 ha . 2 ⟩
                    have
                      hb
                        : b₁ < n ∧ b₂ ≤ b₁
                        :=
                        ⟨ mem_range . 1 mem_sigma . 1 hb . 1 , Nat.le_of_lt_succₓ mem_range . 1 mem_sigma . 1 hb . 2 ⟩
                      have
                        h : a₂ = b₂ ∧ _ := Sigma.mk.inj h
                        have
                          h' : a₁ = b₁ - b₂ + a₂ := tsub_eq_iff_eq_add_of_le ha . 2 . 1 eq_of_heq h . 2
                          Sigma.mk.inj_iff . 2
                            ⟨ tsub_add_cancel_of_le hb . 2 ▸ h'.symm ▸ h . 1 ▸ rfl , heq_of_eq h . 1 ⟩
              fun
                ⟨ a₁ , a₂ ⟩ ha
                  =>
                  have
                    ha
                      : a₁ < n ∧ a₂ < n - a₁
                      :=
                      ⟨ mem_range . 1 mem_sigma . 1 ha . 1 , mem_range . 1 mem_sigma . 1 ha . 2 ⟩
                    ⟨
                      ⟨ a₂ + a₁ , a₁ ⟩
                        ,
                        ⟨
                          mem_sigma . 2
                              ⟨
                                mem_range . 2 lt_tsub_iff_right . 1 ha . 2
                                  ,
                                  mem_range . 2 Nat.lt_succ_of_leₓ Nat.le_add_leftₓ _ _
                                ⟩
                            ,
                            Sigma.mk.inj_iff . 2 ⟨ rfl , heq_of_eq add_tsub_cancel_right _ _ . symm ⟩
                          ⟩
                      ⟩

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `sum_range_sub_sum_range [])
  (Command.declSig
   [(Term.implicitBinder "{" [`α] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.instBinder "[" [] (Term.app `AddCommGroupₓ [`α]) "]")
    (Term.implicitBinder "{" [`f] [":" (Term.arrow (termℕ "ℕ") "→" `α)] "}")
    (Term.implicitBinder "{" [`n `m] [":" (termℕ "ℕ")] "}")
    (Term.explicitBinder "(" [`hnm] [":" («term_≤_» `n "≤" `m)] [] ")")]
   (Term.typeSpec
    ":"
    («term_=_»
     («term_-_»
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
       " in "
       (Term.app `range [`m])
       ", "
       (Term.app `f [`k]))
      "-"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
       " in "
       (Term.app `range [`n])
       ", "
       (Term.app `f [`k])))
     "="
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
      " in "
      (Term.app
       (Term.proj (Term.app `range [`m]) "." `filter)
       [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
      ", "
      (Term.app `f [`k])))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            ["←"]
            (Term.app
             `sum_sdiff
             [(Term.app
               (Term.explicit "@" `filter_subset)
               [(Term.hole "_")
                (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
                (Term.hole "_")
                (Term.app `range [`m])])]))
           ","
           (Tactic.rwRule [] `sub_eq_iff_eq_add)
           ","
           (Tactic.rwRule ["←"] `eq_sub_iff_add_eq)
           ","
           (Tactic.rwRule [] `add_sub_cancel')]
          "]")
         [])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `Finset.sum_congr
          [(«term_$__»
            `Finset.ext
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`a] [])]
              "=>"
              (Term.anonymousCtor
               "⟨"
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`h] [])]
                  "=>"
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.«tactic_<;>_»
                        (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                        "<;>"
                        (Tactic.finish "finish" [] [] []))
                       [])])))))
                ","
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`h] [])]
                  "=>"
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`ham []]
                     [(Term.typeSpec ":" («term_<_» `a "<" `m))]
                     ":="
                     (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
                   []
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
               "⟩"))))
           (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))]))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule
           ["←"]
           (Term.app
            `sum_sdiff
            [(Term.app
              (Term.explicit "@" `filter_subset)
              [(Term.hole "_")
               (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
               (Term.hole "_")
               (Term.app `range [`m])])]))
          ","
          (Tactic.rwRule [] `sub_eq_iff_eq_add)
          ","
          (Tactic.rwRule ["←"] `eq_sub_iff_add_eq)
          ","
          (Tactic.rwRule [] `add_sub_cancel')]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `Finset.sum_congr
         [(«term_$__»
           `Finset.ext
           "$"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`a] [])]
             "=>"
             (Term.anonymousCtor
              "⟨"
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`h] [])]
                 "=>"
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                       "<;>"
                       (Tactic.finish "finish" [] [] []))
                      [])])))))
               ","
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`h] [])]
                 "=>"
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`ham []]
                    [(Term.typeSpec ":" («term_<_» `a "<" `m))]
                    ":="
                    (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
                  []
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
              "⟩"))))
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.refine'
   "refine'"
   (Term.app
    `Finset.sum_congr
    [(«term_$__»
      `Finset.ext
      "$"
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a] [])]
        "=>"
        (Term.anonymousCtor
         "⟨"
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`h] [])]
            "=>"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                  "<;>"
                  (Tactic.finish "finish" [] [] []))
                 [])])))))
          ","
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`h] [])]
            "=>"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`ham []]
               [(Term.typeSpec ":" («term_<_» `a "<" `m))]
               ":="
               (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
             []
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
         "⟩"))))
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Finset.sum_congr
   [(«term_$__»
     `Finset.ext
     "$"
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a] [])]
       "=>"
       (Term.anonymousCtor
        "⟨"
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`h] [])]
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.«tactic_<;>_»
                 (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                 "<;>"
                 (Tactic.finish "finish" [] [] []))
                [])])))))
         ","
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`h] [])]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`ham []]
              [(Term.typeSpec ":" («term_<_» `a "<" `m))]
              ":="
              (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
            []
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
        "⟩"))))
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" `rfl))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  («term_$__»
   `Finset.ext
   "$"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`a] [])]
     "=>"
     (Term.anonymousCtor
      "⟨"
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`h] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
               "<;>"
               (Tactic.finish "finish" [] [] []))
              [])])))))
       ","
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`h] [])]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`ham []]
            [(Term.typeSpec ":" («term_<_» `a "<" `m))]
            ":="
            (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
          []
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a] [])]
    "=>"
    (Term.anonymousCtor
     "⟨"
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`h] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
              "<;>"
              (Tactic.finish "finish" [] [] []))
             [])])))))
      ","
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`h] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`ham []]
           [(Term.typeSpec ":" («term_<_» `a "<" `m))]
           ":="
           (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
         []
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`h] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
            "<;>"
            (Tactic.finish "finish" [] [] []))
           [])])))))
    ","
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`h] [])]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`ham []]
         [(Term.typeSpec ":" («term_<_» `a "<" `m))]
         ":="
         (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
       []
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`h] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ham []]
       [(Term.typeSpec ":" («term_<_» `a "<" `m))]
       ":="
       (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
     []
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`ham []]
     [(Term.typeSpec ":" («term_<_» `a "<" `m))]
     ":="
     (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpAll "simp_all" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpAll', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `lt_of_lt_of_leₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) `hnm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hnm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_lt_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» `a "<" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`h] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
          "<;>"
          (Tactic.finish "finish" [] [] []))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
        "<;>"
        (Tactic.finish "finish" [] [] []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
   "<;>"
   (Tactic.finish "finish" [] [] []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.finish "finish" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.finish', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `Finset.ext
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__»
   `Finset.ext
   "$"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`a] [])]
     "=>"
     (Term.anonymousCtor
      "⟨"
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`h] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
               "<;>"
               (Tactic.finish "finish" [] [] []))
              [])])))))
       ","
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`h] [])]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`ham []]
            [(Term.typeSpec ":" («term_<_» `a "<" `m))]
            ":="
            (Term.app
             `lt_of_lt_of_leₓ
             [(Term.paren "(" [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`h]) []] ")") `hnm])))
          []
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpAll "simp_all" [] [] []) [])]))))))]
      "⟩"))))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.sum_congr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule
      ["←"]
      (Term.app
       `sum_sdiff
       [(Term.app
         (Term.explicit "@" `filter_subset)
         [(Term.hole "_")
          (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
          (Term.hole "_")
          (Term.app `range [`m])])]))
     ","
     (Tactic.rwRule [] `sub_eq_iff_eq_add)
     ","
     (Tactic.rwRule ["←"] `eq_sub_iff_add_eq)
     ","
     (Tactic.rwRule [] `add_sub_cancel')]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_sub_cancel'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `eq_sub_iff_add_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_iff_eq_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `sum_sdiff
   [(Term.app
     (Term.explicit "@" `filter_subset)
     [(Term.hole "_")
      (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
      (Term.hole "_")
      (Term.app `range [`m])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.explicit "@" `filter_subset)
   [(Term.hole "_")
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
    (Term.hole "_")
    (Term.app `range [`m])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`m]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `n "≤" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `filter_subset)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `filter_subset
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.explicit "@" `filter_subset)
   [(Term.hole "_")
    (Term.paren "(" [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k))) []] ")")
    (Term.hole "_")
    (Term.paren "(" [(Term.app `range [`m]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_sdiff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_=_»
   («term_-_»
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [`m])
     ", "
     (Term.app `f [`k]))
    "-"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [`n])
     ", "
     (Term.app `f [`k])))
   "="
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
    " in "
    (Term.app
     (Term.proj (Term.app `range [`m]) "." `filter)
     [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
    ", "
    (Term.app `f [`k])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
   " in "
   (Term.app
    (Term.proj (Term.app `range [`m]) "." `filter)
    [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
   ", "
   (Term.app `f [`k]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `range [`m]) "." `filter)
   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `n "≤" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `range [`m]) "." `filter)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`m]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  sum_range_sub_sum_range
  { α : Type _ } [ AddCommGroupₓ α ] { f : ℕ → α } { n m : ℕ } ( hnm : n ≤ m )
    : ∑ k in range m , f k - ∑ k in range n , f k = ∑ k in range m . filter fun k => n ≤ k , f k
  :=
    by
      rw
          [
            ← sum_sdiff @ filter_subset _ fun k => n ≤ k _ range m
              ,
              sub_eq_iff_eq_add
              ,
              ← eq_sub_iff_add_eq
              ,
              add_sub_cancel'
            ]
        refine'
          Finset.sum_congr
            Finset.ext
                $
                fun
                  a
                    =>
                    ⟨
                      fun h => by simp at * <;> finish
                        ,
                        fun h => have ham : a < m := lt_of_lt_of_leₓ mem_range . 1 h hnm by simp_all
                      ⟩
              fun _ _ => rfl

end

section NoArchimedean

variable {α : Type _} {β : Type _} [Ringₓ β] [LinearOrderedField α] {abv : β → α} [IsAbsoluteValue abv]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `abv_sum_le_sum_abv [])
  (Command.declSig
   [(Term.implicitBinder "{" [`γ] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.explicitBinder "(" [`f] [":" (Term.arrow `γ "→" `β)] [] ")")
    (Term.explicitBinder "(" [`s] [":" (Term.app `Finset [`γ])] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app
      `abv
      [(Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
        " in "
        `s
        ", "
        (Term.app `f [`k]))])
     "≤"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
      " in "
      `s
      ", "
      (Term.app `abv [(Term.app `f [`k])])))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `Classical.decEq [`γ]))))
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `Finset.induction_on
           [`s
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] [])
                 [])])))
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`a `s `has `ih] [])]
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] (Term.app `sum_insert [`has]))
                       ","
                       (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
                      "]")
                     [])
                    "<;>"
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `le_transₓ
                      [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
                       (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
                   [])])))))])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `Classical.decEq [`γ]))))
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `Finset.induction_on
          [`s
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] [])
                [])])))
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`a `s `has `ih] [])]
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] (Term.app `sum_insert [`has]))
                      ","
                      (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
                     "]")
                    [])
                   "<;>"
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `le_transₓ
                     [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
                      (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
                  [])])))))])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `Classical.decEq [`γ]))))
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `Finset.induction_on
     [`s
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a `s `has `ih] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
                "]")
               [])
              "<;>"
              (Tactic.exact
               "exact"
               (Term.app
                `le_transₓ
                [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
                 (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
             [])])))))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `Finset.induction_on
    [`s
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a `s `has `ih] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
               "]")
              [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app
               `le_transₓ
               [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
                (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
            [])])))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Finset.induction_on
   [`s
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`a `s `has `ih] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
              "]")
             [])
            "<;>"
            (Tactic.exact
             "exact"
             (Term.app
              `le_transₓ
              [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
               (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
           [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a `s `has `ih] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
            "]")
           [])
          "<;>"
          (Tactic.exact
           "exact"
           (Term.app
            `le_transₓ
            [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
             (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
          "]")
         [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `le_transₓ
          [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
           (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq
    "rw"
    []
    (Tactic.rwRuleSeq
     "["
     [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
     "]")
    [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `le_transₓ
     [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")]) (Term.app `add_le_add_left [`ih (Term.hole "_")])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `le_transₓ
    [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")]) (Term.app `add_le_add_left [`ih (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_transₓ
   [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")]) (Term.app `add_le_add_left [`ih (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_le_add_left [`ih (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `ih
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `add_le_add_left [`ih (Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_add [`abv (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] (Term.app `sum_insert [`has])) "," (Tactic.rwRule [] (Term.app `sum_insert [`has]))]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sum_insert [`has])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `has
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_insert
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sum_insert [`has])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `has
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_insert
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_zero [`abv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_zero [`abv]))] "]"] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.induction_on
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `Classical.decEq [`γ]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Classical.decEq [`γ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `γ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Classical.decEq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_≤_»
   (Term.app
    `abv
    [(Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
      " in "
      `s
      ", "
      (Term.app `f [`k]))])
   "≤"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
    " in "
    `s
    ", "
    (Term.app `abv [(Term.app `f [`k])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
   " in "
   `s
   ", "
   (Term.app `abv [(Term.app `f [`k])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv [(Term.app `f [`k])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f [`k]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  abv_sum_le_sum_abv
  { γ : Type _ } ( f : γ → β ) ( s : Finset γ ) : abv ∑ k in s , f k ≤ ∑ k in s , abv f k
  :=
    by
      have := Classical.decEq γ
        <;>
        exact
          Finset.induction_on
            s
              by simp [ abv_zero abv ]
              fun
                a s has ih
                  =>
                  by rw [ sum_insert has , sum_insert has ] <;> exact le_transₓ abv_add abv _ _ add_le_add_left ih _

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `cauchy_product [])
  (Command.declSig
   [(Term.implicitBinder "{" [`a `b] [":" (Term.arrow (termℕ "ℕ") "→" `β)] "}")
    (Term.explicitBinder
     "("
     [`ha]
     [":"
      (Term.app
       `IsCauSeq
       [`abs
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m] [])]
          "=>"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
           " in "
           (Term.app `range [`m])
           ", "
           (Term.app `abv [(Term.app `a [`n])]))))])]
     []
     ")")
    (Term.explicitBinder
     "("
     [`hb]
     [":"
      (Term.app
       `IsCauSeq
       [`abv
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m] [])]
          "=>"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
           " in "
           (Term.app `range [`m])
           ", "
           (Term.app `b [`n]))))])]
     []
     ")")
    (Term.explicitBinder "(" [`ε] [":" `α] [] ")")
    (Term.explicitBinder "(" [`ε0] [":" («term_<_» (numLit "0") "<" `ε)] [] ")")]
   (Term.typeSpec
    ":"
    («term∃_,_»
     "∃"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
     ","
     (Term.forall
      "∀"
      []
      ","
      (Mathlib.ExtendedBinder.«term∀___,_»
       "∀"
       `j
       (Mathlib.ExtendedBinder.«binderTerm≥_» "≥" `i)
       ","
       (Term.forall
        "∀"
        []
        ","
        («term_<_»
         (Term.app
          `abv
          [(«term_-_»
            (Finset.Data.Finset.Fold.«term_*_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`j])
              ", "
              (Term.app `a [`k]))
             "*"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`j])
              ", "
              (Term.app `b [`k])))
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
             " in "
             (Term.app `range [`j])
             ", "
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» `n "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [(«term_-_» `n "-" `m)])))))])
         "<"
         `ε)))))))
  (Command.declValSimple
   ":="
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`Q "," `hQ] "⟩")
      []
      []
      ":="
      (Term.app `CauSeq.bounded [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩")])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`P "," `hP] "⟩")
       []
       []
       ":="
       (Term.app `CauSeq.bounded [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩")])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hP0 []]
        [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `P))]
        ":="
        (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.app `hP [(numLit "0")])])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hPε0 []]
         [(Term.typeSpec
           ":"
           («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))]
         ":="
         (Term.app
          `div_pos
          [`ε0
           (Term.app
            `mul_pos
            [(Term.show
              "show"
              («term_>_» (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" `α)]] ")") ">" (numLit "0"))
              (Term.fromTerm
               "from"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
             `hP0])])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
          []
          []
          ":="
          (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hQε0 []]
           [(Term.typeSpec
             ":"
             («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
           ":="
           (Term.app
            `div_pos
            [`ε0
             (Term.app
              `mul_pos
              [(Term.show
                "show"
                («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
               (Term.app
                `lt_of_le_of_ltₓ
                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
            []
            []
            ":="
            (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
          []
          (Term.anonymousCtor
           "⟨"
           [(Finset.Data.Finset.Fold.«term_*_»
             (numLit "2")
             "*"
             (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
            ","
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`K `hK] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₁ []]
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
                    "="
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `m)])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.simpa
                       "simpa"
                       []
                       []
                       []
                       []
                       ["using"
                        (Term.app
                         `sum_range_diag_flip
                         [`K
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`m `n] [])]
                            "=>"
                            (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                      [])])))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₂ []]
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`i] [])]
                       "=>"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                     "="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`i] [])]
                       "=>"
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `a [`i])
                        "*"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k])))))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] [])
                       [])])))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₃ []]
                   [(Term.typeSpec
                     ":"
                     («term_=_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `a [`i])
                        "*"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))))
                      "="
                      (Init.Logic.«term_+_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `a [`i])
                         "*"
                         («term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))))
                       "+"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `a [`i])
                         "*"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))))))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.«tactic_<;>_»
                         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                         "<;>"
                         (Tactic.simp
                          "simp"
                          []
                          []
                          ["["
                           [(Tactic.simpLemma
                             []
                             []
                             (Term.proj
                              (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                              "."
                              `symm))]
                           "]"]
                          []))
                        [])])))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`two_mul_two []]
                    [(Term.typeSpec
                      ":"
                      («term_=_»
                       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                       "="
                       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hQ0 []]
                     [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                     ":="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`h] [])]
                       "=>"
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.simpa
                             "simpa"
                             []
                             []
                             ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                             []
                             ["using" `hQε0])
                            [])])))))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h2Q0 []]
                      [(Term.typeSpec
                        ":"
                        («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                      ":="
                      (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hε []]
                       [(Term.typeSpec
                         ":"
                         («term_=_»
                          (Init.Logic.«term_+_»
                           (Finset.Data.Finset.Fold.«term_*_»
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                            "*"
                            `P)
                           "+"
                           (Finset.Data.Finset.Fold.«term_*_»
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                            "*"
                            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                          "="
                          `ε))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                               ","
                               (Tactic.rwRule
                                []
                                (Term.app
                                 `div_mul_cancel
                                 [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                               ","
                               (Tactic.rwRule [] `two_mul_two)
                               ","
                               (Tactic.rwRule [] `mul_assocₓ)
                               ","
                               (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                               ","
                               (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                               ","
                               (Tactic.rwRule [] `add_halves)]
                              "]")
                             [])
                            [])])))))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hNMK []]
                        [(Term.typeSpec
                          ":"
                          («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                        ":="
                        (Term.app
                         `lt_of_lt_of_leₓ
                         [(Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.«tactic_<;>_»
                                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                "<;>"
                                (Tactic.exact
                                 "exact"
                                 (Term.app
                                  `lt_add_of_pos_left
                                  [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                               [])])))
                          `hK])))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`hKN []]
                         [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                         ":="
                         (calc
                          "calc"
                          [(calcStep
                            («term_≤_» `N "≤" (Term.app `max [`N `M]))
                            ":="
                            (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                           (calcStep
                            («term_<_»
                             (Term.hole "_")
                             "<"
                             (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                            ":="
                            (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                           (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`hsumlesum []]
                          [(Term.typeSpec
                            ":"
                            («term_≤_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Term.app
                                `abv
                                [(«term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [(«term_-_» `K "-" `i)])
                                   ", "
                                   (Term.app `b [`k]))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Term.app `b [`k])))])))
                             "≤"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                          ":="
                          (Term.app
                           `sum_le_sum
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`m `hmJ] [])]
                              "=>"
                              (Term.app
                               `mul_le_mul_of_nonneg_left
                               [(Term.app
                                 `le_of_ltₓ
                                 [(Term.app
                                   `hN
                                   [(«term_-_» `K "-" `m)
                                    `K
                                    (Term.app
                                     `le_tsub_of_add_le_left
                                     [(Term.app
                                       `le_transₓ
                                       [(Term.byTactic
                                         "by"
                                         (Tactic.tacticSeq
                                          (Tactic.tacticSeq1Indented
                                           [(group
                                             (Tactic.«tactic_<;>_»
                                              (Tactic.rwSeq
                                               "rw"
                                               []
                                               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                               [])
                                              "<;>"
                                              (Tactic.exact
                                               "exact"
                                               (Term.app
                                                `add_le_add
                                                [(Term.app
                                                  `le_of_ltₓ
                                                  [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                                 (Term.app
                                                  `le_transₓ
                                                  [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                                   (Term.app
                                                    `le_of_ltₓ
                                                    [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                             [])])))
                                        `hK])])
                                    (Term.app `le_of_ltₓ [`hKN])])])
                                (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                        []
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           [`hsumltP []]
                           [(Term.typeSpec
                             ":"
                             («term_<_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                               " in "
                               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                               ", "
                               (Term.app `abv [(Term.app `a [`n])]))
                              "<"
                              `P))]
                           ":="
                           (calc
                            "calc"
                            [(calcStep
                              («term_=_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                                " in "
                                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                ", "
                                (Term.app `abv [(Term.app `a [`n])]))
                               "="
                               (Algebra.Abs.«term|_|»
                                "|"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                                 " in "
                                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                 ", "
                                 (Term.app `abv [(Term.app `a [`n])]))
                                "|"))
                              ":="
                              (Term.app
                               `Eq.symm
                               [(Term.app
                                 `abs_of_nonneg
                                 [(Term.app
                                   `sum_nonneg
                                   [(Term.fun
                                     "fun"
                                     (Term.basicFun
                                      [(Term.simpleBinder [`x `h] [])]
                                      "=>"
                                      (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                             (calcStep
                              («term_<_» (Term.hole "_") "<" `P)
                              ":="
                              (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                         []
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] `h₁)
                                 ","
                                 (Tactic.rwRule [] `h₂)
                                 ","
                                 (Tactic.rwRule [] `h₃)
                                 ","
                                 (Tactic.rwRule [] `sum_mul)
                                 ","
                                 (Tactic.rwRule ["←"] `sub_sub)
                                 ","
                                 (Tactic.rwRule [] `sub_right_comm)
                                 ","
                                 (Tactic.rwRule [] `sub_self)
                                 ","
                                 (Tactic.rwRule [] `zero_sub)
                                 ","
                                 (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                "]")
                               [])
                              [])
                             (group
                              (Tactic.refine'
                               "refine'"
                               (Term.app
                                `lt_of_le_of_ltₓ
                                [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                              [])
                             (group
                              (Tactic.tacticSuffices_
                               "suffices"
                               (Term.sufficesDecl
                                []
                                («term_<_»
                                 (Init.Logic.«term_+_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                   " in "
                                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                   ", "
                                   (Finset.Data.Finset.Fold.«term_*_»
                                    (Term.app `abv [(Term.app `a [`i])])
                                    "*"
                                    (Term.app
                                     `abv
                                     [(«term_-_»
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [(«term_-_» `K "-" `i)])
                                        ", "
                                        (Term.app `b [`k]))
                                       "-"
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [`K])
                                        ", "
                                        (Term.app `b [`k])))])))
                                  "+"
                                  («term_-_»
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                    " in "
                                    (Term.app `range [`K])
                                    ", "
                                    (Finset.Data.Finset.Fold.«term_*_»
                                     (Term.app `abv [(Term.app `a [`i])])
                                     "*"
                                     (Term.app
                                      `abv
                                      [(«term_-_»
                                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                                         "∑"
                                         (Lean.explicitBinders
                                          (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                         " in "
                                         (Term.app `range [(«term_-_» `K "-" `i)])
                                         ", "
                                         (Term.app `b [`k]))
                                        "-"
                                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                                         "∑"
                                         (Lean.explicitBinders
                                          (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                         " in "
                                         (Term.app `range [`K])
                                         ", "
                                         (Term.app `b [`k])))])))
                                   "-"
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                    " in "
                                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                    ", "
                                    (Finset.Data.Finset.Fold.«term_*_»
                                     (Term.app `abv [(Term.app `a [`i])])
                                     "*"
                                     (Term.app
                                      `abv
                                      [(«term_-_»
                                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                                         "∑"
                                         (Lean.explicitBinders
                                          (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                         " in "
                                         (Term.app `range [(«term_-_» `K "-" `i)])
                                         ", "
                                         (Term.app `b [`k]))
                                        "-"
                                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                                         "∑"
                                         (Lean.explicitBinders
                                          (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                         " in "
                                         (Term.app `range [`K])
                                         ", "
                                         (Term.app `b [`k])))])))))
                                 "<"
                                 (Init.Logic.«term_+_»
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                                   "*"
                                   `P)
                                  "+"
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                   "*"
                                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                                (Term.byTactic
                                 "by"
                                 (Tactic.tacticSeq
                                  (Tactic.tacticSeq1Indented
                                   [(group
                                     (Tactic.rwSeq
                                      "rw"
                                      []
                                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                      [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                     [])
                                    (group
                                     (Tactic.simpa
                                      "simpa"
                                      []
                                      []
                                      ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                      []
                                      [])
                                     [])])))))
                              [])
                             (group
                              (Tactic.refine'
                               "refine'"
                               (Term.app
                                `add_lt_add
                                [(Term.app
                                  `lt_of_le_of_ltₓ
                                  [`hsumlesum
                                   (Term.byTactic
                                    "by"
                                    (Tactic.tacticSeq
                                     (Tactic.tacticSeq1Indented
                                      [(group
                                        (Tactic.«tactic_<;>_»
                                         (Tactic.rwSeq
                                          "rw"
                                          []
                                          (Tactic.rwRuleSeq
                                           "["
                                           [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                           "]")
                                          [])
                                         "<;>"
                                         (Tactic.exact
                                          "exact"
                                          (Term.app
                                           (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr)
                                           [`hsumltP])))
                                        [])])))])
                                 (Term.hole "_")]))
                              [])
                             (group
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                "]")
                               [])
                              [])
                             (group
                              (tacticCalc_
                               "calc"
                               [(calcStep
                                 («term_≤_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                   " in "
                                   (Term.app
                                    (Term.proj (Term.app `range [`K]) "." `filter)
                                    [(Term.fun
                                      "fun"
                                      (Term.basicFun
                                       [(Term.simpleBinder [`k] [])]
                                       "=>"
                                       («term_≤_»
                                        (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                        "≤"
                                        `k)))])
                                   ", "
                                   (Finset.Data.Finset.Fold.«term_*_»
                                    (Term.app `abv [(Term.app `a [`i])])
                                    "*"
                                    (Term.app
                                     `abv
                                     [(«term_-_»
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [(«term_-_» `K "-" `i)])
                                        ", "
                                        (Term.app `b [`k]))
                                       "-"
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [`K])
                                        ", "
                                        (Term.app `b [`k])))])))
                                  "≤"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                   " in "
                                   (Term.app
                                    (Term.proj (Term.app `range [`K]) "." `filter)
                                    [(Term.fun
                                      "fun"
                                      (Term.basicFun
                                       [(Term.simpleBinder [`k] [])]
                                       "=>"
                                       («term_≤_»
                                        (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                        "≤"
                                        `k)))])
                                   ", "
                                   (Finset.Data.Finset.Fold.«term_*_»
                                    (Term.app `abv [(Term.app `a [`i])])
                                    "*"
                                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                                 ":="
                                 (Term.app
                                  `sum_le_sum
                                  [(Term.fun
                                    "fun"
                                    (Term.basicFun
                                     [(Term.simpleBinder [`n `hn] [])]
                                     "=>"
                                     (Term.byTactic
                                      "by"
                                      (Tactic.tacticSeq
                                       (Tactic.tacticSeq1Indented
                                        [(group
                                          (Tactic.refine'
                                           "refine'"
                                           (Term.app
                                            `mul_le_mul_of_nonneg_left
                                            [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                          [])
                                         (group
                                          (Tactic.rwSeq
                                           "rw"
                                           []
                                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                           [])
                                          [])
                                         (group
                                          (Tactic.refine'
                                           "refine'"
                                           (Term.app
                                            `le_transₓ
                                            [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                             (Term.hole "_")]))
                                          [])
                                         (group
                                          (Tactic.rwSeq
                                           "rw"
                                           []
                                           (Tactic.rwRuleSeq
                                            "["
                                            [(Tactic.rwRule [] `two_mul)
                                             ","
                                             (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                            "]")
                                           [])
                                          [])
                                         (group
                                          (Tactic.exact
                                           "exact"
                                           (Term.app
                                            `add_le_add
                                            [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                             (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                          [])])))))]))
                                (calcStep
                                 («term_<_»
                                  (Term.hole "_")
                                  "<"
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                   "*"
                                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                                 ":="
                                 (Term.byTactic
                                  "by"
                                  (Tactic.tacticSeq
                                   (Tactic.tacticSeq1Indented
                                    [(group
                                      (Tactic.«tactic_<;>_»
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq
                                         "["
                                         [(Tactic.rwRule ["←"] `sum_mul)
                                          ","
                                          (Tactic.rwRule
                                           ["←"]
                                           (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                         "]")
                                        [])
                                       "<;>"
                                       (Tactic.refine'
                                        "refine'"
                                        (Term.app
                                         (Term.proj
                                          («term_$__»
                                           `mul_lt_mul_right
                                           "$"
                                           (Term.byTactic
                                            "by"
                                            (Tactic.tacticSeq
                                             (Tactic.tacticSeq1Indented
                                              [(group
                                                (Tactic.«tactic_<;>_»
                                                 (Tactic.rwSeq
                                                  "rw"
                                                  []
                                                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                                  [])
                                                 "<;>"
                                                 (Tactic.exact
                                                  "exact"
                                                  (Term.app
                                                   `add_pos
                                                   [(Term.app
                                                     `lt_of_le_of_ltₓ
                                                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                      (Term.app `hQ [(numLit "0")])])
                                                    (Term.app
                                                     `lt_of_le_of_ltₓ
                                                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                      (Term.app `hQ [(numLit "0")])])])))
                                                [])]))))
                                          "."
                                          (fieldIdx "2"))
                                         [(Term.app
                                           `lt_of_le_of_ltₓ
                                           [(Term.app `le_abs_self [(Term.hole "_")])
                                            (Term.app
                                             `hM
                                             [(Term.hole "_")
                                              (Term.hole "_")
                                              (Term.app
                                               `le_transₓ
                                               [(Term.app
                                                 `Nat.le_succ_of_leₓ
                                                 [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                                (Term.app `le_of_ltₓ [`hNMK])])
                                              (Term.app
                                               `Nat.le_succ_of_leₓ
                                               [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                      [])]))))])
                              [])]))))))))))))))))]
           "⟩"))))))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`Q "," `hQ] "⟩")
     []
     []
     ":="
     (Term.app `CauSeq.bounded [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩")])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`P "," `hP] "⟩")
      []
      []
      ":="
      (Term.app `CauSeq.bounded [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩")])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hP0 []]
       [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `P))]
       ":="
       (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.app `hP [(numLit "0")])])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hPε0 []]
        [(Term.typeSpec
          ":"
          («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))]
        ":="
        (Term.app
         `div_pos
         [`ε0
          (Term.app
           `mul_pos
           [(Term.show
             "show"
             («term_>_» (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" `α)]] ")") ">" (numLit "0"))
             (Term.fromTerm
              "from"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
            `hP0])])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
         []
         []
         ":="
         (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hQε0 []]
          [(Term.typeSpec
            ":"
            («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
          ":="
          (Term.app
           `div_pos
           [`ε0
            (Term.app
             `mul_pos
             [(Term.show
               "show"
               («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
              (Term.app
               `lt_of_le_of_ltₓ
               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
           []
           []
           ":="
           (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
         []
         (Term.anonymousCtor
          "⟨"
          [(Finset.Data.Finset.Fold.«term_*_»
            (numLit "2")
            "*"
            (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
           ","
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`K `hK] [])]
             "=>"
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₁ []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
                   "="
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `m)])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.simpa
                      "simpa"
                      []
                      []
                      []
                      []
                      ["using"
                       (Term.app
                        `sum_range_diag_flip
                        [`K
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`m `n] [])]
                           "=>"
                           (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                     [])])))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₂ []]
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`i] [])]
                      "=>"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                    "="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`i] [])]
                      "=>"
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `a [`i])
                       "*"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k])))))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₃ []]
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `a [`i])
                       "*"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))))
                     "="
                     (Init.Logic.«term_+_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `a [`i])
                        "*"
                        («term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [(«term_-_» `K "-" `i)])
                          ", "
                          (Term.app `b [`k]))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))))
                      "+"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `a [`i])
                        "*"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.«tactic_<;>_»
                        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                        "<;>"
                        (Tactic.simp
                         "simp"
                         []
                         []
                         ["["
                          [(Tactic.simpLemma
                            []
                            []
                            (Term.proj
                             (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                             "."
                             `symm))]
                          "]"]
                         []))
                       [])])))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`two_mul_two []]
                   [(Term.typeSpec
                     ":"
                     («term_=_»
                      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                      "="
                      (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hQ0 []]
                    [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`h] [])]
                      "=>"
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.simpa
                            "simpa"
                            []
                            []
                            ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                            []
                            ["using" `hQε0])
                           [])])))))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h2Q0 []]
                     [(Term.typeSpec
                       ":"
                       («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                     ":="
                     (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hε []]
                      [(Term.typeSpec
                        ":"
                        («term_=_»
                         (Init.Logic.«term_+_»
                          (Finset.Data.Finset.Fold.«term_*_»
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                           "*"
                           `P)
                          "+"
                          (Finset.Data.Finset.Fold.«term_*_»
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                           "*"
                           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                         "="
                         `ε))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                              ","
                              (Tactic.rwRule
                               []
                               (Term.app
                                `div_mul_cancel
                                [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                              ","
                              (Tactic.rwRule [] `two_mul_two)
                              ","
                              (Tactic.rwRule [] `mul_assocₓ)
                              ","
                              (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                              ","
                              (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                              ","
                              (Tactic.rwRule [] `add_halves)]
                             "]")
                            [])
                           [])])))))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hNMK []]
                       [(Term.typeSpec
                         ":"
                         («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                       ":="
                       (Term.app
                        `lt_of_lt_of_leₓ
                        [(Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.«tactic_<;>_»
                               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                               "<;>"
                               (Tactic.exact
                                "exact"
                                (Term.app
                                 `lt_add_of_pos_left
                                 [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                              [])])))
                         `hK])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hKN []]
                        [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                        ":="
                        (calc
                         "calc"
                         [(calcStep
                           («term_≤_» `N "≤" (Term.app `max [`N `M]))
                           ":="
                           (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                          (calcStep
                           («term_<_»
                            (Term.hole "_")
                            "<"
                            (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                           ":="
                           (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                          (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`hsumlesum []]
                         [(Term.typeSpec
                           ":"
                           («term_≤_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Term.app
                               `abv
                               [(«term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [(«term_-_» `K "-" `i)])
                                  ", "
                                  (Term.app `b [`k]))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Term.app `b [`k])))])))
                            "≤"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                         ":="
                         (Term.app
                          `sum_le_sum
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`m `hmJ] [])]
                             "=>"
                             (Term.app
                              `mul_le_mul_of_nonneg_left
                              [(Term.app
                                `le_of_ltₓ
                                [(Term.app
                                  `hN
                                  [(«term_-_» `K "-" `m)
                                   `K
                                   (Term.app
                                    `le_tsub_of_add_le_left
                                    [(Term.app
                                      `le_transₓ
                                      [(Term.byTactic
                                        "by"
                                        (Tactic.tacticSeq
                                         (Tactic.tacticSeq1Indented
                                          [(group
                                            (Tactic.«tactic_<;>_»
                                             (Tactic.rwSeq
                                              "rw"
                                              []
                                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                              [])
                                             "<;>"
                                             (Tactic.exact
                                              "exact"
                                              (Term.app
                                               `add_le_add
                                               [(Term.app
                                                 `le_of_ltₓ
                                                 [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                                (Term.app
                                                 `le_transₓ
                                                 [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                                  (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                            [])])))
                                       `hK])])
                                   (Term.app `le_of_ltₓ [`hKN])])])
                               (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`hsumltP []]
                          [(Term.typeSpec
                            ":"
                            («term_<_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Term.app `abv [(Term.app `a [`n])]))
                             "<"
                             `P))]
                          ":="
                          (calc
                           "calc"
                           [(calcStep
                             («term_=_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                               " in "
                               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                               ", "
                               (Term.app `abv [(Term.app `a [`n])]))
                              "="
                              (Algebra.Abs.«term|_|»
                               "|"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                                " in "
                                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                ", "
                                (Term.app `abv [(Term.app `a [`n])]))
                               "|"))
                             ":="
                             (Term.app
                              `Eq.symm
                              [(Term.app
                                `abs_of_nonneg
                                [(Term.app
                                  `sum_nonneg
                                  [(Term.fun
                                    "fun"
                                    (Term.basicFun
                                     [(Term.simpleBinder [`x `h] [])]
                                     "=>"
                                     (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                            (calcStep
                             («term_<_» (Term.hole "_") "<" `P)
                             ":="
                             (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                        []
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `h₁)
                                ","
                                (Tactic.rwRule [] `h₂)
                                ","
                                (Tactic.rwRule [] `h₃)
                                ","
                                (Tactic.rwRule [] `sum_mul)
                                ","
                                (Tactic.rwRule ["←"] `sub_sub)
                                ","
                                (Tactic.rwRule [] `sub_right_comm)
                                ","
                                (Tactic.rwRule [] `sub_self)
                                ","
                                (Tactic.rwRule [] `zero_sub)
                                ","
                                (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               `lt_of_le_of_ltₓ
                               [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                             [])
                            (group
                             (Tactic.tacticSuffices_
                              "suffices"
                              (Term.sufficesDecl
                               []
                               («term_<_»
                                (Init.Logic.«term_+_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                  " in "
                                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                  ", "
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   (Term.app `abv [(Term.app `a [`i])])
                                   "*"
                                   (Term.app
                                    `abv
                                    [(«term_-_»
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [(«term_-_» `K "-" `i)])
                                       ", "
                                       (Term.app `b [`k]))
                                      "-"
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [`K])
                                       ", "
                                       (Term.app `b [`k])))])))
                                 "+"
                                 («term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Finset.Data.Finset.Fold.«term_*_»
                                    (Term.app `abv [(Term.app `a [`i])])
                                    "*"
                                    (Term.app
                                     `abv
                                     [(«term_-_»
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [(«term_-_» `K "-" `i)])
                                        ", "
                                        (Term.app `b [`k]))
                                       "-"
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [`K])
                                        ", "
                                        (Term.app `b [`k])))])))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                   " in "
                                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                   ", "
                                   (Finset.Data.Finset.Fold.«term_*_»
                                    (Term.app `abv [(Term.app `a [`i])])
                                    "*"
                                    (Term.app
                                     `abv
                                     [(«term_-_»
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [(«term_-_» `K "-" `i)])
                                        ", "
                                        (Term.app `b [`k]))
                                       "-"
                                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                                        "∑"
                                        (Lean.explicitBinders
                                         (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                        " in "
                                        (Term.app `range [`K])
                                        ", "
                                        (Term.app `b [`k])))])))))
                                "<"
                                (Init.Logic.«term_+_»
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                                  "*"
                                  `P)
                                 "+"
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                  "*"
                                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                               (Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented
                                  [(group
                                    (Tactic.rwSeq
                                     "rw"
                                     []
                                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                     [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                    [])
                                   (group
                                    (Tactic.simpa
                                     "simpa"
                                     []
                                     []
                                     ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                     []
                                     [])
                                    [])])))))
                             [])
                            (group
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               `add_lt_add
                               [(Term.app
                                 `lt_of_le_of_ltₓ
                                 [`hsumlesum
                                  (Term.byTactic
                                   "by"
                                   (Tactic.tacticSeq
                                    (Tactic.tacticSeq1Indented
                                     [(group
                                       (Tactic.«tactic_<;>_»
                                        (Tactic.rwSeq
                                         "rw"
                                         []
                                         (Tactic.rwRuleSeq
                                          "["
                                          [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                          "]")
                                         [])
                                        "<;>"
                                        (Tactic.exact
                                         "exact"
                                         (Term.app
                                          (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr)
                                          [`hsumltP])))
                                       [])])))])
                                (Term.hole "_")]))
                             [])
                            (group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                               "]")
                              [])
                             [])
                            (group
                             (tacticCalc_
                              "calc"
                              [(calcStep
                                («term_≤_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                  " in "
                                  (Term.app
                                   (Term.proj (Term.app `range [`K]) "." `filter)
                                   [(Term.fun
                                     "fun"
                                     (Term.basicFun
                                      [(Term.simpleBinder [`k] [])]
                                      "=>"
                                      («term_≤_»
                                       (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                       "≤"
                                       `k)))])
                                  ", "
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   (Term.app `abv [(Term.app `a [`i])])
                                   "*"
                                   (Term.app
                                    `abv
                                    [(«term_-_»
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [(«term_-_» `K "-" `i)])
                                       ", "
                                       (Term.app `b [`k]))
                                      "-"
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [`K])
                                       ", "
                                       (Term.app `b [`k])))])))
                                 "≤"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                  " in "
                                  (Term.app
                                   (Term.proj (Term.app `range [`K]) "." `filter)
                                   [(Term.fun
                                     "fun"
                                     (Term.basicFun
                                      [(Term.simpleBinder [`k] [])]
                                      "=>"
                                      («term_≤_»
                                       (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                       "≤"
                                       `k)))])
                                  ", "
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   (Term.app `abv [(Term.app `a [`i])])
                                   "*"
                                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                                ":="
                                (Term.app
                                 `sum_le_sum
                                 [(Term.fun
                                   "fun"
                                   (Term.basicFun
                                    [(Term.simpleBinder [`n `hn] [])]
                                    "=>"
                                    (Term.byTactic
                                     "by"
                                     (Tactic.tacticSeq
                                      (Tactic.tacticSeq1Indented
                                       [(group
                                         (Tactic.refine'
                                          "refine'"
                                          (Term.app
                                           `mul_le_mul_of_nonneg_left
                                           [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                         [])
                                        (group
                                         (Tactic.rwSeq
                                          "rw"
                                          []
                                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                          [])
                                         [])
                                        (group
                                         (Tactic.refine'
                                          "refine'"
                                          (Term.app
                                           `le_transₓ
                                           [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                            (Term.hole "_")]))
                                         [])
                                        (group
                                         (Tactic.rwSeq
                                          "rw"
                                          []
                                          (Tactic.rwRuleSeq
                                           "["
                                           [(Tactic.rwRule [] `two_mul)
                                            ","
                                            (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                           "]")
                                          [])
                                         [])
                                        (group
                                         (Tactic.exact
                                          "exact"
                                          (Term.app
                                           `add_le_add
                                           [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                            (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                         [])])))))]))
                               (calcStep
                                («term_<_»
                                 (Term.hole "_")
                                 "<"
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                  "*"
                                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                                ":="
                                (Term.byTactic
                                 "by"
                                 (Tactic.tacticSeq
                                  (Tactic.tacticSeq1Indented
                                   [(group
                                     (Tactic.«tactic_<;>_»
                                      (Tactic.rwSeq
                                       "rw"
                                       []
                                       (Tactic.rwRuleSeq
                                        "["
                                        [(Tactic.rwRule ["←"] `sum_mul)
                                         ","
                                         (Tactic.rwRule
                                          ["←"]
                                          (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                        "]")
                                       [])
                                      "<;>"
                                      (Tactic.refine'
                                       "refine'"
                                       (Term.app
                                        (Term.proj
                                         («term_$__»
                                          `mul_lt_mul_right
                                          "$"
                                          (Term.byTactic
                                           "by"
                                           (Tactic.tacticSeq
                                            (Tactic.tacticSeq1Indented
                                             [(group
                                               (Tactic.«tactic_<;>_»
                                                (Tactic.rwSeq
                                                 "rw"
                                                 []
                                                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                                 [])
                                                "<;>"
                                                (Tactic.exact
                                                 "exact"
                                                 (Term.app
                                                  `add_pos
                                                  [(Term.app
                                                    `lt_of_le_of_ltₓ
                                                    [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                     (Term.app `hQ [(numLit "0")])])
                                                   (Term.app
                                                    `lt_of_le_of_ltₓ
                                                    [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                     (Term.app `hQ [(numLit "0")])])])))
                                               [])]))))
                                         "."
                                         (fieldIdx "2"))
                                        [(Term.app
                                          `lt_of_le_of_ltₓ
                                          [(Term.app `le_abs_self [(Term.hole "_")])
                                           (Term.app
                                            `hM
                                            [(Term.hole "_")
                                             (Term.hole "_")
                                             (Term.app
                                              `le_transₓ
                                              [(Term.app
                                                `Nat.le_succ_of_leₓ
                                                [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                               (Term.app `le_of_ltₓ [`hNMK])])
                                             (Term.app
                                              `Nat.le_succ_of_leₓ
                                              [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                     [])]))))])
                             [])]))))))))))))))))]
          "⟩"))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`P "," `hP] "⟩")
     []
     []
     ":="
     (Term.app `CauSeq.bounded [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩")])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hP0 []]
      [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `P))]
      ":="
      (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.app `hP [(numLit "0")])])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hPε0 []]
       [(Term.typeSpec
         ":"
         («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))]
       ":="
       (Term.app
        `div_pos
        [`ε0
         (Term.app
          `mul_pos
          [(Term.show
            "show"
            («term_>_» (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" `α)]] ")") ">" (numLit "0"))
            (Term.fromTerm
             "from"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
           `hP0])])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
        []
        []
        ":="
        (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hQε0 []]
         [(Term.typeSpec
           ":"
           («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
         ":="
         (Term.app
          `div_pos
          [`ε0
           (Term.app
            `mul_pos
            [(Term.show
              "show"
              («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
             (Term.app
              `lt_of_le_of_ltₓ
              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
          []
          []
          ":="
          (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
        []
        (Term.anonymousCtor
         "⟨"
         [(Finset.Data.Finset.Fold.«term_*_»
           (numLit "2")
           "*"
           (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
          ","
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`K `hK] [])]
            "=>"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₁ []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
                  "="
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `m)])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.simpa
                     "simpa"
                     []
                     []
                     []
                     []
                     ["using"
                      (Term.app
                       `sum_range_diag_flip
                       [`K
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`m `n] [])]
                          "=>"
                          (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                    [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₂ []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`i] [])]
                     "=>"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                   "="
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`i] [])]
                     "=>"
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `a [`i])
                      "*"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k])))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₃ []]
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `a [`i])
                      "*"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))))
                    "="
                    (Init.Logic.«term_+_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `a [`i])
                       "*"
                       («term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))))
                     "+"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `a [`i])
                       "*"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                       "<;>"
                       (Tactic.simp
                        "simp"
                        []
                        []
                        ["["
                         [(Tactic.simpLemma
                           []
                           []
                           (Term.proj
                            (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                            "."
                            `symm))]
                         "]"]
                        []))
                      [])])))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`two_mul_two []]
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                     "="
                     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hQ0 []]
                   [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                   ":="
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`h] [])]
                     "=>"
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.simpa
                           "simpa"
                           []
                           []
                           ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                           []
                           ["using" `hQε0])
                          [])])))))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h2Q0 []]
                    [(Term.typeSpec
                      ":"
                      («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                    ":="
                    (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hε []]
                     [(Term.typeSpec
                       ":"
                       («term_=_»
                        (Init.Logic.«term_+_»
                         (Finset.Data.Finset.Fold.«term_*_»
                          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                          "*"
                          `P)
                         "+"
                         (Finset.Data.Finset.Fold.«term_*_»
                          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                          "*"
                          (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                        "="
                        `ε))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                             ","
                             (Tactic.rwRule
                              []
                              (Term.app
                               `div_mul_cancel
                               [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                             ","
                             (Tactic.rwRule [] `two_mul_two)
                             ","
                             (Tactic.rwRule [] `mul_assocₓ)
                             ","
                             (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                             ","
                             (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                             ","
                             (Tactic.rwRule [] `add_halves)]
                            "]")
                           [])
                          [])])))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hNMK []]
                      [(Term.typeSpec
                        ":"
                        («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                      ":="
                      (Term.app
                       `lt_of_lt_of_leₓ
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.«tactic_<;>_»
                              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                              "<;>"
                              (Tactic.exact
                               "exact"
                               (Term.app
                                `lt_add_of_pos_left
                                [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                             [])])))
                        `hK])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hKN []]
                       [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                       ":="
                       (calc
                        "calc"
                        [(calcStep
                          («term_≤_» `N "≤" (Term.app `max [`N `M]))
                          ":="
                          (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                         (calcStep
                          («term_<_»
                           (Term.hole "_")
                           "<"
                           (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                          ":="
                          (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                         (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hsumlesum []]
                        [(Term.typeSpec
                          ":"
                          («term_≤_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Term.app
                              `abv
                              [(«term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [(«term_-_» `K "-" `i)])
                                 ", "
                                 (Term.app `b [`k]))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Term.app `b [`k])))])))
                           "≤"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                        ":="
                        (Term.app
                         `sum_le_sum
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`m `hmJ] [])]
                            "=>"
                            (Term.app
                             `mul_le_mul_of_nonneg_left
                             [(Term.app
                               `le_of_ltₓ
                               [(Term.app
                                 `hN
                                 [(«term_-_» `K "-" `m)
                                  `K
                                  (Term.app
                                   `le_tsub_of_add_le_left
                                   [(Term.app
                                     `le_transₓ
                                     [(Term.byTactic
                                       "by"
                                       (Tactic.tacticSeq
                                        (Tactic.tacticSeq1Indented
                                         [(group
                                           (Tactic.«tactic_<;>_»
                                            (Tactic.rwSeq
                                             "rw"
                                             []
                                             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                             [])
                                            "<;>"
                                            (Tactic.exact
                                             "exact"
                                             (Term.app
                                              `add_le_add
                                              [(Term.app
                                                `le_of_ltₓ
                                                [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                               (Term.app
                                                `le_transₓ
                                                [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                                 (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                           [])])))
                                      `hK])])
                                  (Term.app `le_of_ltₓ [`hKN])])])
                              (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`hsumltP []]
                         [(Term.typeSpec
                           ":"
                           («term_<_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Term.app `abv [(Term.app `a [`n])]))
                            "<"
                            `P))]
                         ":="
                         (calc
                          "calc"
                          [(calcStep
                            («term_=_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Term.app `abv [(Term.app `a [`n])]))
                             "="
                             (Algebra.Abs.«term|_|»
                              "|"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                               " in "
                               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                               ", "
                               (Term.app `abv [(Term.app `a [`n])]))
                              "|"))
                            ":="
                            (Term.app
                             `Eq.symm
                             [(Term.app
                               `abs_of_nonneg
                               [(Term.app
                                 `sum_nonneg
                                 [(Term.fun
                                   "fun"
                                   (Term.basicFun
                                    [(Term.simpleBinder [`x `h] [])]
                                    "=>"
                                    (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                           (calcStep
                            («term_<_» (Term.hole "_") "<" `P)
                            ":="
                            (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                       []
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `h₁)
                               ","
                               (Tactic.rwRule [] `h₂)
                               ","
                               (Tactic.rwRule [] `h₃)
                               ","
                               (Tactic.rwRule [] `sum_mul)
                               ","
                               (Tactic.rwRule ["←"] `sub_sub)
                               ","
                               (Tactic.rwRule [] `sub_right_comm)
                               ","
                               (Tactic.rwRule [] `sub_self)
                               ","
                               (Tactic.rwRule [] `zero_sub)
                               ","
                               (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                              "]")
                             [])
                            [])
                           (group
                            (Tactic.refine'
                             "refine'"
                             (Term.app
                              `lt_of_le_of_ltₓ
                              [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                            [])
                           (group
                            (Tactic.tacticSuffices_
                             "suffices"
                             (Term.sufficesDecl
                              []
                              («term_<_»
                               (Init.Logic.«term_+_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                 " in "
                                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                 ", "
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  (Term.app `abv [(Term.app `a [`i])])
                                  "*"
                                  (Term.app
                                   `abv
                                   [(«term_-_»
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [(«term_-_» `K "-" `i)])
                                      ", "
                                      (Term.app `b [`k]))
                                     "-"
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [`K])
                                      ", "
                                      (Term.app `b [`k])))])))
                                "+"
                                («term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   (Term.app `abv [(Term.app `a [`i])])
                                   "*"
                                   (Term.app
                                    `abv
                                    [(«term_-_»
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [(«term_-_» `K "-" `i)])
                                       ", "
                                       (Term.app `b [`k]))
                                      "-"
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [`K])
                                       ", "
                                       (Term.app `b [`k])))])))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                  " in "
                                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                  ", "
                                  (Finset.Data.Finset.Fold.«term_*_»
                                   (Term.app `abv [(Term.app `a [`i])])
                                   "*"
                                   (Term.app
                                    `abv
                                    [(«term_-_»
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [(«term_-_» `K "-" `i)])
                                       ", "
                                       (Term.app `b [`k]))
                                      "-"
                                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                                       "∑"
                                       (Lean.explicitBinders
                                        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                       " in "
                                       (Term.app `range [`K])
                                       ", "
                                       (Term.app `b [`k])))])))))
                               "<"
                               (Init.Logic.«term_+_»
                                (Finset.Data.Finset.Fold.«term_*_»
                                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                                 "*"
                                 `P)
                                "+"
                                (Finset.Data.Finset.Fold.«term_*_»
                                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                 "*"
                                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.rwSeq
                                    "rw"
                                    []
                                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                    [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                   [])
                                  (group
                                   (Tactic.simpa
                                    "simpa"
                                    []
                                    []
                                    ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                    []
                                    [])
                                   [])])))))
                            [])
                           (group
                            (Tactic.refine'
                             "refine'"
                             (Term.app
                              `add_lt_add
                              [(Term.app
                                `lt_of_le_of_ltₓ
                                [`hsumlesum
                                 (Term.byTactic
                                  "by"
                                  (Tactic.tacticSeq
                                   (Tactic.tacticSeq1Indented
                                    [(group
                                      (Tactic.«tactic_<;>_»
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq
                                         "["
                                         [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                         "]")
                                        [])
                                       "<;>"
                                       (Tactic.exact
                                        "exact"
                                        (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                      [])])))])
                               (Term.hole "_")]))
                            [])
                           (group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                              "]")
                             [])
                            [])
                           (group
                            (tacticCalc_
                             "calc"
                             [(calcStep
                               («term_≤_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                 " in "
                                 (Term.app
                                  (Term.proj (Term.app `range [`K]) "." `filter)
                                  [(Term.fun
                                    "fun"
                                    (Term.basicFun
                                     [(Term.simpleBinder [`k] [])]
                                     "=>"
                                     («term_≤_»
                                      (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                      "≤"
                                      `k)))])
                                 ", "
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  (Term.app `abv [(Term.app `a [`i])])
                                  "*"
                                  (Term.app
                                   `abv
                                   [(«term_-_»
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [(«term_-_» `K "-" `i)])
                                      ", "
                                      (Term.app `b [`k]))
                                     "-"
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [`K])
                                      ", "
                                      (Term.app `b [`k])))])))
                                "≤"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                 " in "
                                 (Term.app
                                  (Term.proj (Term.app `range [`K]) "." `filter)
                                  [(Term.fun
                                    "fun"
                                    (Term.basicFun
                                     [(Term.simpleBinder [`k] [])]
                                     "=>"
                                     («term_≤_»
                                      (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                      "≤"
                                      `k)))])
                                 ", "
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  (Term.app `abv [(Term.app `a [`i])])
                                  "*"
                                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                               ":="
                               (Term.app
                                `sum_le_sum
                                [(Term.fun
                                  "fun"
                                  (Term.basicFun
                                   [(Term.simpleBinder [`n `hn] [])]
                                   "=>"
                                   (Term.byTactic
                                    "by"
                                    (Tactic.tacticSeq
                                     (Tactic.tacticSeq1Indented
                                      [(group
                                        (Tactic.refine'
                                         "refine'"
                                         (Term.app
                                          `mul_le_mul_of_nonneg_left
                                          [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                        [])
                                       (group
                                        (Tactic.rwSeq
                                         "rw"
                                         []
                                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                         [])
                                        [])
                                       (group
                                        (Tactic.refine'
                                         "refine'"
                                         (Term.app
                                          `le_transₓ
                                          [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                           (Term.hole "_")]))
                                        [])
                                       (group
                                        (Tactic.rwSeq
                                         "rw"
                                         []
                                         (Tactic.rwRuleSeq
                                          "["
                                          [(Tactic.rwRule [] `two_mul)
                                           ","
                                           (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                          "]")
                                         [])
                                        [])
                                       (group
                                        (Tactic.exact
                                         "exact"
                                         (Term.app
                                          `add_le_add
                                          [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                           (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                        [])])))))]))
                              (calcStep
                               («term_<_»
                                (Term.hole "_")
                                "<"
                                (Finset.Data.Finset.Fold.«term_*_»
                                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                 "*"
                                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                               ":="
                               (Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented
                                  [(group
                                    (Tactic.«tactic_<;>_»
                                     (Tactic.rwSeq
                                      "rw"
                                      []
                                      (Tactic.rwRuleSeq
                                       "["
                                       [(Tactic.rwRule ["←"] `sum_mul)
                                        ","
                                        (Tactic.rwRule
                                         ["←"]
                                         (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                       "]")
                                      [])
                                     "<;>"
                                     (Tactic.refine'
                                      "refine'"
                                      (Term.app
                                       (Term.proj
                                        («term_$__»
                                         `mul_lt_mul_right
                                         "$"
                                         (Term.byTactic
                                          "by"
                                          (Tactic.tacticSeq
                                           (Tactic.tacticSeq1Indented
                                            [(group
                                              (Tactic.«tactic_<;>_»
                                               (Tactic.rwSeq
                                                "rw"
                                                []
                                                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                                [])
                                               "<;>"
                                               (Tactic.exact
                                                "exact"
                                                (Term.app
                                                 `add_pos
                                                 [(Term.app
                                                   `lt_of_le_of_ltₓ
                                                   [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                    (Term.app `hQ [(numLit "0")])])
                                                  (Term.app
                                                   `lt_of_le_of_ltₓ
                                                   [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                    (Term.app `hQ [(numLit "0")])])])))
                                              [])]))))
                                        "."
                                        (fieldIdx "2"))
                                       [(Term.app
                                         `lt_of_le_of_ltₓ
                                         [(Term.app `le_abs_self [(Term.hole "_")])
                                          (Term.app
                                           `hM
                                           [(Term.hole "_")
                                            (Term.hole "_")
                                            (Term.app
                                             `le_transₓ
                                             [(Term.app
                                               `Nat.le_succ_of_leₓ
                                               [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                              (Term.app `le_of_ltₓ [`hNMK])])
                                            (Term.app
                                             `Nat.le_succ_of_leₓ
                                             [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                    [])]))))])
                            [])]))))))))))))))))]
         "⟩")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hP0 []]
     [(Term.typeSpec ":" («term_<_» (numLit "0") "<" `P))]
     ":="
     (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.app `hP [(numLit "0")])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hPε0 []]
      [(Term.typeSpec
        ":"
        («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))]
      ":="
      (Term.app
       `div_pos
       [`ε0
        (Term.app
         `mul_pos
         [(Term.show
           "show"
           («term_>_» (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" `α)]] ")") ">" (numLit "0"))
           (Term.fromTerm
            "from"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
          `hP0])])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
       []
       []
       ":="
       (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hQε0 []]
        [(Term.typeSpec
          ":"
          («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
        ":="
        (Term.app
         `div_pos
         [`ε0
          (Term.app
           `mul_pos
           [(Term.show
             "show"
             («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
            (Term.app
             `lt_of_le_of_ltₓ
             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
         []
         []
         ":="
         (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
       []
       (Term.anonymousCtor
        "⟨"
        [(Finset.Data.Finset.Fold.«term_*_»
          (numLit "2")
          "*"
          (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
         ","
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`K `hK] [])]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₁ []]
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
                 "="
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `m)])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.simpa
                    "simpa"
                    []
                    []
                    []
                    []
                    ["using"
                     (Term.app
                      `sum_range_diag_flip
                      [`K
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`m `n] [])]
                         "=>"
                         (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                   [])])))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₂ []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`i] [])]
                    "=>"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                  "="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`i] [])]
                    "=>"
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `a [`i])
                     "*"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k])))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₃ []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `a [`i])
                     "*"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))))
                   "="
                   (Init.Logic.«term_+_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `a [`i])
                      "*"
                      («term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))))
                    "+"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `a [`i])
                      "*"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                      "<;>"
                      (Tactic.simp
                       "simp"
                       []
                       []
                       ["["
                        [(Tactic.simpLemma
                          []
                          []
                          (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                        "]"]
                       []))
                     [])])))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`two_mul_two []]
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                    "="
                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hQ0 []]
                  [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                  ":="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`h] [])]
                    "=>"
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.simpa
                          "simpa"
                          []
                          []
                          ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                          []
                          ["using" `hQε0])
                         [])])))))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h2Q0 []]
                   [(Term.typeSpec
                     ":"
                     («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                   ":="
                   (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hε []]
                    [(Term.typeSpec
                      ":"
                      («term_=_»
                       (Init.Logic.«term_+_»
                        (Finset.Data.Finset.Fold.«term_*_»
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                         "*"
                         `P)
                        "+"
                        (Finset.Data.Finset.Fold.«term_*_»
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                         "*"
                         (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                       "="
                       `ε))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                            ","
                            (Tactic.rwRule
                             []
                             (Term.app
                              `div_mul_cancel
                              [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                            ","
                            (Tactic.rwRule [] `two_mul_two)
                            ","
                            (Tactic.rwRule [] `mul_assocₓ)
                            ","
                            (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                            ","
                            (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                            ","
                            (Tactic.rwRule [] `add_halves)]
                           "]")
                          [])
                         [])])))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hNMK []]
                     [(Term.typeSpec
                       ":"
                       («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                     ":="
                     (Term.app
                      `lt_of_lt_of_leₓ
                      [(Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.«tactic_<;>_»
                             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                             "<;>"
                             (Tactic.exact
                              "exact"
                              (Term.app
                               `lt_add_of_pos_left
                               [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                            [])])))
                       `hK])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hKN []]
                      [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                      ":="
                      (calc
                       "calc"
                       [(calcStep
                         («term_≤_» `N "≤" (Term.app `max [`N `M]))
                         ":="
                         (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                        (calcStep
                         («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                         ":="
                         (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                        (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hsumlesum []]
                       [(Term.typeSpec
                         ":"
                         («term_≤_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Finset.Data.Finset.Fold.«term_*_»
                            (Term.app `abv [(Term.app `a [`i])])
                            "*"
                            (Term.app
                             `abv
                             [(«term_-_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [(«term_-_» `K "-" `i)])
                                ", "
                                (Term.app `b [`k]))
                               "-"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [`K])
                                ", "
                                (Term.app `b [`k])))])))
                          "≤"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Finset.Data.Finset.Fold.«term_*_»
                            (Term.app `abv [(Term.app `a [`i])])
                            "*"
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                       ":="
                       (Term.app
                        `sum_le_sum
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`m `hmJ] [])]
                           "=>"
                           (Term.app
                            `mul_le_mul_of_nonneg_left
                            [(Term.app
                              `le_of_ltₓ
                              [(Term.app
                                `hN
                                [(«term_-_» `K "-" `m)
                                 `K
                                 (Term.app
                                  `le_tsub_of_add_le_left
                                  [(Term.app
                                    `le_transₓ
                                    [(Term.byTactic
                                      "by"
                                      (Tactic.tacticSeq
                                       (Tactic.tacticSeq1Indented
                                        [(group
                                          (Tactic.«tactic_<;>_»
                                           (Tactic.rwSeq
                                            "rw"
                                            []
                                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                            [])
                                           "<;>"
                                           (Tactic.exact
                                            "exact"
                                            (Term.app
                                             `add_le_add
                                             [(Term.app
                                               `le_of_ltₓ
                                               [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                              (Term.app
                                               `le_transₓ
                                               [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                                (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                          [])])))
                                     `hK])])
                                 (Term.app `le_of_ltₓ [`hKN])])])
                             (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hsumltP []]
                        [(Term.typeSpec
                          ":"
                          («term_<_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Term.app `abv [(Term.app `a [`n])]))
                           "<"
                           `P))]
                        ":="
                        (calc
                         "calc"
                         [(calcStep
                           («term_=_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Term.app `abv [(Term.app `a [`n])]))
                            "="
                            (Algebra.Abs.«term|_|»
                             "|"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Term.app `abv [(Term.app `a [`n])]))
                             "|"))
                           ":="
                           (Term.app
                            `Eq.symm
                            [(Term.app
                              `abs_of_nonneg
                              [(Term.app
                                `sum_nonneg
                                [(Term.fun
                                  "fun"
                                  (Term.basicFun
                                   [(Term.simpleBinder [`x `h] [])]
                                   "=>"
                                   (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                          (calcStep
                           («term_<_» (Term.hole "_") "<" `P)
                           ":="
                           (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                      []
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `h₁)
                              ","
                              (Tactic.rwRule [] `h₂)
                              ","
                              (Tactic.rwRule [] `h₃)
                              ","
                              (Tactic.rwRule [] `sum_mul)
                              ","
                              (Tactic.rwRule ["←"] `sub_sub)
                              ","
                              (Tactic.rwRule [] `sub_right_comm)
                              ","
                              (Tactic.rwRule [] `sub_self)
                              ","
                              (Tactic.rwRule [] `zero_sub)
                              ","
                              (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                             "]")
                            [])
                           [])
                          (group
                           (Tactic.refine'
                            "refine'"
                            (Term.app
                             `lt_of_le_of_ltₓ
                             [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                           [])
                          (group
                           (Tactic.tacticSuffices_
                            "suffices"
                            (Term.sufficesDecl
                             []
                             («term_<_»
                              (Init.Logic.«term_+_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                " in "
                                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                ", "
                                (Finset.Data.Finset.Fold.«term_*_»
                                 (Term.app `abv [(Term.app `a [`i])])
                                 "*"
                                 (Term.app
                                  `abv
                                  [(«term_-_»
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [(«term_-_» `K "-" `i)])
                                     ", "
                                     (Term.app `b [`k]))
                                    "-"
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [`K])
                                     ", "
                                     (Term.app `b [`k])))])))
                               "+"
                               («term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  (Term.app `abv [(Term.app `a [`i])])
                                  "*"
                                  (Term.app
                                   `abv
                                   [(«term_-_»
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [(«term_-_» `K "-" `i)])
                                      ", "
                                      (Term.app `b [`k]))
                                     "-"
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [`K])
                                      ", "
                                      (Term.app `b [`k])))])))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                 " in "
                                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                 ", "
                                 (Finset.Data.Finset.Fold.«term_*_»
                                  (Term.app `abv [(Term.app `a [`i])])
                                  "*"
                                  (Term.app
                                   `abv
                                   [(«term_-_»
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [(«term_-_» `K "-" `i)])
                                      ", "
                                      (Term.app `b [`k]))
                                     "-"
                                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                                      "∑"
                                      (Lean.explicitBinders
                                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                      " in "
                                      (Term.app `range [`K])
                                      ", "
                                      (Term.app `b [`k])))])))))
                              "<"
                              (Init.Logic.«term_+_»
                               (Finset.Data.Finset.Fold.«term_*_»
                                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                                "*"
                                `P)
                               "+"
                               (Finset.Data.Finset.Fold.«term_*_»
                                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                "*"
                                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                  [])
                                 (group
                                  (Tactic.simpa
                                   "simpa"
                                   []
                                   []
                                   ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                   []
                                   [])
                                  [])])))))
                           [])
                          (group
                           (Tactic.refine'
                            "refine'"
                            (Term.app
                             `add_lt_add
                             [(Term.app
                               `lt_of_le_of_ltₓ
                               [`hsumlesum
                                (Term.byTactic
                                 "by"
                                 (Tactic.tacticSeq
                                  (Tactic.tacticSeq1Indented
                                   [(group
                                     (Tactic.«tactic_<;>_»
                                      (Tactic.rwSeq
                                       "rw"
                                       []
                                       (Tactic.rwRuleSeq
                                        "["
                                        [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                        "]")
                                       [])
                                      "<;>"
                                      (Tactic.exact
                                       "exact"
                                       (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                     [])])))])
                              (Term.hole "_")]))
                           [])
                          (group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                             "]")
                            [])
                           [])
                          (group
                           (tacticCalc_
                            "calc"
                            [(calcStep
                              («term_≤_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                " in "
                                (Term.app
                                 (Term.proj (Term.app `range [`K]) "." `filter)
                                 [(Term.fun
                                   "fun"
                                   (Term.basicFun
                                    [(Term.simpleBinder [`k] [])]
                                    "=>"
                                    («term_≤_»
                                     (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                     "≤"
                                     `k)))])
                                ", "
                                (Finset.Data.Finset.Fold.«term_*_»
                                 (Term.app `abv [(Term.app `a [`i])])
                                 "*"
                                 (Term.app
                                  `abv
                                  [(«term_-_»
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [(«term_-_» `K "-" `i)])
                                     ", "
                                     (Term.app `b [`k]))
                                    "-"
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [`K])
                                     ", "
                                     (Term.app `b [`k])))])))
                               "≤"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                " in "
                                (Term.app
                                 (Term.proj (Term.app `range [`K]) "." `filter)
                                 [(Term.fun
                                   "fun"
                                   (Term.basicFun
                                    [(Term.simpleBinder [`k] [])]
                                    "=>"
                                    («term_≤_»
                                     (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                     "≤"
                                     `k)))])
                                ", "
                                (Finset.Data.Finset.Fold.«term_*_»
                                 (Term.app `abv [(Term.app `a [`i])])
                                 "*"
                                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                              ":="
                              (Term.app
                               `sum_le_sum
                               [(Term.fun
                                 "fun"
                                 (Term.basicFun
                                  [(Term.simpleBinder [`n `hn] [])]
                                  "=>"
                                  (Term.byTactic
                                   "by"
                                   (Tactic.tacticSeq
                                    (Tactic.tacticSeq1Indented
                                     [(group
                                       (Tactic.refine'
                                        "refine'"
                                        (Term.app
                                         `mul_le_mul_of_nonneg_left
                                         [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                       [])
                                      (group
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                        [])
                                       [])
                                      (group
                                       (Tactic.refine'
                                        "refine'"
                                        (Term.app
                                         `le_transₓ
                                         [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                          (Term.hole "_")]))
                                       [])
                                      (group
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq
                                         "["
                                         [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                         "]")
                                        [])
                                       [])
                                      (group
                                       (Tactic.exact
                                        "exact"
                                        (Term.app
                                         `add_le_add
                                         [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                          (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                       [])])))))]))
                             (calcStep
                              («term_<_»
                               (Term.hole "_")
                               "<"
                               (Finset.Data.Finset.Fold.«term_*_»
                                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                                "*"
                                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                              ":="
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.«tactic_<;>_»
                                    (Tactic.rwSeq
                                     "rw"
                                     []
                                     (Tactic.rwRuleSeq
                                      "["
                                      [(Tactic.rwRule ["←"] `sum_mul)
                                       ","
                                       (Tactic.rwRule
                                        ["←"]
                                        (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                      "]")
                                     [])
                                    "<;>"
                                    (Tactic.refine'
                                     "refine'"
                                     (Term.app
                                      (Term.proj
                                       («term_$__»
                                        `mul_lt_mul_right
                                        "$"
                                        (Term.byTactic
                                         "by"
                                         (Tactic.tacticSeq
                                          (Tactic.tacticSeq1Indented
                                           [(group
                                             (Tactic.«tactic_<;>_»
                                              (Tactic.rwSeq
                                               "rw"
                                               []
                                               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                               [])
                                              "<;>"
                                              (Tactic.exact
                                               "exact"
                                               (Term.app
                                                `add_pos
                                                [(Term.app
                                                  `lt_of_le_of_ltₓ
                                                  [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                   (Term.app `hQ [(numLit "0")])])
                                                 (Term.app
                                                  `lt_of_le_of_ltₓ
                                                  [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                   (Term.app `hQ [(numLit "0")])])])))
                                             [])]))))
                                       "."
                                       (fieldIdx "2"))
                                      [(Term.app
                                        `lt_of_le_of_ltₓ
                                        [(Term.app `le_abs_self [(Term.hole "_")])
                                         (Term.app
                                          `hM
                                          [(Term.hole "_")
                                           (Term.hole "_")
                                           (Term.app
                                            `le_transₓ
                                            [(Term.app
                                              `Nat.le_succ_of_leₓ
                                              [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                             (Term.app `le_of_ltₓ [`hNMK])])
                                           (Term.app
                                            `Nat.le_succ_of_leₓ
                                            [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                   [])]))))])
                           [])]))))))))))))))))]
        "⟩"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hPε0 []]
     [(Term.typeSpec
       ":"
       («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))]
     ":="
     (Term.app
      `div_pos
      [`ε0
       (Term.app
        `mul_pos
        [(Term.show
          "show"
          («term_>_» (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" `α)]] ")") ">" (numLit "0"))
          (Term.fromTerm
           "from"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
         `hP0])])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
      []
      []
      ":="
      (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hQε0 []]
       [(Term.typeSpec
         ":"
         («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
       ":="
       (Term.app
        `div_pos
        [`ε0
         (Term.app
          `mul_pos
          [(Term.show
            "show"
            («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
           (Term.app
            `lt_of_le_of_ltₓ
            [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
        []
        []
        ":="
        (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
      []
      (Term.anonymousCtor
       "⟨"
       [(Finset.Data.Finset.Fold.«term_*_»
         (numLit "2")
         "*"
         (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`K `hK] [])]
          "=>"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h₁ []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
                "="
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `m)])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.simpa
                   "simpa"
                   []
                   []
                   []
                   []
                   ["using"
                    (Term.app
                     `sum_range_diag_flip
                     [`K
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`m `n] [])]
                        "=>"
                        (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                  [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₂ []]
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`i] [])]
                   "=>"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                 "="
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`i] [])]
                   "=>"
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `a [`i])
                    "*"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k])))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₃ []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `a [`i])
                    "*"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))))
                  "="
                  (Init.Logic.«term_+_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `a [`i])
                     "*"
                     («term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))))
                   "+"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `a [`i])
                     "*"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                     "<;>"
                     (Tactic.simp
                      "simp"
                      []
                      []
                      ["["
                       [(Tactic.simpLemma
                         []
                         []
                         (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                       "]"]
                      []))
                    [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`two_mul_two []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                   "="
                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hQ0 []]
                 [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                 ":="
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`h] [])]
                   "=>"
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.simpa
                         "simpa"
                         []
                         []
                         ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                         []
                         ["using" `hQε0])
                        [])])))))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h2Q0 []]
                  [(Term.typeSpec
                    ":"
                    («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                  ":="
                  (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hε []]
                   [(Term.typeSpec
                     ":"
                     («term_=_»
                      (Init.Logic.«term_+_»
                       (Finset.Data.Finset.Fold.«term_*_»
                        («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                        "*"
                        `P)
                       "+"
                       (Finset.Data.Finset.Fold.«term_*_»
                        («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                        "*"
                        (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                      "="
                      `ε))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                           ","
                           (Tactic.rwRule
                            []
                            (Term.app
                             `div_mul_cancel
                             [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                           ","
                           (Tactic.rwRule [] `two_mul_two)
                           ","
                           (Tactic.rwRule [] `mul_assocₓ)
                           ","
                           (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                           ","
                           (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                           ","
                           (Tactic.rwRule [] `add_halves)]
                          "]")
                         [])
                        [])])))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hNMK []]
                    [(Term.typeSpec
                      ":"
                      («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                    ":="
                    (Term.app
                     `lt_of_lt_of_leₓ
                     [(Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.«tactic_<;>_»
                            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                            "<;>"
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `lt_add_of_pos_left
                              [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                           [])])))
                      `hK])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hKN []]
                     [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        («term_≤_» `N "≤" (Term.app `max [`N `M]))
                        ":="
                        (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                       (calcStep
                        («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                        ":="
                        (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                       (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hsumlesum []]
                      [(Term.typeSpec
                        ":"
                        («term_≤_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Finset.Data.Finset.Fold.«term_*_»
                           (Term.app `abv [(Term.app `a [`i])])
                           "*"
                           (Term.app
                            `abv
                            [(«term_-_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [(«term_-_» `K "-" `i)])
                               ", "
                               (Term.app `b [`k]))
                              "-"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [`K])
                               ", "
                               (Term.app `b [`k])))])))
                         "≤"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Finset.Data.Finset.Fold.«term_*_»
                           (Term.app `abv [(Term.app `a [`i])])
                           "*"
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                      ":="
                      (Term.app
                       `sum_le_sum
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`m `hmJ] [])]
                          "=>"
                          (Term.app
                           `mul_le_mul_of_nonneg_left
                           [(Term.app
                             `le_of_ltₓ
                             [(Term.app
                               `hN
                               [(«term_-_» `K "-" `m)
                                `K
                                (Term.app
                                 `le_tsub_of_add_le_left
                                 [(Term.app
                                   `le_transₓ
                                   [(Term.byTactic
                                     "by"
                                     (Tactic.tacticSeq
                                      (Tactic.tacticSeq1Indented
                                       [(group
                                         (Tactic.«tactic_<;>_»
                                          (Tactic.rwSeq
                                           "rw"
                                           []
                                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                           [])
                                          "<;>"
                                          (Tactic.exact
                                           "exact"
                                           (Term.app
                                            `add_le_add
                                            [(Term.app
                                              `le_of_ltₓ
                                              [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                             (Term.app
                                              `le_transₓ
                                              [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                               (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                         [])])))
                                    `hK])])
                                (Term.app `le_of_ltₓ [`hKN])])])
                            (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hsumltP []]
                       [(Term.typeSpec
                         ":"
                         («term_<_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Term.app `abv [(Term.app `a [`n])]))
                          "<"
                          `P))]
                       ":="
                       (calc
                        "calc"
                        [(calcStep
                          («term_=_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Term.app `abv [(Term.app `a [`n])]))
                           "="
                           (Algebra.Abs.«term|_|»
                            "|"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Term.app `abv [(Term.app `a [`n])]))
                            "|"))
                          ":="
                          (Term.app
                           `Eq.symm
                           [(Term.app
                             `abs_of_nonneg
                             [(Term.app
                               `sum_nonneg
                               [(Term.fun
                                 "fun"
                                 (Term.basicFun
                                  [(Term.simpleBinder [`x `h] [])]
                                  "=>"
                                  (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                         (calcStep
                          («term_<_» (Term.hole "_") "<" `P)
                          ":="
                          (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                     []
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [] `h₁)
                             ","
                             (Tactic.rwRule [] `h₂)
                             ","
                             (Tactic.rwRule [] `h₃)
                             ","
                             (Tactic.rwRule [] `sum_mul)
                             ","
                             (Tactic.rwRule ["←"] `sub_sub)
                             ","
                             (Tactic.rwRule [] `sub_right_comm)
                             ","
                             (Tactic.rwRule [] `sub_self)
                             ","
                             (Tactic.rwRule [] `zero_sub)
                             ","
                             (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                            "]")
                           [])
                          [])
                         (group
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            `lt_of_le_of_ltₓ
                            [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                          [])
                         (group
                          (Tactic.tacticSuffices_
                           "suffices"
                           (Term.sufficesDecl
                            []
                            («term_<_»
                             (Init.Logic.«term_+_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                               " in "
                               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                               ", "
                               (Finset.Data.Finset.Fold.«term_*_»
                                (Term.app `abv [(Term.app `a [`i])])
                                "*"
                                (Term.app
                                 `abv
                                 [(«term_-_»
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [(«term_-_» `K "-" `i)])
                                    ", "
                                    (Term.app `b [`k]))
                                   "-"
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [`K])
                                    ", "
                                    (Term.app `b [`k])))])))
                              "+"
                              («term_-_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                " in "
                                (Term.app `range [`K])
                                ", "
                                (Finset.Data.Finset.Fold.«term_*_»
                                 (Term.app `abv [(Term.app `a [`i])])
                                 "*"
                                 (Term.app
                                  `abv
                                  [(«term_-_»
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [(«term_-_» `K "-" `i)])
                                     ", "
                                     (Term.app `b [`k]))
                                    "-"
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [`K])
                                     ", "
                                     (Term.app `b [`k])))])))
                               "-"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                                " in "
                                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                                ", "
                                (Finset.Data.Finset.Fold.«term_*_»
                                 (Term.app `abv [(Term.app `a [`i])])
                                 "*"
                                 (Term.app
                                  `abv
                                  [(«term_-_»
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [(«term_-_» `K "-" `i)])
                                     ", "
                                     (Term.app `b [`k]))
                                    "-"
                                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                                     "∑"
                                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                     " in "
                                     (Term.app `range [`K])
                                     ", "
                                     (Term.app `b [`k])))])))))
                             "<"
                             (Init.Logic.«term_+_»
                              (Finset.Data.Finset.Fold.«term_*_»
                               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                               "*"
                               `P)
                              "+"
                              (Finset.Data.Finset.Fold.«term_*_»
                               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                               "*"
                               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                            (Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.rwSeq
                                  "rw"
                                  []
                                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                  [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                 [])
                                (group
                                 (Tactic.simpa
                                  "simpa"
                                  []
                                  []
                                  ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                  []
                                  [])
                                 [])])))))
                          [])
                         (group
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            `add_lt_add
                            [(Term.app
                              `lt_of_le_of_ltₓ
                              [`hsumlesum
                               (Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented
                                  [(group
                                    (Tactic.«tactic_<;>_»
                                     (Tactic.rwSeq
                                      "rw"
                                      []
                                      (Tactic.rwRuleSeq
                                       "["
                                       [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                       "]")
                                      [])
                                     "<;>"
                                     (Tactic.exact
                                      "exact"
                                      (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                    [])])))])
                             (Term.hole "_")]))
                          [])
                         (group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                            "]")
                           [])
                          [])
                         (group
                          (tacticCalc_
                           "calc"
                           [(calcStep
                             («term_≤_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                               " in "
                               (Term.app
                                (Term.proj (Term.app `range [`K]) "." `filter)
                                [(Term.fun
                                  "fun"
                                  (Term.basicFun
                                   [(Term.simpleBinder [`k] [])]
                                   "=>"
                                   («term_≤_»
                                    (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                    "≤"
                                    `k)))])
                               ", "
                               (Finset.Data.Finset.Fold.«term_*_»
                                (Term.app `abv [(Term.app `a [`i])])
                                "*"
                                (Term.app
                                 `abv
                                 [(«term_-_»
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [(«term_-_» `K "-" `i)])
                                    ", "
                                    (Term.app `b [`k]))
                                   "-"
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [`K])
                                    ", "
                                    (Term.app `b [`k])))])))
                              "≤"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                               " in "
                               (Term.app
                                (Term.proj (Term.app `range [`K]) "." `filter)
                                [(Term.fun
                                  "fun"
                                  (Term.basicFun
                                   [(Term.simpleBinder [`k] [])]
                                   "=>"
                                   («term_≤_»
                                    (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
                                    "≤"
                                    `k)))])
                               ", "
                               (Finset.Data.Finset.Fold.«term_*_»
                                (Term.app `abv [(Term.app `a [`i])])
                                "*"
                                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                             ":="
                             (Term.app
                              `sum_le_sum
                              [(Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.simpleBinder [`n `hn] [])]
                                 "=>"
                                 (Term.byTactic
                                  "by"
                                  (Tactic.tacticSeq
                                   (Tactic.tacticSeq1Indented
                                    [(group
                                      (Tactic.refine'
                                       "refine'"
                                       (Term.app
                                        `mul_le_mul_of_nonneg_left
                                        [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                      [])
                                     (group
                                      (Tactic.rwSeq
                                       "rw"
                                       []
                                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                       [])
                                      [])
                                     (group
                                      (Tactic.refine'
                                       "refine'"
                                       (Term.app
                                        `le_transₓ
                                        [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                         (Term.hole "_")]))
                                      [])
                                     (group
                                      (Tactic.rwSeq
                                       "rw"
                                       []
                                       (Tactic.rwRuleSeq
                                        "["
                                        [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                        "]")
                                       [])
                                      [])
                                     (group
                                      (Tactic.exact
                                       "exact"
                                       (Term.app
                                        `add_le_add
                                        [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                         (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                      [])])))))]))
                            (calcStep
                             («term_<_»
                              (Term.hole "_")
                              "<"
                              (Finset.Data.Finset.Fold.«term_*_»
                               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                               "*"
                               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                             ":="
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.«tactic_<;>_»
                                   (Tactic.rwSeq
                                    "rw"
                                    []
                                    (Tactic.rwRuleSeq
                                     "["
                                     [(Tactic.rwRule ["←"] `sum_mul)
                                      ","
                                      (Tactic.rwRule
                                       ["←"]
                                       (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                     "]")
                                    [])
                                   "<;>"
                                   (Tactic.refine'
                                    "refine'"
                                    (Term.app
                                     (Term.proj
                                      («term_$__»
                                       `mul_lt_mul_right
                                       "$"
                                       (Term.byTactic
                                        "by"
                                        (Tactic.tacticSeq
                                         (Tactic.tacticSeq1Indented
                                          [(group
                                            (Tactic.«tactic_<;>_»
                                             (Tactic.rwSeq
                                              "rw"
                                              []
                                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                              [])
                                             "<;>"
                                             (Tactic.exact
                                              "exact"
                                              (Term.app
                                               `add_pos
                                               [(Term.app
                                                 `lt_of_le_of_ltₓ
                                                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                  (Term.app `hQ [(numLit "0")])])
                                                (Term.app
                                                 `lt_of_le_of_ltₓ
                                                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                  (Term.app `hQ [(numLit "0")])])])))
                                            [])]))))
                                      "."
                                      (fieldIdx "2"))
                                     [(Term.app
                                       `lt_of_le_of_ltₓ
                                       [(Term.app `le_abs_self [(Term.hole "_")])
                                        (Term.app
                                         `hM
                                         [(Term.hole "_")
                                          (Term.hole "_")
                                          (Term.app
                                           `le_transₓ
                                           [(Term.app
                                             `Nat.le_succ_of_leₓ
                                             [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                            (Term.app `le_of_ltₓ [`hNMK])])
                                          (Term.app
                                           `Nat.le_succ_of_leₓ
                                           [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                  [])]))))])
                          [])]))))))))))))))))]
       "⟩")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`N "," `hN] "⟩")
     []
     []
     ":="
     (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `hb] "⟩") `hPε0])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hQε0 []]
      [(Term.typeSpec
        ":"
        («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
      ":="
      (Term.app
       `div_pos
       [`ε0
        (Term.app
         `mul_pos
         [(Term.show
           "show"
           («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
          (Term.app
           `lt_of_le_of_ltₓ
           [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
       []
       []
       ":="
       (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
     []
     (Term.anonymousCtor
      "⟨"
      [(Finset.Data.Finset.Fold.«term_*_»
        (numLit "2")
        "*"
        (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
       ","
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`K `hK] [])]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₁ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
               "="
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `m)])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simpa
                  "simpa"
                  []
                  []
                  []
                  []
                  ["using"
                   (Term.app
                    `sum_range_diag_flip
                    [`K
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`m `n] [])]
                       "=>"
                       (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                 [])])))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h₂ []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`i] [])]
                  "=>"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
                "="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`i] [])]
                  "=>"
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `a [`i])
                   "*"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k])))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₃ []]
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `a [`i])
                   "*"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))))
                 "="
                 (Init.Logic.«term_+_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `a [`i])
                    "*"
                    («term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))))
                  "+"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `a [`i])
                    "*"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                    "<;>"
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["["
                      [(Tactic.simpLemma
                        []
                        []
                        (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                      "]"]
                     []))
                   [])])))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`two_mul_two []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                  "="
                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hQ0 []]
                [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`h] [])]
                  "=>"
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.simpa
                        "simpa"
                        []
                        []
                        ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                        []
                        ["using" `hQε0])
                       [])])))))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h2Q0 []]
                 [(Term.typeSpec
                   ":"
                   («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                 ":="
                 (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hε []]
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Init.Logic.«term_+_»
                      (Finset.Data.Finset.Fold.«term_*_»
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                       "*"
                       `P)
                      "+"
                      (Finset.Data.Finset.Fold.«term_*_»
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                       "*"
                       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                     "="
                     `ε))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                          ","
                          (Tactic.rwRule
                           []
                           (Term.app
                            `div_mul_cancel
                            [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                          ","
                          (Tactic.rwRule [] `two_mul_two)
                          ","
                          (Tactic.rwRule [] `mul_assocₓ)
                          ","
                          (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                          ","
                          (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                          ","
                          (Tactic.rwRule [] `add_halves)]
                         "]")
                        [])
                       [])])))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hNMK []]
                   [(Term.typeSpec
                     ":"
                     («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                   ":="
                   (Term.app
                    `lt_of_lt_of_leₓ
                    [(Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.«tactic_<;>_»
                           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                           "<;>"
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `lt_add_of_pos_left
                             [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                          [])])))
                     `hK])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hKN []]
                    [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       («term_≤_» `N "≤" (Term.app `max [`N `M]))
                       ":="
                       (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                      (calcStep
                       («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                       ":="
                       (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                      (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hsumlesum []]
                     [(Term.typeSpec
                       ":"
                       («term_≤_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Finset.Data.Finset.Fold.«term_*_»
                          (Term.app `abv [(Term.app `a [`i])])
                          "*"
                          (Term.app
                           `abv
                           [(«term_-_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [(«term_-_» `K "-" `i)])
                              ", "
                              (Term.app `b [`k]))
                             "-"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [`K])
                              ", "
                              (Term.app `b [`k])))])))
                        "≤"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Finset.Data.Finset.Fold.«term_*_»
                          (Term.app `abv [(Term.app `a [`i])])
                          "*"
                          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                     ":="
                     (Term.app
                      `sum_le_sum
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`m `hmJ] [])]
                         "=>"
                         (Term.app
                          `mul_le_mul_of_nonneg_left
                          [(Term.app
                            `le_of_ltₓ
                            [(Term.app
                              `hN
                              [(«term_-_» `K "-" `m)
                               `K
                               (Term.app
                                `le_tsub_of_add_le_left
                                [(Term.app
                                  `le_transₓ
                                  [(Term.byTactic
                                    "by"
                                    (Tactic.tacticSeq
                                     (Tactic.tacticSeq1Indented
                                      [(group
                                        (Tactic.«tactic_<;>_»
                                         (Tactic.rwSeq
                                          "rw"
                                          []
                                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                          [])
                                         "<;>"
                                         (Tactic.exact
                                          "exact"
                                          (Term.app
                                           `add_le_add
                                           [(Term.app
                                             `le_of_ltₓ
                                             [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                            (Term.app
                                             `le_transₓ
                                             [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                              (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                        [])])))
                                   `hK])])
                               (Term.app `le_of_ltₓ [`hKN])])])
                           (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hsumltP []]
                      [(Term.typeSpec
                        ":"
                        («term_<_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Term.app `abv [(Term.app `a [`n])]))
                         "<"
                         `P))]
                      ":="
                      (calc
                       "calc"
                       [(calcStep
                         («term_=_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Term.app `abv [(Term.app `a [`n])]))
                          "="
                          (Algebra.Abs.«term|_|»
                           "|"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Term.app `abv [(Term.app `a [`n])]))
                           "|"))
                         ":="
                         (Term.app
                          `Eq.symm
                          [(Term.app
                            `abs_of_nonneg
                            [(Term.app
                              `sum_nonneg
                              [(Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.simpleBinder [`x `h] [])]
                                 "=>"
                                 (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                        (calcStep
                         («term_<_» (Term.hole "_") "<" `P)
                         ":="
                         (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                    []
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] `h₁)
                            ","
                            (Tactic.rwRule [] `h₂)
                            ","
                            (Tactic.rwRule [] `h₃)
                            ","
                            (Tactic.rwRule [] `sum_mul)
                            ","
                            (Tactic.rwRule ["←"] `sub_sub)
                            ","
                            (Tactic.rwRule [] `sub_right_comm)
                            ","
                            (Tactic.rwRule [] `sub_self)
                            ","
                            (Tactic.rwRule [] `zero_sub)
                            ","
                            (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                           "]")
                          [])
                         [])
                        (group
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           `lt_of_le_of_ltₓ
                           [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                         [])
                        (group
                         (Tactic.tacticSuffices_
                          "suffices"
                          (Term.sufficesDecl
                           []
                           («term_<_»
                            (Init.Logic.«term_+_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Term.app
                                `abv
                                [(«term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [(«term_-_» `K "-" `i)])
                                   ", "
                                   (Term.app `b [`k]))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Term.app `b [`k])))])))
                             "+"
                             («term_-_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                               " in "
                               (Term.app `range [`K])
                               ", "
                               (Finset.Data.Finset.Fold.«term_*_»
                                (Term.app `abv [(Term.app `a [`i])])
                                "*"
                                (Term.app
                                 `abv
                                 [(«term_-_»
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [(«term_-_» `K "-" `i)])
                                    ", "
                                    (Term.app `b [`k]))
                                   "-"
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [`K])
                                    ", "
                                    (Term.app `b [`k])))])))
                              "-"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                               " in "
                               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                               ", "
                               (Finset.Data.Finset.Fold.«term_*_»
                                (Term.app `abv [(Term.app `a [`i])])
                                "*"
                                (Term.app
                                 `abv
                                 [(«term_-_»
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [(«term_-_» `K "-" `i)])
                                    ", "
                                    (Term.app `b [`k]))
                                   "-"
                                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                                    "∑"
                                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                    " in "
                                    (Term.app `range [`K])
                                    ", "
                                    (Term.app `b [`k])))])))))
                            "<"
                            (Init.Logic.«term_+_»
                             (Finset.Data.Finset.Fold.«term_*_»
                              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                              "*"
                              `P)
                             "+"
                             (Finset.Data.Finset.Fold.«term_*_»
                              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                              "*"
                              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.rwSeq
                                 "rw"
                                 []
                                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                 [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                                [])
                               (group
                                (Tactic.simpa
                                 "simpa"
                                 []
                                 []
                                 ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                 []
                                 [])
                                [])])))))
                         [])
                        (group
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           `add_lt_add
                           [(Term.app
                             `lt_of_le_of_ltₓ
                             [`hsumlesum
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.«tactic_<;>_»
                                    (Tactic.rwSeq
                                     "rw"
                                     []
                                     (Tactic.rwRuleSeq
                                      "["
                                      [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                      "]")
                                     [])
                                    "<;>"
                                    (Tactic.exact
                                     "exact"
                                     (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                   [])])))])
                            (Term.hole "_")]))
                         [])
                        (group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                           "]")
                          [])
                         [])
                        (group
                         (tacticCalc_
                          "calc"
                          [(calcStep
                            («term_≤_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app
                               (Term.proj (Term.app `range [`K]) "." `filter)
                               [(Term.fun
                                 "fun"
                                 (Term.basicFun
                                  [(Term.simpleBinder [`k] [])]
                                  "=>"
                                  («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Term.app
                                `abv
                                [(«term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [(«term_-_» `K "-" `i)])
                                   ", "
                                   (Term.app `b [`k]))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Term.app `b [`k])))])))
                             "≤"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app
                               (Term.proj (Term.app `range [`K]) "." `filter)
                               [(Term.fun
                                 "fun"
                                 (Term.basicFun
                                  [(Term.simpleBinder [`k] [])]
                                  "=>"
                                  («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                            ":="
                            (Term.app
                             `sum_le_sum
                             [(Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`n `hn] [])]
                                "=>"
                                (Term.byTactic
                                 "by"
                                 (Tactic.tacticSeq
                                  (Tactic.tacticSeq1Indented
                                   [(group
                                     (Tactic.refine'
                                      "refine'"
                                      (Term.app
                                       `mul_le_mul_of_nonneg_left
                                       [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                     [])
                                    (group
                                     (Tactic.rwSeq
                                      "rw"
                                      []
                                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                      [])
                                     [])
                                    (group
                                     (Tactic.refine'
                                      "refine'"
                                      (Term.app
                                       `le_transₓ
                                       [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                        (Term.hole "_")]))
                                     [])
                                    (group
                                     (Tactic.rwSeq
                                      "rw"
                                      []
                                      (Tactic.rwRuleSeq
                                       "["
                                       [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                       "]")
                                      [])
                                     [])
                                    (group
                                     (Tactic.exact
                                      "exact"
                                      (Term.app
                                       `add_le_add
                                       [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                        (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                     [])])))))]))
                           (calcStep
                            («term_<_»
                             (Term.hole "_")
                             "<"
                             (Finset.Data.Finset.Fold.«term_*_»
                              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                              "*"
                              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                            ":="
                            (Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.«tactic_<;>_»
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq
                                    "["
                                    [(Tactic.rwRule ["←"] `sum_mul)
                                     ","
                                     (Tactic.rwRule
                                      ["←"]
                                      (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                    "]")
                                   [])
                                  "<;>"
                                  (Tactic.refine'
                                   "refine'"
                                   (Term.app
                                    (Term.proj
                                     («term_$__»
                                      `mul_lt_mul_right
                                      "$"
                                      (Term.byTactic
                                       "by"
                                       (Tactic.tacticSeq
                                        (Tactic.tacticSeq1Indented
                                         [(group
                                           (Tactic.«tactic_<;>_»
                                            (Tactic.rwSeq
                                             "rw"
                                             []
                                             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                             [])
                                            "<;>"
                                            (Tactic.exact
                                             "exact"
                                             (Term.app
                                              `add_pos
                                              [(Term.app
                                                `lt_of_le_of_ltₓ
                                                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                 (Term.app `hQ [(numLit "0")])])
                                               (Term.app
                                                `lt_of_le_of_ltₓ
                                                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                 (Term.app `hQ [(numLit "0")])])])))
                                           [])]))))
                                     "."
                                     (fieldIdx "2"))
                                    [(Term.app
                                      `lt_of_le_of_ltₓ
                                      [(Term.app `le_abs_self [(Term.hole "_")])
                                       (Term.app
                                        `hM
                                        [(Term.hole "_")
                                         (Term.hole "_")
                                         (Term.app
                                          `le_transₓ
                                          [(Term.app
                                            `Nat.le_succ_of_leₓ
                                            [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                           (Term.app `le_of_ltₓ [`hNMK])])
                                         (Term.app
                                          `Nat.le_succ_of_leₓ
                                          [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                 [])]))))])
                         [])]))))))))))))))))]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hQε0 []]
     [(Term.typeSpec
       ":"
       («term_<_» (numLit "0") "<" («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))))]
     ":="
     (Term.app
      `div_pos
      [`ε0
       (Term.app
        `mul_pos
        [(Term.show
          "show"
          («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" `α)]] ")") "<" (numLit "4"))
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])]))))
         (Term.app
          `lt_of_le_of_ltₓ
          [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
      []
      []
      ":="
      (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
    []
    (Term.anonymousCtor
     "⟨"
     [(Finset.Data.Finset.Fold.«term_*_»
       (numLit "2")
       "*"
       (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
      ","
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`K `hK] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₁ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
              "="
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                " in "
                (Term.app `range [(«term_-_» `K "-" `m)])
                ", "
                (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.simpa
                 "simpa"
                 []
                 []
                 []
                 []
                 ["using"
                  (Term.app
                   `sum_range_diag_flip
                   [`K
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`m `n] [])]
                      "=>"
                      (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
                [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₂ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`i] [])]
                 "=>"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
               "="
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`i] [])]
                 "=>"
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `a [`i])
                  "*"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k])))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h₃ []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `a [`i])
                  "*"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))))
                "="
                (Init.Logic.«term_+_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `a [`i])
                   "*"
                   («term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))))
                 "+"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `a [`i])
                   "*"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                   "<;>"
                   (Tactic.simp
                    "simp"
                    []
                    []
                    ["["
                     [(Tactic.simpLemma
                       []
                       []
                       (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                     "]"]
                    []))
                  [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`two_mul_two []]
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                 "="
                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hQ0 []]
               [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`h] [])]
                 "=>"
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.simpa
                       "simpa"
                       []
                       []
                       ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                       []
                       ["using" `hQε0])
                      [])])))))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h2Q0 []]
                [(Term.typeSpec
                  ":"
                  («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
                ":="
                (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hε []]
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Init.Logic.«term_+_»
                     (Finset.Data.Finset.Fold.«term_*_»
                      («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                      "*"
                      `P)
                     "+"
                     (Finset.Data.Finset.Fold.«term_*_»
                      («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                      "*"
                      (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                    "="
                    `ε))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                         ","
                         (Tactic.rwRule
                          []
                          (Term.app
                           `div_mul_cancel
                           [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                         ","
                         (Tactic.rwRule [] `two_mul_two)
                         ","
                         (Tactic.rwRule [] `mul_assocₓ)
                         ","
                         (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                         ","
                         (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                         ","
                         (Tactic.rwRule [] `add_halves)]
                        "]")
                       [])
                      [])])))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hNMK []]
                  [(Term.typeSpec
                    ":"
                    («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                  ":="
                  (Term.app
                   `lt_of_lt_of_leₓ
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.«tactic_<;>_»
                          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                          "<;>"
                          (Tactic.exact
                           "exact"
                           (Term.app
                            `lt_add_of_pos_left
                            [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                         [])])))
                    `hK])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hKN []]
                   [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                   ":="
                   (calc
                    "calc"
                    [(calcStep
                      («term_≤_» `N "≤" (Term.app `max [`N `M]))
                      ":="
                      (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                     (calcStep
                      («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                      ":="
                      (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                     (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hsumlesum []]
                    [(Term.typeSpec
                      ":"
                      («term_≤_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `abv [(Term.app `a [`i])])
                         "*"
                         (Term.app
                          `abv
                          [(«term_-_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [(«term_-_» `K "-" `i)])
                             ", "
                             (Term.app `b [`k]))
                            "-"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [`K])
                             ", "
                             (Term.app `b [`k])))])))
                       "≤"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `abv [(Term.app `a [`i])])
                         "*"
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                    ":="
                    (Term.app
                     `sum_le_sum
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`m `hmJ] [])]
                        "=>"
                        (Term.app
                         `mul_le_mul_of_nonneg_left
                         [(Term.app
                           `le_of_ltₓ
                           [(Term.app
                             `hN
                             [(«term_-_» `K "-" `m)
                              `K
                              (Term.app
                               `le_tsub_of_add_le_left
                               [(Term.app
                                 `le_transₓ
                                 [(Term.byTactic
                                   "by"
                                   (Tactic.tacticSeq
                                    (Tactic.tacticSeq1Indented
                                     [(group
                                       (Tactic.«tactic_<;>_»
                                        (Tactic.rwSeq
                                         "rw"
                                         []
                                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                         [])
                                        "<;>"
                                        (Tactic.exact
                                         "exact"
                                         (Term.app
                                          `add_le_add
                                          [(Term.app
                                            `le_of_ltₓ
                                            [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                           (Term.app
                                            `le_transₓ
                                            [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                             (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                       [])])))
                                  `hK])])
                              (Term.app `le_of_ltₓ [`hKN])])])
                          (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hsumltP []]
                     [(Term.typeSpec
                       ":"
                       («term_<_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Term.app `abv [(Term.app `a [`n])]))
                        "<"
                        `P))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        («term_=_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Term.app `abv [(Term.app `a [`n])]))
                         "="
                         (Algebra.Abs.«term|_|»
                          "|"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Term.app `abv [(Term.app `a [`n])]))
                          "|"))
                        ":="
                        (Term.app
                         `Eq.symm
                         [(Term.app
                           `abs_of_nonneg
                           [(Term.app
                             `sum_nonneg
                             [(Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`x `h] [])]
                                "=>"
                                (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                       (calcStep
                        («term_<_» (Term.hole "_") "<" `P)
                        ":="
                        (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                   []
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `h₁)
                           ","
                           (Tactic.rwRule [] `h₂)
                           ","
                           (Tactic.rwRule [] `h₃)
                           ","
                           (Tactic.rwRule [] `sum_mul)
                           ","
                           (Tactic.rwRule ["←"] `sub_sub)
                           ","
                           (Tactic.rwRule [] `sub_right_comm)
                           ","
                           (Tactic.rwRule [] `sub_self)
                           ","
                           (Tactic.rwRule [] `zero_sub)
                           ","
                           (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                          "]")
                         [])
                        [])
                       (group
                        (Tactic.refine'
                         "refine'"
                         (Term.app
                          `lt_of_le_of_ltₓ
                          [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                        [])
                       (group
                        (Tactic.tacticSuffices_
                         "suffices"
                         (Term.sufficesDecl
                          []
                          («term_<_»
                           (Init.Logic.«term_+_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Term.app
                               `abv
                               [(«term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [(«term_-_» `K "-" `i)])
                                  ", "
                                  (Term.app `b [`k]))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Term.app `b [`k])))])))
                            "+"
                            («term_-_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app `range [`K])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Term.app
                                `abv
                                [(«term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [(«term_-_» `K "-" `i)])
                                   ", "
                                   (Term.app `b [`k]))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Term.app `b [`k])))])))
                             "-"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                              " in "
                              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                              ", "
                              (Finset.Data.Finset.Fold.«term_*_»
                               (Term.app `abv [(Term.app `a [`i])])
                               "*"
                               (Term.app
                                `abv
                                [(«term_-_»
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [(«term_-_» `K "-" `i)])
                                   ", "
                                   (Term.app `b [`k]))
                                  "-"
                                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                                   "∑"
                                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                   " in "
                                   (Term.app `range [`K])
                                   ", "
                                   (Term.app `b [`k])))])))))
                           "<"
                           (Init.Logic.«term_+_»
                            (Finset.Data.Finset.Fold.«term_*_»
                             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                             "*"
                             `P)
                            "+"
                            (Finset.Data.Finset.Fold.«term_*_»
                             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                             "*"
                             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.rwSeq
                                "rw"
                                []
                                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                                [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                               [])
                              (group
                               (Tactic.simpa
                                "simpa"
                                []
                                []
                                ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                                []
                                [])
                               [])])))))
                        [])
                       (group
                        (Tactic.refine'
                         "refine'"
                         (Term.app
                          `add_lt_add
                          [(Term.app
                            `lt_of_le_of_ltₓ
                            [`hsumlesum
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.«tactic_<;>_»
                                   (Tactic.rwSeq
                                    "rw"
                                    []
                                    (Tactic.rwRuleSeq
                                     "["
                                     [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                     "]")
                                    [])
                                   "<;>"
                                   (Tactic.exact
                                    "exact"
                                    (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                  [])])))])
                           (Term.hole "_")]))
                        [])
                       (group
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                          "]")
                         [])
                        [])
                       (group
                        (tacticCalc_
                         "calc"
                         [(calcStep
                           («term_≤_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app
                              (Term.proj (Term.app `range [`K]) "." `filter)
                              [(Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.simpleBinder [`k] [])]
                                 "=>"
                                 («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Term.app
                               `abv
                               [(«term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [(«term_-_» `K "-" `i)])
                                  ", "
                                  (Term.app `b [`k]))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Term.app `b [`k])))])))
                            "≤"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app
                              (Term.proj (Term.app `range [`K]) "." `filter)
                              [(Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.simpleBinder [`k] [])]
                                 "=>"
                                 («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                           ":="
                           (Term.app
                            `sum_le_sum
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`n `hn] [])]
                               "=>"
                               (Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented
                                  [(group
                                    (Tactic.refine'
                                     "refine'"
                                     (Term.app
                                      `mul_le_mul_of_nonneg_left
                                      [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                    [])
                                   (group
                                    (Tactic.rwSeq
                                     "rw"
                                     []
                                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                     [])
                                    [])
                                   (group
                                    (Tactic.refine'
                                     "refine'"
                                     (Term.app
                                      `le_transₓ
                                      [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                       (Term.hole "_")]))
                                    [])
                                   (group
                                    (Tactic.rwSeq
                                     "rw"
                                     []
                                     (Tactic.rwRuleSeq
                                      "["
                                      [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                      "]")
                                     [])
                                    [])
                                   (group
                                    (Tactic.exact
                                     "exact"
                                     (Term.app
                                      `add_le_add
                                      [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                       (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                    [])])))))]))
                          (calcStep
                           («term_<_»
                            (Term.hole "_")
                            "<"
                            (Finset.Data.Finset.Fold.«term_*_»
                             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                             "*"
                             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                           ":="
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.«tactic_<;>_»
                                 (Tactic.rwSeq
                                  "rw"
                                  []
                                  (Tactic.rwRuleSeq
                                   "["
                                   [(Tactic.rwRule ["←"] `sum_mul)
                                    ","
                                    (Tactic.rwRule
                                     ["←"]
                                     (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                   "]")
                                  [])
                                 "<;>"
                                 (Tactic.refine'
                                  "refine'"
                                  (Term.app
                                   (Term.proj
                                    («term_$__»
                                     `mul_lt_mul_right
                                     "$"
                                     (Term.byTactic
                                      "by"
                                      (Tactic.tacticSeq
                                       (Tactic.tacticSeq1Indented
                                        [(group
                                          (Tactic.«tactic_<;>_»
                                           (Tactic.rwSeq
                                            "rw"
                                            []
                                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                            [])
                                           "<;>"
                                           (Tactic.exact
                                            "exact"
                                            (Term.app
                                             `add_pos
                                             [(Term.app
                                               `lt_of_le_of_ltₓ
                                               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                (Term.app `hQ [(numLit "0")])])
                                              (Term.app
                                               `lt_of_le_of_ltₓ
                                               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                                (Term.app `hQ [(numLit "0")])])])))
                                          [])]))))
                                    "."
                                    (fieldIdx "2"))
                                   [(Term.app
                                     `lt_of_le_of_ltₓ
                                     [(Term.app `le_abs_self [(Term.hole "_")])
                                      (Term.app
                                       `hM
                                       [(Term.hole "_")
                                        (Term.hole "_")
                                        (Term.app
                                         `le_transₓ
                                         [(Term.app
                                           `Nat.le_succ_of_leₓ
                                           [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                          (Term.app `le_of_ltₓ [`hNMK])])
                                        (Term.app
                                         `Nat.le_succ_of_leₓ
                                         [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                                [])]))))])
                        [])]))))))))))))))))]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`M "," `hM] "⟩")
     []
     []
     ":="
     (Term.app `CauSeq.cauchy₂ [(Term.anonymousCtor "⟨" [(Term.hole "_") "," `ha] "⟩") `hQε0])))
   []
   (Term.anonymousCtor
    "⟨"
    [(Finset.Data.Finset.Fold.«term_*_»
      (numLit "2")
      "*"
      (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
     ","
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`K `hK] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₁ []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
             "="
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               " in "
               (Term.app `range [(«term_-_» `K "-" `m)])
               ", "
               (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.simpa
                "simpa"
                []
                []
                []
                []
                ["using"
                 (Term.app
                  `sum_range_diag_flip
                  [`K
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`m `n] [])]
                     "=>"
                     (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
               [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₂ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`i] [])]
                "=>"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
              "="
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`i] [])]
                "=>"
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `a [`i])
                 "*"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k])))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₃ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `a [`i])
                 "*"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))))
               "="
               (Init.Logic.«term_+_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `a [`i])
                  "*"
                  («term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))))
                "+"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `a [`i])
                  "*"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                  "<;>"
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["["
                    [(Tactic.simpLemma
                      []
                      []
                      (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                    "]"]
                   []))
                 [])])))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`two_mul_two []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
                "="
                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hQ0 []]
              [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`h] [])]
                "=>"
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.simpa
                      "simpa"
                      []
                      []
                      ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                      []
                      ["using" `hQε0])
                     [])])))))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h2Q0 []]
               [(Term.typeSpec
                 ":"
                 («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
               ":="
               (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hε []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Init.Logic.«term_+_»
                    (Finset.Data.Finset.Fold.«term_*_»
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                     "*"
                     `P)
                    "+"
                    (Finset.Data.Finset.Fold.«term_*_»
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                     "*"
                     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                   "="
                   `ε))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                        ","
                        (Tactic.rwRule
                         []
                         (Term.app
                          `div_mul_cancel
                          [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                        ","
                        (Tactic.rwRule [] `two_mul_two)
                        ","
                        (Tactic.rwRule [] `mul_assocₓ)
                        ","
                        (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                        ","
                        (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                        ","
                        (Tactic.rwRule [] `add_halves)]
                       "]")
                      [])
                     [])])))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hNMK []]
                 [(Term.typeSpec
                   ":"
                   («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                 ":="
                 (Term.app
                  `lt_of_lt_of_leₓ
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.«tactic_<;>_»
                         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                         "<;>"
                         (Tactic.exact
                          "exact"
                          (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                        [])])))
                   `hK])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hKN []]
                  [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     («term_≤_» `N "≤" (Term.app `max [`N `M]))
                     ":="
                     (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                    (calcStep
                     («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                     ":="
                     (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                    (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hsumlesum []]
                   [(Term.typeSpec
                     ":"
                     («term_≤_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Term.app
                         `abv
                         [(«term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [(«term_-_» `K "-" `i)])
                            ", "
                            (Term.app `b [`k]))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Term.app `b [`k])))])))
                      "≤"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                   ":="
                   (Term.app
                    `sum_le_sum
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`m `hmJ] [])]
                       "=>"
                       (Term.app
                        `mul_le_mul_of_nonneg_left
                        [(Term.app
                          `le_of_ltₓ
                          [(Term.app
                            `hN
                            [(«term_-_» `K "-" `m)
                             `K
                             (Term.app
                              `le_tsub_of_add_le_left
                              [(Term.app
                                `le_transₓ
                                [(Term.byTactic
                                  "by"
                                  (Tactic.tacticSeq
                                   (Tactic.tacticSeq1Indented
                                    [(group
                                      (Tactic.«tactic_<;>_»
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                        [])
                                       "<;>"
                                       (Tactic.exact
                                        "exact"
                                        (Term.app
                                         `add_le_add
                                         [(Term.app
                                           `le_of_ltₓ
                                           [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                          (Term.app
                                           `le_transₓ
                                           [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                            (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                      [])])))
                                 `hK])])
                             (Term.app `le_of_ltₓ [`hKN])])])
                         (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hsumltP []]
                    [(Term.typeSpec
                      ":"
                      («term_<_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                        " in "
                        (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                        ", "
                        (Term.app `abv [(Term.app `a [`n])]))
                       "<"
                       `P))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       («term_=_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Term.app `abv [(Term.app `a [`n])]))
                        "="
                        (Algebra.Abs.«term|_|»
                         "|"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Term.app `abv [(Term.app `a [`n])]))
                         "|"))
                       ":="
                       (Term.app
                        `Eq.symm
                        [(Term.app
                          `abs_of_nonneg
                          [(Term.app
                            `sum_nonneg
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`x `h] [])]
                               "=>"
                               (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                      (calcStep
                       («term_<_» (Term.hole "_") "<" `P)
                       ":="
                       (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                  []
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `h₁)
                          ","
                          (Tactic.rwRule [] `h₂)
                          ","
                          (Tactic.rwRule [] `h₃)
                          ","
                          (Tactic.rwRule [] `sum_mul)
                          ","
                          (Tactic.rwRule ["←"] `sub_sub)
                          ","
                          (Tactic.rwRule [] `sub_right_comm)
                          ","
                          (Tactic.rwRule [] `sub_self)
                          ","
                          (Tactic.rwRule [] `zero_sub)
                          ","
                          (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `lt_of_le_of_ltₓ
                         [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                       [])
                      (group
                       (Tactic.tacticSuffices_
                        "suffices"
                        (Term.sufficesDecl
                         []
                         («term_<_»
                          (Init.Logic.«term_+_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Term.app
                              `abv
                              [(«term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [(«term_-_» `K "-" `i)])
                                 ", "
                                 (Term.app `b [`k]))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Term.app `b [`k])))])))
                           "+"
                           («term_-_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app `range [`K])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Term.app
                               `abv
                               [(«term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [(«term_-_» `K "-" `i)])
                                  ", "
                                  (Term.app `b [`k]))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Term.app `b [`k])))])))
                            "-"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                             " in "
                             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                             ", "
                             (Finset.Data.Finset.Fold.«term_*_»
                              (Term.app `abv [(Term.app `a [`i])])
                              "*"
                              (Term.app
                               `abv
                               [(«term_-_»
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [(«term_-_» `K "-" `i)])
                                  ", "
                                  (Term.app `b [`k]))
                                 "-"
                                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                                  "∑"
                                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                  " in "
                                  (Term.app `range [`K])
                                  ", "
                                  (Term.app `b [`k])))])))))
                          "<"
                          (Init.Logic.«term_+_»
                           (Finset.Data.Finset.Fold.«term_*_»
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                            "*"
                            `P)
                           "+"
                           (Finset.Data.Finset.Fold.«term_*_»
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                            "*"
                            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                               [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                              [])
                             (group
                              (Tactic.simpa
                               "simpa"
                               []
                               []
                               ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                               []
                               [])
                              [])])))))
                       [])
                      (group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `add_lt_add
                         [(Term.app
                           `lt_of_le_of_ltₓ
                           [`hsumlesum
                            (Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.«tactic_<;>_»
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq
                                    "["
                                    [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                    "]")
                                   [])
                                  "<;>"
                                  (Tactic.exact
                                   "exact"
                                   (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                 [])])))])
                          (Term.hole "_")]))
                       [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                         "]")
                        [])
                       [])
                      (group
                       (tacticCalc_
                        "calc"
                        [(calcStep
                          («term_≤_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app
                             (Term.proj (Term.app `range [`K]) "." `filter)
                             [(Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`k] [])]
                                "=>"
                                («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Term.app
                              `abv
                              [(«term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [(«term_-_» `K "-" `i)])
                                 ", "
                                 (Term.app `b [`k]))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Term.app `b [`k])))])))
                           "≤"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app
                             (Term.proj (Term.app `range [`K]) "." `filter)
                             [(Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`k] [])]
                                "=>"
                                («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                          ":="
                          (Term.app
                           `sum_le_sum
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`n `hn] [])]
                              "=>"
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.refine'
                                    "refine'"
                                    (Term.app
                                     `mul_le_mul_of_nonneg_left
                                     [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                   [])
                                  (group
                                   (Tactic.rwSeq
                                    "rw"
                                    []
                                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                    [])
                                   [])
                                  (group
                                   (Tactic.refine'
                                    "refine'"
                                    (Term.app
                                     `le_transₓ
                                     [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                      (Term.hole "_")]))
                                   [])
                                  (group
                                   (Tactic.rwSeq
                                    "rw"
                                    []
                                    (Tactic.rwRuleSeq
                                     "["
                                     [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                     "]")
                                    [])
                                   [])
                                  (group
                                   (Tactic.exact
                                    "exact"
                                    (Term.app
                                     `add_le_add
                                     [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                      (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                   [])])))))]))
                         (calcStep
                          («term_<_»
                           (Term.hole "_")
                           "<"
                           (Finset.Data.Finset.Fold.«term_*_»
                            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                            "*"
                            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.«tactic_<;>_»
                                (Tactic.rwSeq
                                 "rw"
                                 []
                                 (Tactic.rwRuleSeq
                                  "["
                                  [(Tactic.rwRule ["←"] `sum_mul)
                                   ","
                                   (Tactic.rwRule
                                    ["←"]
                                    (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                  "]")
                                 [])
                                "<;>"
                                (Tactic.refine'
                                 "refine'"
                                 (Term.app
                                  (Term.proj
                                   («term_$__»
                                    `mul_lt_mul_right
                                    "$"
                                    (Term.byTactic
                                     "by"
                                     (Tactic.tacticSeq
                                      (Tactic.tacticSeq1Indented
                                       [(group
                                         (Tactic.«tactic_<;>_»
                                          (Tactic.rwSeq
                                           "rw"
                                           []
                                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                           [])
                                          "<;>"
                                          (Tactic.exact
                                           "exact"
                                           (Term.app
                                            `add_pos
                                            [(Term.app
                                              `lt_of_le_of_ltₓ
                                              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                               (Term.app `hQ [(numLit "0")])])
                                             (Term.app
                                              `lt_of_le_of_ltₓ
                                              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                               (Term.app `hQ [(numLit "0")])])])))
                                         [])]))))
                                   "."
                                   (fieldIdx "2"))
                                  [(Term.app
                                    `lt_of_le_of_ltₓ
                                    [(Term.app `le_abs_self [(Term.hole "_")])
                                     (Term.app
                                      `hM
                                      [(Term.hole "_")
                                       (Term.hole "_")
                                       (Term.app
                                        `le_transₓ
                                        [(Term.app
                                          `Nat.le_succ_of_leₓ
                                          [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                         (Term.app `le_of_ltₓ [`hNMK])])
                                       (Term.app
                                        `Nat.le_succ_of_leₓ
                                        [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                               [])]))))])
                       [])]))))))))))))))))]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
    ","
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`K `hK] [])]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₁ []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
            "="
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
              " in "
              (Term.app `range [(«term_-_» `K "-" `m)])
              ", "
              (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.simpa
               "simpa"
               []
               []
               []
               []
               ["using"
                (Term.app
                 `sum_range_diag_flip
                 [`K
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`m `n] [])]
                    "=>"
                    (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
              [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`i] [])]
               "=>"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                " in "
                (Term.app `range [(«term_-_» `K "-" `i)])
                ", "
                (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
             "="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`i] [])]
               "=>"
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `a [`i])
                "*"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k])))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₃ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `a [`i])
                "*"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k]))))
              "="
              (Init.Logic.«term_+_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `a [`i])
                 "*"
                 («term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))))
               "+"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `a [`i])
                 "*"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.«tactic_<;>_»
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
                 "<;>"
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["["
                   [(Tactic.simpLemma
                     []
                     []
                     (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                   "]"]
                  []))
                [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`two_mul_two []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
               "="
               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hQ0 []]
             [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`h] [])]
               "=>"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.simpa
                     "simpa"
                     []
                     []
                     ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                     []
                     ["using" `hQε0])
                    [])])))))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h2Q0 []]
              [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
              ":="
              (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hε []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Init.Logic.«term_+_»
                   (Finset.Data.Finset.Fold.«term_*_»
                    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                    "*"
                    `P)
                   "+"
                   (Finset.Data.Finset.Fold.«term_*_»
                    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                    "*"
                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                  "="
                  `ε))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                       ","
                       (Tactic.rwRule
                        []
                        (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                       ","
                       (Tactic.rwRule [] `two_mul_two)
                       ","
                       (Tactic.rwRule [] `mul_assocₓ)
                       ","
                       (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                       ","
                       (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                       ","
                       (Tactic.rwRule [] `add_halves)]
                      "]")
                     [])
                    [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hNMK []]
                [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
                ":="
                (Term.app
                 `lt_of_lt_of_leₓ
                 [(Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.«tactic_<;>_»
                        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                        "<;>"
                        (Tactic.exact
                         "exact"
                         (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                       [])])))
                  `hK])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hKN []]
                 [(Term.typeSpec ":" («term_<_» `N "<" `K))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    («term_≤_» `N "≤" (Term.app `max [`N `M]))
                    ":="
                    (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                   (calcStep
                    («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                    ":="
                    (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                   (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hsumlesum []]
                  [(Term.typeSpec
                    ":"
                    («term_≤_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Term.app
                        `abv
                        [(«term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))])))
                     "≤"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                  ":="
                  (Term.app
                   `sum_le_sum
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`m `hmJ] [])]
                      "=>"
                      (Term.app
                       `mul_le_mul_of_nonneg_left
                       [(Term.app
                         `le_of_ltₓ
                         [(Term.app
                           `hN
                           [(«term_-_» `K "-" `m)
                            `K
                            (Term.app
                             `le_tsub_of_add_le_left
                             [(Term.app
                               `le_transₓ
                               [(Term.byTactic
                                 "by"
                                 (Tactic.tacticSeq
                                  (Tactic.tacticSeq1Indented
                                   [(group
                                     (Tactic.«tactic_<;>_»
                                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                      "<;>"
                                      (Tactic.exact
                                       "exact"
                                       (Term.app
                                        `add_le_add
                                        [(Term.app
                                          `le_of_ltₓ
                                          [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                         (Term.app
                                          `le_transₓ
                                          [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                           (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                     [])])))
                                `hK])])
                            (Term.app `le_of_ltₓ [`hKN])])])
                        (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hsumltP []]
                   [(Term.typeSpec
                     ":"
                     («term_<_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Term.app `abv [(Term.app `a [`n])]))
                      "<"
                      `P))]
                   ":="
                   (calc
                    "calc"
                    [(calcStep
                      («term_=_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                        " in "
                        (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                        ", "
                        (Term.app `abv [(Term.app `a [`n])]))
                       "="
                       (Algebra.Abs.«term|_|»
                        "|"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Term.app `abv [(Term.app `a [`n])]))
                        "|"))
                      ":="
                      (Term.app
                       `Eq.symm
                       [(Term.app
                         `abs_of_nonneg
                         [(Term.app
                           `sum_nonneg
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`x `h] [])]
                              "=>"
                              (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                     (calcStep
                      («term_<_» (Term.hole "_") "<" `P)
                      ":="
                      (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
                 []
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `h₁)
                         ","
                         (Tactic.rwRule [] `h₂)
                         ","
                         (Tactic.rwRule [] `h₃)
                         ","
                         (Tactic.rwRule [] `sum_mul)
                         ","
                         (Tactic.rwRule ["←"] `sub_sub)
                         ","
                         (Tactic.rwRule [] `sub_right_comm)
                         ","
                         (Tactic.rwRule [] `sub_self)
                         ","
                         (Tactic.rwRule [] `zero_sub)
                         ","
                         (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                        "]")
                       [])
                      [])
                     (group
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        `lt_of_le_of_ltₓ
                        [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                      [])
                     (group
                      (Tactic.tacticSuffices_
                       "suffices"
                       (Term.sufficesDecl
                        []
                        («term_<_»
                         (Init.Logic.«term_+_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                           " in "
                           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                           ", "
                           (Finset.Data.Finset.Fold.«term_*_»
                            (Term.app `abv [(Term.app `a [`i])])
                            "*"
                            (Term.app
                             `abv
                             [(«term_-_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [(«term_-_» `K "-" `i)])
                                ", "
                                (Term.app `b [`k]))
                               "-"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [`K])
                                ", "
                                (Term.app `b [`k])))])))
                          "+"
                          («term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Term.app
                              `abv
                              [(«term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [(«term_-_» `K "-" `i)])
                                 ", "
                                 (Term.app `b [`k]))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Term.app `b [`k])))])))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                            " in "
                            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                            ", "
                            (Finset.Data.Finset.Fold.«term_*_»
                             (Term.app `abv [(Term.app `a [`i])])
                             "*"
                             (Term.app
                              `abv
                              [(«term_-_»
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [(«term_-_» `K "-" `i)])
                                 ", "
                                 (Term.app `b [`k]))
                                "-"
                                (Algebra.BigOperators.Basic.«term∑_in_,_»
                                 "∑"
                                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                 " in "
                                 (Term.app `range [`K])
                                 ", "
                                 (Term.app `b [`k])))])))))
                         "<"
                         (Init.Logic.«term_+_»
                          (Finset.Data.Finset.Fold.«term_*_»
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                           "*"
                           `P)
                          "+"
                          (Finset.Data.Finset.Fold.«term_*_»
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                           "*"
                           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                             [])
                            (group
                             (Tactic.simpa
                              "simpa"
                              []
                              []
                              ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                              []
                              [])
                             [])])))))
                      [])
                     (group
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        `add_lt_add
                        [(Term.app
                          `lt_of_le_of_ltₓ
                          [`hsumlesum
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.«tactic_<;>_»
                                 (Tactic.rwSeq
                                  "rw"
                                  []
                                  (Tactic.rwRuleSeq
                                   "["
                                   [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                   "]")
                                  [])
                                 "<;>"
                                 (Tactic.exact
                                  "exact"
                                  (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                                [])])))])
                         (Term.hole "_")]))
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                        "]")
                       [])
                      [])
                     (group
                      (tacticCalc_
                       "calc"
                       [(calcStep
                         («term_≤_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                           " in "
                           (Term.app
                            (Term.proj (Term.app `range [`K]) "." `filter)
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`k] [])]
                               "=>"
                               («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                           ", "
                           (Finset.Data.Finset.Fold.«term_*_»
                            (Term.app `abv [(Term.app `a [`i])])
                            "*"
                            (Term.app
                             `abv
                             [(«term_-_»
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [(«term_-_» `K "-" `i)])
                                ", "
                                (Term.app `b [`k]))
                               "-"
                               (Algebra.BigOperators.Basic.«term∑_in_,_»
                                "∑"
                                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                                " in "
                                (Term.app `range [`K])
                                ", "
                                (Term.app `b [`k])))])))
                          "≤"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                           " in "
                           (Term.app
                            (Term.proj (Term.app `range [`K]) "." `filter)
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`k] [])]
                               "=>"
                               («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                           ", "
                           (Finset.Data.Finset.Fold.«term_*_»
                            (Term.app `abv [(Term.app `a [`i])])
                            "*"
                            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                         ":="
                         (Term.app
                          `sum_le_sum
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`n `hn] [])]
                             "=>"
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.refine'
                                   "refine'"
                                   (Term.app
                                    `mul_le_mul_of_nonneg_left
                                    [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                  [])
                                 (group
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                   [])
                                  [])
                                 (group
                                  (Tactic.refine'
                                   "refine'"
                                   (Term.app
                                    `le_transₓ
                                    [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                     (Term.hole "_")]))
                                  [])
                                 (group
                                  (Tactic.rwSeq
                                   "rw"
                                   []
                                   (Tactic.rwRuleSeq
                                    "["
                                    [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                    "]")
                                   [])
                                  [])
                                 (group
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    `add_le_add
                                    [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                     (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                  [])])))))]))
                        (calcStep
                         («term_<_»
                          (Term.hole "_")
                          "<"
                          (Finset.Data.Finset.Fold.«term_*_»
                           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                           "*"
                           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.«tactic_<;>_»
                               (Tactic.rwSeq
                                "rw"
                                []
                                (Tactic.rwRuleSeq
                                 "["
                                 [(Tactic.rwRule ["←"] `sum_mul)
                                  ","
                                  (Tactic.rwRule
                                   ["←"]
                                   (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                                 "]")
                                [])
                               "<;>"
                               (Tactic.refine'
                                "refine'"
                                (Term.app
                                 (Term.proj
                                  («term_$__»
                                   `mul_lt_mul_right
                                   "$"
                                   (Term.byTactic
                                    "by"
                                    (Tactic.tacticSeq
                                     (Tactic.tacticSeq1Indented
                                      [(group
                                        (Tactic.«tactic_<;>_»
                                         (Tactic.rwSeq
                                          "rw"
                                          []
                                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                          [])
                                         "<;>"
                                         (Tactic.exact
                                          "exact"
                                          (Term.app
                                           `add_pos
                                           [(Term.app
                                             `lt_of_le_of_ltₓ
                                             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                              (Term.app `hQ [(numLit "0")])])
                                            (Term.app
                                             `lt_of_le_of_ltₓ
                                             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                              (Term.app `hQ [(numLit "0")])])])))
                                        [])]))))
                                  "."
                                  (fieldIdx "2"))
                                 [(Term.app
                                   `lt_of_le_of_ltₓ
                                   [(Term.app `le_abs_self [(Term.hole "_")])
                                    (Term.app
                                     `hM
                                     [(Term.hole "_")
                                      (Term.hole "_")
                                      (Term.app
                                       `le_transₓ
                                       [(Term.app
                                         `Nat.le_succ_of_leₓ
                                         [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                        (Term.app `le_of_ltₓ [`hNMK])])
                                      (Term.app
                                       `Nat.le_succ_of_leₓ
                                       [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                              [])]))))])
                      [])]))))))))))))))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`K `hK] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₁ []]
       [(Term.typeSpec
         ":"
         («term_=_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
           " in "
           (Term.app `range [`K])
           ", "
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
          "="
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
           " in "
           (Term.app `range [`K])
           ", "
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
            " in "
            (Term.app `range [(«term_-_» `K "-" `m)])
            ", "
            (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simpa
             "simpa"
             []
             []
             []
             []
             ["using"
              (Term.app
               `sum_range_diag_flip
               [`K
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`m `n] [])]
                  "=>"
                  (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
            [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₂ []]
        [(Term.typeSpec
          ":"
          («term_=_»
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`i] [])]
             "=>"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(«term_-_» `K "-" `i)])
              ", "
              (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
           "="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`i] [])]
             "=>"
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `a [`i])
              "*"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(«term_-_» `K "-" `i)])
               ", "
               (Term.app `b [`k])))))))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₃ []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `a [`i])
              "*"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(«term_-_» `K "-" `i)])
               ", "
               (Term.app `b [`k]))))
            "="
            (Init.Logic.«term_+_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `a [`i])
               "*"
               («term_-_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k]))
                "-"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Term.app `b [`k])))))
             "+"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `a [`i])
               "*"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Term.app `b [`k])))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
               "<;>"
               (Tactic.simp
                "simp"
                []
                []
                ["["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
                 "]"]
                []))
              [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`two_mul_two []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
             "="
             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hQ0 []]
           [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`h] [])]
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.simpa
                   "simpa"
                   []
                   []
                   ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                   []
                   ["using" `hQε0])
                  [])])))))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h2Q0 []]
            [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
            ":="
            (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hε []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Init.Logic.«term_+_»
                 (Finset.Data.Finset.Fold.«term_*_»
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                  "*"
                  `P)
                 "+"
                 (Finset.Data.Finset.Fold.«term_*_»
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                  "*"
                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                "="
                `ε))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                     ","
                     (Tactic.rwRule
                      []
                      (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                     ","
                     (Tactic.rwRule [] `two_mul_two)
                     ","
                     (Tactic.rwRule [] `mul_assocₓ)
                     ","
                     (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                     ","
                     (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                     ","
                     (Tactic.rwRule [] `add_halves)]
                    "]")
                   [])
                  [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hNMK []]
              [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
              ":="
              (Term.app
               `lt_of_lt_of_leₓ
               [(Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                      "<;>"
                      (Tactic.exact
                       "exact"
                       (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                     [])])))
                `hK])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hKN []]
               [(Term.typeSpec ":" («term_<_» `N "<" `K))]
               ":="
               (calc
                "calc"
                [(calcStep
                  («term_≤_» `N "≤" (Term.app `max [`N `M]))
                  ":="
                  (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
                 (calcStep
                  («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                  ":="
                  (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
                 (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hsumlesum []]
                [(Term.typeSpec
                  ":"
                  («term_≤_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Term.app
                      `abv
                      [(«term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))])))
                   "≤"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
                ":="
                (Term.app
                 `sum_le_sum
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`m `hmJ] [])]
                    "=>"
                    (Term.app
                     `mul_le_mul_of_nonneg_left
                     [(Term.app
                       `le_of_ltₓ
                       [(Term.app
                         `hN
                         [(«term_-_» `K "-" `m)
                          `K
                          (Term.app
                           `le_tsub_of_add_le_left
                           [(Term.app
                             `le_transₓ
                             [(Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.«tactic_<;>_»
                                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                    "<;>"
                                    (Tactic.exact
                                     "exact"
                                     (Term.app
                                      `add_le_add
                                      [(Term.app
                                        `le_of_ltₓ
                                        [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                       (Term.app
                                        `le_transₓ
                                        [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                         (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                   [])])))
                              `hK])])
                          (Term.app `le_of_ltₓ [`hKN])])])
                      (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hsumltP []]
                 [(Term.typeSpec
                   ":"
                   («term_<_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                     " in "
                     (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                     ", "
                     (Term.app `abv [(Term.app `a [`n])]))
                    "<"
                    `P))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    («term_=_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                      ", "
                      (Term.app `abv [(Term.app `a [`n])]))
                     "="
                     (Algebra.Abs.«term|_|»
                      "|"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Term.app `abv [(Term.app `a [`n])]))
                      "|"))
                    ":="
                    (Term.app
                     `Eq.symm
                     [(Term.app
                       `abs_of_nonneg
                       [(Term.app
                         `sum_nonneg
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`x `h] [])]
                            "=>"
                            (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                   (calcStep
                    («term_<_» (Term.hole "_") "<" `P)
                    ":="
                    (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
               []
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `h₁)
                       ","
                       (Tactic.rwRule [] `h₂)
                       ","
                       (Tactic.rwRule [] `h₃)
                       ","
                       (Tactic.rwRule [] `sum_mul)
                       ","
                       (Tactic.rwRule ["←"] `sub_sub)
                       ","
                       (Tactic.rwRule [] `sub_right_comm)
                       ","
                       (Tactic.rwRule [] `sub_self)
                       ","
                       (Tactic.rwRule [] `zero_sub)
                       ","
                       (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                      "]")
                     [])
                    [])
                   (group
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `lt_of_le_of_ltₓ
                      [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                    [])
                   (group
                    (Tactic.tacticSuffices_
                     "suffices"
                     (Term.sufficesDecl
                      []
                      («term_<_»
                       (Init.Logic.«term_+_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                         " in "
                         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                         ", "
                         (Finset.Data.Finset.Fold.«term_*_»
                          (Term.app `abv [(Term.app `a [`i])])
                          "*"
                          (Term.app
                           `abv
                           [(«term_-_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [(«term_-_» `K "-" `i)])
                              ", "
                              (Term.app `b [`k]))
                             "-"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [`K])
                              ", "
                              (Term.app `b [`k])))])))
                        "+"
                        («term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Finset.Data.Finset.Fold.«term_*_»
                           (Term.app `abv [(Term.app `a [`i])])
                           "*"
                           (Term.app
                            `abv
                            [(«term_-_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [(«term_-_» `K "-" `i)])
                               ", "
                               (Term.app `b [`k]))
                              "-"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [`K])
                               ", "
                               (Term.app `b [`k])))])))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                          " in "
                          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                          ", "
                          (Finset.Data.Finset.Fold.«term_*_»
                           (Term.app `abv [(Term.app `a [`i])])
                           "*"
                           (Term.app
                            `abv
                            [(«term_-_»
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [(«term_-_» `K "-" `i)])
                               ", "
                               (Term.app `b [`k]))
                              "-"
                              (Algebra.BigOperators.Basic.«term∑_in_,_»
                               "∑"
                               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                               " in "
                               (Term.app `range [`K])
                               ", "
                               (Term.app `b [`k])))])))))
                       "<"
                       (Init.Logic.«term_+_»
                        (Finset.Data.Finset.Fold.«term_*_»
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                         "*"
                         `P)
                        "+"
                        (Finset.Data.Finset.Fold.«term_*_»
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                         "*"
                         (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                            [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                           [])
                          (group
                           (Tactic.simpa
                            "simpa"
                            []
                            []
                            ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                            []
                            [])
                           [])])))))
                    [])
                   (group
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `add_lt_add
                      [(Term.app
                        `lt_of_le_of_ltₓ
                        [`hsumlesum
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.«tactic_<;>_»
                               (Tactic.rwSeq
                                "rw"
                                []
                                (Tactic.rwRuleSeq
                                 "["
                                 [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                                 "]")
                                [])
                               "<;>"
                               (Tactic.exact
                                "exact"
                                (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                              [])])))])
                       (Term.hole "_")]))
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                      "]")
                     [])
                    [])
                   (group
                    (tacticCalc_
                     "calc"
                     [(calcStep
                       («term_≤_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                         " in "
                         (Term.app
                          (Term.proj (Term.app `range [`K]) "." `filter)
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`k] [])]
                             "=>"
                             («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                         ", "
                         (Finset.Data.Finset.Fold.«term_*_»
                          (Term.app `abv [(Term.app `a [`i])])
                          "*"
                          (Term.app
                           `abv
                           [(«term_-_»
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [(«term_-_» `K "-" `i)])
                              ", "
                              (Term.app `b [`k]))
                             "-"
                             (Algebra.BigOperators.Basic.«term∑_in_,_»
                              "∑"
                              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                              " in "
                              (Term.app `range [`K])
                              ", "
                              (Term.app `b [`k])))])))
                        "≤"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                         " in "
                         (Term.app
                          (Term.proj (Term.app `range [`K]) "." `filter)
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`k] [])]
                             "=>"
                             («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                         ", "
                         (Finset.Data.Finset.Fold.«term_*_»
                          (Term.app `abv [(Term.app `a [`i])])
                          "*"
                          (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                       ":="
                       (Term.app
                        `sum_le_sum
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`n `hn] [])]
                           "=>"
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.refine'
                                 "refine'"
                                 (Term.app
                                  `mul_le_mul_of_nonneg_left
                                  [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                                [])
                               (group
                                (Tactic.rwSeq
                                 "rw"
                                 []
                                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]")
                                 [])
                                [])
                               (group
                                (Tactic.refine'
                                 "refine'"
                                 (Term.app
                                  `le_transₓ
                                  [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                   (Term.hole "_")]))
                                [])
                               (group
                                (Tactic.rwSeq
                                 "rw"
                                 []
                                 (Tactic.rwRuleSeq
                                  "["
                                  [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                  "]")
                                 [])
                                [])
                               (group
                                (Tactic.exact
                                 "exact"
                                 (Term.app
                                  `add_le_add
                                  [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                   (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                                [])])))))]))
                      (calcStep
                       («term_<_»
                        (Term.hole "_")
                        "<"
                        (Finset.Data.Finset.Fold.«term_*_»
                         («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                         "*"
                         (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.«tactic_<;>_»
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule ["←"] `sum_mul)
                                ","
                                (Tactic.rwRule
                                 ["←"]
                                 (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                               "]")
                              [])
                             "<;>"
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               (Term.proj
                                («term_$__»
                                 `mul_lt_mul_right
                                 "$"
                                 (Term.byTactic
                                  "by"
                                  (Tactic.tacticSeq
                                   (Tactic.tacticSeq1Indented
                                    [(group
                                      (Tactic.«tactic_<;>_»
                                       (Tactic.rwSeq
                                        "rw"
                                        []
                                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]")
                                        [])
                                       "<;>"
                                       (Tactic.exact
                                        "exact"
                                        (Term.app
                                         `add_pos
                                         [(Term.app
                                           `lt_of_le_of_ltₓ
                                           [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                            (Term.app `hQ [(numLit "0")])])
                                          (Term.app
                                           `lt_of_le_of_ltₓ
                                           [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                            (Term.app `hQ [(numLit "0")])])])))
                                      [])]))))
                                "."
                                (fieldIdx "2"))
                               [(Term.app
                                 `lt_of_le_of_ltₓ
                                 [(Term.app `le_abs_self [(Term.hole "_")])
                                  (Term.app
                                   `hM
                                   [(Term.hole "_")
                                    (Term.hole "_")
                                    (Term.app
                                     `le_transₓ
                                     [(Term.app
                                       `Nat.le_succ_of_leₓ
                                       [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                      (Term.app `le_of_ltₓ [`hNMK])])
                                    (Term.app
                                     `Nat.le_succ_of_leₓ
                                     [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                            [])]))))])
                    [])]))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`K])
         ", "
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
          " in "
          (Term.app `range [(Init.Logic.«term_+_» `m "+" (numLit "1"))])
          ", "
          (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`k]) "*" (Term.app `b [(«term_-_» `m "-" `k)]))))
        "="
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`K])
         ", "
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
          " in "
          (Term.app `range [(«term_-_» `K "-" `m)])
          ", "
          (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simpa
           "simpa"
           []
           []
           []
           []
           ["using"
            (Term.app
             `sum_range_diag_flip
             [`K
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`m `n] [])]
                "=>"
                (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`m]) "*" (Term.app `b [`n]))))])])
          [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₂ []]
      [(Term.typeSpec
        ":"
        («term_=_»
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`i] [])]
           "=>"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [(«term_-_» `K "-" `i)])
            ", "
            (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
         "="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`i] [])]
           "=>"
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `a [`i])
            "*"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [(«term_-_» `K "-" `i)])
             ", "
             (Term.app `b [`k])))))))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₃ []]
       [(Term.typeSpec
         ":"
         («term_=_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [`K])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `a [`i])
            "*"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [(«term_-_» `K "-" `i)])
             ", "
             (Term.app `b [`k]))))
          "="
          (Init.Logic.«term_+_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [`K])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `a [`i])
             "*"
             («term_-_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(«term_-_» `K "-" `i)])
               ", "
               (Term.app `b [`k]))
              "-"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Term.app `b [`k])))))
           "+"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [`K])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `a [`i])
             "*"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Term.app `b [`k])))))))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
             "<;>"
             (Tactic.simp
              "simp"
              []
              []
              ["["
               [(Tactic.simpLemma
                 []
                 []
                 (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
               "]"]
              []))
            [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`two_mul_two []]
        [(Term.typeSpec
          ":"
          («term_=_»
           (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
           "="
           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hQ0 []]
         [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`h] [])]
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.simpa
                 "simpa"
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                 []
                 ["using" `hQε0])
                [])])))))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h2Q0 []]
          [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
          ":="
          (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hε []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Init.Logic.«term_+_»
               (Finset.Data.Finset.Fold.«term_*_»
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                "*"
                `P)
               "+"
               (Finset.Data.Finset.Fold.«term_*_»
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                "*"
                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
              "="
              `ε))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                   ","
                   (Tactic.rwRule
                    []
                    (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                   ","
                   (Tactic.rwRule [] `two_mul_two)
                   ","
                   (Tactic.rwRule [] `mul_assocₓ)
                   ","
                   (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                   ","
                   (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                   ","
                   (Tactic.rwRule [] `add_halves)]
                  "]")
                 [])
                [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hNMK []]
            [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
            ":="
            (Term.app
             `lt_of_lt_of_leₓ
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                    "<;>"
                    (Tactic.exact
                     "exact"
                     (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                   [])])))
              `hK])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hKN []]
             [(Term.typeSpec ":" («term_<_» `N "<" `K))]
             ":="
             (calc
              "calc"
              [(calcStep
                («term_≤_» `N "≤" (Term.app `max [`N `M]))
                ":="
                (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
               (calcStep
                («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
                ":="
                (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
               (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hsumlesum []]
              [(Term.typeSpec
                ":"
                («term_≤_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Term.app
                    `abv
                    [(«term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))])))
                 "≤"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
              ":="
              (Term.app
               `sum_le_sum
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`m `hmJ] [])]
                  "=>"
                  (Term.app
                   `mul_le_mul_of_nonneg_left
                   [(Term.app
                     `le_of_ltₓ
                     [(Term.app
                       `hN
                       [(«term_-_» `K "-" `m)
                        `K
                        (Term.app
                         `le_tsub_of_add_le_left
                         [(Term.app
                           `le_transₓ
                           [(Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.«tactic_<;>_»
                                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                  "<;>"
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    `add_le_add
                                    [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                     (Term.app
                                      `le_transₓ
                                      [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                       (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                 [])])))
                            `hK])])
                        (Term.app `le_of_ltₓ [`hKN])])])
                    (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hsumltP []]
               [(Term.typeSpec
                 ":"
                 («term_<_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                   ", "
                   (Term.app `abv [(Term.app `a [`n])]))
                  "<"
                  `P))]
               ":="
               (calc
                "calc"
                [(calcStep
                  («term_=_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Term.app `abv [(Term.app `a [`n])]))
                   "="
                   (Algebra.Abs.«term|_|»
                    "|"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                     " in "
                     (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                     ", "
                     (Term.app `abv [(Term.app `a [`n])]))
                    "|"))
                  ":="
                  (Term.app
                   `Eq.symm
                   [(Term.app
                     `abs_of_nonneg
                     [(Term.app
                       `sum_nonneg
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`x `h] [])]
                          "=>"
                          (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                 (calcStep
                  («term_<_» (Term.hole "_") "<" `P)
                  ":="
                  (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
             []
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `h₁)
                     ","
                     (Tactic.rwRule [] `h₂)
                     ","
                     (Tactic.rwRule [] `h₃)
                     ","
                     (Tactic.rwRule [] `sum_mul)
                     ","
                     (Tactic.rwRule ["←"] `sub_sub)
                     ","
                     (Tactic.rwRule [] `sub_right_comm)
                     ","
                     (Tactic.rwRule [] `sub_self)
                     ","
                     (Tactic.rwRule [] `zero_sub)
                     ","
                     (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `lt_of_le_of_ltₓ
                    [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                  [])
                 (group
                  (Tactic.tacticSuffices_
                   "suffices"
                   (Term.sufficesDecl
                    []
                    («term_<_»
                     (Init.Logic.«term_+_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Term.app
                         `abv
                         [(«term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [(«term_-_» `K "-" `i)])
                            ", "
                            (Term.app `b [`k]))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Term.app `b [`k])))])))
                      "+"
                      («term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `abv [(Term.app `a [`i])])
                         "*"
                         (Term.app
                          `abv
                          [(«term_-_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [(«term_-_» `K "-" `i)])
                             ", "
                             (Term.app `b [`k]))
                            "-"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [`K])
                             ", "
                             (Term.app `b [`k])))])))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                        " in "
                        (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                        ", "
                        (Finset.Data.Finset.Fold.«term_*_»
                         (Term.app `abv [(Term.app `a [`i])])
                         "*"
                         (Term.app
                          `abv
                          [(«term_-_»
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [(«term_-_» `K "-" `i)])
                             ", "
                             (Term.app `b [`k]))
                            "-"
                            (Algebra.BigOperators.Basic.«term∑_in_,_»
                             "∑"
                             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                             " in "
                             (Term.app `range [`K])
                             ", "
                             (Term.app `b [`k])))])))))
                     "<"
                     (Init.Logic.«term_+_»
                      (Finset.Data.Finset.Fold.«term_*_»
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                       "*"
                       `P)
                      "+"
                      (Finset.Data.Finset.Fold.«term_*_»
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                       "*"
                       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                          [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                         [])
                        (group
                         (Tactic.simpa
                          "simpa"
                          []
                          []
                          ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                          []
                          [])
                         [])])))))
                  [])
                 (group
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `add_lt_add
                    [(Term.app
                      `lt_of_le_of_ltₓ
                      [`hsumlesum
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.«tactic_<;>_»
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                               "]")
                              [])
                             "<;>"
                             (Tactic.exact
                              "exact"
                              (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                            [])])))])
                     (Term.hole "_")]))
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                    "]")
                   [])
                  [])
                 (group
                  (tacticCalc_
                   "calc"
                   [(calcStep
                     («term_≤_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app
                        (Term.proj (Term.app `range [`K]) "." `filter)
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`k] [])]
                           "=>"
                           («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Term.app
                         `abv
                         [(«term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [(«term_-_» `K "-" `i)])
                            ", "
                            (Term.app `b [`k]))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Term.app `b [`k])))])))
                      "≤"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app
                        (Term.proj (Term.app `range [`K]) "." `filter)
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`k] [])]
                           "=>"
                           («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                     ":="
                     (Term.app
                      `sum_le_sum
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`n `hn] [])]
                         "=>"
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.refine'
                               "refine'"
                               (Term.app
                                `mul_le_mul_of_nonneg_left
                                [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                              [])
                             (group
                              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                              [])
                             (group
                              (Tactic.refine'
                               "refine'"
                               (Term.app
                                `le_transₓ
                                [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                 (Term.hole "_")]))
                              [])
                             (group
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                                "]")
                               [])
                              [])
                             (group
                              (Tactic.exact
                               "exact"
                               (Term.app
                                `add_le_add
                                [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                 (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                              [])])))))]))
                    (calcStep
                     («term_<_»
                      (Term.hole "_")
                      "<"
                      (Finset.Data.Finset.Fold.«term_*_»
                       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                       "*"
                       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.«tactic_<;>_»
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule ["←"] `sum_mul)
                              ","
                              (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                             "]")
                            [])
                           "<;>"
                           (Tactic.refine'
                            "refine'"
                            (Term.app
                             (Term.proj
                              («term_$__»
                               `mul_lt_mul_right
                               "$"
                               (Term.byTactic
                                "by"
                                (Tactic.tacticSeq
                                 (Tactic.tacticSeq1Indented
                                  [(group
                                    (Tactic.«tactic_<;>_»
                                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                     "<;>"
                                     (Tactic.exact
                                      "exact"
                                      (Term.app
                                       `add_pos
                                       [(Term.app
                                         `lt_of_le_of_ltₓ
                                         [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                          (Term.app `hQ [(numLit "0")])])
                                        (Term.app
                                         `lt_of_le_of_ltₓ
                                         [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                          (Term.app `hQ [(numLit "0")])])])))
                                    [])]))))
                              "."
                              (fieldIdx "2"))
                             [(Term.app
                               `lt_of_le_of_ltₓ
                               [(Term.app `le_abs_self [(Term.hole "_")])
                                (Term.app
                                 `hM
                                 [(Term.hole "_")
                                  (Term.hole "_")
                                  (Term.app
                                   `le_transₓ
                                   [(Term.app
                                     `Nat.le_succ_of_leₓ
                                     [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                    (Term.app `le_of_ltₓ [`hNMK])])
                                  (Term.app
                                   `Nat.le_succ_of_leₓ
                                   [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                          [])]))))])
                  [])]))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`i] [])]
          "=>"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
           " in "
           (Term.app `range [(«term_-_» `K "-" `i)])
           ", "
           (Finset.Data.Finset.Fold.«term_*_» (Term.app `a [`i]) "*" (Term.app `b [`k])))))
        "="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`i] [])]
          "=>"
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `a [`i])
           "*"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [(«term_-_» `K "-" `i)])
            ", "
            (Term.app `b [`k])))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Finset.mul_sum)] "]"] []) [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₃ []]
      [(Term.typeSpec
        ":"
        («term_=_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [`K])
          ", "
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `a [`i])
           "*"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [(«term_-_» `K "-" `i)])
            ", "
            (Term.app `b [`k]))))
         "="
         (Init.Logic.«term_+_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [`K])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `a [`i])
            "*"
            («term_-_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(«term_-_» `K "-" `i)])
              ", "
              (Term.app `b [`k]))
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Term.app `b [`k])))))
          "+"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [`K])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `a [`i])
            "*"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Term.app `b [`k])))))))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma
                []
                []
                (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
              "]"]
             []))
           [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`two_mul_two []]
       [(Term.typeSpec
         ":"
         («term_=_»
          (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
          "="
          (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hQ0 []]
        [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`h] [])]
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.simpa
                "simpa"
                []
                []
                ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
                []
                ["using" `hQε0])
               [])])))))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h2Q0 []]
         [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
         ":="
         (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hε []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Init.Logic.«term_+_»
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
               "*"
               `P)
              "+"
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
               "*"
               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
             "="
             `ε))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                  ","
                  (Tactic.rwRule [] `two_mul_two)
                  ","
                  (Tactic.rwRule [] `mul_assocₓ)
                  ","
                  (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                  ","
                  (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                  ","
                  (Tactic.rwRule [] `add_halves)]
                 "]")
                [])
               [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hNMK []]
           [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
           ":="
           (Term.app
            `lt_of_lt_of_leₓ
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                   "<;>"
                   (Tactic.exact
                    "exact"
                    (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                  [])])))
             `hK])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hKN []]
            [(Term.typeSpec ":" («term_<_» `N "<" `K))]
            ":="
            (calc
             "calc"
             [(calcStep
               («term_≤_» `N "≤" (Term.app `max [`N `M]))
               ":="
               (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
              (calcStep
               («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
               ":="
               (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
              (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hsumlesum []]
             [(Term.typeSpec
               ":"
               («term_≤_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Term.app
                   `abv
                   [(«term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))])))
                "≤"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
             ":="
             (Term.app
              `sum_le_sum
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`m `hmJ] [])]
                 "=>"
                 (Term.app
                  `mul_le_mul_of_nonneg_left
                  [(Term.app
                    `le_of_ltₓ
                    [(Term.app
                      `hN
                      [(«term_-_» `K "-" `m)
                       `K
                       (Term.app
                        `le_tsub_of_add_le_left
                        [(Term.app
                          `le_transₓ
                          [(Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.«tactic_<;>_»
                                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                 "<;>"
                                 (Tactic.exact
                                  "exact"
                                  (Term.app
                                   `add_le_add
                                   [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                    (Term.app
                                     `le_transₓ
                                     [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                      (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                                [])])))
                           `hK])])
                       (Term.app `le_of_ltₓ [`hKN])])])
                   (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hsumltP []]
              [(Term.typeSpec
                ":"
                («term_<_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Term.app `abv [(Term.app `a [`n])]))
                 "<"
                 `P))]
              ":="
              (calc
               "calc"
               [(calcStep
                 («term_=_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                   ", "
                   (Term.app `abv [(Term.app `a [`n])]))
                  "="
                  (Algebra.Abs.«term|_|»
                   "|"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Term.app `abv [(Term.app `a [`n])]))
                   "|"))
                 ":="
                 (Term.app
                  `Eq.symm
                  [(Term.app
                    `abs_of_nonneg
                    [(Term.app
                      `sum_nonneg
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`x `h] [])]
                         "=>"
                         (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
                (calcStep
                 («term_<_» (Term.hole "_") "<" `P)
                 ":="
                 (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
            []
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `h₁)
                    ","
                    (Tactic.rwRule [] `h₂)
                    ","
                    (Tactic.rwRule [] `h₃)
                    ","
                    (Tactic.rwRule [] `sum_mul)
                    ","
                    (Tactic.rwRule ["←"] `sub_sub)
                    ","
                    (Tactic.rwRule [] `sub_right_comm)
                    ","
                    (Tactic.rwRule [] `sub_self)
                    ","
                    (Tactic.rwRule [] `zero_sub)
                    ","
                    (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `lt_of_le_of_ltₓ
                   [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                 [])
                (group
                 (Tactic.tacticSuffices_
                  "suffices"
                  (Term.sufficesDecl
                   []
                   («term_<_»
                    (Init.Logic.«term_+_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Term.app
                        `abv
                        [(«term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))])))
                     "+"
                     («term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Term.app
                         `abv
                         [(«term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [(«term_-_» `K "-" `i)])
                            ", "
                            (Term.app `b [`k]))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Term.app `b [`k])))])))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                       " in "
                       (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                       ", "
                       (Finset.Data.Finset.Fold.«term_*_»
                        (Term.app `abv [(Term.app `a [`i])])
                        "*"
                        (Term.app
                         `abv
                         [(«term_-_»
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [(«term_-_» `K "-" `i)])
                            ", "
                            (Term.app `b [`k]))
                           "-"
                           (Algebra.BigOperators.Basic.«term∑_in_,_»
                            "∑"
                            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                            " in "
                            (Term.app `range [`K])
                            ", "
                            (Term.app `b [`k])))])))))
                    "<"
                    (Init.Logic.«term_+_»
                     (Finset.Data.Finset.Fold.«term_*_»
                      («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                      "*"
                      `P)
                     "+"
                     (Finset.Data.Finset.Fold.«term_*_»
                      («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                      "*"
                      (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                        [])
                       (group
                        (Tactic.simpa
                         "simpa"
                         []
                         []
                         ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                         []
                         [])
                        [])])))))
                 [])
                (group
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `add_lt_add
                   [(Term.app
                     `lt_of_le_of_ltₓ
                     [`hsumlesum
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.«tactic_<;>_»
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                              "]")
                             [])
                            "<;>"
                            (Tactic.exact
                             "exact"
                             (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                           [])])))])
                    (Term.hole "_")]))
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                   "]")
                  [])
                 [])
                (group
                 (tacticCalc_
                  "calc"
                  [(calcStep
                    («term_≤_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app
                       (Term.proj (Term.app `range [`K]) "." `filter)
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`k] [])]
                          "=>"
                          («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Term.app
                        `abv
                        [(«term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))])))
                     "≤"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app
                       (Term.proj (Term.app `range [`K]) "." `filter)
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`k] [])]
                          "=>"
                          («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                    ":="
                    (Term.app
                     `sum_le_sum
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`n `hn] [])]
                        "=>"
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               `mul_le_mul_of_nonneg_left
                               [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                             [])
                            (group
                             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                             [])
                            (group
                             (Tactic.refine'
                              "refine'"
                              (Term.app
                               `le_transₓ
                               [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                             [])
                            (group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.exact
                              "exact"
                              (Term.app
                               `add_le_add
                               [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                                (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                             [])])))))]))
                   (calcStep
                    («term_<_»
                     (Term.hole "_")
                     "<"
                     (Finset.Data.Finset.Fold.«term_*_»
                      («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                      "*"
                      (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.«tactic_<;>_»
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule ["←"] `sum_mul)
                             ","
                             (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                            "]")
                           [])
                          "<;>"
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            (Term.proj
                             («term_$__»
                              `mul_lt_mul_right
                              "$"
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.«tactic_<;>_»
                                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                    "<;>"
                                    (Tactic.exact
                                     "exact"
                                     (Term.app
                                      `add_pos
                                      [(Term.app
                                        `lt_of_le_of_ltₓ
                                        [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                         (Term.app `hQ [(numLit "0")])])
                                       (Term.app
                                        `lt_of_le_of_ltₓ
                                        [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                         (Term.app `hQ [(numLit "0")])])])))
                                   [])]))))
                             "."
                             (fieldIdx "2"))
                            [(Term.app
                              `lt_of_le_of_ltₓ
                              [(Term.app `le_abs_self [(Term.hole "_")])
                               (Term.app
                                `hM
                                [(Term.hole "_")
                                 (Term.hole "_")
                                 (Term.app
                                  `le_transₓ
                                  [(Term.app
                                    `Nat.le_succ_of_leₓ
                                    [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                   (Term.app `le_of_ltₓ [`hNMK])])
                                 (Term.app
                                  `Nat.le_succ_of_leₓ
                                  [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                         [])]))))])
                 [])])))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₃ []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
         " in "
         (Term.app `range [`K])
         ", "
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `a [`i])
          "*"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
           " in "
           (Term.app `range [(«term_-_» `K "-" `i)])
           ", "
           (Term.app `b [`k]))))
        "="
        (Init.Logic.«term_+_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [`K])
          ", "
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `a [`i])
           "*"
           («term_-_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [(«term_-_» `K "-" `i)])
             ", "
             (Term.app `b [`k]))
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Term.app `b [`k])))))
         "+"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [`K])
          ", "
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `a [`i])
           "*"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [`K])
            ", "
            (Term.app `b [`k])))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_add_distrib)] "]") [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma
               []
               []
               (Term.proj (Term.app `mul_addₓ [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) "." `symm))]
             "]"]
            []))
          [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`two_mul_two []]
      [(Term.typeSpec
        ":"
        («term_=_»
         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
         "="
         (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hQ0 []]
       [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`h] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.simpa
               "simpa"
               []
               []
               ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
               []
               ["using" `hQε0])
              [])])))))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h2Q0 []]
        [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
        ":="
        (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hε []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Init.Logic.«term_+_»
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
              "*"
              `P)
             "+"
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
              "*"
              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
            "="
            `ε))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                 ","
                 (Tactic.rwRule
                  []
                  (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                 ","
                 (Tactic.rwRule [] `two_mul_two)
                 ","
                 (Tactic.rwRule [] `mul_assocₓ)
                 ","
                 (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                 ","
                 (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                 ","
                 (Tactic.rwRule [] `add_halves)]
                "]")
               [])
              [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hNMK []]
          [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
          ":="
          (Term.app
           `lt_of_lt_of_leₓ
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                  "<;>"
                  (Tactic.exact
                   "exact"
                   (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                 [])])))
            `hK])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hKN []]
           [(Term.typeSpec ":" («term_<_» `N "<" `K))]
           ":="
           (calc
            "calc"
            [(calcStep
              («term_≤_» `N "≤" (Term.app `max [`N `M]))
              ":="
              (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
             (calcStep
              («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
              ":="
              (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
             (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hsumlesum []]
            [(Term.typeSpec
              ":"
              («term_≤_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Term.app
                  `abv
                  [(«term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))])))
               "≤"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
            ":="
            (Term.app
             `sum_le_sum
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`m `hmJ] [])]
                "=>"
                (Term.app
                 `mul_le_mul_of_nonneg_left
                 [(Term.app
                   `le_of_ltₓ
                   [(Term.app
                     `hN
                     [(«term_-_» `K "-" `m)
                      `K
                      (Term.app
                       `le_tsub_of_add_le_left
                       [(Term.app
                         `le_transₓ
                         [(Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.«tactic_<;>_»
                                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                "<;>"
                                (Tactic.exact
                                 "exact"
                                 (Term.app
                                  `add_le_add
                                  [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                   (Term.app
                                    `le_transₓ
                                    [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                     (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                               [])])))
                          `hK])])
                      (Term.app `le_of_ltₓ [`hKN])])])
                  (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hsumltP []]
             [(Term.typeSpec
               ":"
               («term_<_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Term.app `abv [(Term.app `a [`n])]))
                "<"
                `P))]
             ":="
             (calc
              "calc"
              [(calcStep
                («term_=_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Term.app `abv [(Term.app `a [`n])]))
                 "="
                 (Algebra.Abs.«term|_|»
                  "|"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                   ", "
                   (Term.app `abv [(Term.app `a [`n])]))
                  "|"))
                ":="
                (Term.app
                 `Eq.symm
                 [(Term.app
                   `abs_of_nonneg
                   [(Term.app
                     `sum_nonneg
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`x `h] [])]
                        "=>"
                        (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
               (calcStep
                («term_<_» (Term.hole "_") "<" `P)
                ":="
                (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
           []
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `h₁)
                   ","
                   (Tactic.rwRule [] `h₂)
                   ","
                   (Tactic.rwRule [] `h₃)
                   ","
                   (Tactic.rwRule [] `sum_mul)
                   ","
                   (Tactic.rwRule ["←"] `sub_sub)
                   ","
                   (Tactic.rwRule [] `sub_right_comm)
                   ","
                   (Tactic.rwRule [] `sub_self)
                   ","
                   (Tactic.rwRule [] `zero_sub)
                   ","
                   (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                  "]")
                 [])
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `lt_of_le_of_ltₓ
                  [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                [])
               (group
                (Tactic.tacticSuffices_
                 "suffices"
                 (Term.sufficesDecl
                  []
                  («term_<_»
                   (Init.Logic.«term_+_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `abv [(Term.app `a [`i])])
                      "*"
                      (Term.app
                       `abv
                       [(«term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [(«term_-_» `K "-" `i)])
                          ", "
                          (Term.app `b [`k]))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))])))
                    "+"
                    («term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Term.app
                        `abv
                        [(«term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))])))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      " in "
                      (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                      ", "
                      (Finset.Data.Finset.Fold.«term_*_»
                       (Term.app `abv [(Term.app `a [`i])])
                       "*"
                       (Term.app
                        `abv
                        [(«term_-_»
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [(«term_-_» `K "-" `i)])
                           ", "
                           (Term.app `b [`k]))
                          "-"
                          (Algebra.BigOperators.Basic.«term∑_in_,_»
                           "∑"
                           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                           " in "
                           (Term.app `range [`K])
                           ", "
                           (Term.app `b [`k])))])))))
                   "<"
                   (Init.Logic.«term_+_»
                    (Finset.Data.Finset.Fold.«term_*_»
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                     "*"
                     `P)
                    "+"
                    (Finset.Data.Finset.Fold.«term_*_»
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                     "*"
                     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                       [])
                      (group
                       (Tactic.simpa
                        "simpa"
                        []
                        []
                        ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"]
                        []
                        [])
                       [])])))))
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `add_lt_add
                  [(Term.app
                    `lt_of_le_of_ltₓ
                    [`hsumlesum
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.«tactic_<;>_»
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)]
                             "]")
                            [])
                           "<;>"
                           (Tactic.exact
                            "exact"
                            (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                          [])])))])
                   (Term.hole "_")]))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                  "]")
                 [])
                [])
               (group
                (tacticCalc_
                 "calc"
                 [(calcStep
                   («term_≤_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app
                      (Term.proj (Term.app `range [`K]) "." `filter)
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`k] [])]
                         "=>"
                         («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `abv [(Term.app `a [`i])])
                      "*"
                      (Term.app
                       `abv
                       [(«term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [(«term_-_» `K "-" `i)])
                          ", "
                          (Term.app `b [`k]))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))])))
                    "≤"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app
                      (Term.proj (Term.app `range [`K]) "." `filter)
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`k] [])]
                         "=>"
                         («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `abv [(Term.app `a [`i])])
                      "*"
                      (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                   ":="
                   (Term.app
                    `sum_le_sum
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`n `hn] [])]
                       "=>"
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.refine'
                             "refine'"
                             (Term.app
                              `mul_le_mul_of_nonneg_left
                              [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                            [])
                           (group
                            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                            [])
                           (group
                            (Tactic.refine'
                             "refine'"
                             (Term.app
                              `le_transₓ
                              [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                            [])
                           (group
                            (Tactic.rwSeq
                             "rw"
                             []
                             (Tactic.rwRuleSeq
                              "["
                              [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                              "]")
                             [])
                            [])
                           (group
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `add_le_add
                              [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                               (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                            [])])))))]))
                  (calcStep
                   («term_<_»
                    (Term.hole "_")
                    "<"
                    (Finset.Data.Finset.Fold.«term_*_»
                     («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                     "*"
                     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.«tactic_<;>_»
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule ["←"] `sum_mul)
                            ","
                            (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                           "]")
                          [])
                         "<;>"
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           (Term.proj
                            («term_$__»
                             `mul_lt_mul_right
                             "$"
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.«tactic_<;>_»
                                   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                   "<;>"
                                   (Tactic.exact
                                    "exact"
                                    (Term.app
                                     `add_pos
                                     [(Term.app
                                       `lt_of_le_of_ltₓ
                                       [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                        (Term.app `hQ [(numLit "0")])])
                                      (Term.app
                                       `lt_of_le_of_ltₓ
                                       [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                        (Term.app `hQ [(numLit "0")])])])))
                                  [])]))))
                            "."
                            (fieldIdx "2"))
                           [(Term.app
                             `lt_of_le_of_ltₓ
                             [(Term.app `le_abs_self [(Term.hole "_")])
                              (Term.app
                               `hM
                               [(Term.hole "_")
                                (Term.hole "_")
                                (Term.app
                                 `le_transₓ
                                 [(Term.app
                                   `Nat.le_succ_of_leₓ
                                   [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                  (Term.app `le_of_ltₓ [`hNMK])])
                                (Term.app
                                 `Nat.le_succ_of_leₓ
                                 [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                        [])]))))])
                [])]))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`two_mul_two []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" `α)]] ")")
        "="
        (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (numLit "2"))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hQ0 []]
      [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`h] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.simpa
              "simpa"
              []
              []
              ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
              []
              ["using" `hQε0])
             [])])))))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h2Q0 []]
       [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
       ":="
       (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hε []]
        [(Term.typeSpec
          ":"
          («term_=_»
           (Init.Logic.«term_+_»
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
             "*"
             `P)
            "+"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
             "*"
             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
           "="
           `ε))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
                ","
                (Tactic.rwRule
                 []
                 (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
                ","
                (Tactic.rwRule [] `two_mul_two)
                ","
                (Tactic.rwRule [] `mul_assocₓ)
                ","
                (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                ","
                (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
                ","
                (Tactic.rwRule [] `add_halves)]
               "]")
              [])
             [])])))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hNMK []]
         [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
         ":="
         (Term.app
          `lt_of_lt_of_leₓ
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.«tactic_<;>_»
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                 "<;>"
                 (Tactic.exact
                  "exact"
                  (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
                [])])))
           `hK])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hKN []]
          [(Term.typeSpec ":" («term_<_» `N "<" `K))]
          ":="
          (calc
           "calc"
           [(calcStep
             («term_≤_» `N "≤" (Term.app `max [`N `M]))
             ":="
             (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
            (calcStep
             («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
             ":="
             (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
            (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hsumlesum []]
           [(Term.typeSpec
             ":"
             («term_≤_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Term.app
                 `abv
                 [(«term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))])))
              "≤"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
           ":="
           (Term.app
            `sum_le_sum
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`m `hmJ] [])]
               "=>"
               (Term.app
                `mul_le_mul_of_nonneg_left
                [(Term.app
                  `le_of_ltₓ
                  [(Term.app
                    `hN
                    [(«term_-_» `K "-" `m)
                     `K
                     (Term.app
                      `le_tsub_of_add_le_left
                      [(Term.app
                        `le_transₓ
                        [(Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.«tactic_<;>_»
                               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                               "<;>"
                               (Tactic.exact
                                "exact"
                                (Term.app
                                 `add_le_add
                                 [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                  (Term.app
                                   `le_transₓ
                                   [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                    (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                              [])])))
                         `hK])])
                     (Term.app `le_of_ltₓ [`hKN])])])
                 (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hsumltP []]
            [(Term.typeSpec
              ":"
              («term_<_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Term.app `abv [(Term.app `a [`n])]))
               "<"
               `P))]
            ":="
            (calc
             "calc"
             [(calcStep
               («term_=_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Term.app `abv [(Term.app `a [`n])]))
                "="
                (Algebra.Abs.«term|_|»
                 "|"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Term.app `abv [(Term.app `a [`n])]))
                 "|"))
               ":="
               (Term.app
                `Eq.symm
                [(Term.app
                  `abs_of_nonneg
                  [(Term.app
                    `sum_nonneg
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`x `h] [])]
                       "=>"
                       (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
              (calcStep
               («term_<_» (Term.hole "_") "<" `P)
               ":="
               (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
          []
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `h₁)
                  ","
                  (Tactic.rwRule [] `h₂)
                  ","
                  (Tactic.rwRule [] `h₃)
                  ","
                  (Tactic.rwRule [] `sum_mul)
                  ","
                  (Tactic.rwRule ["←"] `sub_sub)
                  ","
                  (Tactic.rwRule [] `sub_right_comm)
                  ","
                  (Tactic.rwRule [] `sub_self)
                  ","
                  (Tactic.rwRule [] `zero_sub)
                  ","
                  (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                 "]")
                [])
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `lt_of_le_of_ltₓ
                 [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
               [])
              (group
               (Tactic.tacticSuffices_
                "suffices"
                (Term.sufficesDecl
                 []
                 («term_<_»
                  (Init.Logic.«term_+_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Term.app
                      `abv
                      [(«term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))])))
                   "+"
                   («term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `abv [(Term.app `a [`i])])
                      "*"
                      (Term.app
                       `abv
                       [(«term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [(«term_-_» `K "-" `i)])
                          ", "
                          (Term.app `b [`k]))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))])))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     " in "
                     (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                     ", "
                     (Finset.Data.Finset.Fold.«term_*_»
                      (Term.app `abv [(Term.app `a [`i])])
                      "*"
                      (Term.app
                       `abv
                       [(«term_-_»
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [(«term_-_» `K "-" `i)])
                          ", "
                          (Term.app `b [`k]))
                         "-"
                         (Algebra.BigOperators.Basic.«term∑_in_,_»
                          "∑"
                          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                          " in "
                          (Term.app `range [`K])
                          ", "
                          (Term.app `b [`k])))])))))
                  "<"
                  (Init.Logic.«term_+_»
                   (Finset.Data.Finset.Fold.«term_*_»
                    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                    "*"
                    `P)
                   "+"
                   (Finset.Data.Finset.Fold.«term_*_»
                    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                    "*"
                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                      [])
                     (group
                      (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                      [])])))))
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `add_lt_add
                 [(Term.app
                   `lt_of_le_of_ltₓ
                   [`hsumlesum
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.«tactic_<;>_»
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                           [])
                          "<;>"
                          (Tactic.exact
                           "exact"
                           (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                         [])])))])
                  (Term.hole "_")]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                 "]")
                [])
               [])
              (group
               (tacticCalc_
                "calc"
                [(calcStep
                  («term_≤_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app
                     (Term.proj (Term.app `range [`K]) "." `filter)
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`k] [])]
                        "=>"
                        («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Term.app
                      `abv
                      [(«term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))])))
                   "≤"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app
                     (Term.proj (Term.app `range [`K]) "." `filter)
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`k] [])]
                        "=>"
                        («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                  ":="
                  (Term.app
                   `sum_le_sum
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`n `hn] [])]
                      "=>"
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.refine'
                            "refine'"
                            (Term.app
                             `mul_le_mul_of_nonneg_left
                             [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                           [])
                          (group
                           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                           [])
                          (group
                           (Tactic.refine'
                            "refine'"
                            (Term.app
                             `le_transₓ
                             [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                           [])
                          (group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                             "]")
                            [])
                           [])
                          (group
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `add_le_add
                             [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                              (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                           [])])))))]))
                 (calcStep
                  («term_<_»
                   (Term.hole "_")
                   "<"
                   (Finset.Data.Finset.Fold.«term_*_»
                    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                    "*"
                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.«tactic_<;>_»
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule ["←"] `sum_mul)
                           ","
                           (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                          "]")
                         [])
                        "<;>"
                        (Tactic.refine'
                         "refine'"
                         (Term.app
                          (Term.proj
                           («term_$__»
                            `mul_lt_mul_right
                            "$"
                            (Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(group
                                 (Tactic.«tactic_<;>_»
                                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                  "<;>"
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    `add_pos
                                    [(Term.app
                                      `lt_of_le_of_ltₓ
                                      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                       (Term.app `hQ [(numLit "0")])])
                                     (Term.app
                                      `lt_of_le_of_ltₓ
                                      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                       (Term.app `hQ [(numLit "0")])])])))
                                 [])]))))
                           "."
                           (fieldIdx "2"))
                          [(Term.app
                            `lt_of_le_of_ltₓ
                            [(Term.app `le_abs_self [(Term.hole "_")])
                             (Term.app
                              `hM
                              [(Term.hole "_")
                               (Term.hole "_")
                               (Term.app
                                `le_transₓ
                                [(Term.app
                                  `Nat.le_succ_of_leₓ
                                  [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                 (Term.app `le_of_ltₓ [`hNMK])])
                               (Term.app
                                `Nat.le_succ_of_leₓ
                                [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                       [])]))))])
               [])])))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hQ0 []]
     [(Term.typeSpec ":" («term_≠_» `Q "≠" (numLit "0")))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`h] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simpa
             "simpa"
             []
             []
             ["[" [(Tactic.simpLemma [] [] `h) "," (Tactic.simpLemma [] [] `lt_irreflₓ)] "]"]
             []
             ["using" `hQε0])
            [])])))))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h2Q0 []]
      [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
      ":="
      (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hε []]
       [(Term.typeSpec
         ":"
         («term_=_»
          (Init.Logic.«term_+_»
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
            "*"
            `P)
           "+"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
            "*"
            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
          "="
          `ε))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
               ","
               (Tactic.rwRule
                []
                (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
               ","
               (Tactic.rwRule [] `two_mul_two)
               ","
               (Tactic.rwRule [] `mul_assocₓ)
               ","
               (Tactic.rwRule ["←"] `div_div_eq_div_mul)
               ","
               (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
               ","
               (Tactic.rwRule [] `add_halves)]
              "]")
             [])
            [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hNMK []]
        [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
        ":="
        (Term.app
         `lt_of_lt_of_leₓ
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                "<;>"
                (Tactic.exact
                 "exact"
                 (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
               [])])))
          `hK])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hKN []]
         [(Term.typeSpec ":" («term_<_» `N "<" `K))]
         ":="
         (calc
          "calc"
          [(calcStep
            («term_≤_» `N "≤" (Term.app `max [`N `M]))
            ":="
            (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
           (calcStep
            («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
            ":="
            (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
           (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hsumlesum []]
          [(Term.typeSpec
            ":"
            («term_≤_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Term.app
                `abv
                [(«term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))])))
             "≤"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
          ":="
          (Term.app
           `sum_le_sum
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`m `hmJ] [])]
              "=>"
              (Term.app
               `mul_le_mul_of_nonneg_left
               [(Term.app
                 `le_of_ltₓ
                 [(Term.app
                   `hN
                   [(«term_-_» `K "-" `m)
                    `K
                    (Term.app
                     `le_tsub_of_add_le_left
                     [(Term.app
                       `le_transₓ
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.«tactic_<;>_»
                              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                              "<;>"
                              (Tactic.exact
                               "exact"
                               (Term.app
                                `add_le_add
                                [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                 (Term.app
                                  `le_transₓ
                                  [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                   (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                             [])])))
                        `hK])])
                    (Term.app `le_of_ltₓ [`hKN])])])
                (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hsumltP []]
           [(Term.typeSpec
             ":"
             («term_<_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Term.app `abv [(Term.app `a [`n])]))
              "<"
              `P))]
           ":="
           (calc
            "calc"
            [(calcStep
              («term_=_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Term.app `abv [(Term.app `a [`n])]))
               "="
               (Algebra.Abs.«term|_|»
                "|"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Term.app `abv [(Term.app `a [`n])]))
                "|"))
              ":="
              (Term.app
               `Eq.symm
               [(Term.app
                 `abs_of_nonneg
                 [(Term.app
                   `sum_nonneg
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`x `h] [])]
                      "=>"
                      (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
             (calcStep
              («term_<_» (Term.hole "_") "<" `P)
              ":="
              (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
         []
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `h₁)
                 ","
                 (Tactic.rwRule [] `h₂)
                 ","
                 (Tactic.rwRule [] `h₃)
                 ","
                 (Tactic.rwRule [] `sum_mul)
                 ","
                 (Tactic.rwRule ["←"] `sub_sub)
                 ","
                 (Tactic.rwRule [] `sub_right_comm)
                 ","
                 (Tactic.rwRule [] `sub_self)
                 ","
                 (Tactic.rwRule [] `zero_sub)
                 ","
                 (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                "]")
               [])
              [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `lt_of_le_of_ltₓ
                [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
              [])
             (group
              (Tactic.tacticSuffices_
               "suffices"
               (Term.sufficesDecl
                []
                («term_<_»
                 (Init.Logic.«term_+_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `abv [(Term.app `a [`i])])
                    "*"
                    (Term.app
                     `abv
                     [(«term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))])))
                  "+"
                  («term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Term.app
                      `abv
                      [(«term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))])))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                    " in "
                    (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                    ", "
                    (Finset.Data.Finset.Fold.«term_*_»
                     (Term.app `abv [(Term.app `a [`i])])
                     "*"
                     (Term.app
                      `abv
                      [(«term_-_»
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [(«term_-_» `K "-" `i)])
                         ", "
                         (Term.app `b [`k]))
                        "-"
                        (Algebra.BigOperators.Basic.«term∑_in_,_»
                         "∑"
                         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                         " in "
                         (Term.app `range [`K])
                         ", "
                         (Term.app `b [`k])))])))))
                 "<"
                 (Init.Logic.«term_+_»
                  (Finset.Data.Finset.Fold.«term_*_»
                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                   "*"
                   `P)
                  "+"
                  (Finset.Data.Finset.Fold.«term_*_»
                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                   "*"
                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                     [])
                    (group
                     (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                     [])])))))
              [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `add_lt_add
                [(Term.app
                  `lt_of_le_of_ltₓ
                  [`hsumlesum
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.«tactic_<;>_»
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                          [])
                         "<;>"
                         (Tactic.exact
                          "exact"
                          (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                        [])])))])
                 (Term.hole "_")]))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                "]")
               [])
              [])
             (group
              (tacticCalc_
               "calc"
               [(calcStep
                 («term_≤_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app
                    (Term.proj (Term.app `range [`K]) "." `filter)
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`k] [])]
                       "=>"
                       («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `abv [(Term.app `a [`i])])
                    "*"
                    (Term.app
                     `abv
                     [(«term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))])))
                  "≤"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app
                    (Term.proj (Term.app `range [`K]) "." `filter)
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`k] [])]
                       "=>"
                       («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `abv [(Term.app `a [`i])])
                    "*"
                    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                 ":="
                 (Term.app
                  `sum_le_sum
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`n `hn] [])]
                     "=>"
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            `mul_le_mul_of_nonneg_left
                            [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                          [])
                         (group
                          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                          [])
                         (group
                          (Tactic.refine'
                           "refine'"
                           (Term.app
                            `le_transₓ
                            [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                          [])
                         (group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                            "]")
                           [])
                          [])
                         (group
                          (Tactic.exact
                           "exact"
                           (Term.app
                            `add_le_add
                            [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                             (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                          [])])))))]))
                (calcStep
                 («term_<_»
                  (Term.hole "_")
                  "<"
                  (Finset.Data.Finset.Fold.«term_*_»
                   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                   "*"
                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["←"] `sum_mul)
                          ","
                          (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                         "]")
                        [])
                       "<;>"
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         (Term.proj
                          («term_$__»
                           `mul_lt_mul_right
                           "$"
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.«tactic_<;>_»
                                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                 "<;>"
                                 (Tactic.exact
                                  "exact"
                                  (Term.app
                                   `add_pos
                                   [(Term.app
                                     `lt_of_le_of_ltₓ
                                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                      (Term.app `hQ [(numLit "0")])])
                                    (Term.app
                                     `lt_of_le_of_ltₓ
                                     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                      (Term.app `hQ [(numLit "0")])])])))
                                [])]))))
                          "."
                          (fieldIdx "2"))
                         [(Term.app
                           `lt_of_le_of_ltₓ
                           [(Term.app `le_abs_self [(Term.hole "_")])
                            (Term.app
                             `hM
                             [(Term.hole "_")
                              (Term.hole "_")
                              (Term.app
                               `le_transₓ
                               [(Term.app
                                 `Nat.le_succ_of_leₓ
                                 [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                                (Term.app `le_of_ltₓ [`hNMK])])
                              (Term.app
                               `Nat.le_succ_of_leₓ
                               [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                      [])]))))])
              [])]))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h2Q0 []]
     [(Term.typeSpec ":" («term_≠_» (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q) "≠" (numLit "0")))]
     ":="
     (Term.app `mul_ne_zero [`two_ne_zero `hQ0])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hε []]
      [(Term.typeSpec
        ":"
        («term_=_»
         (Init.Logic.«term_+_»
          (Finset.Data.Finset.Fold.«term_*_»
           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
           "*"
           `P)
          "+"
          (Finset.Data.Finset.Fold.«term_*_»
           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
           "*"
           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
         "="
         `ε))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
              ","
              (Tactic.rwRule
               []
               (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
              ","
              (Tactic.rwRule [] `two_mul_two)
              ","
              (Tactic.rwRule [] `mul_assocₓ)
              ","
              (Tactic.rwRule ["←"] `div_div_eq_div_mul)
              ","
              (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
              ","
              (Tactic.rwRule [] `add_halves)]
             "]")
            [])
           [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hNMK []]
       [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
       ":="
       (Term.app
        `lt_of_lt_of_leₓ
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
               "<;>"
               (Tactic.exact
                "exact"
                (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
              [])])))
         `hK])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hKN []]
        [(Term.typeSpec ":" («term_<_» `N "<" `K))]
        ":="
        (calc
         "calc"
         [(calcStep
           («term_≤_» `N "≤" (Term.app `max [`N `M]))
           ":="
           (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
          (calcStep
           («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
           ":="
           (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
          (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hsumlesum []]
         [(Term.typeSpec
           ":"
           («term_≤_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Term.app
               `abv
               [(«term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))])))
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
         ":="
         (Term.app
          `sum_le_sum
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`m `hmJ] [])]
             "=>"
             (Term.app
              `mul_le_mul_of_nonneg_left
              [(Term.app
                `le_of_ltₓ
                [(Term.app
                  `hN
                  [(«term_-_» `K "-" `m)
                   `K
                   (Term.app
                    `le_tsub_of_add_le_left
                    [(Term.app
                      `le_transₓ
                      [(Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.«tactic_<;>_»
                             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                             "<;>"
                             (Tactic.exact
                              "exact"
                              (Term.app
                               `add_le_add
                               [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                                (Term.app
                                 `le_transₓ
                                 [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                  (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                            [])])))
                       `hK])])
                   (Term.app `le_of_ltₓ [`hKN])])])
               (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hsumltP []]
          [(Term.typeSpec
            ":"
            («term_<_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Term.app `abv [(Term.app `a [`n])]))
             "<"
             `P))]
          ":="
          (calc
           "calc"
           [(calcStep
             («term_=_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Term.app `abv [(Term.app `a [`n])]))
              "="
              (Algebra.Abs.«term|_|»
               "|"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Term.app `abv [(Term.app `a [`n])]))
               "|"))
             ":="
             (Term.app
              `Eq.symm
              [(Term.app
                `abs_of_nonneg
                [(Term.app
                  `sum_nonneg
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`x `h] [])]
                     "=>"
                     (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
            (calcStep
             («term_<_» (Term.hole "_") "<" `P)
             ":="
             (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
        []
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `h₁)
                ","
                (Tactic.rwRule [] `h₂)
                ","
                (Tactic.rwRule [] `h₃)
                ","
                (Tactic.rwRule [] `sum_mul)
                ","
                (Tactic.rwRule ["←"] `sub_sub)
                ","
                (Tactic.rwRule [] `sub_right_comm)
                ","
                (Tactic.rwRule [] `sub_self)
                ","
                (Tactic.rwRule [] `zero_sub)
                ","
                (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
               "]")
              [])
             [])
            (group
             (Tactic.refine'
              "refine'"
              (Term.app
               `lt_of_le_of_ltₓ
               [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
             [])
            (group
             (Tactic.tacticSuffices_
              "suffices"
              (Term.sufficesDecl
               []
               («term_<_»
                (Init.Logic.«term_+_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Term.app
                    `abv
                    [(«term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))])))
                 "+"
                 («term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `abv [(Term.app `a [`i])])
                    "*"
                    (Term.app
                     `abv
                     [(«term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))])))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                   " in "
                   (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                   ", "
                   (Finset.Data.Finset.Fold.«term_*_»
                    (Term.app `abv [(Term.app `a [`i])])
                    "*"
                    (Term.app
                     `abv
                     [(«term_-_»
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [(«term_-_» `K "-" `i)])
                        ", "
                        (Term.app `b [`k]))
                       "-"
                       (Algebra.BigOperators.Basic.«term∑_in_,_»
                        "∑"
                        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                        " in "
                        (Term.app `range [`K])
                        ", "
                        (Term.app `b [`k])))])))))
                "<"
                (Init.Logic.«term_+_»
                 (Finset.Data.Finset.Fold.«term_*_»
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                  "*"
                  `P)
                 "+"
                 (Finset.Data.Finset.Fold.«term_*_»
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                  "*"
                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                    [])
                   (group
                    (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                    [])])))))
             [])
            (group
             (Tactic.refine'
              "refine'"
              (Term.app
               `add_lt_add
               [(Term.app
                 `lt_of_le_of_ltₓ
                 [`hsumlesum
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.«tactic_<;>_»
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                         [])
                        "<;>"
                        (Tactic.exact
                         "exact"
                         (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                       [])])))])
                (Term.hole "_")]))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
               "]")
              [])
             [])
            (group
             (tacticCalc_
              "calc"
              [(calcStep
                («term_≤_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app
                   (Term.proj (Term.app `range [`K]) "." `filter)
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`k] [])]
                      "=>"
                      («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Term.app
                    `abv
                    [(«term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))])))
                 "≤"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app
                   (Term.proj (Term.app `range [`K]) "." `filter)
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`k] [])]
                      "=>"
                      («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
                ":="
                (Term.app
                 `sum_le_sum
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`n `hn] [])]
                    "=>"
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           `mul_le_mul_of_nonneg_left
                           [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                         [])
                        (group
                         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                         [])
                        (group
                         (Tactic.refine'
                          "refine'"
                          (Term.app
                           `le_transₓ
                           [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                         [])
                        (group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                           "]")
                          [])
                         [])
                        (group
                         (Tactic.exact
                          "exact"
                          (Term.app
                           `add_le_add
                           [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                            (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                         [])])))))]))
               (calcStep
                («term_<_»
                 (Term.hole "_")
                 "<"
                 (Finset.Data.Finset.Fold.«term_*_»
                  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                  "*"
                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule ["←"] `sum_mul)
                         ","
                         (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                        "]")
                       [])
                      "<;>"
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        (Term.proj
                         («term_$__»
                          `mul_lt_mul_right
                          "$"
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.«tactic_<;>_»
                                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                                "<;>"
                                (Tactic.exact
                                 "exact"
                                 (Term.app
                                  `add_pos
                                  [(Term.app
                                    `lt_of_le_of_ltₓ
                                    [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                     (Term.app `hQ [(numLit "0")])])
                                   (Term.app
                                    `lt_of_le_of_ltₓ
                                    [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                     (Term.app `hQ [(numLit "0")])])])))
                               [])]))))
                         "."
                         (fieldIdx "2"))
                        [(Term.app
                          `lt_of_le_of_ltₓ
                          [(Term.app `le_abs_self [(Term.hole "_")])
                           (Term.app
                            `hM
                            [(Term.hole "_")
                             (Term.hole "_")
                             (Term.app
                              `le_transₓ
                              [(Term.app
                                `Nat.le_succ_of_leₓ
                                [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                               (Term.app `le_of_ltₓ [`hNMK])])
                             (Term.app
                              `Nat.le_succ_of_leₓ
                              [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                     [])]))))])
             [])])))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hε []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Init.Logic.«term_+_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
          "*"
          `P)
         "+"
         (Finset.Data.Finset.Fold.«term_*_»
          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
          "*"
          (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
        "="
        `ε))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule ["←"] `div_div_eq_div_mul)
             ","
             (Tactic.rwRule
              []
              (Term.app `div_mul_cancel [(Term.hole "_") (Term.app `Ne.symm [(Term.app `ne_of_ltₓ [`hP0])])]))
             ","
             (Tactic.rwRule [] `two_mul_two)
             ","
             (Tactic.rwRule [] `mul_assocₓ)
             ","
             (Tactic.rwRule ["←"] `div_div_eq_div_mul)
             ","
             (Tactic.rwRule [] (Term.app `div_mul_cancel [(Term.hole "_") `h2Q0]))
             ","
             (Tactic.rwRule [] `add_halves)]
            "]")
           [])
          [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hNMK []]
      [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
      ":="
      (Term.app
       `lt_of_lt_of_leₓ
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
              "<;>"
              (Tactic.exact
               "exact"
               (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
             [])])))
        `hK])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hKN []]
       [(Term.typeSpec ":" («term_<_» `N "<" `K))]
       ":="
       (calc
        "calc"
        [(calcStep
          («term_≤_» `N "≤" (Term.app `max [`N `M]))
          ":="
          (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
         (calcStep
          («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
          ":="
          (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
         (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hsumlesum []]
        [(Term.typeSpec
          ":"
          («term_≤_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `a [`i])])
             "*"
             (Term.app
              `abv
              [(«term_-_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k]))
                "-"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Term.app `b [`k])))])))
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `a [`i])])
             "*"
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
        ":="
        (Term.app
         `sum_le_sum
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`m `hmJ] [])]
            "=>"
            (Term.app
             `mul_le_mul_of_nonneg_left
             [(Term.app
               `le_of_ltₓ
               [(Term.app
                 `hN
                 [(«term_-_» `K "-" `m)
                  `K
                  (Term.app
                   `le_tsub_of_add_le_left
                   [(Term.app
                     `le_transₓ
                     [(Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.«tactic_<;>_»
                            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                            "<;>"
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `add_le_add
                              [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                               (Term.app
                                `le_transₓ
                                [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                 (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                           [])])))
                      `hK])])
                  (Term.app `le_of_ltₓ [`hKN])])])
              (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hsumltP []]
         [(Term.typeSpec
           ":"
           («term_<_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Term.app `abv [(Term.app `a [`n])]))
            "<"
            `P))]
         ":="
         (calc
          "calc"
          [(calcStep
            («term_=_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Term.app `abv [(Term.app `a [`n])]))
             "="
             (Algebra.Abs.«term|_|»
              "|"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Term.app `abv [(Term.app `a [`n])]))
              "|"))
            ":="
            (Term.app
             `Eq.symm
             [(Term.app
               `abs_of_nonneg
               [(Term.app
                 `sum_nonneg
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`x `h] [])]
                    "=>"
                    (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
           (calcStep
            («term_<_» (Term.hole "_") "<" `P)
            ":="
            (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
       []
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `h₁)
               ","
               (Tactic.rwRule [] `h₂)
               ","
               (Tactic.rwRule [] `h₃)
               ","
               (Tactic.rwRule [] `sum_mul)
               ","
               (Tactic.rwRule ["←"] `sub_sub)
               ","
               (Tactic.rwRule [] `sub_right_comm)
               ","
               (Tactic.rwRule [] `sub_self)
               ","
               (Tactic.rwRule [] `zero_sub)
               ","
               (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
              "]")
             [])
            [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `lt_of_le_of_ltₓ
              [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
            [])
           (group
            (Tactic.tacticSuffices_
             "suffices"
             (Term.sufficesDecl
              []
              («term_<_»
               (Init.Logic.«term_+_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Term.app
                   `abv
                   [(«term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))])))
                "+"
                («term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Term.app
                    `abv
                    [(«term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))])))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                  " in "
                  (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                  ", "
                  (Finset.Data.Finset.Fold.«term_*_»
                   (Term.app `abv [(Term.app `a [`i])])
                   "*"
                   (Term.app
                    `abv
                    [(«term_-_»
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [(«term_-_» `K "-" `i)])
                       ", "
                       (Term.app `b [`k]))
                      "-"
                      (Algebra.BigOperators.Basic.«term∑_in_,_»
                       "∑"
                       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                       " in "
                       (Term.app `range [`K])
                       ", "
                       (Term.app `b [`k])))])))))
               "<"
               (Init.Logic.«term_+_»
                (Finset.Data.Finset.Fold.«term_*_»
                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                 "*"
                 `P)
                "+"
                (Finset.Data.Finset.Fold.«term_*_»
                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                 "*"
                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                   [])
                  (group
                   (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                   [])])))))
            [])
           (group
            (Tactic.refine'
             "refine'"
             (Term.app
              `add_lt_add
              [(Term.app
                `lt_of_le_of_ltₓ
                [`hsumlesum
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                        [])
                       "<;>"
                       (Tactic.exact
                        "exact"
                        (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                      [])])))])
               (Term.hole "_")]))
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
              "]")
             [])
            [])
           (group
            (tacticCalc_
             "calc"
             [(calcStep
               («term_≤_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app
                  (Term.proj (Term.app `range [`K]) "." `filter)
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`k] [])]
                     "=>"
                     («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Term.app
                   `abv
                   [(«term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))])))
                "≤"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app
                  (Term.proj (Term.app `range [`K]) "." `filter)
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`k] [])]
                     "=>"
                     («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
               ":="
               (Term.app
                `sum_le_sum
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`n `hn] [])]
                   "=>"
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.refine'
                         "refine'"
                         (Term.app
                          `mul_le_mul_of_nonneg_left
                          [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                        [])
                       (group
                        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                        [])
                       (group
                        (Tactic.refine'
                         "refine'"
                         (Term.app
                          `le_transₓ
                          [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                        [])
                       (group
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                          "]")
                         [])
                        [])
                       (group
                        (Tactic.exact
                         "exact"
                         (Term.app
                          `add_le_add
                          [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                           (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                        [])])))))]))
              (calcStep
               («term_<_»
                (Term.hole "_")
                "<"
                (Finset.Data.Finset.Fold.«term_*_»
                 («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                 "*"
                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule ["←"] `sum_mul)
                        ","
                        (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                       "]")
                      [])
                     "<;>"
                     (Tactic.refine'
                      "refine'"
                      (Term.app
                       (Term.proj
                        («term_$__»
                         `mul_lt_mul_right
                         "$"
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.«tactic_<;>_»
                               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                               "<;>"
                               (Tactic.exact
                                "exact"
                                (Term.app
                                 `add_pos
                                 [(Term.app
                                   `lt_of_le_of_ltₓ
                                   [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                    (Term.app `hQ [(numLit "0")])])
                                  (Term.app
                                   `lt_of_le_of_ltₓ
                                   [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                    (Term.app `hQ [(numLit "0")])])])))
                              [])]))))
                        "."
                        (fieldIdx "2"))
                       [(Term.app
                         `lt_of_le_of_ltₓ
                         [(Term.app `le_abs_self [(Term.hole "_")])
                          (Term.app
                           `hM
                           [(Term.hole "_")
                            (Term.hole "_")
                            (Term.app
                             `le_transₓ
                             [(Term.app
                               `Nat.le_succ_of_leₓ
                               [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                              (Term.app `le_of_ltₓ [`hNMK])])
                            (Term.app
                             `Nat.le_succ_of_leₓ
                             [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                    [])]))))])
            [])]))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hNMK []]
     [(Term.typeSpec ":" («term_<_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "<" `K))]
     ":="
     (Term.app
      `lt_of_lt_of_leₓ
      [(Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app `lt_add_of_pos_left [(Term.hole "_") (Term.app `Nat.succ_posₓ [(Term.hole "_")])])))
            [])])))
       `hK])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hKN []]
      [(Term.typeSpec ":" («term_<_» `N "<" `K))]
      ":="
      (calc
       "calc"
       [(calcStep
         («term_≤_» `N "≤" (Term.app `max [`N `M]))
         ":="
         (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
        (calcStep
         («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
         ":="
         (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
        (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hsumlesum []]
       [(Term.typeSpec
         ":"
         («term_≤_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `abv [(Term.app `a [`i])])
            "*"
            (Term.app
             `abv
             [(«term_-_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                " in "
                (Term.app `range [(«term_-_» `K "-" `i)])
                ", "
                (Term.app `b [`k]))
               "-"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Term.app `b [`k])))])))
          "≤"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            (Term.app `abv [(Term.app `a [`i])])
            "*"
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
       ":="
       (Term.app
        `sum_le_sum
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`m `hmJ] [])]
           "=>"
           (Term.app
            `mul_le_mul_of_nonneg_left
            [(Term.app
              `le_of_ltₓ
              [(Term.app
                `hN
                [(«term_-_» `K "-" `m)
                 `K
                 (Term.app
                  `le_tsub_of_add_le_left
                  [(Term.app
                    `le_transₓ
                    [(Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.«tactic_<;>_»
                           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                           "<;>"
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `add_le_add
                             [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                              (Term.app
                               `le_transₓ
                               [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                                (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                          [])])))
                     `hK])])
                 (Term.app `le_of_ltₓ [`hKN])])])
             (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hsumltP []]
        [(Term.typeSpec
          ":"
          («term_<_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Term.app `abv [(Term.app `a [`n])]))
           "<"
           `P))]
        ":="
        (calc
         "calc"
         [(calcStep
           («term_=_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Term.app `abv [(Term.app `a [`n])]))
            "="
            (Algebra.Abs.«term|_|»
             "|"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Term.app `abv [(Term.app `a [`n])]))
             "|"))
           ":="
           (Term.app
            `Eq.symm
            [(Term.app
              `abs_of_nonneg
              [(Term.app
                `sum_nonneg
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`x `h] [])]
                   "=>"
                   (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
          (calcStep
           («term_<_» (Term.hole "_") "<" `P)
           ":="
           (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
      []
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `h₁)
              ","
              (Tactic.rwRule [] `h₂)
              ","
              (Tactic.rwRule [] `h₃)
              ","
              (Tactic.rwRule [] `sum_mul)
              ","
              (Tactic.rwRule ["←"] `sub_sub)
              ","
              (Tactic.rwRule [] `sub_right_comm)
              ","
              (Tactic.rwRule [] `sub_self)
              ","
              (Tactic.rwRule [] `zero_sub)
              ","
              (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
             "]")
            [])
           [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             `lt_of_le_of_ltₓ
             [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
           [])
          (group
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             («term_<_»
              (Init.Logic.«term_+_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Term.app
                  `abv
                  [(«term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))])))
               "+"
               («term_-_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Term.app
                   `abv
                   [(«term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))])))
                "-"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 " in "
                 (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                 ", "
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.app `abv [(Term.app `a [`i])])
                  "*"
                  (Term.app
                   `abv
                   [(«term_-_»
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [(«term_-_» `K "-" `i)])
                      ", "
                      (Term.app `b [`k]))
                     "-"
                     (Algebra.BigOperators.Basic.«term∑_in_,_»
                      "∑"
                      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                      " in "
                      (Term.app `range [`K])
                      ", "
                      (Term.app `b [`k])))])))))
              "<"
              (Init.Logic.«term_+_»
               (Finset.Data.Finset.Fold.«term_*_»
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
                "*"
                `P)
               "+"
               (Finset.Data.Finset.Fold.«term_*_»
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                "*"
                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                  [])
                 (group
                  (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                  [])])))))
           [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             `add_lt_add
             [(Term.app
               `lt_of_le_of_ltₓ
               [`hsumlesum
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                       [])
                      "<;>"
                      (Tactic.exact
                       "exact"
                       (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                     [])])))])
              (Term.hole "_")]))
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
             "]")
            [])
           [])
          (group
           (tacticCalc_
            "calc"
            [(calcStep
              («term_≤_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app
                 (Term.proj (Term.app `range [`K]) "." `filter)
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`k] [])]
                    "=>"
                    («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Term.app
                  `abv
                  [(«term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))])))
               "≤"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app
                 (Term.proj (Term.app `range [`K]) "." `filter)
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`k] [])]
                    "=>"
                    («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
              ":="
              (Term.app
               `sum_le_sum
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`n `hn] [])]
                  "=>"
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `mul_le_mul_of_nonneg_left
                         [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                       [])
                      (group
                       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                       [])
                      (group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `le_transₓ
                         [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                       [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `add_le_add
                         [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                          (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                       [])])))))]))
             (calcStep
              («term_<_»
               (Term.hole "_")
               "<"
               (Finset.Data.Finset.Fold.«term_*_»
                («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
                "*"
                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule ["←"] `sum_mul)
                       ","
                       (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                      "]")
                     [])
                    "<;>"
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      (Term.proj
                       («term_$__»
                        `mul_lt_mul_right
                        "$"
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group
                             (Tactic.«tactic_<;>_»
                              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                              "<;>"
                              (Tactic.exact
                               "exact"
                               (Term.app
                                `add_pos
                                [(Term.app
                                  `lt_of_le_of_ltₓ
                                  [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                   (Term.app `hQ [(numLit "0")])])
                                 (Term.app
                                  `lt_of_le_of_ltₓ
                                  [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                   (Term.app `hQ [(numLit "0")])])])))
                             [])]))))
                       "."
                       (fieldIdx "2"))
                      [(Term.app
                        `lt_of_le_of_ltₓ
                        [(Term.app `le_abs_self [(Term.hole "_")])
                         (Term.app
                          `hM
                          [(Term.hole "_")
                           (Term.hole "_")
                           (Term.app
                            `le_transₓ
                            [(Term.app
                              `Nat.le_succ_of_leₓ
                              [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                             (Term.app `le_of_ltₓ [`hNMK])])
                           (Term.app
                            `Nat.le_succ_of_leₓ
                            [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                   [])]))))])
           [])])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hKN []]
     [(Term.typeSpec ":" («term_<_» `N "<" `K))]
     ":="
     (calc
      "calc"
      [(calcStep
        («term_≤_» `N "≤" (Term.app `max [`N `M]))
        ":="
        (Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")]))
       (calcStep
        («term_<_» (Term.hole "_") "<" (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")))
        ":="
        (Term.app `Nat.lt_succ_selfₓ [(Term.hole "_")]))
       (calcStep («term_<_» (Term.hole "_") "<" `K) ":=" `hNMK)])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hsumlesum []]
      [(Term.typeSpec
        ":"
        («term_≤_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
          ", "
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `abv [(Term.app `a [`i])])
           "*"
           (Term.app
            `abv
            [(«term_-_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [(«term_-_» `K "-" `i)])
               ", "
               (Term.app `b [`k]))
              "-"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Term.app `b [`k])))])))
         "≤"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
          ", "
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `abv [(Term.app `a [`i])])
           "*"
           («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
      ":="
      (Term.app
       `sum_le_sum
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m `hmJ] [])]
          "=>"
          (Term.app
           `mul_le_mul_of_nonneg_left
           [(Term.app
             `le_of_ltₓ
             [(Term.app
               `hN
               [(«term_-_» `K "-" `m)
                `K
                (Term.app
                 `le_tsub_of_add_le_left
                 [(Term.app
                   `le_transₓ
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.«tactic_<;>_»
                          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                          "<;>"
                          (Tactic.exact
                           "exact"
                           (Term.app
                            `add_le_add
                            [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                             (Term.app
                              `le_transₓ
                              [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                               (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                         [])])))
                    `hK])])
                (Term.app `le_of_ltₓ [`hKN])])])
            (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hsumltP []]
       [(Term.typeSpec
         ":"
         («term_<_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
           ", "
           (Term.app `abv [(Term.app `a [`n])]))
          "<"
          `P))]
       ":="
       (calc
        "calc"
        [(calcStep
          («term_=_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Term.app `abv [(Term.app `a [`n])]))
           "="
           (Algebra.Abs.«term|_|»
            "|"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Term.app `abv [(Term.app `a [`n])]))
            "|"))
          ":="
          (Term.app
           `Eq.symm
           [(Term.app
             `abs_of_nonneg
             [(Term.app
               `sum_nonneg
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`x `h] [])]
                  "=>"
                  (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
         (calcStep
          («term_<_» (Term.hole "_") "<" `P)
          ":="
          (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
     []
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `h₁)
             ","
             (Tactic.rwRule [] `h₂)
             ","
             (Tactic.rwRule [] `h₃)
             ","
             (Tactic.rwRule [] `sum_mul)
             ","
             (Tactic.rwRule ["←"] `sub_sub)
             ","
             (Tactic.rwRule [] `sub_right_comm)
             ","
             (Tactic.rwRule [] `sub_self)
             ","
             (Tactic.rwRule [] `zero_sub)
             ","
             (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
            "]")
           [])
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            `lt_of_le_of_ltₓ
            [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
          [])
         (group
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            («term_<_»
             (Init.Logic.«term_+_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Term.app
                 `abv
                 [(«term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))])))
              "+"
              («term_-_»
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [`K])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Term.app
                  `abv
                  [(«term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))])))
               "-"
               (Algebra.BigOperators.Basic.«term∑_in_,_»
                "∑"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                " in "
                (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
                ", "
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.app `abv [(Term.app `a [`i])])
                 "*"
                 (Term.app
                  `abv
                  [(«term_-_»
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [(«term_-_» `K "-" `i)])
                     ", "
                     (Term.app `b [`k]))
                    "-"
                    (Algebra.BigOperators.Basic.«term∑_in_,_»
                     "∑"
                     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                     " in "
                     (Term.app `range [`K])
                     ", "
                     (Term.app `b [`k])))])))))
             "<"
             (Init.Logic.«term_+_»
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
               "*"
               `P)
              "+"
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
               "*"
               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                 [])
                (group
                 (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                 [])])))))
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            `add_lt_add
            [(Term.app
              `lt_of_le_of_ltₓ
              [`hsumlesum
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                      [])
                     "<;>"
                     (Tactic.exact
                      "exact"
                      (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                    [])])))])
             (Term.hole "_")]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
            "]")
           [])
          [])
         (group
          (tacticCalc_
           "calc"
           [(calcStep
             («term_≤_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app
                (Term.proj (Term.app `range [`K]) "." `filter)
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`k] [])]
                   "=>"
                   («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Term.app
                 `abv
                 [(«term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))])))
              "≤"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app
                (Term.proj (Term.app `range [`K]) "." `filter)
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`k] [])]
                   "=>"
                   («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
             ":="
             (Term.app
              `sum_le_sum
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`n `hn] [])]
                 "=>"
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        `mul_le_mul_of_nonneg_left
                        [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
                      [])
                     (group
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        `le_transₓ
                        [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                        "]")
                       [])
                      [])
                     (group
                      (Tactic.exact
                       "exact"
                       (Term.app
                        `add_le_add
                        [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                         (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                      [])])))))]))
            (calcStep
             («term_<_»
              (Term.hole "_")
              "<"
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
               "*"
               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule ["←"] `sum_mul)
                      ","
                      (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                     "]")
                    [])
                   "<;>"
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     (Term.proj
                      («term_$__»
                       `mul_lt_mul_right
                       "$"
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.«tactic_<;>_»
                             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                             "<;>"
                             (Tactic.exact
                              "exact"
                              (Term.app
                               `add_pos
                               [(Term.app
                                 `lt_of_le_of_ltₓ
                                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                  (Term.app `hQ [(numLit "0")])])
                                (Term.app
                                 `lt_of_le_of_ltₓ
                                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                  (Term.app `hQ [(numLit "0")])])])))
                            [])]))))
                      "."
                      (fieldIdx "2"))
                     [(Term.app
                       `lt_of_le_of_ltₓ
                       [(Term.app `le_abs_self [(Term.hole "_")])
                        (Term.app
                         `hM
                         [(Term.hole "_")
                          (Term.hole "_")
                          (Term.app
                           `le_transₓ
                           [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                            (Term.app `le_of_ltₓ [`hNMK])])
                          (Term.app
                           `Nat.le_succ_of_leₓ
                           [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                  [])]))))])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hsumlesum []]
     [(Term.typeSpec
       ":"
       («term_≤_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
         " in "
         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
         ", "
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `abv [(Term.app `a [`i])])
          "*"
          (Term.app
           `abv
           [(«term_-_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(«term_-_» `K "-" `i)])
              ", "
              (Term.app `b [`k]))
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Term.app `b [`k])))])))
        "≤"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
         " in "
         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
         ", "
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `abv [(Term.app `a [`i])])
          "*"
          («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))))))]
     ":="
     (Term.app
      `sum_le_sum
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m `hmJ] [])]
         "=>"
         (Term.app
          `mul_le_mul_of_nonneg_left
          [(Term.app
            `le_of_ltₓ
            [(Term.app
              `hN
              [(«term_-_» `K "-" `m)
               `K
               (Term.app
                `le_tsub_of_add_le_left
                [(Term.app
                  `le_transₓ
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.«tactic_<;>_»
                         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                         "<;>"
                         (Tactic.exact
                          "exact"
                          (Term.app
                           `add_le_add
                           [(Term.app `le_of_ltₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hmJ])])
                            (Term.app
                             `le_transₓ
                             [(Term.app `le_max_leftₓ [(Term.hole "_") (Term.hole "_")])
                              (Term.app `le_of_ltₓ [(Term.app `lt_add_one [(Term.hole "_")])])])])))
                        [])])))
                   `hK])])
               (Term.app `le_of_ltₓ [`hKN])])])
           (Term.app `abv_nonneg [`abv (Term.hole "_")])])))])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hsumltP []]
      [(Term.typeSpec
        ":"
        («term_<_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
          " in "
          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
          ", "
          (Term.app `abv [(Term.app `a [`n])]))
         "<"
         `P))]
      ":="
      (calc
       "calc"
       [(calcStep
         («term_=_»
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
           ", "
           (Term.app `abv [(Term.app `a [`n])]))
          "="
          (Algebra.Abs.«term|_|»
           "|"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Term.app `abv [(Term.app `a [`n])]))
           "|"))
         ":="
         (Term.app
          `Eq.symm
          [(Term.app
            `abs_of_nonneg
            [(Term.app
              `sum_nonneg
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`x `h] [])]
                 "=>"
                 (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
        (calcStep
         («term_<_» (Term.hole "_") "<" `P)
         ":="
         (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule [] `h₁)
            ","
            (Tactic.rwRule [] `h₂)
            ","
            (Tactic.rwRule [] `h₃)
            ","
            (Tactic.rwRule [] `sum_mul)
            ","
            (Tactic.rwRule ["←"] `sub_sub)
            ","
            (Tactic.rwRule [] `sub_right_comm)
            ","
            (Tactic.rwRule [] `sub_self)
            ","
            (Tactic.rwRule [] `zero_sub)
            ","
            (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
           "]")
          [])
         [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app
           `lt_of_le_of_ltₓ
           [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
         [])
        (group
         (Tactic.tacticSuffices_
          "suffices"
          (Term.sufficesDecl
           []
           («term_<_»
            (Init.Logic.«term_+_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Term.app
                `abv
                [(«term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))])))
             "+"
             («term_-_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [`K])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Term.app
                 `abv
                 [(«term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))])))
              "-"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               " in "
               (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
               ", "
               (Finset.Data.Finset.Fold.«term_*_»
                (Term.app `abv [(Term.app `a [`i])])
                "*"
                (Term.app
                 `abv
                 [(«term_-_»
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [(«term_-_» `K "-" `i)])
                    ", "
                    (Term.app `b [`k]))
                   "-"
                   (Algebra.BigOperators.Basic.«term∑_in_,_»
                    "∑"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                    " in "
                    (Term.app `range [`K])
                    ", "
                    (Term.app `b [`k])))])))))
            "<"
            (Init.Logic.«term_+_»
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
              "*"
              `P)
             "+"
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
              "*"
              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                [])
               (group
                (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
                [])])))))
         [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app
           `add_lt_add
           [(Term.app
             `lt_of_le_of_ltₓ
             [`hsumlesum
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                     [])
                    "<;>"
                    (Tactic.exact
                     "exact"
                     (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                   [])])))])
            (Term.hole "_")]))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
           "]")
          [])
         [])
        (group
         (tacticCalc_
          "calc"
          [(calcStep
            («term_≤_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app
               (Term.proj (Term.app `range [`K]) "." `filter)
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`k] [])]
                  "=>"
                  («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Term.app
                `abv
                [(«term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))])))
             "≤"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app
               (Term.proj (Term.app `range [`K]) "." `filter)
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`k] [])]
                  "=>"
                  («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
            ":="
            (Term.app
             `sum_le_sum
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`n `hn] [])]
                "=>"
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.refine'
                      "refine'"
                      (Term.app
                       `mul_le_mul_of_nonneg_left
                       [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                     [])
                    (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
                    (group
                     (Tactic.refine'
                      "refine'"
                      (Term.app
                       `le_transₓ
                       [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                     [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                       "]")
                      [])
                     [])
                    (group
                     (Tactic.exact
                      "exact"
                      (Term.app
                       `add_le_add
                       [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                        (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                     [])])))))]))
           (calcStep
            («term_<_»
             (Term.hole "_")
             "<"
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
              "*"
              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule ["←"] `sum_mul)
                     ","
                     (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                    "]")
                   [])
                  "<;>"
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    (Term.proj
                     («term_$__»
                      `mul_lt_mul_right
                      "$"
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.«tactic_<;>_»
                            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                            "<;>"
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `add_pos
                              [(Term.app
                                `lt_of_le_of_ltₓ
                                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                 (Term.app `hQ [(numLit "0")])])
                               (Term.app
                                `lt_of_le_of_ltₓ
                                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                 (Term.app `hQ [(numLit "0")])])])))
                           [])]))))
                     "."
                     (fieldIdx "2"))
                    [(Term.app
                      `lt_of_le_of_ltₓ
                      [(Term.app `le_abs_self [(Term.hole "_")])
                       (Term.app
                        `hM
                        [(Term.hole "_")
                         (Term.hole "_")
                         (Term.app
                          `le_transₓ
                          [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                           (Term.app `le_of_ltₓ [`hNMK])])
                         (Term.app
                          `Nat.le_succ_of_leₓ
                          [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                 [])]))))])
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hsumltP []]
     [(Term.typeSpec
       ":"
       («term_<_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
         " in "
         (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
         ", "
         (Term.app `abv [(Term.app `a [`n])]))
        "<"
        `P))]
     ":="
     (calc
      "calc"
      [(calcStep
        («term_=_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
          " in "
          (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
          ", "
          (Term.app `abv [(Term.app `a [`n])]))
         "="
         (Algebra.Abs.«term|_|»
          "|"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `n)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
           ", "
           (Term.app `abv [(Term.app `a [`n])]))
          "|"))
        ":="
        (Term.app
         `Eq.symm
         [(Term.app
           `abs_of_nonneg
           [(Term.app
             `sum_nonneg
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`x `h] [])]
                "=>"
                (Term.app `abv_nonneg [`abv (Term.app `a [`x])])))])])]))
       (calcStep
        («term_<_» (Term.hole "_") "<" `P)
        ":="
        (Term.app `hP [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))]))])))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `h₁)
           ","
           (Tactic.rwRule [] `h₂)
           ","
           (Tactic.rwRule [] `h₃)
           ","
           (Tactic.rwRule [] `sum_mul)
           ","
           (Tactic.rwRule ["←"] `sub_sub)
           ","
           (Tactic.rwRule [] `sub_right_comm)
           ","
           (Tactic.rwRule [] `sub_self)
           ","
           (Tactic.rwRule [] `zero_sub)
           ","
           (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
          "]")
         [])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app `lt_of_le_of_ltₓ [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
        [])
       (group
        (Tactic.tacticSuffices_
         "suffices"
         (Term.sufficesDecl
          []
          («term_<_»
           (Init.Logic.«term_+_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Term.app
               `abv
               [(«term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))])))
            "+"
            («term_-_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [`K])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Term.app
                `abv
                [(«term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))])))
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               (Term.app `abv [(Term.app `a [`i])])
               "*"
               (Term.app
                `abv
                [(«term_-_»
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [(«term_-_» `K "-" `i)])
                   ", "
                   (Term.app `b [`k]))
                  "-"
                  (Algebra.BigOperators.Basic.«term∑_in_,_»
                   "∑"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                   " in "
                   (Term.app `range [`K])
                   ", "
                   (Term.app `b [`k])))])))))
           "<"
           (Init.Logic.«term_+_»
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
             "*"
             `P)
            "+"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
             "*"
             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
               [])
              (group
               (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
               [])])))))
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `add_lt_add
          [(Term.app
            `lt_of_le_of_ltₓ
            [`hsumlesum
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                    [])
                   "<;>"
                   (Tactic.exact
                    "exact"
                    (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                  [])])))])
           (Term.hole "_")]))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
          "]")
         [])
        [])
       (group
        (tacticCalc_
         "calc"
         [(calcStep
           («term_≤_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app
              (Term.proj (Term.app `range [`K]) "." `filter)
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`k] [])]
                 "=>"
                 («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Term.app
               `abv
               [(«term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))])))
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app
              (Term.proj (Term.app `range [`K]) "." `filter)
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`k] [])]
                 "=>"
                 («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
           ":="
           (Term.app
            `sum_le_sum
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`n `hn] [])]
               "=>"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `mul_le_mul_of_nonneg_left
                      [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                    [])
                   (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
                   (group
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `le_transₓ
                      [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                      "]")
                     [])
                    [])
                   (group
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `add_le_add
                      [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                       (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                    [])])))))]))
          (calcStep
           («term_<_»
            (Term.hole "_")
            "<"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
             "*"
             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.«tactic_<;>_»
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule ["←"] `sum_mul)
                    ","
                    (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                   "]")
                  [])
                 "<;>"
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj
                    («term_$__»
                     `mul_lt_mul_right
                     "$"
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.«tactic_<;>_»
                           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                           "<;>"
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `add_pos
                             [(Term.app
                               `lt_of_le_of_ltₓ
                               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
                              (Term.app
                               `lt_of_le_of_ltₓ
                               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                                (Term.app `hQ [(numLit "0")])])])))
                          [])]))))
                    "."
                    (fieldIdx "2"))
                   [(Term.app
                     `lt_of_le_of_ltₓ
                     [(Term.app `le_abs_self [(Term.hole "_")])
                      (Term.app
                       `hM
                       [(Term.hole "_")
                        (Term.hole "_")
                        (Term.app
                         `le_transₓ
                         [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                          (Term.app `le_of_ltₓ [`hNMK])])
                        (Term.app
                         `Nat.le_succ_of_leₓ
                         [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
                [])]))))])
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `h₁)
          ","
          (Tactic.rwRule [] `h₂)
          ","
          (Tactic.rwRule [] `h₃)
          ","
          (Tactic.rwRule [] `sum_mul)
          ","
          (Tactic.rwRule ["←"] `sub_sub)
          ","
          (Tactic.rwRule [] `sub_right_comm)
          ","
          (Tactic.rwRule [] `sub_self)
          ","
          (Tactic.rwRule [] `zero_sub)
          ","
          (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app `lt_of_le_of_ltₓ [(Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
       [])
      (group
       (Tactic.tacticSuffices_
        "suffices"
        (Term.sufficesDecl
         []
         («term_<_»
          (Init.Logic.«term_+_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `a [`i])])
             "*"
             (Term.app
              `abv
              [(«term_-_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k]))
                "-"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Term.app `b [`k])))])))
           "+"
           («term_-_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [`K])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Term.app
               `abv
               [(«term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))])))
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              (Term.app `abv [(Term.app `a [`i])])
              "*"
              (Term.app
               `abv
               [(«term_-_»
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [(«term_-_» `K "-" `i)])
                  ", "
                  (Term.app `b [`k]))
                 "-"
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                  " in "
                  (Term.app `range [`K])
                  ", "
                  (Term.app `b [`k])))])))))
          "<"
          (Init.Logic.«term_+_»
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `P))
            "*"
            `P)
           "+"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
            "*"
            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hε)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
              [])
             (group
              (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] (Term.app `abv_mul [`abv]))] "]"] [] [])
              [])])))))
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `add_lt_add
         [(Term.app
           `lt_of_le_of_ltₓ
           [`hsumlesum
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sum_mul) "," (Tactic.rwRule [] `mul_commₓ)] "]")
                   [])
                  "<;>"
                  (Tactic.exact "exact" (Term.app (Term.proj (Term.app `mul_lt_mul_left [`hPε0]) "." `mpr) [`hsumltP])))
                 [])])))])
          (Term.hole "_")]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
         "]")
        [])
       [])
      (group
       (tacticCalc_
        "calc"
        [(calcStep
          («term_≤_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app
             (Term.proj (Term.app `range [`K]) "." `filter)
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`k] [])]
                "=>"
                («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `a [`i])])
             "*"
             (Term.app
              `abv
              [(«term_-_»
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [(«term_-_» `K "-" `i)])
                 ", "
                 (Term.app `b [`k]))
                "-"
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
                 " in "
                 (Term.app `range [`K])
                 ", "
                 (Term.app `b [`k])))])))
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app
             (Term.proj (Term.app `range [`K]) "." `filter)
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`k] [])]
                "=>"
                («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             (Term.app `abv [(Term.app `a [`i])])
             "*"
             (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
          ":="
          (Term.app
           `sum_le_sum
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`n `hn] [])]
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `mul_le_mul_of_nonneg_left
                     [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
                   [])
                  (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
                  (group
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `le_transₓ
                     [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
                   [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `add_le_add
                     [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                      (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
                   [])])))))]))
         (calcStep
          («term_<_»
           (Term.hole "_")
           "<"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
            "*"
            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `sum_mul)
                   ","
                   (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
                  "]")
                 [])
                "<;>"
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  (Term.proj
                   («term_$__»
                    `mul_lt_mul_right
                    "$"
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.«tactic_<;>_»
                          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                          "<;>"
                          (Tactic.exact
                           "exact"
                           (Term.app
                            `add_pos
                            [(Term.app
                              `lt_of_le_of_ltₓ
                              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
                             (Term.app
                              `lt_of_le_of_ltₓ
                              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
                               (Term.app `hQ [(numLit "0")])])])))
                         [])]))))
                   "."
                   (fieldIdx "2"))
                  [(Term.app
                    `lt_of_le_of_ltₓ
                    [(Term.app `le_abs_self [(Term.hole "_")])
                     (Term.app
                      `hM
                      [(Term.hole "_")
                       (Term.hole "_")
                       (Term.app
                        `le_transₓ
                        [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                         (Term.app `le_of_ltₓ [`hNMK])])
                       (Term.app
                        `Nat.le_succ_of_leₓ
                        [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
               [])]))))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticCalc_
   "calc"
   [(calcStep
     («term_≤_»
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
       " in "
       (Term.app
        (Term.proj (Term.app `range [`K]) "." `filter)
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`k] [])]
           "=>"
           («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
       ", "
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.app `abv [(Term.app `a [`i])])
        "*"
        (Term.app
         `abv
         [(«term_-_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [(«term_-_» `K "-" `i)])
            ", "
            (Term.app `b [`k]))
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
            " in "
            (Term.app `range [`K])
            ", "
            (Term.app `b [`k])))])))
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
       " in "
       (Term.app
        (Term.proj (Term.app `range [`K]) "." `filter)
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`k] [])]
           "=>"
           («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
       ", "
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.app `abv [(Term.app `a [`i])])
        "*"
        (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
     ":="
     (Term.app
      `sum_le_sum
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`n `hn] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.refine'
               "refine'"
               (Term.app
                `mul_le_mul_of_nonneg_left
                [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
              [])
             (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
             (group
              (Tactic.refine'
               "refine'"
               (Term.app
                `le_transₓ
                [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))]
                "]")
               [])
              [])
             (group
              (Tactic.exact
               "exact"
               (Term.app
                `add_le_add
                [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
                 (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
              [])])))))]))
    (calcStep
     («term_<_»
      (Term.hole "_")
      "<"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
       "*"
       (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `sum_mul)
              ","
              (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
             "]")
            [])
           "<;>"
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj
              («term_$__»
               `mul_lt_mul_right
               "$"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                     "<;>"
                     (Tactic.exact
                      "exact"
                      (Term.app
                       `add_pos
                       [(Term.app
                         `lt_of_le_of_ltₓ
                         [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
                        (Term.app
                         `lt_of_le_of_ltₓ
                         [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
                    [])]))))
              "."
              (fieldIdx "2"))
             [(Term.app
               `lt_of_le_of_ltₓ
               [(Term.app `le_abs_self [(Term.hole "_")])
                (Term.app
                 `hM
                 [(Term.hole "_")
                  (Term.hole "_")
                  (Term.app
                   `le_transₓ
                   [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                    (Term.app `le_of_ltₓ [`hNMK])])
                  (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticCalc_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule ["←"] `sum_mul)
           ","
           (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
          "]")
         [])
        "<;>"
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj
           («term_$__»
            `mul_lt_mul_right
            "$"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
                  "<;>"
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `add_pos
                    [(Term.app
                      `lt_of_le_of_ltₓ
                      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
                     (Term.app
                      `lt_of_le_of_ltₓ
                      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
                 [])]))))
           "."
           (fieldIdx "2"))
          [(Term.app
            `lt_of_le_of_ltₓ
            [(Term.app `le_abs_self [(Term.hole "_")])
             (Term.app
              `hM
              [(Term.hole "_")
               (Term.hole "_")
               (Term.app
                `le_transₓ
                [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
                 (Term.app `le_of_ltₓ [`hNMK])])
               (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq
    "rw"
    []
    (Tactic.rwRuleSeq
     "["
     [(Tactic.rwRule ["←"] `sum_mul)
      ","
      (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
     "]")
    [])
   "<;>"
   (Tactic.refine'
    "refine'"
    (Term.app
     (Term.proj
      («term_$__»
       `mul_lt_mul_right
       "$"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app
               `add_pos
               [(Term.app
                 `lt_of_le_of_ltₓ
                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
                (Term.app
                 `lt_of_le_of_ltₓ
                 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
            [])]))))
      "."
      (fieldIdx "2"))
     [(Term.app
       `lt_of_le_of_ltₓ
       [(Term.app `le_abs_self [(Term.hole "_")])
        (Term.app
         `hM
         [(Term.hole "_")
          (Term.hole "_")
          (Term.app
           `le_transₓ
           [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
            (Term.app `le_of_ltₓ [`hNMK])])
          (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.refine'
   "refine'"
   (Term.app
    (Term.proj
     («term_$__»
      `mul_lt_mul_right
      "$"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
            "<;>"
            (Tactic.exact
             "exact"
             (Term.app
              `add_pos
              [(Term.app
                `lt_of_le_of_ltₓ
                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
               (Term.app
                `lt_of_le_of_ltₓ
                [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
           [])]))))
     "."
     (fieldIdx "2"))
    [(Term.app
      `lt_of_le_of_ltₓ
      [(Term.app `le_abs_self [(Term.hole "_")])
       (Term.app
        `hM
        [(Term.hole "_")
         (Term.hole "_")
         (Term.app
          `le_transₓ
          [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
           (Term.app `le_of_ltₓ [`hNMK])])
         (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    («term_$__»
     `mul_lt_mul_right
     "$"
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
           "<;>"
           (Tactic.exact
            "exact"
            (Term.app
             `add_pos
             [(Term.app
               `lt_of_le_of_ltₓ
               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
              (Term.app
               `lt_of_le_of_ltₓ
               [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
          [])]))))
    "."
    (fieldIdx "2"))
   [(Term.app
     `lt_of_le_of_ltₓ
     [(Term.app `le_abs_self [(Term.hole "_")])
      (Term.app
       `hM
       [(Term.hole "_")
        (Term.hole "_")
        (Term.app
         `le_transₓ
         [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
          (Term.app `le_of_ltₓ [`hNMK])])
        (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `lt_of_le_of_ltₓ
   [(Term.app `le_abs_self [(Term.hole "_")])
    (Term.app
     `hM
     [(Term.hole "_")
      (Term.hole "_")
      (Term.app
       `le_transₓ
       [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
        (Term.app `le_of_ltₓ [`hNMK])])
      (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `hM
   [(Term.hole "_")
    (Term.hole "_")
    (Term.app
     `le_transₓ
     [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
      (Term.app `le_of_ltₓ [`hNMK])])
    (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_max_rightₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_succ_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Nat.le_succ_of_leₓ [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `le_transₓ
   [(Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
    (Term.app `le_of_ltₓ [`hNMK])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_ltₓ [`hNMK])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hNMK
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_ltₓ [`hNMK]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Nat.le_succ_of_leₓ [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_max_rightₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_succ_of_leₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Nat.le_succ_of_leₓ [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `le_transₓ
   [(Term.paren
     "("
     [(Term.app
       `Nat.le_succ_of_leₓ
       [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
      []]
     ")")
    (Term.paren "(" [(Term.app `le_of_ltₓ [`hNMK]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hM
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `hM
   [(Term.hole "_")
    (Term.hole "_")
    (Term.paren
     "("
     [(Term.app
       `le_transₓ
       [(Term.paren
         "("
         [(Term.app
           `Nat.le_succ_of_leₓ
           [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
          []]
         ")")
        (Term.paren "(" [(Term.app `le_of_ltₓ [`hNMK]) []] ")")])
      []]
     ")")
    (Term.paren
     "("
     [(Term.app
       `Nat.le_succ_of_leₓ
       [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_abs_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_abs_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_abs_self [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `lt_of_le_of_ltₓ
   [(Term.paren "(" [(Term.app `le_abs_self [(Term.hole "_")]) []] ")")
    (Term.paren
     "("
     [(Term.app
       `hM
       [(Term.hole "_")
        (Term.hole "_")
        (Term.paren
         "("
         [(Term.app
           `le_transₓ
           [(Term.paren
             "("
             [(Term.app
               `Nat.le_succ_of_leₓ
               [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
              []]
             ")")
            (Term.paren "(" [(Term.app `le_of_ltₓ [`hNMK]) []] ")")])
          []]
         ")")
        (Term.paren
         "("
         [(Term.app
           `Nat.le_succ_of_leₓ
           [(Term.paren "(" [(Term.app `le_max_rightₓ [(Term.hole "_") (Term.hole "_")]) []] ")")])
          []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   («term_$__»
    `mul_lt_mul_right
    "$"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
          "<;>"
          (Tactic.exact
           "exact"
           (Term.app
            `add_pos
            [(Term.app
              `lt_of_le_of_ltₓ
              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
             (Term.app
              `lt_of_le_of_ltₓ
              [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
         [])]))))
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_$__»
   `mul_lt_mul_right
   "$"
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `add_pos
           [(Term.app
             `lt_of_le_of_ltₓ
             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
            (Term.app
             `lt_of_le_of_ltₓ
             [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `add_pos
          [(Term.app
            `lt_of_le_of_ltₓ
            [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
           (Term.app
            `lt_of_le_of_ltₓ
            [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `add_pos
     [(Term.app
       `lt_of_le_of_ltₓ
       [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
      (Term.app
       `lt_of_le_of_ltₓ
       [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `add_pos
    [(Term.app
      `lt_of_le_of_ltₓ
      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
     (Term.app
      `lt_of_le_of_ltₓ
      [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_pos
   [(Term.app `lt_of_le_of_ltₓ [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
    (Term.app
     `lt_of_le_of_ltₓ
     [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `lt_of_le_of_ltₓ [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hQ [(numLit "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hQ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `lt_of_le_of_ltₓ
   [(Term.paren "(" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []] ")")
    (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `lt_of_le_of_ltₓ [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) (Term.app `hQ [(numLit "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hQ [(numLit "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hQ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `lt_of_le_of_ltₓ
   [(Term.paren "(" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []] ")")
    (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `two_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `mul_lt_mul_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__»
   `mul_lt_mul_right
   "$"
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul)] "]") [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `add_pos
           [(Term.paren
             "("
             [(Term.app
               `lt_of_le_of_ltₓ
               [(Term.paren "(" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []] ")")
                (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")])
              []]
             ")")
            (Term.paren
             "("
             [(Term.app
               `lt_of_le_of_ltₓ
               [(Term.paren "(" [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []] ")")
                (Term.paren "(" [(Term.app `hQ [(numLit "0")]) []] ")")])
              []]
             ")")])))
        [])]))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `sum_mul)
     ","
     (Tactic.rwRule ["←"] (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])]))]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sum_range_sub_sum_range [(Term.app `le_of_ltₓ [`hNMK])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_ltₓ [`hNMK])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hNMK
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_ltₓ [`hNMK]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_range_sub_sum_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_»
   (Term.hole "_")
   "<"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
    "*"
    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
   "*"
   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `ε
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» `ε "/" (Finset.Data.Finset.Fold.«term_*_» (numLit "4") "*" `Q)) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `sum_le_sum
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n `hn] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.refine'
            "refine'"
            (Term.app
             `mul_le_mul_of_nonneg_left
             [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
           [])
          (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             `le_transₓ
             [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))] "]")
            [])
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.app
             `add_le_add
             [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
              (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
           [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n `hn] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.refine'
          "refine'"
          (Term.app
           `mul_le_mul_of_nonneg_left
           [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
         [])
        (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))] "]")
          [])
         [])
        (group
         (Tactic.exact
          "exact"
          (Term.app
           `add_le_add
           [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
            (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `mul_le_mul_of_nonneg_left
         [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") []) [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))] "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `add_le_add
         [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
          (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `add_le_add
    [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
     (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_le_add
   [(Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])]) (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hQ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hQ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hQ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_of_ltₓ [(Term.paren "(" [(Term.app `hQ [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_of_ltₓ [(Term.app `hQ [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hQ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hQ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hQ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_of_ltₓ [(Term.paren "(" [(Term.app `hQ [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `two_mul) "," (Tactic.rwRule [] (Term.app `abv_neg [`abv]))] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_neg [`abv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `two_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_transₓ [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_add [(Term.hole "_") (Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_eq_add_neg)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `abv_nonneg [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_le_sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
    " in "
    (Term.app
     (Term.proj (Term.app `range [`K]) "." `filter)
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`k] [])]
        "=>"
        («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
    ", "
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `abv [(Term.app `a [`i])])
     "*"
     (Term.app
      `abv
      [(«term_-_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
         " in "
         (Term.app `range [(«term_-_» `K "-" `i)])
         ", "
         (Term.app `b [`k]))
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
         " in "
         (Term.app `range [`K])
         ", "
         (Term.app `b [`k])))])))
   "≤"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
    " in "
    (Term.app
     (Term.proj (Term.app `range [`K]) "." `filter)
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`k] [])]
        "=>"
        («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
    ", "
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `abv [(Term.app `a [`i])])
     "*"
     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
   " in "
   (Term.app
    (Term.proj (Term.app `range [`K]) "." `filter)
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`k] [])]
       "=>"
       («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
   ", "
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `abv [(Term.app `a [`i])])
    "*"
    (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `abv [(Term.app `a [`i])])
   "*"
   (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `Q)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Q
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `abv [(Term.app `a [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `a [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `a [`i]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `range [`K]) "." `filter)
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`k] [])]
      "=>"
      («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`k] [])]
    "=>"
    («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) "≤" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `max [`N `M])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `M
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `N
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `max
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Logic.«term_+_» (Term.app `max [`N `M]) "+" (numLit "1")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `range [`K]) "." `filter)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `K
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`K]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  cauchy_product
  { a b : ℕ → β }
      ( ha : IsCauSeq abs fun m => ∑ n in range m , abv a n )
      ( hb : IsCauSeq abv fun m => ∑ n in range m , b n )
      ( ε : α )
      ( ε0 : 0 < ε )
    :
      ∃
        i : ℕ
        ,
        ∀
          ,
          ∀
            j
            ≥ i
            ,
            ∀
              ,
              abv ∑ k in range j , a k * ∑ k in range j , b k - ∑ n in range j , ∑ m in range n + 1 , a m * b n - m < ε
  :=
    let
      ⟨ Q , hQ ⟩ := CauSeq.bounded ⟨ _ , hb ⟩
      let
        ⟨ P , hP ⟩ := CauSeq.bounded ⟨ _ , ha ⟩
        have
          hP0 : 0 < P := lt_of_le_of_ltₓ abs_nonneg _ hP 0
          have
            hPε0 : 0 < ε / 2 * P := div_pos ε0 mul_pos show ( 2 : α ) > 0 from by norm_num hP0
            let
              ⟨ N , hN ⟩ := CauSeq.cauchy₂ ⟨ _ , hb ⟩ hPε0
              have
                hQε0
                  : 0 < ε / 4 * Q
                  :=
                  div_pos ε0 mul_pos show ( 0 : α ) < 4 by norm_num lt_of_le_of_ltₓ abv_nonneg _ _ hQ 0
                let
                  ⟨ M , hM ⟩ := CauSeq.cauchy₂ ⟨ _ , ha ⟩ hQε0
                  ⟨
                    2 * max N M + 1
                      ,
                      fun
                        K hK
                          =>
                          have
                            h₁
                              :
                                ∑ m in range K , ∑ k in range m + 1 , a k * b m - k
                                  =
                                  ∑ m in range K , ∑ n in range K - m , a m * b n
                              :=
                              by simpa using sum_range_diag_flip K fun m n => a m * b n
                            have
                              h₂
                                : fun i => ∑ k in range K - i , a i * b k = fun i => a i * ∑ k in range K - i , b k
                                :=
                                by simp [ Finset.mul_sum ]
                              have
                                h₃
                                  :
                                    ∑ i in range K , a i * ∑ k in range K - i , b k
                                      =
                                      ∑ i in range K , a i * ∑ k in range K - i , b k - ∑ k in range K , b k
                                        +
                                        ∑ i in range K , a i * ∑ k in range K , b k
                                  :=
                                  by rw [ ← sum_add_distrib ] <;> simp [ mul_addₓ _ _ _ . symm ]
                                have
                                  two_mul_two : ( 4 : α ) = 2 * 2 := by norm_num
                                  have
                                    hQ0 : Q ≠ 0 := fun h => by simpa [ h , lt_irreflₓ ] using hQε0
                                    have
                                      h2Q0 : 2 * Q ≠ 0 := mul_ne_zero two_ne_zero hQ0
                                      have
                                        hε
                                          : ε / 2 * P * P + ε / 4 * Q * 2 * Q = ε
                                          :=
                                          by
                                            rw
                                              [
                                                ← div_div_eq_div_mul
                                                  ,
                                                  div_mul_cancel _ Ne.symm ne_of_ltₓ hP0
                                                  ,
                                                  two_mul_two
                                                  ,
                                                  mul_assocₓ
                                                  ,
                                                  ← div_div_eq_div_mul
                                                  ,
                                                  div_mul_cancel _ h2Q0
                                                  ,
                                                  add_halves
                                                ]
                                        have
                                          hNMK
                                            : max N M + 1 < K
                                            :=
                                            lt_of_lt_of_leₓ
                                              by rw [ two_mul ] <;> exact lt_add_of_pos_left _ Nat.succ_posₓ _ hK
                                          have
                                            hKN
                                              : N < K
                                              :=
                                              calc
                                                N ≤ max N M := le_max_leftₓ _ _
                                                  _ < max N M + 1 := Nat.lt_succ_selfₓ _
                                                  _ < K := hNMK
                                            have
                                              hsumlesum
                                                :
                                                  ∑
                                                      i
                                                      in
                                                      range max N M + 1
                                                      ,
                                                      abv a i * abv ∑ k in range K - i , b k - ∑ k in range K , b k
                                                    ≤
                                                    ∑ i in range max N M + 1 , abv a i * ε / 2 * P
                                                :=
                                                sum_le_sum
                                                  fun
                                                    m hmJ
                                                      =>
                                                      mul_le_mul_of_nonneg_left
                                                        le_of_ltₓ
                                                            hN
                                                              K - m
                                                                K
                                                                le_tsub_of_add_le_left
                                                                  le_transₓ
                                                                    by
                                                                        rw [ two_mul ]
                                                                          <;>
                                                                          exact
                                                                            add_le_add
                                                                              le_of_ltₓ mem_range . 1 hmJ
                                                                                le_transₓ
                                                                                  le_max_leftₓ _ _
                                                                                    le_of_ltₓ lt_add_one _
                                                                      hK
                                                                le_of_ltₓ hKN
                                                          abv_nonneg abv _
                                              have
                                                hsumltP
                                                  : ∑ n in range max N M + 1 , abv a n < P
                                                  :=
                                                  calc
                                                    ∑ n in range max N M + 1 , abv a n
                                                          =
                                                          | ∑ n in range max N M + 1 , abv a n |
                                                        :=
                                                        Eq.symm abs_of_nonneg sum_nonneg fun x h => abv_nonneg abv a x
                                                      _ < P := hP max N M + 1
                                                by
                                                  rw
                                                      [
                                                        h₁
                                                          ,
                                                          h₂
                                                          ,
                                                          h₃
                                                          ,
                                                          sum_mul
                                                          ,
                                                          ← sub_sub
                                                          ,
                                                          sub_right_comm
                                                          ,
                                                          sub_self
                                                          ,
                                                          zero_sub
                                                          ,
                                                          abv_neg abv
                                                        ]
                                                    refine' lt_of_le_of_ltₓ abv_sum_le_sum_abv _ _ _
                                                    suffices
                                                      ∑
                                                              i
                                                              in
                                                              range max N M + 1
                                                              ,
                                                              abv a i
                                                                *
                                                                abv ∑ k in range K - i , b k - ∑ k in range K , b k
                                                            +
                                                            ∑
                                                                i
                                                                in
                                                                range K
                                                                ,
                                                                abv a i
                                                                  *
                                                                  abv ∑ k in range K - i , b k - ∑ k in range K , b k
                                                              -
                                                              ∑
                                                                i
                                                                in
                                                                range max N M + 1
                                                                ,
                                                                abv a i
                                                                  *
                                                                  abv ∑ k in range K - i , b k - ∑ k in range K , b k
                                                          <
                                                          ε / 2 * P * P + ε / 4 * Q * 2 * Q
                                                        by rw [ hε ] at this simpa [ abv_mul abv ]
                                                    refine'
                                                      add_lt_add
                                                        lt_of_le_of_ltₓ
                                                            hsumlesum
                                                              by
                                                                rw [ ← sum_mul , mul_commₓ ]
                                                                  <;>
                                                                  exact mul_lt_mul_left hPε0 . mpr hsumltP
                                                          _
                                                    rw [ sum_range_sub_sum_range le_of_ltₓ hNMK ]
                                                    calc
                                                      ∑
                                                              i
                                                              in
                                                              range K . filter fun k => max N M + 1 ≤ k
                                                              ,
                                                              abv a i
                                                                *
                                                                abv ∑ k in range K - i , b k - ∑ k in range K , b k
                                                            ≤
                                                            ∑
                                                              i
                                                              in
                                                              range K . filter fun k => max N M + 1 ≤ k
                                                              ,
                                                              abv a i * 2 * Q
                                                          :=
                                                          sum_le_sum
                                                            fun
                                                              n hn
                                                                =>
                                                                by
                                                                  refine' mul_le_mul_of_nonneg_left _ abv_nonneg _ _
                                                                    rw [ sub_eq_add_neg ]
                                                                    refine' le_transₓ abv_add _ _ _ _
                                                                    rw [ two_mul , abv_neg abv ]
                                                                    exact add_le_add le_of_ltₓ hQ _ le_of_ltₓ hQ _
                                                        _ < ε / 4 * Q * 2 * Q
                                                          :=
                                                          by
                                                            rw [ ← sum_mul , ← sum_range_sub_sum_range le_of_ltₓ hNMK ]
                                                              <;>
                                                              refine'
                                                                mul_lt_mul_right
                                                                      $
                                                                      by
                                                                        rw [ two_mul ]
                                                                          <;>
                                                                          exact
                                                                            add_pos
                                                                              lt_of_le_of_ltₓ abv_nonneg _ _ hQ 0
                                                                                lt_of_le_of_ltₓ abv_nonneg _ _ hQ 0
                                                                    .
                                                                    2
                                                                  lt_of_le_of_ltₓ
                                                                    le_abs_self _
                                                                      hM
                                                                        _
                                                                          _
                                                                          le_transₓ
                                                                            Nat.le_succ_of_leₓ le_max_rightₓ _ _
                                                                              le_of_ltₓ hNMK
                                                                          Nat.le_succ_of_leₓ le_max_rightₓ _ _
                    ⟩

end NoArchimedean

end

open Finset

open CauSeq

namespace Complex

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_abs_exp [])
  (Command.declSig
   [(Term.explicitBinder "(" [`z] [":" (Data.Complex.Basic.termℂ "ℂ")] [] ")")]
   (Term.typeSpec
    ":"
    (Term.app
     `IsCauSeq
     [`HasAbs.abs
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`n] [])]
        "=>"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`n])
         ", "
         (Term.app `abs [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))]))))])))
  (Command.declValSimple
   ":="
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`n "," `hn] "⟩")
      []
      []
      ":="
      (Term.app `exists_nat_gt [(Term.app `abs [`z])])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hn0 []]
       [(Term.typeSpec
         ":"
         («term_<_»
          (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")")
          "<"
          `n))]
       ":="
       (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) `hn])))
     []
     (Term.app
      `series_ratio_test
      [`n
       («term_/_» (Term.app `Complex.abs [`z]) "/" `n)
       (Term.app `div_nonneg [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) (Term.app `le_of_ltₓ [`hn0])])
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (tacticRwa__
             "rwa"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)]
              "]")
             [])
            [])])))
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m `hm] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `abs_abs)
                  ","
                  (Tactic.rwRule [] `abs_abs)
                  ","
                  (Tactic.rwRule [] `Nat.factorial_succ)
                  ","
                  (Tactic.rwRule [] `pow_succₓ)
                  ","
                  (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
                  ","
                  (Tactic.rwRule [] `Nat.cast_mul)
                  ","
                  (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                  ","
                  (Tactic.rwRule [] `mul_div_assoc)
                  ","
                  (Tactic.rwRule [] `mul_div_right_comm)
                  ","
                  (Tactic.rwRule [] `abs_mul)
                  ","
                  (Tactic.rwRule [] `abs_div)
                  ","
                  (Tactic.rwRule [] `abs_cast_nat)]
                 "]")
                [])
               "<;>"
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_le_mul_of_nonneg_right
                 [(Term.app
                   `div_le_div_of_le_left
                   [(Term.app `abs_nonneg [(Term.hole "_")])
                    `hn0
                    (Term.app
                     (Term.proj `Nat.cast_le "." (fieldIdx "2"))
                     [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
                  (Term.app `abs_nonneg [(Term.hole "_")])])))
              [])])))))])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`n "," `hn] "⟩")
     []
     []
     ":="
     (Term.app `exists_nat_gt [(Term.app `abs [`z])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hn0 []]
      [(Term.typeSpec
        ":"
        («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")") "<" `n))]
      ":="
      (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) `hn])))
    []
    (Term.app
     `series_ratio_test
     [`n
      («term_/_» (Term.app `Complex.abs [`z]) "/" `n)
      (Term.app `div_nonneg [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) (Term.app `le_of_ltₓ [`hn0])])
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)]
             "]")
            [])
           [])])))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`m `hm] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `abs_abs)
                 ","
                 (Tactic.rwRule [] `abs_abs)
                 ","
                 (Tactic.rwRule [] `Nat.factorial_succ)
                 ","
                 (Tactic.rwRule [] `pow_succₓ)
                 ","
                 (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
                 ","
                 (Tactic.rwRule [] `Nat.cast_mul)
                 ","
                 (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                 ","
                 (Tactic.rwRule [] `mul_div_assoc)
                 ","
                 (Tactic.rwRule [] `mul_div_right_comm)
                 ","
                 (Tactic.rwRule [] `abs_mul)
                 ","
                 (Tactic.rwRule [] `abs_div)
                 ","
                 (Tactic.rwRule [] `abs_cast_nat)]
                "]")
               [])
              "<;>"
              (Tactic.exact
               "exact"
               (Term.app
                `mul_le_mul_of_nonneg_right
                [(Term.app
                  `div_le_div_of_le_left
                  [(Term.app `abs_nonneg [(Term.hole "_")])
                   `hn0
                   (Term.app
                    (Term.proj `Nat.cast_le "." (fieldIdx "2"))
                    [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
                 (Term.app `abs_nonneg [(Term.hole "_")])])))
             [])])))))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hn0 []]
     [(Term.typeSpec
       ":"
       («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")") "<" `n))]
     ":="
     (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) `hn])))
   []
   (Term.app
    `series_ratio_test
    [`n
     («term_/_» (Term.app `Complex.abs [`z]) "/" `n)
     (Term.app `div_nonneg [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) (Term.app `le_of_ltₓ [`hn0])])
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)]
            "]")
           [])
          [])])))
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m `hm] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `abs_abs)
                ","
                (Tactic.rwRule [] `abs_abs)
                ","
                (Tactic.rwRule [] `Nat.factorial_succ)
                ","
                (Tactic.rwRule [] `pow_succₓ)
                ","
                (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
                ","
                (Tactic.rwRule [] `Nat.cast_mul)
                ","
                (Tactic.rwRule ["←"] `div_div_eq_div_mul)
                ","
                (Tactic.rwRule [] `mul_div_assoc)
                ","
                (Tactic.rwRule [] `mul_div_right_comm)
                ","
                (Tactic.rwRule [] `abs_mul)
                ","
                (Tactic.rwRule [] `abs_div)
                ","
                (Tactic.rwRule [] `abs_cast_nat)]
               "]")
              [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app
               `mul_le_mul_of_nonneg_right
               [(Term.app
                 `div_le_div_of_le_left
                 [(Term.app `abs_nonneg [(Term.hole "_")])
                  `hn0
                  (Term.app
                   (Term.proj `Nat.cast_le "." (fieldIdx "2"))
                   [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
                (Term.app `abs_nonneg [(Term.hole "_")])])))
            [])])))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `series_ratio_test
   [`n
    («term_/_» (Term.app `Complex.abs [`z]) "/" `n)
    (Term.app `div_nonneg [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) (Term.app `le_of_ltₓ [`hn0])])
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (tacticRwa__
          "rwa"
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)] "]")
          [])
         [])])))
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m `hm] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `abs_abs)
               ","
               (Tactic.rwRule [] `abs_abs)
               ","
               (Tactic.rwRule [] `Nat.factorial_succ)
               ","
               (Tactic.rwRule [] `pow_succₓ)
               ","
               (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
               ","
               (Tactic.rwRule [] `Nat.cast_mul)
               ","
               (Tactic.rwRule ["←"] `div_div_eq_div_mul)
               ","
               (Tactic.rwRule [] `mul_div_assoc)
               ","
               (Tactic.rwRule [] `mul_div_right_comm)
               ","
               (Tactic.rwRule [] `abs_mul)
               ","
               (Tactic.rwRule [] `abs_div)
               ","
               (Tactic.rwRule [] `abs_cast_nat)]
              "]")
             [])
            "<;>"
            (Tactic.exact
             "exact"
             (Term.app
              `mul_le_mul_of_nonneg_right
              [(Term.app
                `div_le_div_of_le_left
                [(Term.app `abs_nonneg [(Term.hole "_")])
                 `hn0
                 (Term.app
                  (Term.proj `Nat.cast_le "." (fieldIdx "2"))
                  [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
               (Term.app `abs_nonneg [(Term.hole "_")])])))
           [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m `hm] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `abs_abs)
             ","
             (Tactic.rwRule [] `abs_abs)
             ","
             (Tactic.rwRule [] `Nat.factorial_succ)
             ","
             (Tactic.rwRule [] `pow_succₓ)
             ","
             (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
             ","
             (Tactic.rwRule [] `Nat.cast_mul)
             ","
             (Tactic.rwRule ["←"] `div_div_eq_div_mul)
             ","
             (Tactic.rwRule [] `mul_div_assoc)
             ","
             (Tactic.rwRule [] `mul_div_right_comm)
             ","
             (Tactic.rwRule [] `abs_mul)
             ","
             (Tactic.rwRule [] `abs_div)
             ","
             (Tactic.rwRule [] `abs_cast_nat)]
            "]")
           [])
          "<;>"
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul_of_nonneg_right
            [(Term.app
              `div_le_div_of_le_left
              [(Term.app `abs_nonneg [(Term.hole "_")])
               `hn0
               (Term.app
                (Term.proj `Nat.cast_le "." (fieldIdx "2"))
                [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
             (Term.app `abs_nonneg [(Term.hole "_")])])))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `abs_abs)
           ","
           (Tactic.rwRule [] `abs_abs)
           ","
           (Tactic.rwRule [] `Nat.factorial_succ)
           ","
           (Tactic.rwRule [] `pow_succₓ)
           ","
           (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
           ","
           (Tactic.rwRule [] `Nat.cast_mul)
           ","
           (Tactic.rwRule ["←"] `div_div_eq_div_mul)
           ","
           (Tactic.rwRule [] `mul_div_assoc)
           ","
           (Tactic.rwRule [] `mul_div_right_comm)
           ","
           (Tactic.rwRule [] `abs_mul)
           ","
           (Tactic.rwRule [] `abs_div)
           ","
           (Tactic.rwRule [] `abs_cast_nat)]
          "]")
         [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `mul_le_mul_of_nonneg_right
          [(Term.app
            `div_le_div_of_le_left
            [(Term.app `abs_nonneg [(Term.hole "_")])
             `hn0
             (Term.app
              (Term.proj `Nat.cast_le "." (fieldIdx "2"))
              [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
           (Term.app `abs_nonneg [(Term.hole "_")])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq
    "rw"
    []
    (Tactic.rwRuleSeq
     "["
     [(Tactic.rwRule [] `abs_abs)
      ","
      (Tactic.rwRule [] `abs_abs)
      ","
      (Tactic.rwRule [] `Nat.factorial_succ)
      ","
      (Tactic.rwRule [] `pow_succₓ)
      ","
      (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
      ","
      (Tactic.rwRule [] `Nat.cast_mul)
      ","
      (Tactic.rwRule ["←"] `div_div_eq_div_mul)
      ","
      (Tactic.rwRule [] `mul_div_assoc)
      ","
      (Tactic.rwRule [] `mul_div_right_comm)
      ","
      (Tactic.rwRule [] `abs_mul)
      ","
      (Tactic.rwRule [] `abs_div)
      ","
      (Tactic.rwRule [] `abs_cast_nat)]
     "]")
    [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `mul_le_mul_of_nonneg_right
     [(Term.app
       `div_le_div_of_le_left
       [(Term.app `abs_nonneg [(Term.hole "_")])
        `hn0
        (Term.app
         (Term.proj `Nat.cast_le "." (fieldIdx "2"))
         [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
      (Term.app `abs_nonneg [(Term.hole "_")])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `mul_le_mul_of_nonneg_right
    [(Term.app
      `div_le_div_of_le_left
      [(Term.app `abs_nonneg [(Term.hole "_")])
       `hn0
       (Term.app
        (Term.proj `Nat.cast_le "." (fieldIdx "2"))
        [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
     (Term.app `abs_nonneg [(Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_le_mul_of_nonneg_right
   [(Term.app
     `div_le_div_of_le_left
     [(Term.app `abs_nonneg [(Term.hole "_")])
      `hn0
      (Term.app
       (Term.proj `Nat.cast_le "." (fieldIdx "2"))
       [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
    (Term.app `abs_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `div_le_div_of_le_left
   [(Term.app `abs_nonneg [(Term.hole "_")])
    `hn0
    (Term.app
     (Term.proj `Nat.cast_le "." (fieldIdx "2"))
     [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `Nat.cast_le "." (fieldIdx "2"))
   [(Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_transₓ [`hm (Term.app `Nat.le_succₓ [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_succₓ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.le_succₓ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_transₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_transₓ [`hm (Term.paren "(" [(Term.app `Nat.le_succₓ [(Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_le "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `Nat.cast_le "." (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app `le_transₓ [`hm (Term.paren "(" [(Term.app `Nat.le_succₓ [(Term.hole "_")]) []] ")")]) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hn0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_of_le_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_le_div_of_le_left
   [(Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")")
    `hn0
    (Term.paren
     "("
     [(Term.app
       (Term.proj `Nat.cast_le "." (fieldIdx "2"))
       [(Term.paren
         "("
         [(Term.app `le_transₓ [`hm (Term.paren "(" [(Term.app `Nat.le_succₓ [(Term.hole "_")]) []] ")")]) []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `abs_abs)
     ","
     (Tactic.rwRule [] `abs_abs)
     ","
     (Tactic.rwRule [] `Nat.factorial_succ)
     ","
     (Tactic.rwRule [] `pow_succₓ)
     ","
     (Tactic.rwRule [] (Term.app `mul_commₓ [`m.succ]))
     ","
     (Tactic.rwRule [] `Nat.cast_mul)
     ","
     (Tactic.rwRule ["←"] `div_div_eq_div_mul)
     ","
     (Tactic.rwRule [] `mul_div_assoc)
     ","
     (Tactic.rwRule [] `mul_div_right_comm)
     ","
     (Tactic.rwRule [] `abs_mul)
     ","
     (Tactic.rwRule [] `abs_div)
     ","
     (Tactic.rwRule [] `abs_cast_nat)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_cast_nat
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_right_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_assoc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_div_eq_div_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.cast_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_commₓ [`m.succ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.factorial_succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)] "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `one_mulₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `div_lt_iff [`hn0])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_lt_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `div_lt_iff [`hn0])) "," (Tactic.rwRule [] `one_mulₓ)] "]")
        [])
       [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `div_nonneg [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) (Term.app `le_of_ltₓ [`hn0])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_of_ltₓ [`hn0])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn0
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_ltₓ [`hn0]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Complex.abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_nonneg
   [(Term.paren "(" [(Term.app `Complex.abs_nonneg [(Term.hole "_")]) []] ")")
    (Term.paren "(" [(Term.app `le_of_ltₓ [`hn0]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_/_» (Term.app `Complex.abs [`z]) "/" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Term.app `Complex.abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_/_» (Term.app `Complex.abs [`z]) "/" `n) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `series_ratio_test
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `lt_of_le_of_ltₓ [(Term.app `abs_nonneg [(Term.hole "_")]) `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lt_of_le_of_ltₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")") "<" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [(numLit "0") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `exists_nat_gt [(Term.app `abs [`z])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs [`z]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exists_nat_gt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`n "," `hn] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app
   `IsCauSeq
   [`HasAbs.abs
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [`n])
       ", "
       (Term.app `abs [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`n])
     ", "
     (Term.app `abs [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   (Term.app `abs [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `z "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_abs_exp
  ( z : ℂ ) : IsCauSeq HasAbs.abs fun n => ∑ m in range n , abs z ^ m / m !
  :=
    let
      ⟨ n , hn ⟩ := exists_nat_gt abs z
      have
        hn0 : ( 0 : ℝ ) < n := lt_of_le_of_ltₓ abs_nonneg _ hn
        series_ratio_test
          n
            Complex.abs z / n
            div_nonneg Complex.abs_nonneg _ le_of_ltₓ hn0
            by rwa [ div_lt_iff hn0 , one_mulₓ ]
            fun
              m hm
                =>
                by
                  rw
                      [
                        abs_abs
                          ,
                          abs_abs
                          ,
                          Nat.factorial_succ
                          ,
                          pow_succₓ
                          ,
                          mul_commₓ m.succ
                          ,
                          Nat.cast_mul
                          ,
                          ← div_div_eq_div_mul
                          ,
                          mul_div_assoc
                          ,
                          mul_div_right_comm
                          ,
                          abs_mul
                          ,
                          abs_div
                          ,
                          abs_cast_nat
                        ]
                    <;>
                    exact
                      mul_le_mul_of_nonneg_right
                        div_le_div_of_le_left abs_nonneg _ hn0 Nat.cast_le . 2 le_transₓ hm Nat.le_succₓ _ abs_nonneg _

noncomputable section

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `is_cau_exp [])
  (Command.declSig
   [(Term.explicitBinder "(" [`z] [":" (Data.Complex.Basic.termℂ "ℂ")] [] ")")]
   (Term.typeSpec
    ":"
    (Term.app
     `IsCauSeq
     [`abs
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`n] [])]
        "=>"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`n])
         ", "
         («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))])))
  (Command.declValSimple ":=" (Term.app `is_cau_series_of_abv_cau [(Term.app `is_cau_abs_exp [`z])]) [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `is_cau_series_of_abv_cau [(Term.app `is_cau_abs_exp [`z])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `is_cau_abs_exp [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_abs_exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `is_cau_abs_exp [`z]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_series_of_abv_cau
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app
   `IsCauSeq
   [`abs
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [`n])
       ", "
       («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`n])
     ", "
     («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `z "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  is_cau_exp
  ( z : ℂ ) : IsCauSeq abs fun n => ∑ m in range n , z ^ m / m !
  := is_cau_series_of_abv_cau is_cau_abs_exp z

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " The Cauchy sequence consisting of partial sums of the Taylor series of\nthe complex exponential function -/")]
  [(Term.attributes "@[" [(Term.attrInstance (Term.attrKind []) (Attr.simple `pp_nodot []))] "]")]
  []
  []
  []
  [])
 (Command.def
  "def"
  (Command.declId `exp' [])
  (Command.optDeclSig
   [(Term.explicitBinder "(" [`z] [":" (Data.Complex.Basic.termℂ "ℂ")] [] ")")]
   [(Term.typeSpec ":" (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `Complex.abs]))])
  (Command.declValSimple
   ":="
   (Term.anonymousCtor
    "⟨"
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`n] [])]
       "=>"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [`n])
        ", "
        («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
     ","
     (Term.app `is_cau_exp [`z])]
    "⟩")
   [])
  []
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`n] [])]
      "=>"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [`n])
       ", "
       («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
    ","
    (Term.app `is_cau_exp [`z])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `is_cau_exp [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`n] [])]
    "=>"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`n])
     ", "
     («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `z "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `z "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `z
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
      The Cauchy sequence consisting of partial sums of the Taylor series of
      the complex exponential function -/
    @[ pp_nodot ]
  def exp' ( z : ℂ ) : CauSeq ℂ Complex.abs := ⟨ fun n => ∑ m in range n , z ^ m / m ! , is_cau_exp z ⟩

/--  The complex exponential function, defined via its Taylor series -/
@[pp_nodot]
def exp (z : ℂ) : ℂ :=
  limₓ (exp' z)

/--  The complex sine function, defined via `exp` -/
@[pp_nodot]
def sin (z : ℂ) : ℂ :=
  ((exp ((-z)*I) - exp (z*I))*I) / 2

/--  The complex cosine function, defined via `exp` -/
@[pp_nodot]
def cos (z : ℂ) : ℂ :=
  (exp (z*I)+exp ((-z)*I)) / 2

/--  The complex tangent function, defined as `sin z / cos z` -/
@[pp_nodot]
def tan (z : ℂ) : ℂ :=
  sin z / cos z

/--  The complex hyperbolic sine function, defined via `exp` -/
@[pp_nodot]
def sinh (z : ℂ) : ℂ :=
  (exp z - exp (-z)) / 2

/--  The complex hyperbolic cosine function, defined via `exp` -/
@[pp_nodot]
def cosh (z : ℂ) : ℂ :=
  (exp z+exp (-z)) / 2

/--  The complex hyperbolic tangent function, defined as `sinh z / cosh z` -/
@[pp_nodot]
def tanh (z : ℂ) : ℂ :=
  sinh z / cosh z

end Complex

namespace Real

open Complex

/--  The real exponential function, defined as the real part of the complex exponential -/
@[pp_nodot]
def exp (x : ℝ) : ℝ :=
  (exp x).re

/--  The real sine function, defined as the real part of the complex sine -/
@[pp_nodot]
def sin (x : ℝ) : ℝ :=
  (sin x).re

/--  The real cosine function, defined as the real part of the complex cosine -/
@[pp_nodot]
def cos (x : ℝ) : ℝ :=
  (cos x).re

/--  The real tangent function, defined as the real part of the complex tangent -/
@[pp_nodot]
def tan (x : ℝ) : ℝ :=
  (tan x).re

/--  The real hypebolic sine function, defined as the real part of the complex hyperbolic sine -/
@[pp_nodot]
def sinh (x : ℝ) : ℝ :=
  (sinh x).re

/--  The real hypebolic cosine function, defined as the real part of the complex hyperbolic cosine -/
@[pp_nodot]
def cosh (x : ℝ) : ℝ :=
  (cosh x).re

/--  The real hypebolic tangent function, defined as the real part of
the complex hyperbolic tangent -/
@[pp_nodot]
def tanh (x : ℝ) : ℝ :=
  (tanh x).re

end Real

namespace Complex

variable (x y : ℂ)

@[simp]
theorem exp_zero : exp 0 = 1 :=
  lim_eq_of_equiv_const $ fun ε ε0 =>
    ⟨1, fun j hj => by
      convert ε0
      cases j
      ·
        exact absurd hj (not_le_of_gtₓ zero_lt_one)
      ·
        dsimp [exp']
        induction' j with j ih
        ·
          dsimp [exp'] <;> simp
        ·
          rw [←
            ih
              (by
                decide)]
          simp only [sum_range_succ, pow_succₓ]
          simp ⟩

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_add [])
  (Command.declSig
   []
   (Term.typeSpec
    ":"
    («term_=_»
     (Term.app `exp [(Init.Logic.«term_+_» `x "+" `y)])
     "="
     (Finset.Data.Finset.Fold.«term_*_» (Term.app `exp [`x]) "*" (Term.app `exp [`y])))))
  (Command.declValSimple
   ":="
   (Term.show
    "show"
    («term_=_»
     (Term.app
      `limₓ
      [(Term.paren
        "("
        [(Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [(Init.Logic.«term_+_» `x "+" `y)])] "⟩")
         [(Term.typeAscription ":" (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs]))]]
        ")")])
     "="
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.app
       `limₓ
       [(Term.show
         "show"
         (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs])
         (Term.fromTerm "from" (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [`x])] "⟩")))])
      "*"
      (Term.app
       `limₓ
       [(Term.show
         "show"
         (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs])
         (Term.fromTerm "from" (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [`y])] "⟩")))])))
    (Term.fromTerm
     "from"
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hj []]
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.simpleBinder [`j] [(Term.typeSpec ":" (termℕ "ℕ"))])]
           ","
           («term_=_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`j])
             ", "
             («term_/_»
              («term_^_» (Init.Logic.«term_+_» `x "+" `y) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
            "="
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             " in "
             (Term.app `range [`j])
             ", "
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
              " in "
              (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
              ", "
              (Finset.Data.Finset.Fold.«term_*_»
               («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
               "*"
               («term_/_»
                («term_^_» `y "^" («term_-_» `i "-" `k))
                "/"
                (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))))))))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`j] [])]
          "=>"
          (Term.app
           `Finset.sum_congr
           [`rfl
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`m `hm] [])]
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `add_pow)
                      ","
                      (Tactic.rwRule [] `div_eq_mul_inv)
                      ","
                      (Tactic.rwRule [] `sum_mul)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `Finset.sum_congr
                     [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
                   [])
                  (group
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h₁ []]
                      [(Term.typeSpec
                        ":"
                        («term_≠_»
                         (Term.paren
                          "("
                          [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                          ")")
                         "≠"
                         (numLit "0")))]
                      ":="
                      (Term.app
                       (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
                       [(Term.app
                         (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                         [(Term.app
                           `Nat.choose_pos
                           [(Term.app
                             `Nat.le_of_lt_succₓ
                             [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
                   [])
                  (group
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h₂ []]
                      []
                      ":="
                      (Term.app
                       `Nat.choose_mul_factorial_mul_factorial
                       [(«term_$__»
                         `Nat.le_of_lt_succₓ
                         "$"
                         (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
                   [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule ["←"] `h₂)
                      ","
                      (Tactic.rwRule [] `Nat.cast_mul)
                      ","
                      (Tactic.rwRule [] `Nat.cast_mul)
                      ","
                      (Tactic.rwRule [] `mul_inv₀)
                      ","
                      (Tactic.rwRule [] `mul_inv₀)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.simp
                    "simp"
                    []
                    ["only"]
                    ["["
                     [(Tactic.simpLemma
                       []
                       []
                       (Term.app
                        `mul_left_commₓ
                        [(Term.paren
                          "("
                          [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                          ")")]))
                      ","
                      (Tactic.simpLemma [] [] `mul_assocₓ)
                      ","
                      (Tactic.simpLemma
                       []
                       []
                       (Term.app
                        `mul_left_commₓ
                        [(Init.Logic.«term_⁻¹»
                          (Term.paren
                           "("
                           [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                           ")")
                          "⁻¹")]))
                      ","
                      (Tactic.simpLemma
                       []
                       []
                       (Term.app
                        `mul_commₓ
                        [(Term.paren
                          "("
                          [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                          ")")]))]
                     "]"]
                    [])
                   [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]")
                    [])
                   [])
                  (group
                   (Tactic.simp
                    "simp"
                    []
                    []
                    ["["
                     [(Tactic.simpLemma [] [] `div_eq_mul_inv)
                      ","
                      (Tactic.simpLemma [] [] `mul_commₓ)
                      ","
                      (Tactic.simpLemma [] [] `mul_assocₓ)
                      ","
                      (Tactic.simpLemma [] [] `mul_left_commₓ)]
                     "]"]
                    [])
                   [])])))))])))))
      []
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
            "<;>"
            (Tactic.exact
             "exact"
             (Term.app
              `Eq.symm
              [(Term.app
                `lim_eq_lim_of_equiv
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.dsimp "dsimp" [] [] [] [] [])
                       "<;>"
                       (Tactic.«tactic_<;>_»
                        (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
                        "<;>"
                        (Tactic.exact
                         "exact"
                         (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
                      [])])))])])))
           [])]))))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.show
   "show"
   («term_=_»
    (Term.app
     `limₓ
     [(Term.paren
       "("
       [(Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [(Init.Logic.«term_+_» `x "+" `y)])] "⟩")
        [(Term.typeAscription ":" (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs]))]]
       ")")])
    "="
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app
      `limₓ
      [(Term.show
        "show"
        (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs])
        (Term.fromTerm "from" (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [`x])] "⟩")))])
     "*"
     (Term.app
      `limₓ
      [(Term.show
        "show"
        (Term.app `CauSeq [(Data.Complex.Basic.termℂ "ℂ") `abs])
        (Term.fromTerm "from" (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.app `is_cau_exp [`y])] "⟩")))])))
   (Term.fromTerm
    "from"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hj []]
       [(Term.typeSpec
         ":"
         (Term.forall
          "∀"
          [(Term.simpleBinder [`j] [(Term.typeSpec ":" (termℕ "ℕ"))])]
          ","
          («term_=_»
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [`j])
            ", "
            («term_/_»
             («term_^_» (Init.Logic.«term_+_» `x "+" `y) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
           "="
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            " in "
            (Term.app `range [`j])
            ", "
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
             " in "
             (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
              "*"
              («term_/_»
               («term_^_» `y "^" («term_-_» `i "-" `k))
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))))))))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`j] [])]
         "=>"
         (Term.app
          `Finset.sum_congr
          [`rfl
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`m `hm] [])]
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `Finset.sum_congr
                    [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h₁ []]
                     [(Term.typeSpec
                       ":"
                       («term_≠_»
                        (Term.paren
                         "("
                         [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                         ")")
                        "≠"
                        (numLit "0")))]
                     ":="
                     (Term.app
                      (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
                      [(Term.app
                        (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                        [(Term.app
                          `Nat.choose_pos
                          [(Term.app
                            `Nat.le_of_lt_succₓ
                            [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
                  [])
                 (group
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h₂ []]
                     []
                     ":="
                     (Term.app
                      `Nat.choose_mul_factorial_mul_factorial
                      [(«term_$__»
                        `Nat.le_of_lt_succₓ
                        "$"
                        (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule ["←"] `h₂)
                     ","
                     (Tactic.rwRule [] `Nat.cast_mul)
                     ","
                     (Tactic.rwRule [] `Nat.cast_mul)
                     ","
                     (Tactic.rwRule [] `mul_inv₀)
                     ","
                     (Tactic.rwRule [] `mul_inv₀)]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.simp
                   "simp"
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma
                      []
                      []
                      (Term.app
                       `mul_left_commₓ
                       [(Term.paren
                         "("
                         [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                         ")")]))
                     ","
                     (Tactic.simpLemma [] [] `mul_assocₓ)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.app
                       `mul_left_commₓ
                       [(Init.Logic.«term_⁻¹»
                         (Term.paren
                          "("
                          [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                          ")")
                         "⁻¹")]))
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.app
                       `mul_commₓ
                       [(Term.paren
                         "("
                         [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                         ")")]))]
                    "]"]
                   [])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]")
                   [])
                  [])
                 (group
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["["
                    [(Tactic.simpLemma [] [] `div_eq_mul_inv)
                     ","
                     (Tactic.simpLemma [] [] `mul_commₓ)
                     ","
                     (Tactic.simpLemma [] [] `mul_assocₓ)
                     ","
                     (Tactic.simpLemma [] [] `mul_left_commₓ)]
                    "]"]
                   [])
                  [])])))))])))))
     []
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
           "<;>"
           (Tactic.exact
            "exact"
            (Term.app
             `Eq.symm
             [(Term.app
               `lim_eq_lim_of_equiv
               [(Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.dsimp "dsimp" [] [] [] [] [])
                      "<;>"
                      (Tactic.«tactic_<;>_»
                       (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
                       "<;>"
                       (Tactic.exact
                        "exact"
                        (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
                     [])])))])])))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'Lean.Parser.Term.show.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.fromTerm.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hj []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.simpleBinder [`j] [(Term.typeSpec ":" (termℕ "ℕ"))])]
        ","
        («term_=_»
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
          " in "
          (Term.app `range [`j])
          ", "
          («term_/_»
           («term_^_» (Init.Logic.«term_+_» `x "+" `y) "^" `m)
           "/"
           (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
         "="
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
          " in "
          (Term.app `range [`j])
          ", "
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
           " in "
           (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
           ", "
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
            "*"
            («term_/_»
             («term_^_» `y "^" («term_-_» `i "-" `k))
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))))))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`j] [])]
       "=>"
       (Term.app
        `Finset.sum_congr
        [`rfl
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`m `hm] [])]
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
                  "]")
                 [])
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `Finset.sum_congr
                  [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
                [])
               (group
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₁ []]
                   [(Term.typeSpec
                     ":"
                     («term_≠_»
                      (Term.paren
                       "("
                       [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                       ")")
                      "≠"
                      (numLit "0")))]
                   ":="
                   (Term.app
                    (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
                    [(Term.app
                      (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                      [(Term.app
                        `Nat.choose_pos
                        [(Term.app
                          `Nat.le_of_lt_succₓ
                          [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
                [])
               (group
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₂ []]
                   []
                   ":="
                   (Term.app
                    `Nat.choose_mul_factorial_mul_factorial
                    [(«term_$__»
                      `Nat.le_of_lt_succₓ
                      "$"
                      (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `h₂)
                   ","
                   (Tactic.rwRule [] `Nat.cast_mul)
                   ","
                   (Tactic.rwRule [] `Nat.cast_mul)
                   ","
                   (Tactic.rwRule [] `mul_inv₀)
                   ","
                   (Tactic.rwRule [] `mul_inv₀)]
                  "]")
                 [])
                [])
               (group
                (Tactic.simp
                 "simp"
                 []
                 ["only"]
                 ["["
                  [(Tactic.simpLemma
                    []
                    []
                    (Term.app
                     `mul_left_commₓ
                     [(Term.paren
                       "("
                       [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                       ")")]))
                   ","
                   (Tactic.simpLemma [] [] `mul_assocₓ)
                   ","
                   (Tactic.simpLemma
                    []
                    []
                    (Term.app
                     `mul_left_commₓ
                     [(Init.Logic.«term_⁻¹»
                       (Term.paren
                        "("
                        [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                        ")")
                       "⁻¹")]))
                   ","
                   (Tactic.simpLemma
                    []
                    []
                    (Term.app
                     `mul_commₓ
                     [(Term.paren
                       "("
                       [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                       ")")]))]
                  "]"]
                 [])
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]")
                 [])
                [])
               (group
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["["
                  [(Tactic.simpLemma [] [] `div_eq_mul_inv)
                   ","
                   (Tactic.simpLemma [] [] `mul_commₓ)
                   ","
                   (Tactic.simpLemma [] [] `mul_assocₓ)
                   ","
                   (Tactic.simpLemma [] [] `mul_left_commₓ)]
                  "]"]
                 [])
                [])])))))])))))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `Eq.symm
           [(Term.app
             `lim_eq_lim_of_equiv
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.dsimp "dsimp" [] [] [] [] [])
                    "<;>"
                    (Tactic.«tactic_<;>_»
                     (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
                     "<;>"
                     (Tactic.exact
                      "exact"
                      (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
                   [])])))])])))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
        "<;>"
        (Tactic.exact
         "exact"
         (Term.app
          `Eq.symm
          [(Term.app
            `lim_eq_lim_of_equiv
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.dsimp "dsimp" [] [] [] [] [])
                   "<;>"
                   (Tactic.«tactic_<;>_»
                    (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
                    "<;>"
                    (Tactic.exact
                     "exact"
                     (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
                  [])])))])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
   "<;>"
   (Tactic.exact
    "exact"
    (Term.app
     `Eq.symm
     [(Term.app
       `lim_eq_lim_of_equiv
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.dsimp "dsimp" [] [] [] [] [])
              "<;>"
              (Tactic.«tactic_<;>_»
               (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
               "<;>"
               (Tactic.exact
                "exact"
                (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
             [])])))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `Eq.symm
    [(Term.app
      `lim_eq_lim_of_equiv
      [(Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.dsimp "dsimp" [] [] [] [] [])
             "<;>"
             (Tactic.«tactic_<;>_»
              (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
              "<;>"
              (Tactic.exact
               "exact"
               (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
            [])])))])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Eq.symm
   [(Term.app
     `lim_eq_lim_of_equiv
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.dsimp "dsimp" [] [] [] [] [])
            "<;>"
            (Tactic.«tactic_<;>_»
             (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
           [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `lim_eq_lim_of_equiv
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.dsimp "dsimp" [] [] [] [] [])
          "<;>"
          (Tactic.«tactic_<;>_»
           (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
           "<;>"
           (Tactic.exact
            "exact"
            (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
         [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.dsimp "dsimp" [] [] [] [] [])
        "<;>"
        (Tactic.«tactic_<;>_»
         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.dsimp "dsimp" [] [] [] [] [])
   "<;>"
   (Tactic.«tactic_<;>_»
    (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
    "<;>"
    (Tactic.exact "exact" (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
   "<;>"
   (Tactic.exact "exact" (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `cauchy_product [(Term.app `is_cau_abs_exp [`x]) (Term.app `is_cau_exp [`y])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `is_cau_exp [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `is_cau_exp [`y]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `is_cau_abs_exp [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `is_cau_abs_exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `is_cau_abs_exp [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `cauchy_product
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.dsimp "dsimp" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.dsimp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.dsimp "dsimp" [] [] [] [] [])
        "<;>"
        (Tactic.«tactic_<;>_»
         (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
         "<;>"
         (Tactic.exact
          "exact"
          (Term.app
           `cauchy_product
           [(Term.paren "(" [(Term.app `is_cau_abs_exp [`x]) []] ")")
            (Term.paren "(" [(Term.app `is_cau_exp [`y]) []] ")")]))))
       [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `lim_eq_lim_of_equiv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `lim_eq_lim_of_equiv
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.dsimp "dsimp" [] [] [] [] [])
            "<;>"
            (Tactic.«tactic_<;>_»
             (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `hj)] "]"] [])
             "<;>"
             (Tactic.exact
              "exact"
              (Term.app
               `cauchy_product
               [(Term.paren "(" [(Term.app `is_cau_abs_exp [`x]) []] ")")
                (Term.paren "(" [(Term.app `is_cau_exp [`y]) []] ")")]))))
           [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Eq.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `lim_mul_lim)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `lim_mul_lim
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`j] [])]
    "=>"
    (Term.app
     `Finset.sum_congr
     [`rfl
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`m `hm] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
               "]")
              [])
             [])
            (group
             (Tactic.refine'
              "refine'"
              (Term.app
               `Finset.sum_congr
               [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₁ []]
                [(Term.typeSpec
                  ":"
                  («term_≠_»
                   (Term.paren
                    "("
                    [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                    ")")
                   "≠"
                   (numLit "0")))]
                ":="
                (Term.app
                 (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
                 [(Term.app
                   (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                   [(Term.app
                     `Nat.choose_pos
                     [(Term.app
                       `Nat.le_of_lt_succₓ
                       [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₂ []]
                []
                ":="
                (Term.app
                 `Nat.choose_mul_factorial_mul_factorial
                 [(«term_$__»
                   `Nat.le_of_lt_succₓ
                   "$"
                   (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule ["←"] `h₂)
                ","
                (Tactic.rwRule [] `Nat.cast_mul)
                ","
                (Tactic.rwRule [] `Nat.cast_mul)
                ","
                (Tactic.rwRule [] `mul_inv₀)
                ","
                (Tactic.rwRule [] `mul_inv₀)]
               "]")
              [])
             [])
            (group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["["
               [(Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `mul_left_commₓ
                  [(Term.paren
                    "("
                    [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                    ")")]))
                ","
                (Tactic.simpLemma [] [] `mul_assocₓ)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `mul_left_commₓ
                  [(Init.Logic.«term_⁻¹»
                    (Term.paren
                     "("
                     [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                     ")")
                    "⁻¹")]))
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `mul_commₓ
                  [(Term.paren
                    "("
                    [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                    ")")]))]
               "]"]
              [])
             [])
            (group
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]") [])
             [])
            (group
             (Tactic.simp
              "simp"
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `div_eq_mul_inv)
                ","
                (Tactic.simpLemma [] [] `mul_commₓ)
                ","
                (Tactic.simpLemma [] [] `mul_assocₓ)
                ","
                (Tactic.simpLemma [] [] `mul_left_commₓ)]
               "]"]
              [])
             [])])))))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Finset.sum_congr
   [`rfl
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m `hm] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
             "]")
            [])
           [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             `Finset.sum_congr
             [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
           [])
          (group
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₁ []]
              [(Term.typeSpec
                ":"
                («term_≠_»
                 (Term.paren
                  "("
                  [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                  ")")
                 "≠"
                 (numLit "0")))]
              ":="
              (Term.app
               (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
               [(Term.app
                 (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                 [(Term.app
                   `Nat.choose_pos
                   [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
           [])
          (group
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₂ []]
              []
              ":="
              (Term.app
               `Nat.choose_mul_factorial_mul_factorial
               [(«term_$__»
                 `Nat.le_of_lt_succₓ
                 "$"
                 (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `h₂)
              ","
              (Tactic.rwRule [] `Nat.cast_mul)
              ","
              (Tactic.rwRule [] `Nat.cast_mul)
              ","
              (Tactic.rwRule [] `mul_inv₀)
              ","
              (Tactic.rwRule [] `mul_inv₀)]
             "]")
            [])
           [])
          (group
           (Tactic.simp
            "simp"
            []
            ["only"]
            ["["
             [(Tactic.simpLemma
               []
               []
               (Term.app
                `mul_left_commₓ
                [(Term.paren
                  "("
                  [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                  ")")]))
              ","
              (Tactic.simpLemma [] [] `mul_assocₓ)
              ","
              (Tactic.simpLemma
               []
               []
               (Term.app
                `mul_left_commₓ
                [(Init.Logic.«term_⁻¹»
                  (Term.paren
                   "("
                   [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                   ")")
                  "⁻¹")]))
              ","
              (Tactic.simpLemma
               []
               []
               (Term.app
                `mul_commₓ
                [(Term.paren
                  "("
                  [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                  ")")]))]
             "]"]
            [])
           [])
          (group
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]") [])
           [])
          (group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `div_eq_mul_inv)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)
              ","
              (Tactic.simpLemma [] [] `mul_assocₓ)
              ","
              (Tactic.simpLemma [] [] `mul_left_commₓ)]
             "]"]
            [])
           [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m `hm] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
           "]")
          [])
         [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app
           `Finset.sum_congr
           [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₁ []]
            [(Term.typeSpec
              ":"
              («term_≠_»
               (Term.paren
                "("
                [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")")
               "≠"
               (numLit "0")))]
            ":="
            (Term.app
             (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
             [(Term.app
               (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
               [(Term.app
                 `Nat.choose_pos
                 [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₂ []]
            []
            ":="
            (Term.app
             `Nat.choose_mul_factorial_mul_factorial
             [(«term_$__»
               `Nat.le_of_lt_succₓ
               "$"
               (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule ["←"] `h₂)
            ","
            (Tactic.rwRule [] `Nat.cast_mul)
            ","
            (Tactic.rwRule [] `Nat.cast_mul)
            ","
            (Tactic.rwRule [] `mul_inv₀)
            ","
            (Tactic.rwRule [] `mul_inv₀)]
           "]")
          [])
         [])
        (group
         (Tactic.simp
          "simp"
          []
          ["only"]
          ["["
           [(Tactic.simpLemma
             []
             []
             (Term.app
              `mul_left_commₓ
              [(Term.paren
                "("
                [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")")]))
            ","
            (Tactic.simpLemma [] [] `mul_assocₓ)
            ","
            (Tactic.simpLemma
             []
             []
             (Term.app
              `mul_left_commₓ
              [(Init.Logic.«term_⁻¹»
                (Term.paren
                 "("
                 [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                 ")")
                "⁻¹")]))
            ","
            (Tactic.simpLemma
             []
             []
             (Term.app
              `mul_commₓ
              [(Term.paren
                "("
                [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")")]))]
           "]"]
          [])
         [])
        (group
         (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]") [])
         [])
        (group
         (Tactic.simp
          "simp"
          []
          []
          ["["
           [(Tactic.simpLemma [] [] `div_eq_mul_inv)
            ","
            (Tactic.simpLemma [] [] `mul_commₓ)
            ","
            (Tactic.simpLemma [] [] `mul_assocₓ)
            ","
            (Tactic.simpLemma [] [] `mul_left_commₓ)]
           "]"]
          [])
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `Finset.sum_congr
         [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₁ []]
          [(Term.typeSpec
            ":"
            («term_≠_»
             (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
             "≠"
             (numLit "0")))]
          ":="
          (Term.app
           (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
           [(Term.app
             (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
             [(Term.app
               `Nat.choose_pos
               [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          []
          ":="
          (Term.app
           `Nat.choose_mul_factorial_mul_factorial
           [(«term_$__» `Nat.le_of_lt_succₓ "$" (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] `h₂)
          ","
          (Tactic.rwRule [] `Nat.cast_mul)
          ","
          (Tactic.rwRule [] `Nat.cast_mul)
          ","
          (Tactic.rwRule [] `mul_inv₀)
          ","
          (Tactic.rwRule [] `mul_inv₀)]
         "]")
        [])
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma
           []
           []
           (Term.app
            `mul_left_commₓ
            [(Term.paren
              "("
              [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
              ")")]))
          ","
          (Tactic.simpLemma [] [] `mul_assocₓ)
          ","
          (Tactic.simpLemma
           []
           []
           (Term.app
            `mul_left_commₓ
            [(Init.Logic.«term_⁻¹»
              (Term.paren
               "("
               [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
               ")")
              "⁻¹")]))
          ","
          (Tactic.simpLemma
           []
           []
           (Term.app
            `mul_commₓ
            [(Term.paren
              "("
              [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
              ")")]))]
         "]"]
        [])
       [])
      (group
       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]") [])
       [])
      (group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `div_eq_mul_inv)
          ","
          (Tactic.simpLemma [] [] `mul_commₓ)
          ","
          (Tactic.simpLemma [] [] `mul_assocₓ)
          ","
          (Tactic.simpLemma [] [] `mul_left_commₓ)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `div_eq_mul_inv)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_assocₓ)
     ","
     (Tactic.simpLemma [] [] `mul_left_commₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_eq_mul_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `inv_mul_cancel [`h₁]))] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `inv_mul_cancel [`h₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inv_mul_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma
      []
      []
      (Term.app
       `mul_left_commₓ
       [(Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")]))
     ","
     (Tactic.simpLemma [] [] `mul_assocₓ)
     ","
     (Tactic.simpLemma
      []
      []
      (Term.app
       `mul_left_commₓ
       [(Init.Logic.«term_⁻¹»
         (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
         "⁻¹")]))
     ","
     (Tactic.simpLemma
      []
      []
      (Term.app
       `mul_commₓ
       [(Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")]))]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_commₓ
   [(Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `m.choose [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `m.choose
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_left_commₓ
   [(Init.Logic.«term_⁻¹»
     (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
     "⁻¹")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `m.choose [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `m.choose
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Logic.«term_⁻¹»
   (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
   "⁻¹")
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_left_commₓ
   [(Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `m.choose [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `m.choose
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `h₂)
     ","
     (Tactic.rwRule [] `Nat.cast_mul)
     ","
     (Tactic.rwRule [] `Nat.cast_mul)
     ","
     (Tactic.rwRule [] `mul_inv₀)
     ","
     (Tactic.rwRule [] `mul_inv₀)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_inv₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_inv₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.cast_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.cast_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     []
     ":="
     (Term.app
      `Nat.choose_mul_factorial_mul_factorial
      [(«term_$__» `Nat.le_of_lt_succₓ "$" (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Nat.choose_mul_factorial_mul_factorial
   [(«term_$__» `Nat.le_of_lt_succₓ "$" (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» `Nat.le_of_lt_succₓ "$" (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Finset.mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Finset.mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `Nat.le_of_lt_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» `Nat.le_of_lt_succₓ "$" (Term.app (Term.proj `Finset.mem_range "." (fieldIdx "1")) [`hi])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.choose_mul_factorial_mul_factorial
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec
       ":"
       («term_≠_»
        (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
        "≠"
        (numLit "0")))]
     ":="
     (Term.app
      (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
      [(Term.app
        (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
        [(Term.app
          `Nat.choose_pos
          [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
   [(Term.app
     (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
     [(Term.app
       `Nat.choose_pos
       [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
   [(Term.app
     `Nat.choose_pos
     [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Nat.choose_pos
   [(Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.le_of_lt_succₓ [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hi
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.le_of_lt_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Nat.le_of_lt_succₓ [(Term.paren "(" [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.choose_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Nat.choose_pos
   [(Term.paren
     "("
     [(Term.app
       `Nat.le_of_lt_succₓ
       [(Term.paren "(" [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `pos_iff_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
   [(Term.paren
     "("
     [(Term.app
       `Nat.choose_pos
       [(Term.paren
         "("
         [(Term.app
           `Nat.le_of_lt_succₓ
           [(Term.paren "(" [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hi]) []] ")")])
          []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≠_»
   (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
   "≠"
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≠_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [(Term.app `m.choose [`i]) [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `m.choose [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `m.choose
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `Finset.sum_congr
    [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Finset.sum_congr
   [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`i `hi] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.sum_congr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `add_pow) "," (Tactic.rwRule [] `div_eq_mul_inv) "," (Tactic.rwRule [] `sum_mul)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_eq_mul_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.sum_congr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "∀"
   [(Term.simpleBinder [`j] [(Term.typeSpec ":" (termℕ "ℕ"))])]
   ","
   («term_=_»
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`j])
     ", "
     («term_/_» («term_^_» (Init.Logic.«term_+_» `x "+" `y) "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
    "="
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
     " in "
     (Term.app `range [`j])
     ", "
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
      " in "
      (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
      ", "
      (Finset.Data.Finset.Fold.«term_*_»
       («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
       "*"
       («term_/_»
        («term_^_» `y "^" («term_-_» `i "-" `k))
        "/"
        (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`j])
    ", "
    («term_/_» («term_^_» (Init.Logic.«term_+_» `x "+" `y) "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
   "="
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
    " in "
    (Term.app `range [`j])
    ", "
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
     " in "
     (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
     ", "
     (Finset.Data.Finset.Fold.«term_*_»
      («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
      "*"
      («term_/_»
       («term_^_» `y "^" («term_-_» `i "-" `k))
       "/"
       (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
   " in "
   (Term.app `range [`j])
   ", "
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
    " in "
    (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
    ", "
    (Finset.Data.Finset.Fold.«term_*_»
     («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
     "*"
     («term_/_»
      («term_^_» `y "^" («term_-_» `i "-" `k))
      "/"
      (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `k)] []))
   " in "
   (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
   ", "
   (Finset.Data.Finset.Fold.«term_*_»
    («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
    "*"
    («term_/_»
     («term_^_» `y "^" («term_-_» `i "-" `k))
     "/"
     (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
   "*"
   («term_/_»
    («term_^_» `y "^" («term_-_» `i "-" `k))
    "/"
    (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   («term_^_» `y "^" («term_-_» `i "-" `k))
   "/"
   (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! («term_-_» `i "-" `k) "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  («term_-_» `i "-" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (some 10000, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `i "-" `k) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `y "^" («term_-_» `i "-" `k))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `i "-" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `i "-" `k) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `k "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» `x "^" `k) "/" (Nat.Data.Nat.Factorial.Basic.term_! `k "!")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(Init.Logic.«term_+_» `i "+" (numLit "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» `i "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `i "+" (numLit "1")) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.byTactic'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_add
  : exp x + y = exp x * exp y
  :=
    show
      limₓ ( ⟨ _ , is_cau_exp x + y ⟩ : CauSeq ℂ abs )
        =
        limₓ show CauSeq ℂ abs from ⟨ _ , is_cau_exp x ⟩ * limₓ show CauSeq ℂ abs from ⟨ _ , is_cau_exp y ⟩
      from
        have
          hj
            :
              ∀
                j : ℕ
                ,
                ∑ m in range j , x + y ^ m / m !
                  =
                  ∑ i in range j , ∑ k in range i + 1 , x ^ k / k ! * y ^ i - k / i - k !
            :=
            fun
              j
                =>
                Finset.sum_congr
                  rfl
                    fun
                      m hm
                        =>
                        by
                          rw [ add_pow , div_eq_mul_inv , sum_mul ]
                            refine' Finset.sum_congr rfl fun i hi => _
                            have
                              h₁
                                : ( m.choose i : ℂ ) ≠ 0
                                :=
                                Nat.cast_ne_zero . 2
                                  pos_iff_ne_zero . 1 Nat.choose_pos Nat.le_of_lt_succₓ mem_range . 1 hi
                            have
                              h₂ := Nat.choose_mul_factorial_mul_factorial Nat.le_of_lt_succₓ $ Finset.mem_range . 1 hi
                            rw [ ← h₂ , Nat.cast_mul , Nat.cast_mul , mul_inv₀ , mul_inv₀ ]
                            simp
                              only
                              [
                                mul_left_commₓ ( m.choose i : ℂ )
                                  ,
                                  mul_assocₓ
                                  ,
                                  mul_left_commₓ ( m.choose i : ℂ ) ⁻¹
                                  ,
                                  mul_commₓ ( m.choose i : ℂ )
                                ]
                            rw [ inv_mul_cancel h₁ ]
                            simp [ div_eq_mul_inv , mul_commₓ , mul_assocₓ , mul_left_commₓ ]
          by
            rw [ lim_mul_lim ]
              <;>
              exact
                Eq.symm
                  lim_eq_lim_of_equiv
                    by dsimp <;> simp only [ hj ] <;> exact cauchy_product is_cau_abs_exp x is_cau_exp y

theorem exp_list_sum (l : List ℂ) : exp l.sum = (l.map exp).Prod :=
  @MonoidHom.map_list_prod (Multiplicative ℂ) ℂ _ _ ⟨exp, exp_zero, exp_add⟩ l

theorem exp_multiset_sum (s : Multiset ℂ) : exp s.sum = (s.map exp).Prod :=
  @MonoidHom.map_multiset_prod (Multiplicative ℂ) ℂ _ _ ⟨exp, exp_zero, exp_add⟩ s

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_sum [])
  (Command.declSig
   [(Term.implicitBinder "{" [`α] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.explicitBinder "(" [`s] [":" (Term.app `Finset [`α])] [] ")")
    (Term.explicitBinder "(" [`f] [":" (Term.arrow `α "→" (Data.Complex.Basic.termℂ "ℂ"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_=_»
     (Term.app
      `exp
      [(Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
        " in "
        `s
        ", "
        (Term.app `f [`x]))])
     "="
     (Algebra.BigOperators.Basic.«term∏_in_,_»
      "∏"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
      " in "
      `s
      ", "
      (Term.app `exp [(Term.app `f [`x])])))))
  (Command.declValSimple
   ":="
   (Term.app
    (Term.explicit "@" `MonoidHom.map_prod)
    [(Term.app `Multiplicative [(Data.Complex.Basic.termℂ "ℂ")])
     `α
     (Data.Complex.Basic.termℂ "ℂ")
     (Term.hole "_")
     (Term.hole "_")
     (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
     `f
     `s])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.explicit "@" `MonoidHom.map_prod)
   [(Term.app `Multiplicative [(Data.Complex.Basic.termℂ "ℂ")])
    `α
    (Data.Complex.Basic.termℂ "ℂ")
    (Term.hole "_")
    (Term.hole "_")
    (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
    `f
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Multiplicative [(Data.Complex.Basic.termℂ "ℂ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Multiplicative
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Multiplicative [(Data.Complex.Basic.termℂ "ℂ")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `MonoidHom.map_prod)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `MonoidHom.map_prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_=_»
   (Term.app
    `exp
    [(Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
      " in "
      `s
      ", "
      (Term.app `f [`x]))])
   "="
   (Algebra.BigOperators.Basic.«term∏_in_,_»
    "∏"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
    " in "
    `s
    ", "
    (Term.app `exp [(Term.app `f [`x])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∏_in_,_»
   "∏"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
   " in "
   `s
   ", "
   (Term.app `exp [(Term.app `f [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∏_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exp [(Term.app `f [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_sum
  { α : Type _ } ( s : Finset α ) ( f : α → ℂ ) : exp ∑ x in s , f x = ∏ x in s , exp f x
  := @ MonoidHom.map_prod Multiplicative ℂ α ℂ _ _ ⟨ exp , exp_zero , exp_add ⟩ f s

theorem exp_nat_mul (x : ℂ) : ∀ n : ℕ, exp (n*x) = exp x ^ n
  | 0 => by
    rw [Nat.cast_zero, zero_mul, exp_zero, pow_zeroₓ]
  | Nat.succ n => by
    rw [pow_succ'ₓ, Nat.cast_add_one, add_mulₓ, exp_add, ← exp_nat_mul, one_mulₓ]

theorem exp_ne_zero : exp x ≠ 0 := fun h =>
  zero_ne_one $ by
    rw [← exp_zero, ← add_neg_selfₓ x, exp_add, h] <;> simp

theorem exp_neg : exp (-x) = exp x⁻¹ := by
  rw [← mul_right_inj' (exp_ne_zero x), ← exp_add] <;> simp [mul_inv_cancel (exp_ne_zero x)]

theorem exp_sub : exp (x - y) = exp x / exp y := by
  simp [sub_eq_add_neg, exp_add, exp_neg, div_eq_mul_inv]

theorem exp_int_mul (z : ℂ) (n : ℤ) : Complex.exp (n*z) = Complex.exp z ^ n := by
  cases n
  ·
    apply Complex.exp_nat_mul
  ·
    simpa [Complex.exp_neg, add_commₓ, ← neg_mul_eq_neg_mul_symm] using Complex.exp_nat_mul (-z) (1+n)

@[simp]
theorem exp_conj : exp (conj x) = conj (exp x) := by
  dsimp [exp]
  rw [← lim_conj]
  refine' congr_argₓ limₓ (CauSeq.ext fun _ => _)
  dsimp [exp', Function.comp, cau_seq_conj]
  rw [star_ring_aut.map_sum]
  refine' sum_congr rfl fun n hn => _
  rw [RingEquiv.map_div, RingEquiv.map_pow, ← of_real_nat_cast, conj_of_real]

@[simp]
theorem of_real_exp_of_real_re (x : ℝ) : ((exp x).re : ℂ) = exp x :=
  eq_conj_iff_re.1 $ by
    rw [← exp_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_exp (x : ℝ) : (Real.exp x : ℂ) = exp x :=
  of_real_exp_of_real_re _

@[simp]
theorem exp_of_real_im (x : ℝ) : (exp x).im = 0 := by
  rw [← of_real_exp_of_real_re, of_real_im]

theorem exp_of_real_re (x : ℝ) : (exp x).re = Real.exp x :=
  rfl

theorem two_sinh : (2*sinh x) = exp x - exp (-x) :=
  mul_div_cancel' _ two_ne_zero'

theorem two_cosh : (2*cosh x) = exp x+exp (-x) :=
  mul_div_cancel' _ two_ne_zero'

@[simp]
theorem sinh_zero : sinh 0 = 0 := by
  simp [sinh]

@[simp]
theorem sinh_neg : sinh (-x) = -sinh x := by
  simp [sinh, exp_neg, (neg_div _ _).symm, add_mulₓ]

private theorem sinh_add_aux {a b c d : ℂ} : (((a - b)*c+d)+(a+b)*c - d) = 2*(a*c) - b*d := by
  ring

theorem sinh_add : sinh (x+y) = (sinh x*cosh y)+cosh x*sinh y := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), two_sinh, exp_add, neg_add, exp_add, eq_comm, mul_addₓ, ← mul_assocₓ,
    two_sinh, mul_left_commₓ, two_sinh, ← mul_right_inj' (@two_ne_zero' ℂ _ _ _), mul_addₓ, mul_left_commₓ, two_cosh, ←
    mul_assocₓ, two_cosh]
  exact sinh_add_aux

@[simp]
theorem cosh_zero : cosh 0 = 1 := by
  simp [cosh]

@[simp]
theorem cosh_neg : cosh (-x) = cosh x := by
  simp [add_commₓ, cosh, exp_neg]

private theorem cosh_add_aux {a b c d : ℂ} : (((a+b)*c+d)+(a - b)*c - d) = 2*(a*c)+b*d := by
  ring

theorem cosh_add : cosh (x+y) = (cosh x*cosh y)+sinh x*sinh y := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), two_cosh, exp_add, neg_add, exp_add, eq_comm, mul_addₓ, ← mul_assocₓ,
    two_cosh, ← mul_assocₓ, two_sinh, ← mul_right_inj' (@two_ne_zero' ℂ _ _ _), mul_addₓ, mul_left_commₓ, two_cosh,
    mul_left_commₓ, two_sinh]
  exact cosh_add_aux

theorem sinh_sub : sinh (x - y) = (sinh x*cosh y) - cosh x*sinh y := by
  simp [sub_eq_add_neg, sinh_add, sinh_neg, cosh_neg]

theorem cosh_sub : cosh (x - y) = (cosh x*cosh y) - sinh x*sinh y := by
  simp [sub_eq_add_neg, cosh_add, sinh_neg, cosh_neg]

theorem sinh_conj : sinh (conj x) = conj (sinh x) := by
  rw [sinh, ← RingEquiv.map_neg, exp_conj, exp_conj, ← RingEquiv.map_sub, sinh, RingEquiv.map_div, conj_bit0,
    RingEquiv.map_one]

@[simp]
theorem of_real_sinh_of_real_re (x : ℝ) : ((sinh x).re : ℂ) = sinh x :=
  eq_conj_iff_re.1 $ by
    rw [← sinh_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_sinh (x : ℝ) : (Real.sinh x : ℂ) = sinh x :=
  of_real_sinh_of_real_re _

@[simp]
theorem sinh_of_real_im (x : ℝ) : (sinh x).im = 0 := by
  rw [← of_real_sinh_of_real_re, of_real_im]

theorem sinh_of_real_re (x : ℝ) : (sinh x).re = Real.sinh x :=
  rfl

theorem cosh_conj : cosh (conj x) = conj (cosh x) := by
  rw [cosh, ← RingEquiv.map_neg, exp_conj, exp_conj, ← RingEquiv.map_add, cosh, RingEquiv.map_div, conj_bit0,
    RingEquiv.map_one]

@[simp]
theorem of_real_cosh_of_real_re (x : ℝ) : ((cosh x).re : ℂ) = cosh x :=
  eq_conj_iff_re.1 $ by
    rw [← cosh_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_cosh (x : ℝ) : (Real.cosh x : ℂ) = cosh x :=
  of_real_cosh_of_real_re _

@[simp]
theorem cosh_of_real_im (x : ℝ) : (cosh x).im = 0 := by
  rw [← of_real_cosh_of_real_re, of_real_im]

theorem cosh_of_real_re (x : ℝ) : (cosh x).re = Real.cosh x :=
  rfl

theorem tanh_eq_sinh_div_cosh : tanh x = sinh x / cosh x :=
  rfl

@[simp]
theorem tanh_zero : tanh 0 = 0 := by
  simp [tanh]

@[simp]
theorem tanh_neg : tanh (-x) = -tanh x := by
  simp [tanh, neg_div]

theorem tanh_conj : tanh (conj x) = conj (tanh x) := by
  rw [tanh, sinh_conj, cosh_conj, ← RingEquiv.map_div, tanh]

@[simp]
theorem of_real_tanh_of_real_re (x : ℝ) : ((tanh x).re : ℂ) = tanh x :=
  eq_conj_iff_re.1 $ by
    rw [← tanh_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_tanh (x : ℝ) : (Real.tanh x : ℂ) = tanh x :=
  of_real_tanh_of_real_re _

@[simp]
theorem tanh_of_real_im (x : ℝ) : (tanh x).im = 0 := by
  rw [← of_real_tanh_of_real_re, of_real_im]

theorem tanh_of_real_re (x : ℝ) : (tanh x).re = Real.tanh x :=
  rfl

theorem cosh_add_sinh : (cosh x+sinh x) = exp x := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), mul_addₓ, two_cosh, two_sinh, add_add_sub_cancel, two_mul]

theorem sinh_add_cosh : (sinh x+cosh x) = exp x := by
  rw [add_commₓ, cosh_add_sinh]

theorem cosh_sub_sinh : cosh x - sinh x = exp (-x) := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), mul_sub, two_cosh, two_sinh, add_sub_sub_cancel, two_mul]

theorem cosh_sq_sub_sinh_sq : cosh x ^ 2 - sinh x ^ 2 = 1 := by
  rw [sq_sub_sq, cosh_add_sinh, cosh_sub_sinh, ← exp_add, add_neg_selfₓ, exp_zero]

theorem cosh_sq : cosh x ^ 2 = (sinh x ^ 2)+1 := by
  rw [← cosh_sq_sub_sinh_sq x]
  ring

theorem sinh_sq : sinh x ^ 2 = cosh x ^ 2 - 1 := by
  rw [← cosh_sq_sub_sinh_sq x]
  ring

theorem cosh_two_mul : cosh (2*x) = (cosh x ^ 2)+sinh x ^ 2 := by
  rw [two_mul, cosh_add, sq, sq]

theorem sinh_two_mul : sinh (2*x) = (2*sinh x)*cosh x := by
  rw [two_mul, sinh_add]
  ring

theorem cosh_three_mul : cosh (3*x) = (4*cosh x ^ 3) - 3*cosh x := by
  have h1 : (x+2*x) = 3*x := by
    ring
  rw [← h1, cosh_add x (2*x)]
  simp only [cosh_two_mul, sinh_two_mul]
  have h2 : (sinh x*(2*sinh x)*cosh x) = (2*cosh x)*sinh x ^ 2 := by
    ring
  rw [h2, sinh_sq]
  ring

theorem sinh_three_mul : sinh (3*x) = (4*sinh x ^ 3)+3*sinh x := by
  have h1 : (x+2*x) = 3*x := by
    ring
  rw [← h1, sinh_add x (2*x)]
  simp only [cosh_two_mul, sinh_two_mul]
  have h2 : (cosh x*(2*sinh x)*cosh x) = (2*sinh x)*cosh x ^ 2 := by
    ring
  rw [h2, cosh_sq]
  ring

@[simp]
theorem sin_zero : sin 0 = 0 := by
  simp [sin]

@[simp]
theorem sin_neg : sin (-x) = -sin x := by
  simp [sin, sub_eq_add_neg, exp_neg, (neg_div _ _).symm, add_mulₓ]

theorem two_sin : (2*sin x) = (exp ((-x)*I) - exp (x*I))*I :=
  mul_div_cancel' _ two_ne_zero'

theorem two_cos : (2*cos x) = exp (x*I)+exp ((-x)*I) :=
  mul_div_cancel' _ two_ne_zero'

theorem sinh_mul_I : sinh (x*I) = sin x*I := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), two_sinh, ← mul_assocₓ, two_sin, mul_assocₓ, I_mul_I, mul_neg_one,
    neg_sub, neg_mul_eq_neg_mul]

theorem cosh_mul_I : cosh (x*I) = cos x := by
  rw [← mul_right_inj' (@two_ne_zero' ℂ _ _ _), two_cosh, two_cos, neg_mul_eq_neg_mul]

theorem tanh_mul_I : tanh (x*I) = tan x*I := by
  rw [tanh_eq_sinh_div_cosh, cosh_mul_I, sinh_mul_I, mul_div_right_comm, tan]

theorem cos_mul_I : cos (x*I) = cosh x := by
  rw [← cosh_mul_I] <;> ring_nf <;> simp

theorem sin_mul_I : sin (x*I) = sinh x*I :=
  have h : (I*sin (x*I)) = -sinh x := by
    rw [mul_commₓ, ← sinh_mul_I]
    ring_nf
    simp
  by
  simpa only [neg_mul_eq_neg_mul_symm, div_I, neg_negₓ] using CancelFactors.cancel_factors_eq_div h I_ne_zero

theorem tan_mul_I : tan (x*I) = tanh x*I := by
  rw [tan, sin_mul_I, cos_mul_I, mul_div_right_comm, tanh_eq_sinh_div_cosh]

theorem sin_add : sin (x+y) = (sin x*cos y)+cos x*sin y := by
  rw [← mul_left_inj' I_ne_zero, ← sinh_mul_I, add_mulₓ, add_mulₓ, mul_right_commₓ, ← sinh_mul_I, mul_assocₓ, ←
    sinh_mul_I, ← cosh_mul_I, ← cosh_mul_I, sinh_add]

@[simp]
theorem cos_zero : cos 0 = 1 := by
  simp [cos]

@[simp]
theorem cos_neg : cos (-x) = cos x := by
  simp [cos, sub_eq_add_neg, exp_neg, add_commₓ]

private theorem cos_add_aux {a b c d : ℂ} : (((a+b)*c+d) - ((b - a)*d - c)*-1) = 2*(a*c)+b*d := by
  ring

theorem cos_add : cos (x+y) = (cos x*cos y) - sin x*sin y := by
  rw [← cosh_mul_I, add_mulₓ, cosh_add, cosh_mul_I, cosh_mul_I, sinh_mul_I, sinh_mul_I, mul_mul_mul_commₓ, I_mul_I,
    mul_neg_one, sub_eq_add_neg]

theorem sin_sub : sin (x - y) = (sin x*cos y) - cos x*sin y := by
  simp [sub_eq_add_neg, sin_add, sin_neg, cos_neg]

theorem cos_sub : cos (x - y) = (cos x*cos y)+sin x*sin y := by
  simp [sub_eq_add_neg, cos_add, sin_neg, cos_neg]

theorem sin_add_mul_I (x y : ℂ) : sin (x+y*I) = (sin x*cosh y)+(cos x*sinh y)*I := by
  rw [sin_add, cos_mul_I, sin_mul_I, mul_assocₓ]

theorem sin_eq (z : ℂ) : sin z = (sin z.re*cosh z.im)+(cos z.re*sinh z.im)*I := by
  convert sin_add_mul_I z.re z.im <;> exact (re_add_im z).symm

theorem cos_add_mul_I (x y : ℂ) : cos (x+y*I) = (cos x*cosh y) - (sin x*sinh y)*I := by
  rw [cos_add, cos_mul_I, sin_mul_I, mul_assocₓ]

theorem cos_eq (z : ℂ) : cos z = (cos z.re*cosh z.im) - (sin z.re*sinh z.im)*I := by
  convert cos_add_mul_I z.re z.im <;> exact (re_add_im z).symm

theorem sin_sub_sin : sin x - sin y = (2*sin ((x - y) / 2))*cos ((x+y) / 2) := by
  have s1 := sin_add ((x+y) / 2) ((x - y) / 2)
  have s2 := sin_sub ((x+y) / 2) ((x - y) / 2)
  rw [div_add_div_same, add_sub, add_right_commₓ, add_sub_cancel, half_add_self] at s1
  rw [div_sub_div_same, ← sub_add, add_sub_cancel', half_add_self] at s2
  rw [s1, s2]
  ring

theorem cos_sub_cos : cos x - cos y = ((-2)*sin ((x+y) / 2))*sin ((x - y) / 2) := by
  have s1 := cos_add ((x+y) / 2) ((x - y) / 2)
  have s2 := cos_sub ((x+y) / 2) ((x - y) / 2)
  rw [div_add_div_same, add_sub, add_right_commₓ, add_sub_cancel, half_add_self] at s1
  rw [div_sub_div_same, ← sub_add, add_sub_cancel', half_add_self] at s2
  rw [s1, s2]
  ring

theorem cos_add_cos : (cos x+cos y) = (2*cos ((x+y) / 2))*cos ((x - y) / 2) := by
  have h2 : (2 : ℂ) ≠ 0 := by
    norm_num
  calc (cos x+cos y) = cos (((x+y) / 2)+(x - y) / 2)+cos ((x+y) / 2 - (x - y) / 2) :=
    _ _ =
      ((cos ((x+y) / 2)*cos ((x - y) / 2)) -
          sin ((x+y) / 2)*sin ((x - y) / 2))+(cos ((x+y) / 2)*cos ((x - y) / 2))+sin ((x+y) / 2)*sin ((x - y) / 2) :=
    _ _ = (2*cos ((x+y) / 2))*cos ((x - y) / 2) := _
  ·
    congr <;> field_simp [h2] <;> ring
  ·
    rw [cos_add, cos_sub]
  ring

theorem sin_conj : sin (conj x) = conj (sin x) := by
  rw [← mul_left_inj' I_ne_zero, ← sinh_mul_I, ← conj_neg_I, ← RingEquiv.map_mul, ← RingEquiv.map_mul, sinh_conj,
    mul_neg_eq_neg_mul_symm, sinh_neg, sinh_mul_I, mul_neg_eq_neg_mul_symm]

@[simp]
theorem of_real_sin_of_real_re (x : ℝ) : ((sin x).re : ℂ) = sin x :=
  eq_conj_iff_re.1 $ by
    rw [← sin_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_sin (x : ℝ) : (Real.sin x : ℂ) = sin x :=
  of_real_sin_of_real_re _

@[simp]
theorem sin_of_real_im (x : ℝ) : (sin x).im = 0 := by
  rw [← of_real_sin_of_real_re, of_real_im]

theorem sin_of_real_re (x : ℝ) : (sin x).re = Real.sin x :=
  rfl

theorem cos_conj : cos (conj x) = conj (cos x) := by
  rw [← cosh_mul_I, ← conj_neg_I, ← RingEquiv.map_mul, ← cosh_mul_I, cosh_conj, mul_neg_eq_neg_mul_symm, cosh_neg]

@[simp]
theorem of_real_cos_of_real_re (x : ℝ) : ((cos x).re : ℂ) = cos x :=
  eq_conj_iff_re.1 $ by
    rw [← cos_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_cos (x : ℝ) : (Real.cos x : ℂ) = cos x :=
  of_real_cos_of_real_re _

@[simp]
theorem cos_of_real_im (x : ℝ) : (cos x).im = 0 := by
  rw [← of_real_cos_of_real_re, of_real_im]

theorem cos_of_real_re (x : ℝ) : (cos x).re = Real.cos x :=
  rfl

@[simp]
theorem tan_zero : tan 0 = 0 := by
  simp [tan]

theorem tan_eq_sin_div_cos : tan x = sin x / cos x :=
  rfl

theorem tan_mul_cos {x : ℂ} (hx : cos x ≠ 0) : (tan x*cos x) = sin x := by
  rw [tan_eq_sin_div_cos, div_mul_cancel _ hx]

@[simp]
theorem tan_neg : tan (-x) = -tan x := by
  simp [tan, neg_div]

theorem tan_conj : tan (conj x) = conj (tan x) := by
  rw [tan, sin_conj, cos_conj, ← RingEquiv.map_div, tan]

@[simp]
theorem of_real_tan_of_real_re (x : ℝ) : ((tan x).re : ℂ) = tan x :=
  eq_conj_iff_re.1 $ by
    rw [← tan_conj, conj_of_real]

@[simp, norm_cast]
theorem of_real_tan (x : ℝ) : (Real.tan x : ℂ) = tan x :=
  of_real_tan_of_real_re _

@[simp]
theorem tan_of_real_im (x : ℝ) : (tan x).im = 0 := by
  rw [← of_real_tan_of_real_re, of_real_im]

theorem tan_of_real_re (x : ℝ) : (tan x).re = Real.tan x :=
  rfl

theorem cos_add_sin_I : (cos x+sin x*I) = exp (x*I) := by
  rw [← cosh_add_sinh, sinh_mul_I, cosh_mul_I]

theorem cos_sub_sin_I : (cos x - sin x*I) = exp ((-x)*I) := by
  rw [← neg_mul_eq_neg_mul, ← cosh_sub_sinh, sinh_mul_I, cosh_mul_I]

@[simp]
theorem sin_sq_add_cos_sq : ((sin x ^ 2)+cos x ^ 2) = 1 :=
  Eq.trans
    (by
      rw [cosh_mul_I, sinh_mul_I, mul_powₓ, I_sq, mul_neg_one, sub_neg_eq_add, add_commₓ])
    (cosh_sq_sub_sinh_sq (x*I))

@[simp]
theorem cos_sq_add_sin_sq : ((cos x ^ 2)+sin x ^ 2) = 1 := by
  rw [add_commₓ, sin_sq_add_cos_sq]

theorem cos_two_mul' : cos (2*x) = cos x ^ 2 - sin x ^ 2 := by
  rw [two_mul, cos_add, ← sq, ← sq]

theorem cos_two_mul : cos (2*x) = (2*cos x ^ 2) - 1 := by
  rw [cos_two_mul', eq_sub_iff_add_eq.2 (sin_sq_add_cos_sq x), ← sub_add, sub_add_eq_add_sub, two_mul]

theorem sin_two_mul : sin (2*x) = (2*sin x)*cos x := by
  rw [two_mul, sin_add, two_mul, add_mulₓ, mul_commₓ]

theorem cos_sq : cos x ^ 2 = (1 / 2)+cos (2*x) / 2 := by
  simp [cos_two_mul, div_add_div_same, mul_div_cancel_left, two_ne_zero', -one_div]

theorem cos_sq' : cos x ^ 2 = 1 - sin x ^ 2 := by
  rw [← sin_sq_add_cos_sq x, add_sub_cancel']

theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 := by
  rw [← sin_sq_add_cos_sq x, add_sub_cancel]

theorem inv_one_add_tan_sq {x : ℂ} (hx : cos x ≠ 0) : (1+tan x ^ 2)⁻¹ = cos x ^ 2 :=
  have : cos x ^ 2 ≠ 0 := pow_ne_zero 2 hx
  by
  rw [tan_eq_sin_div_cos, div_pow]
  field_simp [this]

theorem tan_sq_div_one_add_tan_sq {x : ℂ} (hx : cos x ≠ 0) : (tan x ^ 2 / 1+tan x ^ 2) = sin x ^ 2 := by
  simp only [← tan_mul_cos hx, mul_powₓ, ← inv_one_add_tan_sq hx, div_eq_mul_inv, one_mulₓ]

theorem cos_three_mul : cos (3*x) = (4*cos x ^ 3) - 3*cos x := by
  have h1 : (x+2*x) = 3*x := by
    ring
  rw [← h1, cos_add x (2*x)]
  simp only [cos_two_mul, sin_two_mul, mul_addₓ, mul_sub, mul_oneₓ, sq]
  have h2 : (4*cos x ^ 3) = (((2*cos x)*cos x)*cos x)+(2*cos x)*cos x ^ 2 := by
    ring
  rw [h2, cos_sq']
  ring

theorem sin_three_mul : sin (3*x) = (3*sin x) - 4*sin x ^ 3 := by
  have h1 : (x+2*x) = 3*x := by
    ring
  rw [← h1, sin_add x (2*x)]
  simp only [cos_two_mul, sin_two_mul, cos_sq']
  have h2 : (cos x*(2*sin x)*cos x) = (2*sin x)*cos x ^ 2 := by
    ring
  rw [h2, cos_sq']
  ring

theorem exp_mul_I : exp (x*I) = cos x+sin x*I :=
  (cos_add_sin_I _).symm

theorem exp_add_mul_I : exp (x+y*I) = exp x*cos y+sin y*I := by
  rw [exp_add, exp_mul_I]

theorem exp_eq_exp_re_mul_sin_add_cos : exp x = exp x.re*cos x.im+sin x.im*I := by
  rw [← exp_add_mul_I, re_add_im]

theorem exp_re : (exp x).re = Real.exp x.re*Real.cos x.im := by
  rw [exp_eq_exp_re_mul_sin_add_cos]
  simp [exp_of_real_re, cos_of_real_re]

theorem exp_im : (exp x).im = Real.exp x.re*Real.sin x.im := by
  rw [exp_eq_exp_re_mul_sin_add_cos]
  simp [exp_of_real_re, sin_of_real_re]

@[simp]
theorem exp_of_real_mul_I_re (x : ℝ) : (exp (x*I)).re = Real.cos x := by
  simp [exp_mul_I, cos_of_real_re]

@[simp]
theorem exp_of_real_mul_I_im (x : ℝ) : (exp (x*I)).im = Real.sin x := by
  simp [exp_mul_I, sin_of_real_re]

/--  **De Moivre's formula** -/
theorem cos_add_sin_mul_I_pow (n : ℕ) (z : ℂ) : (cos z+sin z*I) ^ n = cos ((↑n)*z)+sin ((↑n)*z)*I := by
  rw [← exp_mul_I, ← exp_mul_I]
  induction' n with n ih
  ·
    rw [pow_zeroₓ, Nat.cast_zero, zero_mul, zero_mul, exp_zero]
  ·
    rw [pow_succ'ₓ, ih, Nat.cast_succ, add_mulₓ, add_mulₓ, one_mulₓ, exp_add]

end Complex

namespace Real

open Complex

variable (x y : ℝ)

@[simp]
theorem exp_zero : exp 0 = 1 := by
  simp [Real.exp]

theorem exp_add : exp (x+y) = exp x*exp y := by
  simp [exp_add, exp]

theorem exp_list_sum (l : List ℝ) : exp l.sum = (l.map exp).Prod :=
  @MonoidHom.map_list_prod (Multiplicative ℝ) ℝ _ _ ⟨exp, exp_zero, exp_add⟩ l

theorem exp_multiset_sum (s : Multiset ℝ) : exp s.sum = (s.map exp).Prod :=
  @MonoidHom.map_multiset_prod (Multiplicative ℝ) ℝ _ _ ⟨exp, exp_zero, exp_add⟩ s

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_sum [])
  (Command.declSig
   [(Term.implicitBinder "{" [`α] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.explicitBinder "(" [`s] [":" (Term.app `Finset [`α])] [] ")")
    (Term.explicitBinder "(" [`f] [":" (Term.arrow `α "→" (Data.Real.Basic.termℝ "ℝ"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_=_»
     (Term.app
      `exp
      [(Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
        " in "
        `s
        ", "
        (Term.app `f [`x]))])
     "="
     (Algebra.BigOperators.Basic.«term∏_in_,_»
      "∏"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
      " in "
      `s
      ", "
      (Term.app `exp [(Term.app `f [`x])])))))
  (Command.declValSimple
   ":="
   (Term.app
    (Term.explicit "@" `MonoidHom.map_prod)
    [(Term.app `Multiplicative [(Data.Real.Basic.termℝ "ℝ")])
     `α
     (Data.Real.Basic.termℝ "ℝ")
     (Term.hole "_")
     (Term.hole "_")
     (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
     `f
     `s])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.explicit "@" `MonoidHom.map_prod)
   [(Term.app `Multiplicative [(Data.Real.Basic.termℝ "ℝ")])
    `α
    (Data.Real.Basic.termℝ "ℝ")
    (Term.hole "_")
    (Term.hole "_")
    (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
    `f
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.anonymousCtor "⟨" [`exp "," `exp_zero "," `exp_add] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Multiplicative [(Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Multiplicative
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Multiplicative [(Data.Real.Basic.termℝ "ℝ")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `MonoidHom.map_prod)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `MonoidHom.map_prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_=_»
   (Term.app
    `exp
    [(Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
      " in "
      `s
      ", "
      (Term.app `f [`x]))])
   "="
   (Algebra.BigOperators.Basic.«term∏_in_,_»
    "∏"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
    " in "
    `s
    ", "
    (Term.app `exp [(Term.app `f [`x])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∏_in_,_»
   "∏"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] []))
   " in "
   `s
   ", "
   (Term.app `exp [(Term.app `f [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∏_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exp [(Term.app `f [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `f [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_sum
  { α : Type _ } ( s : Finset α ) ( f : α → ℝ ) : exp ∑ x in s , f x = ∏ x in s , exp f x
  := @ MonoidHom.map_prod Multiplicative ℝ α ℝ _ _ ⟨ exp , exp_zero , exp_add ⟩ f s

theorem exp_nat_mul (x : ℝ) : ∀ n : ℕ, exp (n*x) = exp x ^ n
  | 0 => by
    rw [Nat.cast_zero, zero_mul, exp_zero, pow_zeroₓ]
  | Nat.succ n => by
    rw [pow_succ'ₓ, Nat.cast_add_one, add_mulₓ, exp_add, ← exp_nat_mul, one_mulₓ]

theorem exp_ne_zero : exp x ≠ 0 := fun h =>
  exp_ne_zero x $ by
    rw [exp, ← of_real_inj] at h <;> simp_all

theorem exp_neg : exp (-x) = exp x⁻¹ := by
  rw [← of_real_inj, exp, of_real_exp_of_real_re, of_real_neg, exp_neg, of_real_inv, of_real_exp]

theorem exp_sub : exp (x - y) = exp x / exp y := by
  simp [sub_eq_add_neg, exp_add, exp_neg, div_eq_mul_inv]

@[simp]
theorem sin_zero : sin 0 = 0 := by
  simp [sin]

@[simp]
theorem sin_neg : sin (-x) = -sin x := by
  simp [sin, exp_neg, (neg_div _ _).symm, add_mulₓ]

theorem sin_add : sin (x+y) = (sin x*cos y)+cos x*sin y := by
  rw [← of_real_inj] <;> simp [sin, sin_add]

@[simp]
theorem cos_zero : cos 0 = 1 := by
  simp [cos]

@[simp]
theorem cos_neg : cos (-x) = cos x := by
  simp [cos, exp_neg]

theorem cos_add : cos (x+y) = (cos x*cos y) - sin x*sin y := by
  rw [← of_real_inj] <;> simp [cos, cos_add]

theorem sin_sub : sin (x - y) = (sin x*cos y) - cos x*sin y := by
  simp [sub_eq_add_neg, sin_add, sin_neg, cos_neg]

theorem cos_sub : cos (x - y) = (cos x*cos y)+sin x*sin y := by
  simp [sub_eq_add_neg, cos_add, sin_neg, cos_neg]

theorem sin_sub_sin : sin x - sin y = (2*sin ((x - y) / 2))*cos ((x+y) / 2) := by
  rw [← of_real_inj]
  simp only [sin, cos, of_real_sin_of_real_re, of_real_sub, of_real_add, of_real_div, of_real_mul, of_real_one,
    of_real_bit0]
  convert sin_sub_sin _ _ <;> norm_cast

theorem cos_sub_cos : cos x - cos y = ((-2)*sin ((x+y) / 2))*sin ((x - y) / 2) := by
  rw [← of_real_inj]
  simp only [cos, neg_mul_eq_neg_mul_symm, of_real_sin, of_real_sub, of_real_add, of_real_cos_of_real_re, of_real_div,
    of_real_mul, of_real_one, of_real_neg, of_real_bit0]
  convert cos_sub_cos _ _
  ring

theorem cos_add_cos : (cos x+cos y) = (2*cos ((x+y) / 2))*cos ((x - y) / 2) := by
  rw [← of_real_inj]
  simp only [cos, of_real_sub, of_real_add, of_real_cos_of_real_re, of_real_div, of_real_mul, of_real_one, of_real_bit0]
  convert cos_add_cos _ _ <;> norm_cast

theorem tan_eq_sin_div_cos : tan x = sin x / cos x := by
  rw [← of_real_inj, of_real_tan, tan_eq_sin_div_cos, of_real_div, of_real_sin, of_real_cos]

theorem tan_mul_cos {x : ℝ} (hx : cos x ≠ 0) : (tan x*cos x) = sin x := by
  rw [tan_eq_sin_div_cos, div_mul_cancel _ hx]

@[simp]
theorem tan_zero : tan 0 = 0 := by
  simp [tan]

@[simp]
theorem tan_neg : tan (-x) = -tan x := by
  simp [tan, neg_div]

@[simp]
theorem sin_sq_add_cos_sq : ((sin x ^ 2)+cos x ^ 2) = 1 :=
  of_real_inj.1 $ by
    simp

@[simp]
theorem cos_sq_add_sin_sq : ((cos x ^ 2)+sin x ^ 2) = 1 := by
  rw [add_commₓ, sin_sq_add_cos_sq]

theorem sin_sq_le_one : sin x ^ 2 ≤ 1 := by
  rw [← sin_sq_add_cos_sq x] <;> exact le_add_of_nonneg_right (sq_nonneg _)

theorem cos_sq_le_one : cos x ^ 2 ≤ 1 := by
  rw [← sin_sq_add_cos_sq x] <;> exact le_add_of_nonneg_left (sq_nonneg _)

theorem abs_sin_le_one : |sin x| ≤ 1 :=
  abs_le_one_iff_mul_self_le_one.2 $ by
    simp only [← sq, sin_sq_le_one]

theorem abs_cos_le_one : |cos x| ≤ 1 :=
  abs_le_one_iff_mul_self_le_one.2 $ by
    simp only [← sq, cos_sq_le_one]

theorem sin_le_one : sin x ≤ 1 :=
  (abs_le.1 (abs_sin_le_one _)).2

theorem cos_le_one : cos x ≤ 1 :=
  (abs_le.1 (abs_cos_le_one _)).2

theorem neg_one_le_sin : -1 ≤ sin x :=
  (abs_le.1 (abs_sin_le_one _)).1

theorem neg_one_le_cos : -1 ≤ cos x :=
  (abs_le.1 (abs_cos_le_one _)).1

theorem cos_two_mul : cos (2*x) = (2*cos x ^ 2) - 1 := by
  rw [← of_real_inj] <;> simp [cos_two_mul]

theorem cos_two_mul' : cos (2*x) = cos x ^ 2 - sin x ^ 2 := by
  rw [← of_real_inj] <;> simp [cos_two_mul']

theorem sin_two_mul : sin (2*x) = (2*sin x)*cos x := by
  rw [← of_real_inj] <;> simp [sin_two_mul]

theorem cos_sq : cos x ^ 2 = (1 / 2)+cos (2*x) / 2 :=
  of_real_inj.1 $ by
    simpa using cos_sq x

theorem cos_sq' : cos x ^ 2 = 1 - sin x ^ 2 := by
  rw [← sin_sq_add_cos_sq x, add_sub_cancel']

theorem sin_sq : sin x ^ 2 = 1 - cos x ^ 2 :=
  eq_sub_iff_add_eq.2 $ sin_sq_add_cos_sq _

theorem abs_sin_eq_sqrt_one_sub_cos_sq (x : ℝ) : |sin x| = sqrt (1 - cos x ^ 2) := by
  rw [← sin_sq, sqrt_sq_eq_abs]

theorem abs_cos_eq_sqrt_one_sub_sin_sq (x : ℝ) : |cos x| = sqrt (1 - sin x ^ 2) := by
  rw [← cos_sq', sqrt_sq_eq_abs]

theorem inv_one_add_tan_sq {x : ℝ} (hx : cos x ≠ 0) : (1+tan x ^ 2)⁻¹ = cos x ^ 2 :=
  have : Complex.cos x ≠ 0 := mt (congr_argₓ re) hx
  of_real_inj.1 $ by
    simpa using Complex.inv_one_add_tan_sq this

theorem tan_sq_div_one_add_tan_sq {x : ℝ} (hx : cos x ≠ 0) : (tan x ^ 2 / 1+tan x ^ 2) = sin x ^ 2 := by
  simp only [← tan_mul_cos hx, mul_powₓ, ← inv_one_add_tan_sq hx, div_eq_mul_inv, one_mulₓ]

theorem inv_sqrt_one_add_tan_sq {x : ℝ} (hx : 0 < cos x) : sqrt (1+tan x ^ 2)⁻¹ = cos x := by
  rw [← sqrt_sq hx.le, ← sqrt_inv, inv_one_add_tan_sq hx.ne']

theorem tan_div_sqrt_one_add_tan_sq {x : ℝ} (hx : 0 < cos x) : tan x / sqrt (1+tan x ^ 2) = sin x := by
  rw [← tan_mul_cos hx.ne', ← inv_sqrt_one_add_tan_sq hx, div_eq_mul_inv]

theorem cos_three_mul : cos (3*x) = (4*cos x ^ 3) - 3*cos x := by
  rw [← of_real_inj] <;> simp [cos_three_mul]

theorem sin_three_mul : sin (3*x) = (3*sin x) - 4*sin x ^ 3 := by
  rw [← of_real_inj] <;> simp [sin_three_mul]

/--  The definition of `sinh` in terms of `exp`. -/
theorem sinh_eq (x : ℝ) : sinh x = (exp x - exp (-x)) / 2 :=
  eq_div_of_mul_eq two_ne_zero $ by
    rw [sinh, exp, exp, Complex.of_real_neg, Complex.sinh, mul_two, ← Complex.add_re, ← mul_two,
      div_mul_cancel _ (two_ne_zero' : (2 : ℂ) ≠ 0), Complex.sub_re]

@[simp]
theorem sinh_zero : sinh 0 = 0 := by
  simp [sinh]

@[simp]
theorem sinh_neg : sinh (-x) = -sinh x := by
  simp [sinh, exp_neg, (neg_div _ _).symm, add_mulₓ]

theorem sinh_add : sinh (x+y) = (sinh x*cosh y)+cosh x*sinh y := by
  rw [← of_real_inj] <;> simp [sinh_add]

/--  The definition of `cosh` in terms of `exp`. -/
theorem cosh_eq (x : ℝ) : cosh x = (exp x+exp (-x)) / 2 :=
  eq_div_of_mul_eq two_ne_zero $ by
    rw [cosh, exp, exp, Complex.of_real_neg, Complex.cosh, mul_two, ← Complex.add_re, ← mul_two,
      div_mul_cancel _ (two_ne_zero' : (2 : ℂ) ≠ 0), Complex.add_re]

@[simp]
theorem cosh_zero : cosh 0 = 1 := by
  simp [cosh]

@[simp]
theorem cosh_neg : cosh (-x) = cosh x := by
  simp [cosh, exp_neg]

theorem cosh_add : cosh (x+y) = (cosh x*cosh y)+sinh x*sinh y := by
  rw [← of_real_inj] <;> simp [cosh, cosh_add]

theorem sinh_sub : sinh (x - y) = (sinh x*cosh y) - cosh x*sinh y := by
  simp [sub_eq_add_neg, sinh_add, sinh_neg, cosh_neg]

theorem cosh_sub : cosh (x - y) = (cosh x*cosh y) - sinh x*sinh y := by
  simp [sub_eq_add_neg, cosh_add, sinh_neg, cosh_neg]

theorem tanh_eq_sinh_div_cosh : tanh x = sinh x / cosh x :=
  of_real_inj.1 $ by
    simp [tanh_eq_sinh_div_cosh]

@[simp]
theorem tanh_zero : tanh 0 = 0 := by
  simp [tanh]

@[simp]
theorem tanh_neg : tanh (-x) = -tanh x := by
  simp [tanh, neg_div]

theorem cosh_add_sinh : (cosh x+sinh x) = exp x := by
  rw [← of_real_inj] <;> simp [cosh_add_sinh]

theorem sinh_add_cosh : (sinh x+cosh x) = exp x := by
  rw [← of_real_inj] <;> simp [sinh_add_cosh]

theorem cosh_sq_sub_sinh_sq (x : ℝ) : cosh x ^ 2 - sinh x ^ 2 = 1 := by
  rw [← of_real_inj] <;> simp [cosh_sq_sub_sinh_sq]

theorem cosh_sq : cosh x ^ 2 = (sinh x ^ 2)+1 := by
  rw [← of_real_inj] <;> simp [cosh_sq]

theorem sinh_sq : sinh x ^ 2 = cosh x ^ 2 - 1 := by
  rw [← of_real_inj] <;> simp [sinh_sq]

theorem cosh_two_mul : cosh (2*x) = (cosh x ^ 2)+sinh x ^ 2 := by
  rw [← of_real_inj] <;> simp [cosh_two_mul]

theorem sinh_two_mul : sinh (2*x) = (2*sinh x)*cosh x := by
  rw [← of_real_inj] <;> simp [sinh_two_mul]

theorem cosh_three_mul : cosh (3*x) = (4*cosh x ^ 3) - 3*cosh x := by
  rw [← of_real_inj] <;> simp [cosh_three_mul]

theorem sinh_three_mul : sinh (3*x) = (4*sinh x ^ 3)+3*sinh x := by
  rw [← of_real_inj] <;> simp [sinh_three_mul]

open IsAbsoluteValue

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " This is an intermediate result that is later replaced by `real.add_one_le_exp`; use that lemma\ninstead. -/")]
  []
  []
  []
  []
  [])
 (Command.theorem
  "theorem"
  (Command.declId `add_one_le_exp_of_nonneg [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (numLit "0") "≤" `x)] [] ")")]
   (Term.typeSpec ":" («term_≤_» (Init.Logic.«term_+_» `x "+" (numLit "1")) "≤" (Term.app `exp [`x]))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_≤_»
       (Init.Logic.«term_+_» `x "+" (numLit "1"))
       "≤"
       (Term.app
        `limₓ
        [(Term.paren
          "("
          [(Term.anonymousCtor
            "⟨"
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`n] [(Term.typeSpec ":" (termℕ "ℕ"))])]
               "=>"
               (Term.proj (Term.app (Term.app `exp' [`x]) [`n]) "." `re)))
             ","
             (Term.app `is_cau_seq_re [(Term.app `exp' [`x])])]
            "⟩")
           [(Term.typeAscription ":" (Term.app `CauSeq [(Data.Real.Basic.termℝ "ℝ") `HasAbs.abs]))]]
          ")")]))
      ":="
      (Term.app
       `le_lim
       [(Term.app
         `CauSeq.le_of_exists
         [(Term.anonymousCtor
           "⟨"
           [(numLit "2")
            ","
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`j `hj] [])]
              "=>"
              (Term.show
               "show"
               («term_≤_»
                (Init.Logic.«term_+_»
                 `x
                 "+"
                 (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
                "≤"
                (Term.proj
                 (Algebra.BigOperators.Basic.«term∑_in_,_»
                  "∑"
                  (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                  " in "
                  (Term.app `range [`j])
                  ", "
                  (Term.paren
                   "("
                   [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                    [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                   ")"))
                 "."
                 `re))
               (Term.fromTerm
                "from"
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₁ []]
                   [(Term.typeSpec
                     ":"
                     («term_=_»
                      (Term.proj
                       (Term.app
                        (Rel.Data.Rel.«term_∘_»
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                           "=>"
                           (Term.paren
                            "("
                            [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                             [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                            ")")))
                         " ∘ "
                         `Nat.succ)
                        [(numLit "0")])
                       "."
                       `re)
                      "="
                      `x))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h₂ []]
                    [(Term.typeSpec
                      ":"
                      («term_=_»
                       (Term.proj
                        («term_/_»
                         («term_^_»
                          (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                          "^"
                          (numLit "0"))
                         "/"
                         (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
                        "."
                        `re)
                       "="
                       (numLit "1")))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
                  []
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                          ","
                          (Tactic.rwRule [] `sum_range_succ')
                          ","
                          (Tactic.rwRule [] `sum_range_succ')
                          ","
                          (Tactic.rwRule [] `add_re)
                          ","
                          (Tactic.rwRule [] `add_re)
                          ","
                          (Tactic.rwRule [] `h₁)
                          ","
                          (Tactic.rwRule [] `h₂)
                          ","
                          (Tactic.rwRule [] `add_assocₓ)
                          ","
                          (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                          ","
                          (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                          ","
                          (Tactic.rwRule [] `coe_re_add_group_hom)]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.refine'
                        "refine'"
                        (Term.app
                         `le_add_of_nonneg_of_le
                         [(Term.app
                           `sum_nonneg
                           [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                          (Term.app `le_reflₓ [(Term.hole "_")])]))
                       [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["←"] `of_real_pow)
                          ","
                          (Tactic.rwRule ["←"] `of_real_nat_cast)
                          ","
                          (Tactic.rwRule ["←"] `of_real_div)
                          ","
                          (Tactic.rwRule [] `of_real_re)]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `div_nonneg
                         [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
                       [])])))))))))]
           "⟩")])]))
     (calcStep
      («term_=_» (Term.hole "_") "=" (Term.app `exp [`x]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `exp)
              ","
              (Tactic.rwRule [] `Complex.exp)
              ","
              (Tactic.rwRule ["←"] `cau_seq_re)
              ","
              (Tactic.rwRule [] `lim_re)]
             "]")
            [])
           [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_≤_»
      (Init.Logic.«term_+_» `x "+" (numLit "1"))
      "≤"
      (Term.app
       `limₓ
       [(Term.paren
         "("
         [(Term.anonymousCtor
           "⟨"
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`n] [(Term.typeSpec ":" (termℕ "ℕ"))])]
              "=>"
              (Term.proj (Term.app (Term.app `exp' [`x]) [`n]) "." `re)))
            ","
            (Term.app `is_cau_seq_re [(Term.app `exp' [`x])])]
           "⟩")
          [(Term.typeAscription ":" (Term.app `CauSeq [(Data.Real.Basic.termℝ "ℝ") `HasAbs.abs]))]]
         ")")]))
     ":="
     (Term.app
      `le_lim
      [(Term.app
        `CauSeq.le_of_exists
        [(Term.anonymousCtor
          "⟨"
          [(numLit "2")
           ","
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`j `hj] [])]
             "=>"
             (Term.show
              "show"
              («term_≤_»
               (Init.Logic.«term_+_»
                `x
                "+"
                (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
               "≤"
               (Term.proj
                (Algebra.BigOperators.Basic.«term∑_in_,_»
                 "∑"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
                 " in "
                 (Term.app `range [`j])
                 ", "
                 (Term.paren
                  "("
                  [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                   [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                  ")"))
                "."
                `re))
              (Term.fromTerm
               "from"
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₁ []]
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Term.proj
                      (Term.app
                       (Rel.Data.Rel.«term_∘_»
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                          "=>"
                          (Term.paren
                           "("
                           [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                            [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                           ")")))
                        " ∘ "
                        `Nat.succ)
                       [(numLit "0")])
                      "."
                      `re)
                     "="
                     `x))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₂ []]
                   [(Term.typeSpec
                     ":"
                     («term_=_»
                      (Term.proj
                       («term_/_»
                        («term_^_»
                         (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                         "^"
                         (numLit "0"))
                        "/"
                        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
                       "."
                       `re)
                      "="
                      (numLit "1")))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
                 []
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                         ","
                         (Tactic.rwRule [] `sum_range_succ')
                         ","
                         (Tactic.rwRule [] `sum_range_succ')
                         ","
                         (Tactic.rwRule [] `add_re)
                         ","
                         (Tactic.rwRule [] `add_re)
                         ","
                         (Tactic.rwRule [] `h₁)
                         ","
                         (Tactic.rwRule [] `h₂)
                         ","
                         (Tactic.rwRule [] `add_assocₓ)
                         ","
                         (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                         ","
                         (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                         ","
                         (Tactic.rwRule [] `coe_re_add_group_hom)]
                        "]")
                       [])
                      [])
                     (group
                      (Tactic.refine'
                       "refine'"
                       (Term.app
                        `le_add_of_nonneg_of_le
                        [(Term.app
                          `sum_nonneg
                          [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                         (Term.app `le_reflₓ [(Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule ["←"] `of_real_pow)
                         ","
                         (Tactic.rwRule ["←"] `of_real_nat_cast)
                         ","
                         (Tactic.rwRule ["←"] `of_real_div)
                         ","
                         (Tactic.rwRule [] `of_real_re)]
                        "]")
                       [])
                      [])
                     (group
                      (Tactic.exact
                       "exact"
                       (Term.app
                        `div_nonneg
                        [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
                      [])])))))))))]
          "⟩")])]))
    (calcStep
     («term_=_» (Term.hole "_") "=" (Term.app `exp [`x]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `exp)
             ","
             (Tactic.rwRule [] `Complex.exp)
             ","
             (Tactic.rwRule ["←"] `cau_seq_re)
             ","
             (Tactic.rwRule [] `lim_re)]
            "]")
           [])
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `exp)
          ","
          (Tactic.rwRule [] `Complex.exp)
          ","
          (Tactic.rwRule ["←"] `cau_seq_re)
          ","
          (Tactic.rwRule [] `lim_re)]
         "]")
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `exp)
     ","
     (Tactic.rwRule [] `Complex.exp)
     ","
     (Tactic.rwRule ["←"] `cau_seq_re)
     ","
     (Tactic.rwRule [] `lim_re)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `lim_re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `cau_seq_re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Complex.exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» (Term.hole "_") "=" (Term.app `exp [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exp [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `le_lim
   [(Term.app
     `CauSeq.le_of_exists
     [(Term.anonymousCtor
       "⟨"
       [(numLit "2")
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`j `hj] [])]
          "=>"
          (Term.show
           "show"
           («term_≤_»
            (Init.Logic.«term_+_»
             `x
             "+"
             (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
            "≤"
            (Term.proj
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`j])
              ", "
              (Term.paren
               "("
               [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
               ")"))
             "."
             `re))
           (Term.fromTerm
            "from"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₁ []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Term.proj
                   (Term.app
                    (Rel.Data.Rel.«term_∘_»
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                       "=>"
                       (Term.paren
                        "("
                        [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                         [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                        ")")))
                     " ∘ "
                     `Nat.succ)
                    [(numLit "0")])
                   "."
                   `re)
                  "="
                  `x))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₂ []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Term.proj
                    («term_/_»
                     («term_^_»
                      (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                      "^"
                      (numLit "0"))
                     "/"
                     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
                    "."
                    `re)
                   "="
                   (numLit "1")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
              []
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                      ","
                      (Tactic.rwRule [] `sum_range_succ')
                      ","
                      (Tactic.rwRule [] `sum_range_succ')
                      ","
                      (Tactic.rwRule [] `add_re)
                      ","
                      (Tactic.rwRule [] `add_re)
                      ","
                      (Tactic.rwRule [] `h₁)
                      ","
                      (Tactic.rwRule [] `h₂)
                      ","
                      (Tactic.rwRule [] `add_assocₓ)
                      ","
                      (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                      ","
                      (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                      ","
                      (Tactic.rwRule [] `coe_re_add_group_hom)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `le_add_of_nonneg_of_le
                     [(Term.app
                       `sum_nonneg
                       [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                      (Term.app `le_reflₓ [(Term.hole "_")])]))
                   [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule ["←"] `of_real_pow)
                      ","
                      (Tactic.rwRule ["←"] `of_real_nat_cast)
                      ","
                      (Tactic.rwRule ["←"] `of_real_div)
                      ","
                      (Tactic.rwRule [] `of_real_re)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `div_nonneg
                     [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
                   [])])))))))))]
       "⟩")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `CauSeq.le_of_exists
   [(Term.anonymousCtor
     "⟨"
     [(numLit "2")
      ","
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`j `hj] [])]
        "=>"
        (Term.show
         "show"
         («term_≤_»
          (Init.Logic.«term_+_»
           `x
           "+"
           (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
          "≤"
          (Term.proj
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [`j])
            ", "
            (Term.paren
             "("
             [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
              [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
             ")"))
           "."
           `re))
         (Term.fromTerm
          "from"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h₁ []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Term.proj
                 (Term.app
                  (Rel.Data.Rel.«term_∘_»
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                     "=>"
                     (Term.paren
                      "("
                      [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                       [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                      ")")))
                   " ∘ "
                   `Nat.succ)
                  [(numLit "0")])
                 "."
                 `re)
                "="
                `x))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₂ []]
              [(Term.typeSpec
                ":"
                («term_=_»
                 (Term.proj
                  («term_/_»
                   («term_^_»
                    (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                    "^"
                    (numLit "0"))
                   "/"
                   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
                  "."
                  `re)
                 "="
                 (numLit "1")))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
            []
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                    ","
                    (Tactic.rwRule [] `sum_range_succ')
                    ","
                    (Tactic.rwRule [] `sum_range_succ')
                    ","
                    (Tactic.rwRule [] `add_re)
                    ","
                    (Tactic.rwRule [] `add_re)
                    ","
                    (Tactic.rwRule [] `h₁)
                    ","
                    (Tactic.rwRule [] `h₂)
                    ","
                    (Tactic.rwRule [] `add_assocₓ)
                    ","
                    (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                    ","
                    (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                    ","
                    (Tactic.rwRule [] `coe_re_add_group_hom)]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `le_add_of_nonneg_of_le
                   [(Term.app
                     `sum_nonneg
                     [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                    (Term.app `le_reflₓ [(Term.hole "_")])]))
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule ["←"] `of_real_pow)
                    ","
                    (Tactic.rwRule ["←"] `of_real_nat_cast)
                    ","
                    (Tactic.rwRule ["←"] `of_real_div)
                    ","
                    (Tactic.rwRule [] `of_real_re)]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `div_nonneg
                   [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
                 [])])))))))))]
     "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(numLit "2")
    ","
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`j `hj] [])]
      "=>"
      (Term.show
       "show"
       («term_≤_»
        (Init.Logic.«term_+_»
         `x
         "+"
         (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
        "≤"
        (Term.proj
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
          " in "
          (Term.app `range [`j])
          ", "
          (Term.paren
           "("
           [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
            [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
           ")"))
         "."
         `re))
       (Term.fromTerm
        "from"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₁ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.proj
               (Term.app
                (Rel.Data.Rel.«term_∘_»
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                   "=>"
                   (Term.paren
                    "("
                    [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                     [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                    ")")))
                 " ∘ "
                 `Nat.succ)
                [(numLit "0")])
               "."
               `re)
              "="
              `x))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₂ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.proj
                («term_/_»
                 («term_^_»
                  (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                  "^"
                  (numLit "0"))
                 "/"
                 (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
                "."
                `re)
               "="
               (numLit "1")))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
          []
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                  ","
                  (Tactic.rwRule [] `sum_range_succ')
                  ","
                  (Tactic.rwRule [] `sum_range_succ')
                  ","
                  (Tactic.rwRule [] `add_re)
                  ","
                  (Tactic.rwRule [] `add_re)
                  ","
                  (Tactic.rwRule [] `h₁)
                  ","
                  (Tactic.rwRule [] `h₂)
                  ","
                  (Tactic.rwRule [] `add_assocₓ)
                  ","
                  (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                  ","
                  (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                  ","
                  (Tactic.rwRule [] `coe_re_add_group_hom)]
                 "]")
                [])
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `le_add_of_nonneg_of_le
                 [(Term.app
                   `sum_nonneg
                   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                  (Term.app `le_reflₓ [(Term.hole "_")])]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `of_real_pow)
                  ","
                  (Tactic.rwRule ["←"] `of_real_nat_cast)
                  ","
                  (Tactic.rwRule ["←"] `of_real_div)
                  ","
                  (Tactic.rwRule [] `of_real_re)]
                 "]")
                [])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `div_nonneg
                 [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
               [])])))))))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`j `hj] [])]
    "=>"
    (Term.show
     "show"
     («term_≤_»
      (Init.Logic.«term_+_»
       `x
       "+"
       (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
      "≤"
      (Term.proj
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [`j])
        ", "
        (Term.paren
         "("
         [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
          [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
         ")"))
       "."
       `re))
     (Term.fromTerm
      "from"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₁ []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Term.proj
             (Term.app
              (Rel.Data.Rel.«term_∘_»
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
                 "=>"
                 (Term.paren
                  "("
                  [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                   [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                  ")")))
               " ∘ "
               `Nat.succ)
              [(numLit "0")])
             "."
             `re)
            "="
            `x))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Term.proj
              («term_/_»
               («term_^_»
                (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                "^"
                (numLit "0"))
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
              "."
              `re)
             "="
             (numLit "1")))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
        []
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
                ","
                (Tactic.rwRule [] `sum_range_succ')
                ","
                (Tactic.rwRule [] `sum_range_succ')
                ","
                (Tactic.rwRule [] `add_re)
                ","
                (Tactic.rwRule [] `add_re)
                ","
                (Tactic.rwRule [] `h₁)
                ","
                (Tactic.rwRule [] `h₂)
                ","
                (Tactic.rwRule [] `add_assocₓ)
                ","
                (Tactic.rwRule ["←"] `coe_re_add_group_hom)
                ","
                (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
                ","
                (Tactic.rwRule [] `coe_re_add_group_hom)]
               "]")
              [])
             [])
            (group
             (Tactic.refine'
              "refine'"
              (Term.app
               `le_add_of_nonneg_of_le
               [(Term.app
                 `sum_nonneg
                 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
                (Term.app `le_reflₓ [(Term.hole "_")])]))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule ["←"] `of_real_pow)
                ","
                (Tactic.rwRule ["←"] `of_real_nat_cast)
                ","
                (Tactic.rwRule ["←"] `of_real_div)
                ","
                (Tactic.rwRule [] `of_real_re)]
               "]")
              [])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.app
               `div_nonneg
               [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
             [])])))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.show
   "show"
   («term_≤_»
    (Init.Logic.«term_+_»
     `x
     "+"
     (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
    "≤"
    (Term.proj
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [`j])
      ", "
      (Term.paren
       "("
       [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
        [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
       ")"))
     "."
     `re))
   (Term.fromTerm
    "from"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₁ []]
       [(Term.typeSpec
         ":"
         («term_=_»
          (Term.proj
           (Term.app
            (Rel.Data.Rel.«term_∘_»
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
               "=>"
               (Term.paren
                "("
                [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                 [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")")))
             " ∘ "
             `Nat.succ)
            [(numLit "0")])
           "."
           `re)
          "="
          `x))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₂ []]
        [(Term.typeSpec
          ":"
          («term_=_»
           (Term.proj
            («term_/_»
             («term_^_»
              (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
              "^"
              (numLit "0"))
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
            "."
            `re)
           "="
           (numLit "1")))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
      []
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
              ","
              (Tactic.rwRule [] `sum_range_succ')
              ","
              (Tactic.rwRule [] `sum_range_succ')
              ","
              (Tactic.rwRule [] `add_re)
              ","
              (Tactic.rwRule [] `add_re)
              ","
              (Tactic.rwRule [] `h₁)
              ","
              (Tactic.rwRule [] `h₂)
              ","
              (Tactic.rwRule [] `add_assocₓ)
              ","
              (Tactic.rwRule ["←"] `coe_re_add_group_hom)
              ","
              (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
              ","
              (Tactic.rwRule [] `coe_re_add_group_hom)]
             "]")
            [])
           [])
          (group
           (Tactic.refine'
            "refine'"
            (Term.app
             `le_add_of_nonneg_of_le
             [(Term.app
               `sum_nonneg
               [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
              (Term.app `le_reflₓ [(Term.hole "_")])]))
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `of_real_pow)
              ","
              (Tactic.rwRule ["←"] `of_real_nat_cast)
              ","
              (Tactic.rwRule ["←"] `of_real_div)
              ","
              (Tactic.rwRule [] `of_real_re)]
             "]")
            [])
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.app
             `div_nonneg
             [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
           [])])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'Lean.Parser.Term.show.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.fromTerm.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Term.proj
         (Term.app
          (Rel.Data.Rel.«term_∘_»
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
             "=>"
             (Term.paren
              "("
              [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
               [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
              ")")))
           " ∘ "
           `Nat.succ)
          [(numLit "0")])
         "."
         `re)
        "="
        `x))]
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₂ []]
      [(Term.typeSpec
        ":"
        («term_=_»
         (Term.proj
          («term_/_»
           («term_^_»
            (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
            "^"
            (numLit "0"))
           "/"
           (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
          "."
          `re)
         "="
         (numLit "1")))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
            ","
            (Tactic.rwRule [] `sum_range_succ')
            ","
            (Tactic.rwRule [] `sum_range_succ')
            ","
            (Tactic.rwRule [] `add_re)
            ","
            (Tactic.rwRule [] `add_re)
            ","
            (Tactic.rwRule [] `h₁)
            ","
            (Tactic.rwRule [] `h₂)
            ","
            (Tactic.rwRule [] `add_assocₓ)
            ","
            (Tactic.rwRule ["←"] `coe_re_add_group_hom)
            ","
            (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
            ","
            (Tactic.rwRule [] `coe_re_add_group_hom)]
           "]")
          [])
         [])
        (group
         (Tactic.refine'
          "refine'"
          (Term.app
           `le_add_of_nonneg_of_le
           [(Term.app
             `sum_nonneg
             [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
            (Term.app `le_reflₓ [(Term.hole "_")])]))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule ["←"] `of_real_pow)
            ","
            (Tactic.rwRule ["←"] `of_real_nat_cast)
            ","
            (Tactic.rwRule ["←"] `of_real_div)
            ","
            (Tactic.rwRule [] `of_real_re)]
           "]")
          [])
         [])
        (group
         (Tactic.exact
          "exact"
          (Term.app
           `div_nonneg
           [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     [(Term.typeSpec
       ":"
       («term_=_»
        (Term.proj
         («term_/_»
          («term_^_»
           (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
           "^"
           (numLit "0"))
          "/"
          (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
         "."
         `re)
        "="
        (numLit "1")))]
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
           ","
           (Tactic.rwRule [] `sum_range_succ')
           ","
           (Tactic.rwRule [] `sum_range_succ')
           ","
           (Tactic.rwRule [] `add_re)
           ","
           (Tactic.rwRule [] `add_re)
           ","
           (Tactic.rwRule [] `h₁)
           ","
           (Tactic.rwRule [] `h₂)
           ","
           (Tactic.rwRule [] `add_assocₓ)
           ","
           (Tactic.rwRule ["←"] `coe_re_add_group_hom)
           ","
           (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
           ","
           (Tactic.rwRule [] `coe_re_add_group_hom)]
          "]")
         [])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `le_add_of_nonneg_of_le
          [(Term.app
            `sum_nonneg
            [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
           (Term.app `le_reflₓ [(Term.hole "_")])]))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule ["←"] `of_real_pow)
           ","
           (Tactic.rwRule ["←"] `of_real_nat_cast)
           ","
           (Tactic.rwRule ["←"] `of_real_div)
           ","
           (Tactic.rwRule [] `of_real_re)]
          "]")
         [])
        [])
       (group
        (Tactic.exact
         "exact"
         (Term.app
          `div_nonneg
          [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
          ","
          (Tactic.rwRule [] `sum_range_succ')
          ","
          (Tactic.rwRule [] `sum_range_succ')
          ","
          (Tactic.rwRule [] `add_re)
          ","
          (Tactic.rwRule [] `add_re)
          ","
          (Tactic.rwRule [] `h₁)
          ","
          (Tactic.rwRule [] `h₂)
          ","
          (Tactic.rwRule [] `add_assocₓ)
          ","
          (Tactic.rwRule ["←"] `coe_re_add_group_hom)
          ","
          (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
          ","
          (Tactic.rwRule [] `coe_re_add_group_hom)]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `le_add_of_nonneg_of_le
         [(Term.app
           `sum_nonneg
           [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
          (Term.app `le_reflₓ [(Term.hole "_")])]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] `of_real_pow)
          ","
          (Tactic.rwRule ["←"] `of_real_nat_cast)
          ","
          (Tactic.rwRule ["←"] `of_real_div)
          ","
          (Tactic.rwRule [] `of_real_re)]
         "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `div_nonneg
         [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app `div_nonneg [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `div_nonneg [(Term.app `pow_nonneg [`hx (Term.hole "_")]) (Term.app `Nat.cast_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.cast_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.cast_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `pow_nonneg [`hx (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `pow_nonneg [`hx (Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `of_real_pow)
     ","
     (Tactic.rwRule ["←"] `of_real_nat_cast)
     ","
     (Tactic.rwRule ["←"] `of_real_div)
     ","
     (Tactic.rwRule [] `of_real_re)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `of_real_re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `of_real_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `of_real_nat_cast
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `of_real_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `le_add_of_nonneg_of_le
    [(Term.app `sum_nonneg [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
     (Term.app `le_reflₓ [(Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `le_add_of_nonneg_of_le
   [(Term.app `sum_nonneg [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
    (Term.app `le_reflₓ [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_reflₓ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_reflₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_reflₓ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `sum_nonneg [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `sum_nonneg [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_add_of_nonneg_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] (Term.app `tsub_add_cancel_of_le [`hj]))
     ","
     (Tactic.rwRule [] `sum_range_succ')
     ","
     (Tactic.rwRule [] `sum_range_succ')
     ","
     (Tactic.rwRule [] `add_re)
     ","
     (Tactic.rwRule [] `add_re)
     ","
     (Tactic.rwRule [] `h₁)
     ","
     (Tactic.rwRule [] `h₂)
     ","
     (Tactic.rwRule [] `add_assocₓ)
     ","
     (Tactic.rwRule ["←"] `coe_re_add_group_hom)
     ","
     (Tactic.rwRule [] (Term.proj `re_add_group_hom "." `map_sum))
     ","
     (Tactic.rwRule [] `coe_re_add_group_hom)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `coe_re_add_group_hom
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `re_add_group_hom "." `map_sum)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `re_add_group_hom
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `coe_re_add_group_hom
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_re
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_range_succ'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_range_succ'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `tsub_add_cancel_of_le [`hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tsub_add_cancel_of_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.proj
    («term_/_»
     («term_^_» (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")") "^" (numLit "0"))
     "/"
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
    "."
    `re)
   "="
   (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.proj
   («term_/_»
    («term_^_» (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")") "^" (numLit "0"))
    "/"
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
   "."
   `re)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_/_»
   («term_^_» (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")") "^" (numLit "0"))
   "/"
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")") "^" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   («term_^_» (Term.paren "(" [`x [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")") "^" (numLit "0"))
   "/"
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "0") "!"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.proj
    (Term.app
     (Rel.Data.Rel.«term_∘_»
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
        "=>"
        (Term.paren
         "("
         [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
          [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
         ")")))
      " ∘ "
      `Nat.succ)
     [(numLit "0")])
    "."
    `re)
   "="
   `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.proj
   (Term.app
    (Rel.Data.Rel.«term_∘_»
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
       "=>"
       (Term.paren
        "("
        [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
         [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
        ")")))
     " ∘ "
     `Nat.succ)
    [(numLit "0")])
   "."
   `re)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Rel.Data.Rel.«term_∘_»
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
      "=>"
      (Term.paren
       "("
       [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
        [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
       ")")))
    " ∘ "
    `Nat.succ)
   [(numLit "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.«term_∘_»
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
     "=>"
     (Term.paren
      "("
      [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
       [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
      ")")))
   " ∘ "
   `Nat.succ)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
    "=>"
    (Term.paren
     "("
     [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
      [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
    [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (some 0, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
    "=>"
    (Term.paren
     "("
     [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
      [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.«term_∘_»
   (Term.paren
    "("
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
       "=>"
       (Term.paren
        "("
        [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
         [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
        ")")))
     []]
    ")")
   " ∘ "
   `Nat.succ)
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.paren
    "("
    [(Rel.Data.Rel.«term_∘_»
      (Term.paren
       "("
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m] [(Term.typeSpec ":" (termℕ "ℕ"))])]
          "=>"
          (Term.paren
           "("
           [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
            [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
           ")")))
        []]
       ")")
      " ∘ "
      `Nat.succ)
     []]
    ")")
   [(numLit "0")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_≤_»
   (Init.Logic.«term_+_»
    `x
    "+"
    (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")"))
   "≤"
   (Term.proj
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`j])
     ", "
     (Term.paren
      "("
      [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
       [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
      ")"))
    "."
    `re))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`j])
    ", "
    (Term.paren
     "("
     [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
      [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
     ")"))
   "."
   `re)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`j])
   ", "
   (Term.paren
    "("
    [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
     [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
    ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
    [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    This is an intermediate result that is later replaced by `real.add_one_le_exp`; use that lemma
    instead. -/
  theorem
    add_one_le_exp_of_nonneg
    { x : ℝ } ( hx : 0 ≤ x ) : x + 1 ≤ exp x
    :=
      calc
        x + 1 ≤ limₓ ( ⟨ fun n : ℕ => exp' x n . re , is_cau_seq_re exp' x ⟩ : CauSeq ℝ HasAbs.abs )
            :=
            le_lim
              CauSeq.le_of_exists
                ⟨
                  2
                    ,
                    fun
                      j hj
                        =>
                        show
                          x + ( 1 : ℝ ) ≤ ∑ m in range j , ( x ^ m / m ! : ℂ ) . re
                          from
                            have
                              h₁ : fun m : ℕ => ( x ^ m / m ! : ℂ ) ∘ Nat.succ 0 . re = x := by simp
                              have
                                h₂ : ( x : ℂ ) ^ 0 / 0 ! . re = 1 := by simp
                                by
                                  rw
                                      [
                                        ← tsub_add_cancel_of_le hj
                                          ,
                                          sum_range_succ'
                                          ,
                                          sum_range_succ'
                                          ,
                                          add_re
                                          ,
                                          add_re
                                          ,
                                          h₁
                                          ,
                                          h₂
                                          ,
                                          add_assocₓ
                                          ,
                                          ← coe_re_add_group_hom
                                          ,
                                          re_add_group_hom . map_sum
                                          ,
                                          coe_re_add_group_hom
                                        ]
                                    refine' le_add_of_nonneg_of_le sum_nonneg fun m hm => _ le_reflₓ _
                                    rw [ ← of_real_pow , ← of_real_nat_cast , ← of_real_div , of_real_re ]
                                    exact div_nonneg pow_nonneg hx _ Nat.cast_nonneg _
                  ⟩
          _ = exp x := by rw [ exp , Complex.exp , ← cau_seq_re , lim_re ]

theorem one_le_exp {x : ℝ} (hx : 0 ≤ x) : 1 ≤ exp x := by
  linarith [add_one_le_exp_of_nonneg hx]

theorem exp_pos (x : ℝ) : 0 < exp x :=
  (le_totalₓ 0 x).elim (lt_of_lt_of_leₓ zero_lt_one ∘ one_le_exp) fun h => by
    rw [← neg_negₓ x, Real.exp_neg] <;> exact inv_pos.2 (lt_of_lt_of_leₓ zero_lt_one (one_le_exp (neg_nonneg.2 h)))

@[simp]
theorem abs_exp (x : ℝ) : |exp x| = exp x :=
  abs_of_pos (exp_pos _)

theorem exp_strict_mono : StrictMono exp := fun x y h => by
  rw [← sub_add_cancel y x, Real.exp_add] <;>
    exact
      (lt_mul_iff_one_lt_left (exp_pos _)).2
        (lt_of_lt_of_leₓ
          (by
            linarith)
          (add_one_le_exp_of_nonneg
            (by
              linarith)))

@[mono]
theorem exp_monotone : ∀ {x y : ℝ}, x ≤ y → exp x ≤ exp y :=
  exp_strict_mono.Monotone

@[simp]
theorem exp_lt_exp {x y : ℝ} : exp x < exp y ↔ x < y :=
  exp_strict_mono.lt_iff_lt

@[simp]
theorem exp_le_exp {x y : ℝ} : exp x ≤ exp y ↔ x ≤ y :=
  exp_strict_mono.le_iff_le

theorem exp_injective : Function.Injective exp :=
  exp_strict_mono.Injective

@[simp]
theorem exp_eq_exp {x y : ℝ} : exp x = exp y ↔ x = y :=
  exp_injective.eq_iff

@[simp]
theorem exp_eq_one_iff : exp x = 1 ↔ x = 0 := by
  rw [← exp_zero, exp_injective.eq_iff]

@[simp]
theorem one_lt_exp_iff {x : ℝ} : 1 < exp x ↔ 0 < x := by
  rw [← exp_zero, exp_lt_exp]

@[simp]
theorem exp_lt_one_iff {x : ℝ} : exp x < 1 ↔ x < 0 := by
  rw [← exp_zero, exp_lt_exp]

@[simp]
theorem exp_le_one_iff {x : ℝ} : exp x ≤ 1 ↔ x ≤ 0 :=
  exp_zero ▸ exp_le_exp

@[simp]
theorem one_le_exp_iff {x : ℝ} : 1 ≤ exp x ↔ 0 ≤ x :=
  exp_zero ▸ exp_le_exp

/--  `real.cosh` is always positive -/
theorem cosh_pos (x : ℝ) : 0 < Real.cosh x :=
  (cosh_eq x).symm ▸ half_pos (add_pos (exp_pos x) (exp_pos (-x)))

end Real

namespace Complex

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `sum_div_factorial_le [])
  (Command.declSig
   [(Term.implicitBinder "{" [`α] [":" (Term.type "Type" [(Level.hole "_")])] "}")
    (Term.instBinder "[" [] (Term.app `LinearOrderedField [`α]) "]")
    (Term.explicitBinder "(" [`n `j] [":" (termℕ "ℕ")] [] ")")
    (Term.explicitBinder "(" [`hn] [":" («term_<_» (numLit "0") "<" `n)] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app
       `Filter
       [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
        (Term.app `range [`j])])
      ", "
      (Term.paren
       "("
       [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")) [(Term.typeAscription ":" `α)]]
       ")"))
     "≤"
     («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_=_»
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app
         `Filter
         [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
          (Term.app `range [`j])])
        ", "
        (Term.paren
         "("
         [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")) [(Term.typeAscription ":" `α)]]
         ")"))
       "="
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(«term_-_» `j "-" `n)])
        ", "
        («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `m "+" `n) "!"))))
      ":="
      (Term.app
       `sum_bij
       [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m (Term.hole "_")] [])] "=>" («term_-_» `m "-" `n)))
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m `hm] [])]
          "=>"
          («term_$__»
           (Term.proj `mem_range "." (fieldIdx "2"))
           "$"
           (Term.app
            (Term.proj
             (Term.app
              `tsub_lt_tsub_iff_right
              [(Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
                     "<;>"
                     (Tactic.tauto "tauto" []))
                    [])])))])
             "."
             (fieldIdx "2"))
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
                   "<;>"
                   (Tactic.tauto "tauto" []))
                  [])])))]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`m `hm] [])]
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tsub_add_cancel_of_le)] "]") [])
                "<;>"
                (Tactic.«tactic_<;>_»
                 (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                 "<;>"
                 (Tactic.tauto "tauto" [])))
               [])])))))
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`a₁ `a₂ `ha₁ `ha₂ `h] [])]
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (tacticRwa__
                 "rwa"
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `tsub_eq_iff_eq_add_of_le)
                   ","
                   (Tactic.rwRule [] `tsub_add_eq_add_tsub)
                   ","
                   (Tactic.rwRule [] `eq_comm)
                   ","
                   (Tactic.rwRule [] `tsub_eq_iff_eq_add_of_le)
                   ","
                   (Tactic.rwRule [] `add_left_injₓ)
                   ","
                   (Tactic.rwRule [] `eq_comm)]
                  "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
                "<;>"
                (Tactic.«tactic_<;>_»
                 (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                 "<;>"
                 (Tactic.tauto "tauto" [])))
               [])])))))
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`b `hb] [])]
          "=>"
          (Term.anonymousCtor
           "⟨"
           [(Init.Logic.«term_+_» `b "+" `n)
            ","
            (Term.app
             (Term.proj `mem_filter "." (fieldIdx "2"))
             [(Term.anonymousCtor
               "⟨"
               [(«term_$__»
                 (Term.proj `mem_range "." (fieldIdx "2"))
                 "$"
                 (Term.app
                  (Term.proj `lt_tsub_iff_right "." `mp)
                  [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hb])]))
                ","
                (Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])]
               "⟩")])
            ","
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_tsub_cancel_right)] "]") [])
                 [])])))]
           "⟩")))]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(«term_-_» `j "-" `n)])
        ", "
        (Init.Logic.«term_⁻¹»
         (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" («term_^_» `n.succ "^" `m))
         "⁻¹")))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.refine'
            "refine'"
            (Term.app
             `sum_le_sum
             [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `n] [])] "=>" (Term.hole "_")))]))
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `one_div) "," (Tactic.rwRule [] `inv_le_inv)] "]")
            [])
           [])
          (group
           (Tactic.«tactic·._»
            "·"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `Nat.cast_pow)
                   ","
                   (Tactic.rwRule ["←"] `Nat.cast_mul)
                   ","
                   (Tactic.rwRule [] `Nat.cast_le)
                   ","
                   (Tactic.rwRule [] `add_commₓ)]
                  "]")
                 [])
                [])
               (group (Tactic.exact "exact" `Nat.factorial_mul_pow_le_factorial) [])])))
           [])
          (group
           (Tactic.«tactic·._»
            "·"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.exact
                 "exact"
                 (Term.app
                  (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                  [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
                [])])))
           [])
          (group
           (Tactic.«tactic·._»
            "·"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.exact
                 "exact"
                 (Term.app
                  `mul_pos
                  [(Term.app
                    (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                    [(Term.app `Nat.factorial_pos [(Term.hole "_")])])
                   (Term.app
                    `pow_pos
                    [(Term.app
                      (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                      [(Term.app `Nat.succ_posₓ [(Term.hole "_")])])
                     (Term.hole "_")])]))
                [])])))
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Finset.Data.Finset.Fold.«term_*_»
        (Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
        "*"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [(«term_-_» `j "-" `n)])
         ", "
         («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m))))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `mul_inv₀)
              ","
              (Tactic.simpLemma [] [] `mul_sum.symm)
              ","
              (Tactic.simpLemma [] [] `sum_mul.symm)
              ","
              (Tactic.simpErase "-" `Nat.factorial_succ)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)
              ","
              (Tactic.simpLemma [] [] `inv_pow₀)]
             "]"]
            [])
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       («term_/_»
        («term_-_»
         `n.succ
         "-"
         (Finset.Data.Finset.Fold.«term_*_»
          `n.succ
          "*"
          («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))))
        "/"
        (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
      ":="
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₁ []]
         [(Term.typeSpec
           ":"
           («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "1")))]
         ":="
         (Term.subst
          (Term.app (Term.explicit "@" `Nat.cast_one) [`α (Term.hole "_") (Term.hole "_")])
          "▸"
          [(Term.app
            `mt
            [(Term.proj `Nat.cast_inj "." (fieldIdx "1"))
             (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          [(Term.typeSpec
            ":"
            («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "0")))]
          ":="
          (Term.app (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2")) [(Term.app `Nat.succ_ne_zero [(Term.hole "_")])])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₃ []]
           [(Term.typeSpec
             ":"
             («term_≠_»
              (Term.paren
               "("
               [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                [(Term.typeAscription ":" `α)]]
               ")")
              "≠"
              (numLit "0")))]
           ":="
           (Term.app
            `mul_ne_zero
            [(Term.app
              (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
              [(Term.app
                (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
                [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
             (Term.app
              (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
              [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₄ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")")
               "="
               `n))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
          []
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `geom_sum_def)
                   ","
                   (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
                   ","
                   (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
                   ","
                   (Tactic.rwRule
                    []
                    (Term.app
                     `mul_commₓ
                     [(Term.hole "_")
                      (Term.paren
                       "("
                       [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                        [(Term.typeAscription ":" `α)]]
                       ")")]))
                   ","
                   (Tactic.rwRule
                    ["←"]
                    (Term.app
                     `mul_assocₓ
                     [(Term.paren
                       "("
                       [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                        [(Term.typeAscription ":" `α)]]
                       ")")]))
                   ","
                   (Tactic.rwRule ["←"] `mul_inv_rev₀)
                   ","
                   (Tactic.rwRule [] `h₄)
                   ","
                   (Tactic.rwRule
                    ["←"]
                    (Term.app
                     `mul_assocₓ
                     [(Term.paren
                       "("
                       [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                        [(Term.typeAscription ":" `α)]]
                       ")")]))
                   ","
                   (Tactic.rwRule
                    []
                    (Term.app
                     `mul_commₓ
                     [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")")
                      (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
                   ","
                   (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
                  "]")
                 [])
                "<;>"
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["["
                  [(Tactic.simpLemma [] [] `mul_addₓ)
                   ","
                   (Tactic.simpLemma [] [] `add_mulₓ)
                   ","
                   (Tactic.simpLemma [] [] `mul_assocₓ)
                   ","
                   (Tactic.simpLemma [] [] `mul_commₓ)]
                  "]"]
                 []))
               [])]))))))))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.refine'
            "refine'"
            (Term.app
             `Iff.mpr
             [(Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])]) (Term.hole "_")]))
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
           [])
          (group (Tactic.exact "exact" (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [`hn])) [])
          (group
           (Tactic.exact
            "exact"
            (Term.app
             `sub_le_self
             [(Term.hole "_")
              (Term.app
               `mul_nonneg
               [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
                (Term.app
                 `pow_nonneg
                 [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
                  (Term.hole "_")])])]))
           [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app
        `Filter
        [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
         (Term.app `range [`j])])
       ", "
       (Term.paren
        "("
        [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")) [(Term.typeAscription ":" `α)]]
        ")"))
      "="
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(«term_-_» `j "-" `n)])
       ", "
       («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `m "+" `n) "!"))))
     ":="
     (Term.app
      `sum_bij
      [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m (Term.hole "_")] [])] "=>" («term_-_» `m "-" `n)))
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m `hm] [])]
         "=>"
         («term_$__»
          (Term.proj `mem_range "." (fieldIdx "2"))
          "$"
          (Term.app
           (Term.proj
            (Term.app
             `tsub_lt_tsub_iff_right
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
                    "<;>"
                    (Tactic.tauto "tauto" []))
                   [])])))])
            "."
            (fieldIdx "2"))
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
                  "<;>"
                  (Tactic.tauto "tauto" []))
                 [])])))]))))
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`m `hm] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tsub_add_cancel_of_le)] "]") [])
               "<;>"
               (Tactic.«tactic_<;>_»
                (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                "<;>"
                (Tactic.tauto "tauto" [])))
              [])])))))
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`a₁ `a₂ `ha₁ `ha₂ `h] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (tacticRwa__
                "rwa"
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `tsub_eq_iff_eq_add_of_le)
                  ","
                  (Tactic.rwRule [] `tsub_add_eq_add_tsub)
                  ","
                  (Tactic.rwRule [] `eq_comm)
                  ","
                  (Tactic.rwRule [] `tsub_eq_iff_eq_add_of_le)
                  ","
                  (Tactic.rwRule [] `add_left_injₓ)
                  ","
                  (Tactic.rwRule [] `eq_comm)]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
               "<;>"
               (Tactic.«tactic_<;>_»
                (Tactic.simp "simp" [] [] [] [(Tactic.location "at" (Tactic.locationWildcard "*"))])
                "<;>"
                (Tactic.tauto "tauto" [])))
              [])])))))
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`b `hb] [])]
         "=>"
         (Term.anonymousCtor
          "⟨"
          [(Init.Logic.«term_+_» `b "+" `n)
           ","
           (Term.app
            (Term.proj `mem_filter "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "⟨"
              [(«term_$__»
                (Term.proj `mem_range "." (fieldIdx "2"))
                "$"
                (Term.app
                 (Term.proj `lt_tsub_iff_right "." `mp)
                 [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hb])]))
               ","
               (Term.app `Nat.le_add_leftₓ [(Term.hole "_") (Term.hole "_")])]
              "⟩")])
           ","
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_tsub_cancel_right)] "]") [])
                [])])))]
          "⟩")))]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(«term_-_» `j "-" `n)])
       ", "
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" («term_^_» `n.succ "^" `m))
        "⁻¹")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app
            `sum_le_sum
            [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `n] [])] "=>" (Term.hole "_")))]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `one_div) "," (Tactic.rwRule [] `inv_le_inv)] "]")
           [])
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `Nat.cast_pow)
                  ","
                  (Tactic.rwRule ["←"] `Nat.cast_mul)
                  ","
                  (Tactic.rwRule [] `Nat.cast_le)
                  ","
                  (Tactic.rwRule [] `add_commₓ)]
                 "]")
                [])
               [])
              (group (Tactic.exact "exact" `Nat.factorial_mul_pow_le_factorial) [])])))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                 [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
               [])])))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_pos
                 [(Term.app
                   (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                   [(Term.app `Nat.factorial_pos [(Term.hole "_")])])
                  (Term.app
                   `pow_pos
                   [(Term.app
                     (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                     [(Term.app `Nat.succ_posₓ [(Term.hole "_")])])
                    (Term.hole "_")])]))
               [])])))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.«term_*_»
       (Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
       "*"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(«term_-_» `j "-" `n)])
        ", "
        («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `mul_inv₀)
             ","
             (Tactic.simpLemma [] [] `mul_sum.symm)
             ","
             (Tactic.simpLemma [] [] `sum_mul.symm)
             ","
             (Tactic.simpErase "-" `Nat.factorial_succ)
             ","
             (Tactic.simpLemma [] [] `mul_commₓ)
             ","
             (Tactic.simpLemma [] [] `inv_pow₀)]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      («term_/_»
       («term_-_»
        `n.succ
        "-"
        (Finset.Data.Finset.Fold.«term_*_»
         `n.succ
         "*"
         («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))))
       "/"
       (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
     ":="
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₁ []]
        [(Term.typeSpec ":" («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "1")))]
        ":="
        (Term.subst
         (Term.app (Term.explicit "@" `Nat.cast_one) [`α (Term.hole "_") (Term.hole "_")])
         "▸"
         [(Term.app
           `mt
           [(Term.proj `Nat.cast_inj "." (fieldIdx "1"))
            (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₂ []]
         [(Term.typeSpec
           ":"
           («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "0")))]
         ":="
         (Term.app (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2")) [(Term.app `Nat.succ_ne_zero [(Term.hole "_")])])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₃ []]
          [(Term.typeSpec
            ":"
            («term_≠_»
             (Term.paren
              "("
              [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
               [(Term.typeAscription ":" `α)]]
              ")")
             "≠"
             (numLit "0")))]
          ":="
          (Term.app
           `mul_ne_zero
           [(Term.app
             (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
             [(Term.app
               (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
               [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
            (Term.app
             (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
             [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₄ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")")
              "="
              `n))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
         []
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `geom_sum_def)
                  ","
                  (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
                  ","
                  (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app
                    `mul_commₓ
                    [(Term.hole "_")
                     (Term.paren
                      "("
                      [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                       [(Term.typeAscription ":" `α)]]
                      ")")]))
                  ","
                  (Tactic.rwRule
                   ["←"]
                   (Term.app
                    `mul_assocₓ
                    [(Term.paren
                      "("
                      [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                       [(Term.typeAscription ":" `α)]]
                      ")")]))
                  ","
                  (Tactic.rwRule ["←"] `mul_inv_rev₀)
                  ","
                  (Tactic.rwRule [] `h₄)
                  ","
                  (Tactic.rwRule
                   ["←"]
                   (Term.app
                    `mul_assocₓ
                    [(Term.paren
                      "("
                      [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                       [(Term.typeAscription ":" `α)]]
                      ")")]))
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app
                    `mul_commₓ
                    [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")")
                     (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
                  ","
                  (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
                 "]")
                [])
               "<;>"
               (Tactic.simp
                "simp"
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `mul_addₓ)
                  ","
                  (Tactic.simpLemma [] [] `add_mulₓ)
                  ","
                  (Tactic.simpLemma [] [] `mul_assocₓ)
                  ","
                  (Tactic.simpLemma [] [] `mul_commₓ)]
                 "]"]
                []))
              [])]))))))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app
            `Iff.mpr
            [(Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])]) (Term.hole "_")]))
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
          [])
         (group (Tactic.exact "exact" (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [`hn])) [])
         (group
          (Tactic.exact
           "exact"
           (Term.app
            `sub_le_self
            [(Term.hole "_")
             (Term.app
              `mul_nonneg
              [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
               (Term.app
                `pow_nonneg
                [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
                 (Term.hole "_")])])]))
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `Iff.mpr
         [(Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])]) (Term.hole "_")]))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
       [])
      (group (Tactic.exact "exact" (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [`hn])) [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `sub_le_self
         [(Term.hole "_")
          (Term.app
           `mul_nonneg
           [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
            (Term.app
             `pow_nonneg
             [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
              (Term.hole "_")])])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `sub_le_self
    [(Term.hole "_")
     (Term.app
      `mul_nonneg
      [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
       (Term.app
        `pow_nonneg
        [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
         (Term.hole "_")])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `sub_le_self
   [(Term.hole "_")
    (Term.app
     `mul_nonneg
     [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
      (Term.app
       `pow_nonneg
       [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
        (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_nonneg
   [(Term.app `Nat.cast_nonneg [(Term.hole "_")])
    (Term.app
     `pow_nonneg
     [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
      (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `pow_nonneg
   [(Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app (Term.proj `inv_nonneg "." (fieldIdx "2")) [(Term.app `Nat.cast_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.cast_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.cast_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `inv_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `inv_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `inv_nonneg "." (fieldIdx "2"))
   [(Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `pow_nonneg
   [(Term.paren
     "("
     [(Term.app
       (Term.proj `inv_nonneg "." (fieldIdx "2"))
       [(Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")])
      []]
     ")")
    (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `Nat.cast_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.cast_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mul_nonneg
   [(Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")
    (Term.paren
     "("
     [(Term.app
       `pow_nonneg
       [(Term.paren
         "("
         [(Term.app
           (Term.proj `inv_nonneg "." (fieldIdx "2"))
           [(Term.paren "(" [(Term.app `Nat.cast_nonneg [(Term.hole "_")]) []] ")")])
          []]
         ")")
        (Term.hole "_")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sub_le_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact "exact" (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [`hn]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact
   "exact"
   (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `Nat.cast_pos "." (fieldIdx "2")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.factorial_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.factorial_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.factorial_pos [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `Iff.mpr
    [(Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])]) (Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Iff.mpr
   [(Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `div_le_div_right [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_pos [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `div_le_div_right [(Term.paren "(" [(Term.app `mul_pos [(Term.hole "_") (Term.hole "_")]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Iff.mpr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec ":" («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "1")))]
     ":="
     (Term.subst
      (Term.app (Term.explicit "@" `Nat.cast_one) [`α (Term.hole "_") (Term.hole "_")])
      "▸"
      [(Term.app
        `mt
        [(Term.proj `Nat.cast_inj "." (fieldIdx "1"))
         (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₂ []]
      [(Term.typeSpec ":" («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "0")))]
      ":="
      (Term.app (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2")) [(Term.app `Nat.succ_ne_zero [(Term.hole "_")])])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₃ []]
       [(Term.typeSpec
         ":"
         («term_≠_»
          (Term.paren
           "("
           [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
            [(Term.typeAscription ":" `α)]]
           ")")
          "≠"
          (numLit "0")))]
       ":="
       (Term.app
        `mul_ne_zero
        [(Term.app
          (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
          [(Term.app
            (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
            [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
         (Term.app
          (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
          [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₄ []]
        [(Term.typeSpec
          ":"
          («term_=_»
           (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")")
           "="
           `n))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
      []
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] `geom_sum_def)
               ","
               (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
               ","
               (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `mul_commₓ
                 [(Term.hole "_")
                  (Term.paren
                   "("
                   [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                    [(Term.typeAscription ":" `α)]]
                   ")")]))
               ","
               (Tactic.rwRule
                ["←"]
                (Term.app
                 `mul_assocₓ
                 [(Term.paren
                   "("
                   [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                    [(Term.typeAscription ":" `α)]]
                   ")")]))
               ","
               (Tactic.rwRule ["←"] `mul_inv_rev₀)
               ","
               (Tactic.rwRule [] `h₄)
               ","
               (Tactic.rwRule
                ["←"]
                (Term.app
                 `mul_assocₓ
                 [(Term.paren
                   "("
                   [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                    [(Term.typeAscription ":" `α)]]
                   ")")]))
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `mul_commₓ
                 [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")")
                  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
               ","
               (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
              "]")
             [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `mul_addₓ)
               ","
               (Tactic.simpLemma [] [] `add_mulₓ)
               ","
               (Tactic.simpLemma [] [] `mul_assocₓ)
               ","
               (Tactic.simpLemma [] [] `mul_commₓ)]
              "]"]
             []))
           [])])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     [(Term.typeSpec ":" («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "0")))]
     ":="
     (Term.app (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2")) [(Term.app `Nat.succ_ne_zero [(Term.hole "_")])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₃ []]
      [(Term.typeSpec
        ":"
        («term_≠_»
         (Term.paren
          "("
          [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
           [(Term.typeAscription ":" `α)]]
          ")")
         "≠"
         (numLit "0")))]
      ":="
      (Term.app
       `mul_ne_zero
       [(Term.app
         (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
         [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
        (Term.app
         (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
         [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₄ []]
       [(Term.typeSpec
         ":"
         («term_=_» (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")") "=" `n))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
     []
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `geom_sum_def)
              ","
              (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
              ","
              (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
              ","
              (Tactic.rwRule
               []
               (Term.app
                `mul_commₓ
                [(Term.hole "_")
                 (Term.paren
                  "("
                  [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                   [(Term.typeAscription ":" `α)]]
                  ")")]))
              ","
              (Tactic.rwRule
               ["←"]
               (Term.app
                `mul_assocₓ
                [(Term.paren
                  "("
                  [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                   [(Term.typeAscription ":" `α)]]
                  ")")]))
              ","
              (Tactic.rwRule ["←"] `mul_inv_rev₀)
              ","
              (Tactic.rwRule [] `h₄)
              ","
              (Tactic.rwRule
               ["←"]
               (Term.app
                `mul_assocₓ
                [(Term.paren
                  "("
                  [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                   [(Term.typeAscription ":" `α)]]
                  ")")]))
              ","
              (Tactic.rwRule
               []
               (Term.app
                `mul_commₓ
                [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")")
                 (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
              ","
              (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
             "]")
            [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `mul_addₓ)
              ","
              (Tactic.simpLemma [] [] `add_mulₓ)
              ","
              (Tactic.simpLemma [] [] `mul_assocₓ)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)]
             "]"]
            []))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₃ []]
     [(Term.typeSpec
       ":"
       («term_≠_»
        (Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
          [(Term.typeAscription ":" `α)]]
         ")")
        "≠"
        (numLit "0")))]
     ":="
     (Term.app
      `mul_ne_zero
      [(Term.app
        (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
        [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
       (Term.app
        (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
        [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₄ []]
      [(Term.typeSpec
        ":"
        («term_=_» (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")") "=" `n))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule ["←"] `geom_sum_def)
             ","
             (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
             ","
             (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
             ","
             (Tactic.rwRule
              []
              (Term.app
               `mul_commₓ
               [(Term.hole "_")
                (Term.paren
                 "("
                 [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                  [(Term.typeAscription ":" `α)]]
                 ")")]))
             ","
             (Tactic.rwRule
              ["←"]
              (Term.app
               `mul_assocₓ
               [(Term.paren
                 "("
                 [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                  [(Term.typeAscription ":" `α)]]
                 ")")]))
             ","
             (Tactic.rwRule ["←"] `mul_inv_rev₀)
             ","
             (Tactic.rwRule [] `h₄)
             ","
             (Tactic.rwRule
              ["←"]
              (Term.app
               `mul_assocₓ
               [(Term.paren
                 "("
                 [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                  [(Term.typeAscription ":" `α)]]
                 ")")]))
             ","
             (Tactic.rwRule
              []
              (Term.app
               `mul_commₓ
               [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
             ","
             (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
            "]")
           [])
          "<;>"
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `mul_addₓ)
             ","
             (Tactic.simpLemma [] [] `add_mulₓ)
             ","
             (Tactic.simpLemma [] [] `mul_assocₓ)
             ","
             (Tactic.simpLemma [] [] `mul_commₓ)]
            "]"]
           []))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₄ []]
     [(Term.typeSpec
       ":"
       («term_=_» (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")") "=" `n))]
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.«tactic_<;>_»
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule ["←"] `geom_sum_def)
            ","
            (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
            ","
            (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
            ","
            (Tactic.rwRule
             []
             (Term.app
              `mul_commₓ
              [(Term.hole "_")
               (Term.paren
                "("
                [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                 [(Term.typeAscription ":" `α)]]
                ")")]))
            ","
            (Tactic.rwRule
             ["←"]
             (Term.app
              `mul_assocₓ
              [(Term.paren
                "("
                [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
                 [(Term.typeAscription ":" `α)]]
                ")")]))
            ","
            (Tactic.rwRule ["←"] `mul_inv_rev₀)
            ","
            (Tactic.rwRule [] `h₄)
            ","
            (Tactic.rwRule
             ["←"]
             (Term.app
              `mul_assocₓ
              [(Term.paren
                "("
                [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                 [(Term.typeAscription ":" `α)]]
                ")")]))
            ","
            (Tactic.rwRule
             []
             (Term.app
              `mul_commₓ
              [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
            ","
            (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
           "]")
          [])
         "<;>"
         (Tactic.simp
          "simp"
          []
          []
          ["["
           [(Tactic.simpLemma [] [] `mul_addₓ)
            ","
            (Tactic.simpLemma [] [] `add_mulₓ)
            ","
            (Tactic.simpLemma [] [] `mul_assocₓ)
            ","
            (Tactic.simpLemma [] [] `mul_commₓ)]
           "]"]
          []))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule ["←"] `geom_sum_def)
           ","
           (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
           ","
           (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
           ","
           (Tactic.rwRule
            []
            (Term.app
             `mul_commₓ
             [(Term.hole "_")
              (Term.paren
               "("
               [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                [(Term.typeAscription ":" `α)]]
               ")")]))
           ","
           (Tactic.rwRule
            ["←"]
            (Term.app
             `mul_assocₓ
             [(Term.paren
               "("
               [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹") [(Term.typeAscription ":" `α)]]
               ")")]))
           ","
           (Tactic.rwRule ["←"] `mul_inv_rev₀)
           ","
           (Tactic.rwRule [] `h₄)
           ","
           (Tactic.rwRule
            ["←"]
            (Term.app
             `mul_assocₓ
             [(Term.paren
               "("
               [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
                [(Term.typeAscription ":" `α)]]
               ")")]))
           ","
           (Tactic.rwRule
            []
            (Term.app
             `mul_commₓ
             [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
           ","
           (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
          "]")
         [])
        "<;>"
        (Tactic.simp
         "simp"
         []
         []
         ["["
          [(Tactic.simpLemma [] [] `mul_addₓ)
           ","
           (Tactic.simpLemma [] [] `add_mulₓ)
           ","
           (Tactic.simpLemma [] [] `mul_assocₓ)
           ","
           (Tactic.simpLemma [] [] `mul_commₓ)]
          "]"]
         []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq
    "rw"
    []
    (Tactic.rwRuleSeq
     "["
     [(Tactic.rwRule ["←"] `geom_sum_def)
      ","
      (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
      ","
      (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
      ","
      (Tactic.rwRule
       []
       (Term.app
        `mul_commₓ
        [(Term.hole "_")
         (Term.paren
          "("
          [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
           [(Term.typeAscription ":" `α)]]
          ")")]))
      ","
      (Tactic.rwRule
       ["←"]
       (Term.app
        `mul_assocₓ
        [(Term.paren
          "("
          [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹") [(Term.typeAscription ":" `α)]]
          ")")]))
      ","
      (Tactic.rwRule ["←"] `mul_inv_rev₀)
      ","
      (Tactic.rwRule [] `h₄)
      ","
      (Tactic.rwRule
       ["←"]
       (Term.app
        `mul_assocₓ
        [(Term.paren
          "("
          [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
           [(Term.typeAscription ":" `α)]]
          ")")]))
      ","
      (Tactic.rwRule
       []
       (Term.app
        `mul_commₓ
        [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
      ","
      (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
     "]")
    [])
   "<;>"
   (Tactic.simp
    "simp"
    []
    []
    ["["
     [(Tactic.simpLemma [] [] `mul_addₓ)
      ","
      (Tactic.simpLemma [] [] `add_mulₓ)
      ","
      (Tactic.simpLemma [] [] `mul_assocₓ)
      ","
      (Tactic.simpLemma [] [] `mul_commₓ)]
     "]"]
    []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `mul_addₓ)
     ","
     (Tactic.simpLemma [] [] `add_mulₓ)
     ","
     (Tactic.simpLemma [] [] `mul_assocₓ)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_mulₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `geom_sum_def)
     ","
     (Tactic.rwRule [] (Term.app `geom_sum_inv [`h₁ `h₂]))
     ","
     (Tactic.rwRule [] (Term.app `eq_div_iff_mul_eq [`h₃]))
     ","
     (Tactic.rwRule
      []
      (Term.app
       `mul_commₓ
       [(Term.hole "_")
        (Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
          [(Term.typeAscription ":" `α)]]
         ")")]))
     ","
     (Tactic.rwRule
      ["←"]
      (Term.app
       `mul_assocₓ
       [(Term.paren
         "("
         [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹") [(Term.typeAscription ":" `α)]]
         ")")]))
     ","
     (Tactic.rwRule ["←"] `mul_inv_rev₀)
     ","
     (Tactic.rwRule [] `h₄)
     ","
     (Tactic.rwRule
      ["←"]
      (Term.app
       `mul_assocₓ
       [(Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
          [(Term.typeAscription ":" `α)]]
         ")")]))
     ","
     (Tactic.rwRule
      []
      (Term.app
       `mul_commₓ
       [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")]))
     ","
     (Tactic.rwRule [] (Term.app `mul_inv_cancel [`h₃]))]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_inv_cancel [`h₃])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₃
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_inv_cancel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_commₓ
   [(Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")") (Nat.Data.Nat.Factorial.Basic.term_! `n "!")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.paren "(" [`n [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_assocₓ
   [(Term.paren
     "("
     [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
      [(Term.typeAscription ":" `α)]]
     ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
    [(Term.typeAscription ":" `α)]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₄
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_inv_rev₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_assocₓ
   [(Term.paren
     "("
     [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹") [(Term.typeAscription ":" `α)]]
     ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹") [(Term.typeAscription ":" `α)]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_commₓ
   [(Term.hole "_")
    (Term.paren
     "("
     [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
      [(Term.typeAscription ":" `α)]]
     ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
    [(Term.typeAscription ":" `α)]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `eq_div_iff_mul_eq [`h₃])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₃
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `eq_div_iff_mul_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `geom_sum_inv [`h₁ `h₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `geom_sum_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `geom_sum_def
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simp "simp" [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")") "=" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [(«term_-_» `n.succ "-" (numLit "1")) [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_-_» `n.succ "-" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `mul_ne_zero
   [(Term.app
     (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
     [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
    (Term.app
     (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
     [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
   [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `pos_iff_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
   [(Term.paren "(" [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
   [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [(Term.app `Nat.factorial_pos [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.factorial_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.factorial_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.factorial_pos [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `pos_iff_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
   [(Term.paren "(" [(Term.app `Nat.factorial_pos [(Term.hole "_")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app
       (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
       [(Term.paren "(" [(Term.app `Nat.factorial_pos [(Term.hole "_")]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≠_»
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
     [(Term.typeAscription ":" `α)]]
    ")")
   "≠"
   (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≠_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren
   "("
   [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
    [(Term.typeAscription ":" `α)]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2")) [(Term.app `Nat.succ_ne_zero [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.succ_ne_zero [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Nat.succ_ne_zero [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `Nat.cast_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "0"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≠_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.subst
   (Term.app (Term.explicit "@" `Nat.cast_one) [`α (Term.hole "_") (Term.hole "_")])
   "▸"
   [(Term.app
     `mt
     [(Term.proj `Nat.cast_inj "." (fieldIdx "1"))
      (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mt
   [(Term.proj `Nat.cast_inj "." (fieldIdx "1"))
    (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mt [`Nat.succ.injₓ (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `pos_iff_ne_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `pos_iff_ne_zero
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.succ.injₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `mt
   [`Nat.succ.injₓ (Term.paren "(" [(Term.app (Term.proj `pos_iff_ne_zero "." (fieldIdx "1")) [`hn]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `Nat.cast_inj "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Nat.cast_inj
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  (Term.app (Term.explicit "@" `Nat.cast_one) [`α (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `Nat.cast_one)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.cast_one
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≠_» (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")") "≠" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≠_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`n.succ [(Term.typeAscription ":" `α)]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   («term_/_»
    («term_-_»
     `n.succ
     "-"
     (Finset.Data.Finset.Fold.«term_*_»
      `n.succ
      "*"
      («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))))
    "/"
    (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   («term_-_»
    `n.succ
    "-"
    (Finset.Data.Finset.Fold.«term_*_»
     `n.succ
     "*"
     («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))))
   "/"
   (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_-_»
   `n.succ
   "-"
   (Finset.Data.Finset.Fold.«term_*_»
    `n.succ
    "*"
    («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   `n.succ
   "*"
   («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" («term_-_» `j "-" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `j "-" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `j "-" `n) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Init.Logic.«term_⁻¹» `n.succ "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_-_»
   `n.succ
   "-"
   (Finset.Data.Finset.Fold.«term_*_»
    `n.succ
    "*"
    («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" (Term.paren "(" [(«term_-_» `j "-" `n) []] ")"))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `mul_inv₀)
          ","
          (Tactic.simpLemma [] [] `mul_sum.symm)
          ","
          (Tactic.simpLemma [] [] `sum_mul.symm)
          ","
          (Tactic.simpErase "-" `Nat.factorial_succ)
          ","
          (Tactic.simpLemma [] [] `mul_commₓ)
          ","
          (Tactic.simpLemma [] [] `inv_pow₀)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `mul_inv₀)
     ","
     (Tactic.simpLemma [] [] `mul_sum.symm)
     ","
     (Tactic.simpLemma [] [] `sum_mul.symm)
     ","
     (Tactic.simpErase "-" `Nat.factorial_succ)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)
     ","
     (Tactic.simpLemma [] [] `inv_pow₀)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inv_pow₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpErase', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpErase', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.factorial_succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_mul.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_sum.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_inv₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.«term_*_»
    (Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
    "*"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [(«term_-_» `j "-" `n)])
     ", "
     («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Init.Logic.«term_⁻¹» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "⁻¹")
   "*"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [(«term_-_» `j "-" `n)])
    ", "
    («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [(«term_-_» `j "-" `n)])
   ", "
   («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» (Init.Logic.«term_⁻¹» `n.succ "⁻¹") "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Init.Logic.«term_⁻¹» `n.succ "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(«term_-_» `j "-" `n)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» `j "-" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» `j "-" `n) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  sum_div_factorial_le
  { α : Type _ } [ LinearOrderedField α ] ( n j : ℕ ) ( hn : 0 < n )
    : ∑ m in Filter fun k => n ≤ k range j , ( 1 / m ! : α ) ≤ n.succ / n ! * n
  :=
    calc
      ∑ m in Filter fun k => n ≤ k range j , ( 1 / m ! : α ) = ∑ m in range j - n , 1 / m + n !
          :=
          sum_bij
            fun m _ => m - n
              fun m hm => mem_range . 2 $ tsub_lt_tsub_iff_right by simp at hm <;> tauto . 2 by simp at hm <;> tauto
              fun m hm => by rw [ tsub_add_cancel_of_le ] <;> simp at * <;> tauto
              fun
                a₁ a₂ ha₁ ha₂ h
                  =>
                  by
                    rwa
                        [
                          tsub_eq_iff_eq_add_of_le
                            ,
                            tsub_add_eq_add_tsub
                            ,
                            eq_comm
                            ,
                            tsub_eq_iff_eq_add_of_le
                            ,
                            add_left_injₓ
                            ,
                            eq_comm
                          ]
                        at h
                      <;>
                      simp at * <;> tauto
              fun
                b hb
                  =>
                  ⟨
                    b + n
                      ,
                      mem_filter . 2 ⟨ mem_range . 2 $ lt_tsub_iff_right . mp mem_range . 1 hb , Nat.le_add_leftₓ _ _ ⟩
                      ,
                      by rw [ add_tsub_cancel_right ]
                    ⟩
        _ ≤ ∑ m in range j - n , n ! * n.succ ^ m ⁻¹
          :=
          by
            refine' sum_le_sum fun m n => _
              rw [ one_div , inv_le_inv ]
              ·
                rw [ ← Nat.cast_pow , ← Nat.cast_mul , Nat.cast_le , add_commₓ ]
                  exact Nat.factorial_mul_pow_le_factorial
              · exact Nat.cast_pos . 2 Nat.factorial_pos _
              · exact mul_pos Nat.cast_pos . 2 Nat.factorial_pos _ pow_pos Nat.cast_pos . 2 Nat.succ_posₓ _ _
        _ = n ! ⁻¹ * ∑ m in range j - n , n.succ ⁻¹ ^ m
          :=
          by simp [ mul_inv₀ , mul_sum.symm , sum_mul.symm , - Nat.factorial_succ , mul_commₓ , inv_pow₀ ]
        _ = n.succ - n.succ * n.succ ⁻¹ ^ j - n / n ! * n
          :=
          have
            h₁
              : ( n.succ : α ) ≠ 1
              :=
              @ Nat.cast_one α _ _ ▸ mt Nat.cast_inj . 1 mt Nat.succ.injₓ pos_iff_ne_zero . 1 hn
            have
              h₂ : ( n.succ : α ) ≠ 0 := Nat.cast_ne_zero . 2 Nat.succ_ne_zero _
              have
                h₃
                  : ( n ! * n : α ) ≠ 0
                  :=
                  mul_ne_zero
                    Nat.cast_ne_zero . 2 pos_iff_ne_zero . 1 Nat.factorial_pos _
                      Nat.cast_ne_zero . 2 pos_iff_ne_zero . 1 hn
                have
                  h₄ : ( n.succ - 1 : α ) = n := by simp
                  by
                    rw
                        [
                          ← geom_sum_def
                            ,
                            geom_sum_inv h₁ h₂
                            ,
                            eq_div_iff_mul_eq h₃
                            ,
                            mul_commₓ _ ( n ! * n : α )
                            ,
                            ← mul_assocₓ ( n ! ⁻¹ : α )
                            ,
                            ← mul_inv_rev₀
                            ,
                            h₄
                            ,
                            ← mul_assocₓ ( n ! * n : α )
                            ,
                            mul_commₓ ( n : α ) n !
                            ,
                            mul_inv_cancel h₃
                          ]
                      <;>
                      simp [ mul_addₓ , add_mulₓ , mul_assocₓ , mul_commₓ ]
        _ ≤ n.succ / n ! * n
          :=
          by
            refine' Iff.mpr div_le_div_right mul_pos _ _ _
              exact Nat.cast_pos . 2 Nat.factorial_pos _
              exact Nat.cast_pos . 2 hn
              exact sub_le_self _ mul_nonneg Nat.cast_nonneg _ pow_nonneg inv_nonneg . 2 Nat.cast_nonneg _ _

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Complex.Basic.termℂ "ℂ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Term.app `abs [`x]) "≤" (numLit "1"))] [] ")")
    (Term.implicitBinder "{" [`n] [":" (termℕ "ℕ")] "}")
    (Term.explicitBinder "(" [`hn] [":" («term_<_» (numLit "0") "<" `n)] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `exp [`x])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`n])
         ", "
         («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "≤"
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Term.app `abs [`x]) "^" `n)
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       `n.succ
       "*"
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
        "⁻¹"))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            ["←"]
            (Term.app
             `lim_const
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app `range [`n])
               ", "
               (Term.hole "_"))]))
           ","
           (Tactic.rwRule [] `exp)
           ","
           (Tactic.rwRule [] `sub_eq_add_neg)
           ","
           (Tactic.rwRule ["←"] `lim_neg)
           ","
           (Tactic.rwRule [] `lim_add)
           ","
           (Tactic.rwRule ["←"] `lim_abs)]
          "]")
         [])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `lim_le
          [(Term.app
            `CauSeq.le_of_exists
            [(Term.anonymousCtor
              "⟨"
              [`n "," (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`j `hj] [])] "=>" (Term.hole "_")))]
              "⟩")])]))
        [])
       (group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sub_eq_add_neg)] "]") []) [])
       (group
        (Tactic.tacticShow_
         "show"
         («term_≤_»
          (Term.app
           `abs
           [(«term_-_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`j])
              ", "
              («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`n])
              ", "
              («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
          "≤"
          (Finset.Data.Finset.Fold.«term_*_»
           («term_^_» (Term.app `abs [`x]) "^" `n)
           "*"
           (Finset.Data.Finset.Fold.«term_*_»
            `n.succ
            "*"
            (Init.Logic.«term_⁻¹»
             (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
             "⁻¹")))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [`hj]))] "]")
         [])
        [])
       (group
        (tacticCalc_
         "calc"
         [(calcStep
           («term_=_»
            (Term.app
             `abs
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app
                (Term.proj (Term.app `range [`j]) "." `filter)
                [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
               ", "
               (Term.paren
                "("
                [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                 [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")"))])
            "="
            (Term.app
             `abs
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app
                (Term.proj (Term.app `range [`j]) "." `filter)
                [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
               ", "
               (Term.paren
                "("
                [(Finset.Data.Finset.Fold.«term_*_»
                  («term_^_» `x "^" `n)
                  "*"
                  («term_/_» («term_^_» `x "^" («term_-_» `m "-" `n)) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
                 [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")"))]))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `congr_argₓ
                  [`abs
                   (Term.app
                    `sum_congr
                    [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])]))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_filter) "," (Tactic.rwRule [] `mem_range)] "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule ["←"] `mul_div_assoc)
                   ","
                   (Tactic.rwRule ["←"] `pow_addₓ)
                   ","
                   (Tactic.rwRule [] (Term.app `add_tsub_cancel_of_le [(Term.proj `hm "." (fieldIdx "2"))]))]
                  "]")
                 [])
                [])]))))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app
              `Filter
              [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
               (Term.app `range [`j])])
             ", "
             (Term.app
              `abs
              [(Finset.Data.Finset.Fold.«term_*_»
                («term_^_» `x "^" `n)
                "*"
                («term_/_» (Term.hole "_") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))])))
           ":="
           (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app
              `Filter
              [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
               (Term.app `range [`j])])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              («term_^_» (Term.app `abs [`x]) "^" `n)
              "*"
              («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `sum_le_sum
                  [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))]))
                [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `abs_mul)
                   ","
                   (Tactic.rwRule [] (Term.app `abv_pow [`abs]))
                   ","
                   (Tactic.rwRule [] `abs_div)
                   ","
                   (Tactic.rwRule [] `abs_cast_nat)]
                  "]")
                 [])
                [])
               (group
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `mul_le_mul_of_nonneg_left
                  [(Term.app
                    (Term.proj (Term.app `div_le_div_right [(Term.hole "_")]) "." (fieldIdx "2"))
                    [(Term.hole "_")])
                   (Term.hole "_")]))
                [])
               (group
                (Tactic.«tactic·._»
                 "·"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.exact
                      "exact"
                      (Term.app
                       (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                       [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
                     [])])))
                [])
               (group
                (Tactic.«tactic·._»
                 "·"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abv_pow [`abs]))] "]")
                      [])
                     [])
                    (group
                     (Tactic.exact
                      "exact"
                      (Term.app `pow_le_one [(Term.hole "_") (Term.app `abs_nonneg [(Term.hole "_")]) `hx]))
                     [])])))
                [])
               (group
                (Tactic.«tactic·._»
                 "·"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.exact
                      "exact"
                      (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                     [])])))
                [])]))))
          (calcStep
           («term_=_»
            (Term.hole "_")
            "="
            (Finset.Data.Finset.Fold.«term_*_»
             («term_^_» (Term.app `abs [`x]) "^" `n)
             "*"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app
               (Term.proj (Term.app `range [`j]) "." `filter)
               [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
              ", "
              (Term.paren
               "("
               [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
               ")"))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["["
                  [(Tactic.simpLemma [] [] `abs_mul)
                   ","
                   (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))
                   ","
                   (Tactic.simpLemma [] [] `abs_div)
                   ","
                   (Tactic.simpLemma [] [] `mul_sum.symm)]
                  "]"]
                 [])
                [])]))))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_^_» (Term.app `abs [`x]) "^" `n)
             "*"
             (Finset.Data.Finset.Fold.«term_*_»
              `n.succ
              "*"
              (Init.Logic.«term_⁻¹»
               (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
               "⁻¹"))))
           ":="
           (Term.app
            `mul_le_mul_of_nonneg_left
            [(Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn])
             (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")])]))])
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule
           ["←"]
           (Term.app
            `lim_const
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`n])
              ", "
              (Term.hole "_"))]))
          ","
          (Tactic.rwRule [] `exp)
          ","
          (Tactic.rwRule [] `sub_eq_add_neg)
          ","
          (Tactic.rwRule ["←"] `lim_neg)
          ","
          (Tactic.rwRule [] `lim_add)
          ","
          (Tactic.rwRule ["←"] `lim_abs)]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `lim_le
         [(Term.app
           `CauSeq.le_of_exists
           [(Term.anonymousCtor
             "⟨"
             [`n "," (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`j `hj] [])] "=>" (Term.hole "_")))]
             "⟩")])]))
       [])
      (group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sub_eq_add_neg)] "]") []) [])
      (group
       (Tactic.tacticShow_
        "show"
        («term_≤_»
         (Term.app
          `abs
          [(«term_-_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`j])
             ", "
             («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`n])
             ", "
             («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "≤"
         (Finset.Data.Finset.Fold.«term_*_»
          («term_^_» (Term.app `abs [`x]) "^" `n)
          "*"
          (Finset.Data.Finset.Fold.«term_*_»
           `n.succ
           "*"
           (Init.Logic.«term_⁻¹»
            (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
            "⁻¹")))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `sum_range_sub_sum_range [`hj]))] "]")
        [])
       [])
      (group
       (tacticCalc_
        "calc"
        [(calcStep
          («term_=_»
           (Term.app
            `abs
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app
               (Term.proj (Term.app `range [`j]) "." `filter)
               [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
              ", "
              (Term.paren
               "("
               [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
                [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
               ")"))])
           "="
           (Term.app
            `abs
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app
               (Term.proj (Term.app `range [`j]) "." `filter)
               [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
              ", "
              (Term.paren
               "("
               [(Finset.Data.Finset.Fold.«term_*_»
                 («term_^_» `x "^" `n)
                 "*"
                 («term_/_» («term_^_» `x "^" («term_-_» `m "-" `n)) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
                [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
               ")"))]))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `congr_argₓ
                 [`abs
                  (Term.app
                   `sum_congr
                   [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_filter) "," (Tactic.rwRule [] `mem_range)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule ["←"] `mul_div_assoc)
                  ","
                  (Tactic.rwRule ["←"] `pow_addₓ)
                  ","
                  (Tactic.rwRule [] (Term.app `add_tsub_cancel_of_le [(Term.proj `hm "." (fieldIdx "2"))]))]
                 "]")
                [])
               [])]))))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app
             `Filter
             [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
              (Term.app `range [`j])])
            ", "
            (Term.app
             `abs
             [(Finset.Data.Finset.Fold.«term_*_»
               («term_^_» `x "^" `n)
               "*"
               («term_/_» (Term.hole "_") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))])))
          ":="
          (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app
             `Filter
             [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
              (Term.app `range [`j])])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             («term_^_» (Term.app `abs [`x]) "^" `n)
             "*"
             («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `sum_le_sum
                 [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `abs_mul)
                  ","
                  (Tactic.rwRule [] (Term.app `abv_pow [`abs]))
                  ","
                  (Tactic.rwRule [] `abs_div)
                  ","
                  (Tactic.rwRule [] `abs_cast_nat)]
                 "]")
                [])
               [])
              (group
               (Tactic.refine'
                "refine'"
                (Term.app
                 `mul_le_mul_of_nonneg_left
                 [(Term.app
                   (Term.proj (Term.app `div_le_div_right [(Term.hole "_")]) "." (fieldIdx "2"))
                   [(Term.hole "_")])
                  (Term.hole "_")]))
               [])
              (group
               (Tactic.«tactic·._»
                "·"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.exact
                     "exact"
                     (Term.app
                      (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                      [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
                    [])])))
               [])
              (group
               (Tactic.«tactic·._»
                "·"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abv_pow [`abs]))] "]") [])
                    [])
                   (group
                    (Tactic.exact
                     "exact"
                     (Term.app `pow_le_one [(Term.hole "_") (Term.app `abs_nonneg [(Term.hole "_")]) `hx]))
                    [])])))
               [])
              (group
               (Tactic.«tactic·._»
                "·"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.exact
                     "exact"
                     (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")]))
                    [])])))
               [])]))))
         (calcStep
          («term_=_»
           (Term.hole "_")
           "="
           (Finset.Data.Finset.Fold.«term_*_»
            («term_^_» (Term.app `abs [`x]) "^" `n)
            "*"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app
              (Term.proj (Term.app `range [`j]) "." `filter)
              [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
             ", "
             (Term.paren
              "("
              [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
               [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
              ")"))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.simp
                "simp"
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `abs_mul)
                  ","
                  (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))
                  ","
                  (Tactic.simpLemma [] [] `abs_div)
                  ","
                  (Tactic.simpLemma [] [] `mul_sum.symm)]
                 "]"]
                [])
               [])]))))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_^_» (Term.app `abs [`x]) "^" `n)
            "*"
            (Finset.Data.Finset.Fold.«term_*_»
             `n.succ
             "*"
             (Init.Logic.«term_⁻¹»
              (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
              "⁻¹"))))
          ":="
          (Term.app
           `mul_le_mul_of_nonneg_left
           [(Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn])
            (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")])]))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticCalc_
   "calc"
   [(calcStep
     («term_=_»
      (Term.app
       `abs
       [(Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app
          (Term.proj (Term.app `range [`j]) "." `filter)
          [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
         ", "
         (Term.paren
          "("
          [(«term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
           [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
          ")"))])
      "="
      (Term.app
       `abs
       [(Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app
          (Term.proj (Term.app `range [`j]) "." `filter)
          [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
         ", "
         (Term.paren
          "("
          [(Finset.Data.Finset.Fold.«term_*_»
            («term_^_» `x "^" `n)
            "*"
            («term_/_» («term_^_» `x "^" («term_-_» `m "-" `n)) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
           [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
          ")"))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app
            `congr_argₓ
            [`abs
             (Term.app
              `sum_congr
              [`rfl (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))])]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_filter) "," (Tactic.rwRule [] `mem_range)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hm] []))])
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule ["←"] `mul_div_assoc)
             ","
             (Tactic.rwRule ["←"] `pow_addₓ)
             ","
             (Tactic.rwRule [] (Term.app `add_tsub_cancel_of_le [(Term.proj `hm "." (fieldIdx "2"))]))]
            "]")
           [])
          [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app
        `Filter
        [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
         (Term.app `range [`j])])
       ", "
       (Term.app
        `abs
        [(Finset.Data.Finset.Fold.«term_*_»
          («term_^_» `x "^" `n)
          "*"
          («term_/_» (Term.hole "_") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))])))
     ":="
     (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app
        `Filter
        [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
         (Term.app `range [`j])])
       ", "
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» (Term.app `abs [`x]) "^" `n)
        "*"
        («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.refine'
           "refine'"
           (Term.app
            `sum_le_sum
            [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`m `hm] [])] "=>" (Term.hole "_")))]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `abs_mul)
             ","
             (Tactic.rwRule [] (Term.app `abv_pow [`abs]))
             ","
             (Tactic.rwRule [] `abs_div)
             ","
             (Tactic.rwRule [] `abs_cast_nat)]
            "]")
           [])
          [])
         (group
          (Tactic.refine'
           "refine'"
           (Term.app
            `mul_le_mul_of_nonneg_left
            [(Term.app (Term.proj (Term.app `div_le_div_right [(Term.hole "_")]) "." (fieldIdx "2")) [(Term.hole "_")])
             (Term.hole "_")]))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `Nat.cast_pos "." (fieldIdx "2"))
                 [(Term.app `Nat.factorial_pos [(Term.hole "_")])]))
               [])])))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abv_pow [`abs]))] "]") [])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app `pow_le_one [(Term.hole "_") (Term.app `abs_nonneg [(Term.hole "_")]) `hx]))
               [])])))
          [])
         (group
          (Tactic.«tactic·._»
           "·"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.exact "exact" (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")]))
               [])])))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Term.app `abs [`x]) "^" `n)
       "*"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app
         (Term.proj (Term.app `range [`j]) "." `filter)
         [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
        ", "
        (Term.paren
         "("
         [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
          [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
         ")"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `abs_mul)
             ","
             (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))
             ","
             (Tactic.simpLemma [] [] `abs_div)
             ","
             (Tactic.simpLemma [] [] `mul_sum.symm)]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Term.app `abs [`x]) "^" `n)
       "*"
       (Finset.Data.Finset.Fold.«term_*_»
        `n.succ
        "*"
        (Init.Logic.«term_⁻¹»
         (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
         "⁻¹"))))
     ":="
     (Term.app
      `mul_le_mul_of_nonneg_left
      [(Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn])
       (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")])]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticCalc_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `mul_le_mul_of_nonneg_left
   [(Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn])
    (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_nonneg [(Term.app `abs_nonneg [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `pow_nonneg [(Term.paren "(" [(Term.app `abs_nonneg [(Term.hole "_")]) []] ")") (Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_div_factorial_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `sum_div_factorial_le [(Term.hole "_") (Term.hole "_") `hn]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `abs [`x]) "^" `n)
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     `n.succ
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
      "⁻¹"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `abs [`x]) "^" `n)
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    `n.succ
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   `n.succ
   "*"
   (Init.Logic.«term_⁻¹» (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n) "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹» (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n) "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `abs [`x]) "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» (Term.app `abs [`x]) "^" `n) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `abs_mul)
          ","
          (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))
          ","
          (Tactic.simpLemma [] [] `abs_div)
          ","
          (Tactic.simpLemma [] [] `mul_sum.symm)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `abs_mul)
     ","
     (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))
     ","
     (Tactic.simpLemma [] [] `abs_div)
     ","
     (Tactic.simpLemma [] [] `mul_sum.symm)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_sum.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abv_pow [`abs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abv_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `abs_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `abs [`x]) "^" `n)
    "*"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app
      (Term.proj (Term.app `range [`j]) "." `filter)
      [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
     ", "
     (Term.paren
      "("
      [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
       [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
      ")"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `abs [`x]) "^" `n)
   "*"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app
     (Term.proj (Term.app `range [`j]) "." `filter)
     [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
    ", "
    (Term.paren
     "("
     [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
      [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app
    (Term.proj (Term.app `range [`j]) "." `filter)
    [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
   ", "
   (Term.paren
    "("
    [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
     [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
    ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(«term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
    [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_/_» (numLit "1") "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app `range [`j]) "." `filter)
   [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`k] [])] "=>" («term_≤_» `n "≤" `k)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `n "≤" `k)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `range [`j]) "." `filter)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`j]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound
  { x : ℂ } ( hx : abs x ≤ 1 ) { n : ℕ } ( hn : 0 < n )
    : abs exp x - ∑ m in range n , x ^ m / m ! ≤ abs x ^ n * n.succ * n ! * n ⁻¹
  :=
    by
      rw [ ← lim_const ∑ m in range n , _ , exp , sub_eq_add_neg , ← lim_neg , lim_add , ← lim_abs ]
        refine' lim_le CauSeq.le_of_exists ⟨ n , fun j hj => _ ⟩
        simp_rw [ ← sub_eq_add_neg ]
        show abs ∑ m in range j , x ^ m / m ! - ∑ m in range n , x ^ m / m ! ≤ abs x ^ n * n.succ * n ! * n ⁻¹
        rw [ sum_range_sub_sum_range hj ]
        calc
          abs ∑ m in range j . filter fun k => n ≤ k , ( x ^ m / m ! : ℂ )
                =
                abs ∑ m in range j . filter fun k => n ≤ k , ( x ^ n * x ^ m - n / m ! : ℂ )
              :=
              by
                refine' congr_argₓ abs sum_congr rfl fun m hm => _
                  rw [ mem_filter , mem_range ] at hm
                  rw [ ← mul_div_assoc , ← pow_addₓ , add_tsub_cancel_of_le hm . 2 ]
            _ ≤ ∑ m in Filter fun k => n ≤ k range j , abs x ^ n * _ / m ! := abv_sum_le_sum_abv _ _
            _ ≤ ∑ m in Filter fun k => n ≤ k range j , abs x ^ n * 1 / m !
              :=
              by
                refine' sum_le_sum fun m hm => _
                  rw [ abs_mul , abv_pow abs , abs_div , abs_cast_nat ]
                  refine' mul_le_mul_of_nonneg_left div_le_div_right _ . 2 _ _
                  · exact Nat.cast_pos . 2 Nat.factorial_pos _
                  · rw [ abv_pow abs ] exact pow_le_one _ abs_nonneg _ hx
                  · exact pow_nonneg abs_nonneg _ _
            _ = abs x ^ n * ∑ m in range j . filter fun k => n ≤ k , ( 1 / m ! : ℝ )
              :=
              by simp [ abs_mul , abv_pow abs , abs_div , mul_sum.symm ]
            _ ≤ abs x ^ n * n.succ * n ! * n ⁻¹
              :=
              mul_le_mul_of_nonneg_left sum_div_factorial_le _ _ hn pow_nonneg abs_nonneg _ _

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound' [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Complex.Basic.termℂ "ℂ")] "}")
    (Term.implicitBinder "{" [`n] [":" (termℕ "ℕ")] "}")
    (Term.explicitBinder
     "("
     [`hx]
     [":" («term_≤_» («term_/_» (Term.app `abs [`x]) "/" `n.succ) "≤" («term_/_» (numLit "1") "/" (numLit "2")))]
     []
     ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `exp [`x])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [`n])
         ", "
         («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "≤"
     (Finset.Data.Finset.Fold.«term_*_»
      («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
      "*"
      (numLit "2")))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            ["←"]
            (Term.app
             `lim_const
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app `range [`n])
               ", "
               (Term.hole "_"))]))
           ","
           (Tactic.rwRule [] `exp)
           ","
           (Tactic.rwRule [] `sub_eq_add_neg)
           ","
           (Tactic.rwRule ["←"] `lim_neg)
           ","
           (Tactic.rwRule [] `lim_add)
           ","
           (Tactic.rwRule ["←"] `lim_abs)]
          "]")
         [])
        [])
       (group
        (Tactic.refine'
         "refine'"
         (Term.app
          `lim_le
          [(Term.app
            `CauSeq.le_of_exists
            [(Term.anonymousCtor
              "⟨"
              [`n "," (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`j `hj] [])] "=>" (Term.hole "_")))]
              "⟩")])]))
        [])
       (group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sub_eq_add_neg)] "]") []) [])
       (group
        (Tactic.tacticShow_
         "show"
         («term_≤_»
          (Term.app
           `abs
           [(«term_-_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`j])
              ", "
              («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`n])
              ", "
              («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
          "≤"
          (Finset.Data.Finset.Fold.«term_*_»
           («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
           "*"
           (numLit "2"))))
        [])
       (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `k [] ":=" («term_-_» `j "-" `n)))) [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hj []]
           [(Term.typeSpec ":" («term_=_» `j "=" (Init.Logic.«term_+_» `n "+" `k)))]
           ":="
           (Term.proj (Term.app `add_tsub_cancel_of_le [`hj]) "." `symm))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hj) "," (Tactic.rwRule [] `sum_range_add_sub_sum_range)] "]")
         [])
        [])
       (group
        (tacticCalc_
         "calc"
         [(calcStep
           («term_≤_»
            (Term.app
             `abs
             [(Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
               " in "
               (Term.app `range [`k])
               ", "
               («term_/_»
                («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
                "/"
                (Term.paren
                 "("
                 [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
                  [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                 ")")))])
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
             " in "
             (Term.app `range [`k])
             ", "
             (Term.app
              `abs
              [(«term_/_»
                («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
                "/"
                (Term.paren
                 "("
                 [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
                  [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                 ")"))])))
           ":="
           (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
             " in "
             (Term.app `range [`k])
             ", "
             («term_/_»
              («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!"))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.simp
                 "simp"
                 []
                 ["only"]
                 ["["
                  [(Tactic.simpLemma [] [] `Complex.abs_cast_nat)
                   ","
                   (Tactic.simpLemma [] [] `Complex.abs_div)
                   ","
                   (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))]
                  "]"]
                 [])
                [])]))))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
             " in "
             (Term.app `range [`k])
             ", "
             («term_/_»
              («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
              "/"
              (Finset.Data.Finset.Fold.«term_*_»
               (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
               "*"
               («term_^_» `n.succ "^" `i)))))
           ":="
           (Term.hole "_"))
          (calcStep
           («term_=_»
            (Term.hole "_")
            "="
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
             " in "
             (Term.app `range [`k])
             ", "
             (Finset.Data.Finset.Fold.«term_*_»
              («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
              "*"
              («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i)))))
           ":="
           (Term.hole "_"))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_»
              («term_^_» (Term.app `abs [`x]) "^" `n)
              "/"
              (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
             "*"
             (numLit "2")))
           ":="
           (Term.hole "_"))])
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.refine'
              "refine'"
              (Term.app
               `sum_le_sum
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`m `hm] [])]
                  "=>"
                  (Term.app
                   `div_le_div
                   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
                    (Term.app `le_reflₓ [(Term.hole "_")])
                    (Term.hole "_")
                    (Term.hole "_")])))]))
             [])
            (group
             (Tactic.«tactic·._»
              "·"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.exactModCast
                   "exact_mod_cast"
                   (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])]))
                  [])])))
             [])
            (group
             (Tactic.«tactic·._»
              "·"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.exactModCast "exact_mod_cast" `Nat.factorial_mul_pow_le_factorial) [])])))
             [])])))
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.refine'
              "refine'"
              (Term.app
               `Finset.sum_congr
               [`rfl
                (Term.fun
                 "fun"
                 (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))]))
             [])
            (group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `pow_addₓ)
                ","
                (Tactic.simpLemma [] [] `div_eq_inv_mul)
                ","
                (Tactic.simpLemma [] [] `mul_inv₀)
                ","
                (Tactic.simpLemma [] [] `mul_left_commₓ)
                ","
                (Tactic.simpLemma [] [] `mul_assocₓ)]
               "]"]
              [])
             [])])))
        [])
       (group
        (Tactic.«tactic·._»
         "·"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_sum)] "]") []) [])
            (group (Tactic.apply "apply" `mul_le_mul_of_nonneg_left) [])
            (group
             (Tactic.«tactic·._»
              "·"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `div_pow)] "]") []) [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule ["←"] `geom_sum_def)
                     ","
                     (Tactic.rwRule [] `geom_sum_eq)
                     ","
                     (Tactic.rwRule [] `div_le_iff_of_neg)]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.«tactic·._»
                   "·"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.trans
                        "trans"
                        [(Term.paren
                          "("
                          [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
                          ")")])
                       [])
                      (group
                       (Tactic.«tactic·._»
                        "·"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                       [])
                      (group
                       (Tactic.«tactic·._»
                        "·"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.simp
                             "simp"
                             []
                             ["only"]
                             ["["
                              [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
                               ","
                               (Tactic.simpLemma [] [] `div_pow)
                               ","
                               (Tactic.simpLemma [] [] `Nat.cast_succ)
                               ","
                               (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
                              "]"]
                             [])
                            [])
                           (group
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `div_nonneg
                              [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
                               (Term.app
                                `pow_nonneg
                                [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
                            [])])))
                       [])])))
                  [])
                 (group
                  (Tactic.«tactic·._»
                   "·"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                  [])
                 (group
                  (Tactic.«tactic·._»
                   "·"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                  [])])))
             [])
            (group
             (Tactic.«tactic·._»
              "·"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `div_nonneg
                    [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
                     (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])]))
                  [])])))
             [])])))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule
           ["←"]
           (Term.app
            `lim_const
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [`n])
              ", "
              (Term.hole "_"))]))
          ","
          (Tactic.rwRule [] `exp)
          ","
          (Tactic.rwRule [] `sub_eq_add_neg)
          ","
          (Tactic.rwRule ["←"] `lim_neg)
          ","
          (Tactic.rwRule [] `lim_add)
          ","
          (Tactic.rwRule ["←"] `lim_abs)]
         "]")
        [])
       [])
      (group
       (Tactic.refine'
        "refine'"
        (Term.app
         `lim_le
         [(Term.app
           `CauSeq.le_of_exists
           [(Term.anonymousCtor
             "⟨"
             [`n "," (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`j `hj] [])] "=>" (Term.hole "_")))]
             "⟩")])]))
       [])
      (group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `sub_eq_add_neg)] "]") []) [])
      (group
       (Tactic.tacticShow_
        "show"
        («term_≤_»
         (Term.app
          `abs
          [(«term_-_»
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`j])
             ", "
             («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [`n])
             ", "
             («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "≤"
         (Finset.Data.Finset.Fold.«term_*_»
          («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
          "*"
          (numLit "2"))))
       [])
      (group (Tactic.tacticLet_ "let" (Term.letDecl (Term.letIdDecl `k [] ":=" («term_-_» `j "-" `n)))) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hj []]
          [(Term.typeSpec ":" («term_=_» `j "=" (Init.Logic.«term_+_» `n "+" `k)))]
          ":="
          (Term.proj (Term.app `add_tsub_cancel_of_le [`hj]) "." `symm))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hj) "," (Tactic.rwRule [] `sum_range_add_sub_sum_range)] "]")
        [])
       [])
      (group
       (tacticCalc_
        "calc"
        [(calcStep
          («term_≤_»
           (Term.app
            `abs
            [(Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
              " in "
              (Term.app `range [`k])
              ", "
              («term_/_»
               («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
               "/"
               (Term.paren
                "("
                [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
                 [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")")))])
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
            " in "
            (Term.app `range [`k])
            ", "
            (Term.app
             `abs
             [(«term_/_»
               («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
               "/"
               (Term.paren
                "("
                [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
                 [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
                ")"))])))
          ":="
          (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
            " in "
            (Term.app `range [`k])
            ", "
            («term_/_»
             («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!"))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.simp
                "simp"
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `Complex.abs_cast_nat)
                  ","
                  (Tactic.simpLemma [] [] `Complex.abs_div)
                  ","
                  (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))]
                 "]"]
                [])
               [])]))))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
            " in "
            (Term.app `range [`k])
            ", "
            («term_/_»
             («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
             "/"
             (Finset.Data.Finset.Fold.«term_*_»
              (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
              "*"
              («term_^_» `n.succ "^" `i)))))
          ":="
          (Term.hole "_"))
         (calcStep
          («term_=_»
           (Term.hole "_")
           "="
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
            " in "
            (Term.app `range [`k])
            ", "
            (Finset.Data.Finset.Fold.«term_*_»
             («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
             "*"
             («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i)))))
          ":="
          (Term.hole "_"))
         (calcStep
          («term_≤_»
           (Term.hole "_")
           "≤"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_/_»
             («term_^_» (Term.app `abs [`x]) "^" `n)
             "/"
             (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
            "*"
            (numLit "2")))
          ":="
          (Term.hole "_"))])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.refine'
             "refine'"
             (Term.app
              `sum_le_sum
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`m `hm] [])]
                 "=>"
                 (Term.app
                  `div_le_div
                  [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
                   (Term.app `le_reflₓ [(Term.hole "_")])
                   (Term.hole "_")
                   (Term.hole "_")])))]))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.exactModCast
                  "exact_mod_cast"
                  (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])]))
                 [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.exactModCast "exact_mod_cast" `Nat.factorial_mul_pow_le_factorial) [])])))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.refine'
             "refine'"
             (Term.app
              `Finset.sum_congr
              [`rfl
               (Term.fun
                "fun"
                (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))]))
            [])
           (group
            (Tactic.simp
             "simp"
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `pow_addₓ)
               ","
               (Tactic.simpLemma [] [] `div_eq_inv_mul)
               ","
               (Tactic.simpLemma [] [] `mul_inv₀)
               ","
               (Tactic.simpLemma [] [] `mul_left_commₓ)
               ","
               (Tactic.simpLemma [] [] `mul_assocₓ)]
              "]"]
             [])
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_sum)] "]") []) [])
           (group (Tactic.apply "apply" `mul_le_mul_of_nonneg_left) [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `div_pow)] "]") []) [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule ["←"] `geom_sum_def)
                    ","
                    (Tactic.rwRule [] `geom_sum_eq)
                    ","
                    (Tactic.rwRule [] `div_le_iff_of_neg)]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.«tactic·._»
                  "·"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.trans
                       "trans"
                       [(Term.paren
                         "("
                         [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
                         ")")])
                      [])
                     (group
                      (Tactic.«tactic·._»
                       "·"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                      [])
                     (group
                      (Tactic.«tactic·._»
                       "·"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.simp
                            "simp"
                            []
                            ["only"]
                            ["["
                             [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
                              ","
                              (Tactic.simpLemma [] [] `div_pow)
                              ","
                              (Tactic.simpLemma [] [] `Nat.cast_succ)
                              ","
                              (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
                             "]"]
                            [])
                           [])
                          (group
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `div_nonneg
                             [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
                              (Term.app
                               `pow_nonneg
                               [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
                           [])])))
                      [])])))
                 [])
                (group
                 (Tactic.«tactic·._»
                  "·"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                 [])
                (group
                 (Tactic.«tactic·._»
                  "·"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                 [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `div_nonneg
                   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
                    (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])]))
                 [])])))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_sum)] "]") []) [])
      (group (Tactic.apply "apply" `mul_le_mul_of_nonneg_left) [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `div_pow)] "]") []) [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] `geom_sum_def)
               ","
               (Tactic.rwRule [] `geom_sum_eq)
               ","
               (Tactic.rwRule [] `div_le_iff_of_neg)]
              "]")
             [])
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.trans
                  "trans"
                  [(Term.paren
                    "("
                    [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
                    ")")])
                 [])
                (group
                 (Tactic.«tactic·._»
                  "·"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
                 [])
                (group
                 (Tactic.«tactic·._»
                  "·"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.simp
                       "simp"
                       []
                       ["only"]
                       ["["
                        [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
                         ","
                         (Tactic.simpLemma [] [] `div_pow)
                         ","
                         (Tactic.simpLemma [] [] `Nat.cast_succ)
                         ","
                         (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
                        "]"]
                       [])
                      [])
                     (group
                      (Tactic.exact
                       "exact"
                       (Term.app
                        `div_nonneg
                        [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
                         (Term.app
                          `pow_nonneg
                          [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
                      [])])))
                 [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.exact
             "exact"
             (Term.app
              `div_nonneg
              [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
               (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.exact
        "exact"
        (Term.app
         `div_nonneg
         [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
          (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `div_nonneg
    [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
     (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_nonneg
   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
    (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.cast_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `Nat.cast_nonneg [(Nat.Data.Nat.Factorial.Basic.term_! `n "!")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abs_nonneg [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `pow_nonneg [(Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")") `n]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `div_pow)] "]") []) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] `geom_sum_def)
          ","
          (Tactic.rwRule [] `geom_sum_eq)
          ","
          (Tactic.rwRule [] `div_le_iff_of_neg)]
         "]")
        [])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.trans
             "trans"
             [(Term.paren
               "("
               [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]]
               ")")])
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
            [])
           (group
            (Tactic.«tactic·._»
             "·"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simp
                  "simp"
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
                    ","
                    (Tactic.simpLemma [] [] `div_pow)
                    ","
                    (Tactic.simpLemma [] [] `Nat.cast_succ)
                    ","
                    (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
                   "]"]
                  [])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `div_nonneg
                   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
                    (Term.app
                     `pow_nonneg
                     [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
                 [])])))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.trans
        "trans"
        [(Term.paren "(" [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")")])
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simp
             "simp"
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
               ","
               (Tactic.simpLemma [] [] `div_pow)
               ","
               (Tactic.simpLemma [] [] `Nat.cast_succ)
               ","
               (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
              "]"]
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.app
              `div_nonneg
              [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
               (Term.app `pow_nonneg [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
          ","
          (Tactic.simpLemma [] [] `div_pow)
          ","
          (Tactic.simpLemma [] [] `Nat.cast_succ)
          ","
          (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
         "]"]
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `div_nonneg
         [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
          (Term.app `pow_nonneg [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    `div_nonneg
    [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
     (Term.app `pow_nonneg [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_nonneg
   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
    (Term.app `pow_nonneg [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_nonneg [(Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg) `k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Init.Logic.«term_+_» `n "+" (numLit "1")) "." `cast_nonneg)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Logic.«term_+_» `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `n "+" (numLit "1")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `pow_nonneg
   [(Term.proj (Term.paren "(" [(Init.Logic.«term_+_» `n "+" (numLit "1")) []] ")") "." `cast_nonneg) `k])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) `k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abs_nonneg [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `pow_nonneg [(Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")") `k]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] `neg_le_sub_iff_le_add)
     ","
     (Tactic.simpLemma [] [] `div_pow)
     ","
     (Tactic.simpLemma [] [] `Nat.cast_succ)
     ","
     (Tactic.simpLemma [] [] `le_add_iff_nonneg_left)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `le_add_iff_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.cast_succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_le_sub_iff_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.trans
   "trans"
   [(Term.paren "(" [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.trans', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(«term-_» "-" (numLit "1")) [(Term.typeAscription ":" (Data.Real.Basic.termℝ "ℝ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term-_» "-" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `geom_sum_def) "," (Tactic.rwRule [] `geom_sum_eq) "," (Tactic.rwRule [] `div_le_iff_of_neg)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_le_iff_of_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `geom_sum_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `geom_sum_def
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simpRw "simp_rw" (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `div_pow)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpRw', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_pow
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `mul_le_mul_of_nonneg_left)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_sum)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `Finset.sum_congr
         [`rfl
          (Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))]))
       [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `pow_addₓ)
          ","
          (Tactic.simpLemma [] [] `div_eq_inv_mul)
          ","
          (Tactic.simpLemma [] [] `mul_inv₀)
          ","
          (Tactic.simpLemma [] [] `mul_left_commₓ)
          ","
          (Tactic.simpLemma [] [] `mul_assocₓ)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] `pow_addₓ)
     ","
     (Tactic.simpLemma [] [] `div_eq_inv_mul)
     ","
     (Tactic.simpLemma [] [] `mul_inv₀)
     ","
     (Tactic.simpLemma [] [] `mul_left_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_assocₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_inv₀
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `div_eq_inv_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `Finset.sum_congr
    [`rfl
     (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Finset.sum_congr
   [`rfl
    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [(Term.hole "_") (Term.hole "_")] [])] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.sum_congr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.refine'
        "refine'"
        (Term.app
         `sum_le_sum
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`m `hm] [])]
            "=>"
            (Term.app
             `div_le_div
             [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
              (Term.app `le_reflₓ [(Term.hole "_")])
              (Term.hole "_")
              (Term.hole "_")])))]))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.exactModCast
             "exact_mod_cast"
             (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])]))
            [])])))
       [])
      (group
       (Tactic.«tactic·._»
        "·"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.exactModCast "exact_mod_cast" `Nat.factorial_mul_pow_le_factorial) [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.exactModCast "exact_mod_cast" `Nat.factorial_mul_pow_le_factorial) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exactModCast "exact_mod_cast" `Nat.factorial_mul_pow_le_factorial)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exactModCast', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Nat.factorial_mul_pow_le_factorial
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.«tactic·._»
   "·"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.exactModCast
        "exact_mod_cast"
        (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic·._»', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exactModCast
   "exact_mod_cast"
   (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exactModCast', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_pos [`n.factorial_pos (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_pos [`n.succ_pos (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `n.succ_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `pow_pos [`n.succ_pos (Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `n.factorial_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_pos
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.refine'
   "refine'"
   (Term.app
    `sum_le_sum
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`m `hm] [])]
       "=>"
       (Term.app
        `div_le_div
        [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
         (Term.app `le_reflₓ [(Term.hole "_")])
         (Term.hole "_")
         (Term.hole "_")])))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.refine'', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `sum_le_sum
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`m `hm] [])]
      "=>"
      (Term.app
       `div_le_div
       [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
        (Term.app `le_reflₓ [(Term.hole "_")])
        (Term.hole "_")
        (Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`m `hm] [])]
    "=>"
    (Term.app
     `div_le_div
     [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
      (Term.app `le_reflₓ [(Term.hole "_")])
      (Term.hole "_")
      (Term.hole "_")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `div_le_div
   [(Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
    (Term.app `le_reflₓ [(Term.hole "_")])
    (Term.hole "_")
    (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `le_reflₓ [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_reflₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_reflₓ [(Term.hole "_")]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `pow_nonneg [(Term.app `abs_nonneg [`x]) (Init.Logic.«term_+_» `n "+" `m)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» `n "+" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `n "+" `m) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `abs_nonneg [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `pow_nonneg
   [(Term.paren "(" [(Term.app `abs_nonneg [`x]) []] ")") (Term.paren "(" [(Init.Logic.«term_+_» `n "+" `m) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sum_le_sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (tacticCalc_
   "calc"
   [(calcStep
     («term_≤_»
      (Term.app
       `abs
       [(Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
         " in "
         (Term.app `range [`k])
         ", "
         («term_/_»
          («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
          "/"
          (Term.paren
           "("
           [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
            [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
           ")")))])
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
       " in "
       (Term.app `range [`k])
       ", "
       (Term.app
        `abs
        [(«term_/_»
          («term_^_» `x "^" (Init.Logic.«term_+_» `n "+" `i))
          "/"
          (Term.paren
           "("
           [(Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!")
            [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]]
           ")"))])))
     ":="
     (Term.app `abv_sum_le_sum_abv [(Term.hole "_") (Term.hole "_")]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
       " in "
       (Term.app `range [`k])
       ", "
       («term_/_»
        («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
        "/"
        (Nat.Data.Nat.Factorial.Basic.term_! (Init.Logic.«term_+_» `n "+" `i) "!"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `Complex.abs_cast_nat)
             ","
             (Tactic.simpLemma [] [] `Complex.abs_div)
             ","
             (Tactic.simpLemma [] [] (Term.app `abv_pow [`abs]))]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
       " in "
       (Term.app `range [`k])
       ", "
       («term_/_»
        («term_^_» (Term.app `abs [`x]) "^" (Init.Logic.«term_+_» `n "+" `i))
        "/"
        (Finset.Data.Finset.Fold.«term_*_»
         (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
         "*"
         («term_^_» `n.succ "^" `i)))))
     ":="
     (Term.hole "_"))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
       " in "
       (Term.app `range [`k])
       ", "
       (Finset.Data.Finset.Fold.«term_*_»
        («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
        "*"
        («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i)))))
     ":="
     (Term.hole "_"))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_/_»
        («term_^_» (Term.app `abs [`x]) "^" `n)
        "/"
        (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
       "*"
       (numLit "2")))
     ":="
     (Term.hole "_"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticCalc_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_/_»
     («term_^_» (Term.app `abs [`x]) "^" `n)
     "/"
     (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
    "*"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_/_»
    («term_^_» (Term.app `abs [`x]) "^" `n)
    "/"
    (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
   "*"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_»
   («term_^_» (Term.app `abs [`x]) "^" `n)
   "/"
   (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Coe.«term↑_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 999 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 999, (some 999, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Term.app `abs [`x]) "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   («term_^_» (Term.app `abs [`x]) "^" `n)
   "/"
   (Init.Coe.«term↑_» "↑" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
    " in "
    (Term.app `range [`k])
    ", "
    (Finset.Data.Finset.Fold.«term_*_»
     («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
     "*"
     («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i)))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] [":" (termℕ "ℕ")]))
   " in "
   (Term.app `range [`k])
   ", "
   (Finset.Data.Finset.Fold.«term_*_»
    («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
    "*"
    («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
   "*"
   («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» (Term.app `abs [`x]) "^" `i) "/" («term_^_» `n.succ "^" `i))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» `n.succ "^" `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Term.app `abs [`x]) "^" `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Term.app `abs [`x]) "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» (Term.app `abs [`x]) "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `k
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound'
  { x : ℂ } { n : ℕ } ( hx : abs x / n.succ ≤ 1 / 2 ) : abs exp x - ∑ m in range n , x ^ m / m ! ≤ abs x ^ n / n ! * 2
  :=
    by
      rw [ ← lim_const ∑ m in range n , _ , exp , sub_eq_add_neg , ← lim_neg , lim_add , ← lim_abs ]
        refine' lim_le CauSeq.le_of_exists ⟨ n , fun j hj => _ ⟩
        simp_rw [ ← sub_eq_add_neg ]
        show abs ∑ m in range j , x ^ m / m ! - ∑ m in range n , x ^ m / m ! ≤ abs x ^ n / n ! * 2
        let k := j - n
        have hj : j = n + k := add_tsub_cancel_of_le hj . symm
        rw [ hj , sum_range_add_sub_sum_range ]
        calc
          abs ∑ i : ℕ in range k , x ^ n + i / ( n + i ! : ℂ ) ≤ ∑ i : ℕ in range k , abs x ^ n + i / ( n + i ! : ℂ )
              :=
              abv_sum_le_sum_abv _ _
            _ ≤ ∑ i : ℕ in range k , abs x ^ n + i / n + i !
              :=
              by simp only [ Complex.abs_cast_nat , Complex.abs_div , abv_pow abs ]
            _ ≤ ∑ i : ℕ in range k , abs x ^ n + i / n ! * n.succ ^ i := _
            _ = ∑ i : ℕ in range k , abs x ^ n / n ! * abs x ^ i / n.succ ^ i := _
            _ ≤ abs x ^ n / ↑ n ! * 2 := _
        ·
          refine' sum_le_sum fun m hm => div_le_div pow_nonneg abs_nonneg x n + m le_reflₓ _ _ _
            · exact_mod_cast mul_pos n.factorial_pos pow_pos n.succ_pos _
            · exact_mod_cast Nat.factorial_mul_pow_le_factorial
        ·
          refine' Finset.sum_congr rfl fun _ _ => _
            simp only [ pow_addₓ , div_eq_inv_mul , mul_inv₀ , mul_left_commₓ , mul_assocₓ ]
        ·
          rw [ ← mul_sum ]
            apply mul_le_mul_of_nonneg_left
            ·
              simp_rw [ ← div_pow ]
                rw [ ← geom_sum_def , geom_sum_eq , div_le_iff_of_neg ]
                ·
                  trans ( - 1 : ℝ )
                    · linarith
                    ·
                      simp only [ neg_le_sub_iff_le_add , div_pow , Nat.cast_succ , le_add_iff_nonneg_left ]
                        exact div_nonneg pow_nonneg abs_nonneg x k pow_nonneg n + 1 . cast_nonneg k
                · linarith
                · linarith
            · exact div_nonneg pow_nonneg abs_nonneg x n Nat.cast_nonneg n !

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `abs_exp_sub_one_le [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Complex.Basic.termℂ "ℂ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Term.app `abs [`x]) "≤" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app `abs [(«term_-_» (Term.app `exp [`x]) "-" (numLit "1"))])
     "≤"
     (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Term.app `abs [`x])))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_=_»
       (Term.app `abs [(«term_-_» (Term.app `exp [`x]) "-" (numLit "1"))])
       "="
       (Term.app
        `abs
        [(«term_-_»
          (Term.app `exp [`x])
          "-"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
           " in "
           (Term.app `range [(numLit "1")])
           ", "
           («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])]))))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» (Term.app `abs [`x]) "^" (numLit "1"))
        "*"
        (Finset.Data.Finset.Fold.«term_*_»
         (Term.app `Nat.succ [(numLit "1")])
         "*"
         (Init.Logic.«term_⁻¹»
          (Finset.Data.Finset.Fold.«term_*_»
           (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
           "*"
           (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
          "⁻¹"))))
      ":="
      (Term.app
       `exp_bound
       [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))]))
     (calcStep
      («term_=_» (Term.hole "_") "=" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Term.app `abs [`x])))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `two_mul)
              ","
              (Tactic.simpLemma [] [] `mul_two)
              ","
              (Tactic.simpLemma [] [] `mul_addₓ)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)]
             "]"]
            [])
           [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Term.app `abs [(«term_-_» (Term.app `exp [`x]) "-" (numLit "1"))])
      "="
      (Term.app
       `abs
       [(«term_-_»
         (Term.app `exp [`x])
         "-"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
          " in "
          (Term.app `range [(numLit "1")])
          ", "
          («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Term.app `abs [`x]) "^" (numLit "1"))
       "*"
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.app `Nat.succ [(numLit "1")])
        "*"
        (Init.Logic.«term_⁻¹»
         (Finset.Data.Finset.Fold.«term_*_»
          (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
          "*"
          (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
         "⁻¹"))))
     ":="
     (Term.app
      `exp_bound
      [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))]))
    (calcStep
     («term_=_» (Term.hole "_") "=" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Term.app `abs [`x])))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `two_mul)
             ","
             (Tactic.simpLemma [] [] `mul_two)
             ","
             (Tactic.simpLemma [] [] `mul_addₓ)
             ","
             (Tactic.simpLemma [] [] `mul_commₓ)]
            "]"]
           [])
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `two_mul)
          ","
          (Tactic.simpLemma [] [] `mul_two)
          ","
          (Tactic.simpLemma [] [] `mul_addₓ)
          ","
          (Tactic.simpLemma [] [] `mul_commₓ)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `two_mul)
     ","
     (Tactic.simpLemma [] [] `mul_two)
     ","
     (Tactic.simpLemma [] [] `mul_addₓ)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_two
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `two_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» (Term.hole "_") "=" (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Term.app `abs [`x])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" (Term.app `abs [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `exp_bound
   [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `abs [`x]) "^" (numLit "1"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "1")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
       "*"
       (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `abs [`x]) "^" (numLit "1"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "1")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
      "*"
      (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "1")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
     "*"
     (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
    "*"
    (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
   "*"
   (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "1") "!")
   "*"
   (Term.paren "(" [(numLit "1") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `abs [`x]) "^" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» (Term.app `abs [`x]) "^" (numLit "1")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_range_succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.app `abs [(«term_-_» (Term.app `exp [`x]) "-" (numLit "1"))])
   "="
   (Term.app
    `abs
    [(«term_-_»
      (Term.app `exp [`x])
      "-"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(numLit "1")])
       ", "
       («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `abs
   [(«term_-_»
     (Term.app `exp [`x])
     "-"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [(numLit "1")])
      ", "
      («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_»
   (Term.app `exp [`x])
   "-"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [(numLit "1")])
    ", "
    («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [(numLit "1")])
   ", "
   («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(numLit "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  abs_exp_sub_one_le
  { x : ℂ } ( hx : abs x ≤ 1 ) : abs exp x - 1 ≤ 2 * abs x
  :=
    calc
      abs exp x - 1 = abs exp x - ∑ m in range 1 , x ^ m / m ! := by simp [ sum_range_succ ]
        _ ≤ abs x ^ 1 * Nat.succ 1 * 1 ! * ( 1 : ℕ ) ⁻¹ := exp_bound hx by decide
        _ = 2 * abs x := by simp [ two_mul , mul_two , mul_addₓ , mul_commₓ ]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `abs_exp_sub_one_sub_id_le [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Complex.Basic.termℂ "ℂ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Term.app `abs [`x]) "≤" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app `abs [(«term_-_» («term_-_» (Term.app `exp [`x]) "-" (numLit "1")) "-" `x)])
     "≤"
     («term_^_» (Term.app `abs [`x]) "^" (numLit "2")))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_=_»
       (Term.app `abs [(«term_-_» («term_-_» (Term.app `exp [`x]) "-" (numLit "1")) "-" `x)])
       "="
       (Term.app
        `abs
        [(«term_-_»
          (Term.app `exp [`x])
          "-"
          (Algebra.BigOperators.Basic.«term∑_in_,_»
           "∑"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
           " in "
           (Term.app `range [(numLit "2")])
           ", "
           («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `sub_eq_add_neg)
              ","
              (Tactic.simpLemma [] [] `sum_range_succ_comm)
              ","
              (Tactic.simpLemma [] [] `add_assocₓ)]
             "]"]
            [])
           [])]))))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
        "*"
        (Finset.Data.Finset.Fold.«term_*_»
         (Term.app `Nat.succ [(numLit "2")])
         "*"
         (Init.Logic.«term_⁻¹»
          (Finset.Data.Finset.Fold.«term_*_»
           (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
           "*"
           (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
          "⁻¹"))))
      ":="
      (Term.app
       `exp_bound
       [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Finset.Data.Finset.Fold.«term_*_» («term_^_» (Term.app `abs [`x]) "^" (numLit "2")) "*" (numLit "1")))
      ":="
      (Term.app
       `mul_le_mul_of_nonneg_left
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
        (Term.app `sq_nonneg [(Term.app `abs [`x])])]))
     (calcStep
      («term_=_» (Term.hole "_") "=" («term_^_» (Term.app `abs [`x]) "^" (numLit "2")))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_oneₓ)] "]") []) [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Term.app `abs [(«term_-_» («term_-_» (Term.app `exp [`x]) "-" (numLit "1")) "-" `x)])
      "="
      (Term.app
       `abs
       [(«term_-_»
         (Term.app `exp [`x])
         "-"
         (Algebra.BigOperators.Basic.«term∑_in_,_»
          "∑"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
          " in "
          (Term.app `range [(numLit "2")])
          ", "
          («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `sub_eq_add_neg)
             ","
             (Tactic.simpLemma [] [] `sum_range_succ_comm)
             ","
             (Tactic.simpLemma [] [] `add_assocₓ)]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
       "*"
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.app `Nat.succ [(numLit "2")])
        "*"
        (Init.Logic.«term_⁻¹»
         (Finset.Data.Finset.Fold.«term_*_»
          (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
          "*"
          (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
         "⁻¹"))))
     ":="
     (Term.app
      `exp_bound
      [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_» («term_^_» (Term.app `abs [`x]) "^" (numLit "2")) "*" (numLit "1")))
     ":="
     (Term.app
      `mul_le_mul_of_nonneg_left
      [(Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
       (Term.app `sq_nonneg [(Term.app `abs [`x])])]))
    (calcStep
     («term_=_» (Term.hole "_") "=" («term_^_» (Term.app `abs [`x]) "^" (numLit "2")))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_oneₓ)] "]") []) [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_oneₓ)] "]") []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_oneₓ)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_oneₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» (Term.hole "_") "=" («term_^_» (Term.app `abs [`x]) "^" (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `mul_le_mul_of_nonneg_left
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
    (Term.app `sq_nonneg [(Term.app `abs [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `sq_nonneg [(Term.app `abs [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `abs [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `sq_nonneg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `sq_nonneg [(Term.paren "(" [(Term.app `abs [`x]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_» («term_^_» (Term.app `abs [`x]) "^" (numLit "2")) "*" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» («term_^_» (Term.app `abs [`x]) "^" (numLit "2")) "*" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» (Term.app `abs [`x]) "^" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `exp_bound
   [`hx (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "2")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
       "*"
       (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "2")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
      "*"
      (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "2")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
     "*"
     (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
    "*"
    (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
   "*"
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "2") "!")
   "*"
   (Term.paren "(" [(numLit "2") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `abs [`x]) "^" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» (Term.app `abs [`x]) "^" (numLit "2")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `sub_eq_add_neg)
          ","
          (Tactic.simpLemma [] [] `sum_range_succ_comm)
          ","
          (Tactic.simpLemma [] [] `add_assocₓ)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `sub_eq_add_neg)
     ","
     (Tactic.simpLemma [] [] `sum_range_succ_comm)
     ","
     (Tactic.simpLemma [] [] `add_assocₓ)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sum_range_succ_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_eq_add_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.app `abs [(«term_-_» («term_-_» (Term.app `exp [`x]) "-" (numLit "1")) "-" `x)])
   "="
   (Term.app
    `abs
    [(«term_-_»
      (Term.app `exp [`x])
      "-"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(numLit "2")])
       ", "
       («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `abs
   [(«term_-_»
     (Term.app `exp [`x])
     "-"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [(numLit "2")])
      ", "
      («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_»
   (Term.app `exp [`x])
   "-"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [(numLit "2")])
    ", "
    («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [(numLit "2")])
   ", "
   («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(numLit "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  abs_exp_sub_one_sub_id_le
  { x : ℂ } ( hx : abs x ≤ 1 ) : abs exp x - 1 - x ≤ abs x ^ 2
  :=
    calc
      abs exp x - 1 - x = abs exp x - ∑ m in range 2 , x ^ m / m !
          :=
          by simp [ sub_eq_add_neg , sum_range_succ_comm , add_assocₓ ]
        _ ≤ abs x ^ 2 * Nat.succ 2 * 2 ! * ( 2 : ℕ ) ⁻¹ := exp_bound hx by decide
        _ ≤ abs x ^ 2 * 1 := mul_le_mul_of_nonneg_left by norm_num sq_nonneg abs x
        _ = abs x ^ 2 := by rw [ mul_oneₓ ]

end Complex

namespace Real

open Complex Finset

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1"))] [] ")")
    (Term.implicitBinder "{" [`n] [":" (termℕ "ℕ")] "}")
    (Term.explicitBinder "(" [`hn] [":" («term_<_» (numLit "0") "<" `n)] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Algebra.Abs.«term|_|»
      "|"
      («term_-_»
       (Term.app `exp [`x])
       "-"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [`n])
        ", "
        («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
      "|")
     "≤"
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" `n)
      "*"
      («term_/_»
       `n.succ
       "/"
       (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hxc []]
           [(Term.typeSpec ":" («term_≤_» (Term.app `Complex.abs [`x]) "≤" (numLit "1")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exactModCast "exact_mod_cast" `hx) [])]))))))
        [])
       (group
        (Tactic.«tactic_<;>_»
         (Tactic.convert "convert" [] (Term.app `exp_bound [`hxc `hn]) [])
         "<;>"
         (Tactic.normCast "norm_cast" []))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hxc []]
          [(Term.typeSpec ":" («term_≤_» (Term.app `Complex.abs [`x]) "≤" (numLit "1")))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exactModCast "exact_mod_cast" `hx) [])]))))))
       [])
      (group
       (Tactic.«tactic_<;>_»
        (Tactic.convert "convert" [] (Term.app `exp_bound [`hxc `hn]) [])
        "<;>"
        (Tactic.normCast "norm_cast" []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.convert "convert" [] (Term.app `exp_bound [`hxc `hn]) [])
   "<;>"
   (Tactic.normCast "norm_cast" []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.normCast "norm_cast" [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.normCast', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.convert "convert" [] (Term.app `exp_bound [`hxc `hn]) [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.convert', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `exp_bound [`hxc `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hxc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hxc []]
     [(Term.typeSpec ":" («term_≤_» (Term.app `Complex.abs [`x]) "≤" (numLit "1")))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exactModCast "exact_mod_cast" `hx) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exactModCast "exact_mod_cast" `hx) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exactModCast "exact_mod_cast" `hx)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exactModCast', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (Term.app `Complex.abs [`x]) "≤" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Complex.abs [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_≤_»
   (Algebra.Abs.«term|_|»
    "|"
    («term_-_»
     (Term.app `exp [`x])
     "-"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [`n])
      ", "
      («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
    "|")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" `n)
    "*"
    («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" `n)
   "*"
   («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» `n.succ "/" (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  `n.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Algebra.Abs.«term|_|» "|" `x "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" `n) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Algebra.Abs.«term|_|»
   "|"
   («term_-_»
    (Term.app `exp [`x])
    "-"
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`n])
     ", "
     («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
   "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_»
   (Term.app `exp [`x])
   "-"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`n])
    ", "
    («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound
  { x : ℝ } ( hx : | x | ≤ 1 ) { n : ℕ } ( hn : 0 < n )
    : | exp x - ∑ m in range n , x ^ m / m ! | ≤ | x | ^ n * n.succ / n ! * n
  := by have hxc : Complex.abs x ≤ 1 := by exact_mod_cast hx convert exp_bound hxc hn <;> norm_cast

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound' [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`h1] [":" («term_≤_» (numLit "0") "≤" `x)] [] ")")
    (Term.explicitBinder "(" [`h2] [":" («term_≤_» `x "≤" (numLit "1"))] [] ")")
    (Term.implicitBinder "{" [`n] [":" (termℕ "ℕ")] "}")
    (Term.explicitBinder "(" [`hn] [":" («term_<_» (numLit "0") "<" `n)] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Term.app `Real.exp [`x])
     "≤"
     (Init.Logic.«term_+_»
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `Finset.range [`n])
       ", "
       («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
      "+"
      («term_/_»
       (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" `n) "*" (Init.Logic.«term_+_» `n "+" (numLit "1")))
       "/"
       (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h3 []]
           [(Term.typeSpec ":" («term_=_» (Algebra.Abs.«term|_|» "|" `x "|") "=" `x))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h4 []]
           [(Term.typeSpec ":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]") []) [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl (Term.haveIdDecl [`h' []] [] ":=" (Term.app `Real.exp_bound [`h4 `hn]))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`h'] []))])
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h'' []]
           []
           ":="
           (Term.proj (Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h']) "." (fieldIdx "1")))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl [`t []] [] ":=" (Term.app (Term.proj `sub_le_iff_le_add' "." (fieldIdx "1")) [`h'']))))
        [])
       (group (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] `mul_div_assoc)] "]"] [] ["using" `t]) [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h3 []]
          [(Term.typeSpec ":" («term_=_» (Algebra.Abs.«term|_|» "|" `x "|") "=" `x))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h4 []]
          [(Term.typeSpec ":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1")))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]") []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl (Term.haveIdDecl [`h' []] [] ":=" (Term.app `Real.exp_bound [`h4 `hn]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`h'] []))])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h'' []]
          []
          ":="
          (Term.proj (Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h']) "." (fieldIdx "1")))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl [`t []] [] ":=" (Term.app (Term.proj `sub_le_iff_le_add' "." (fieldIdx "1")) [`h'']))))
       [])
      (group (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] `mul_div_assoc)] "]"] [] ["using" `t]) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] ["[" [(Tactic.simpLemma [] [] `mul_div_assoc)] "]"] [] ["using" `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_assoc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl [`t []] [] ":=" (Term.app (Term.proj `sub_le_iff_le_add' "." (fieldIdx "1")) [`h'']))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj `sub_le_iff_le_add' "." (fieldIdx "1")) [`h''])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h''
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `sub_le_iff_le_add' "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `sub_le_iff_le_add'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h'' []]
     []
     ":="
     (Term.proj (Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h']) "." (fieldIdx "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h']) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `abs_sub_le_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `abs_sub_le_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Term.proj `abs_sub_le_iff "." (fieldIdx "1")) [`h']) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`h'] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h3
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_ "have" (Term.haveDecl (Term.haveIdDecl [`h' []] [] ":=" (Term.app `Real.exp_bound [`h4 `hn]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Real.exp_bound [`h4 `hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h4
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Real.exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h4 []]
     [(Term.typeSpec ":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1")))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]") []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]") []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__ "rwa" (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h3)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h3
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Algebra.Abs.«term|_|» "|" `x "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h3 []]
     [(Term.typeSpec ":" («term_=_» (Algebra.Abs.«term|_|» "|" `x "|") "=" `x))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_» (Algebra.Abs.«term|_|» "|" `x "|") "=" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Algebra.Abs.«term|_|» "|" `x "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_≤_»
   (Term.app `Real.exp [`x])
   "≤"
   (Init.Logic.«term_+_»
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `Finset.range [`n])
     ", "
     («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
    "+"
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" `n) "*" (Init.Logic.«term_+_» `n "+" (numLit "1")))
     "/"
     (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `Finset.range [`n])
    ", "
    («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
   "+"
   («term_/_»
    (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" `n) "*" (Init.Logic.«term_+_» `n "+" (numLit "1")))
    "/"
    (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" `n) "*" (Init.Logic.«term_+_» `n "+" (numLit "1")))
   "/"
   (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» (Nat.Data.Nat.Factorial.Basic.term_! `n "!") "*" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" `n) "*" (Init.Logic.«term_+_» `n "+" (numLit "1")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_» `n "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» `x "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» `x "^" `n) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.paren "(" [(«term_^_» `x "^" `n) []] ")")
   "*"
   (Init.Logic.«term_+_» `n "+" (numLit "1")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `Finset.range [`n])
   ", "
   («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Finset.range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound'
  { x : ℝ } ( h1 : 0 ≤ x ) ( h2 : x ≤ 1 ) { n : ℕ } ( hn : 0 < n )
    : Real.exp x ≤ ∑ m in Finset.range n , x ^ m / m ! + x ^ n * n + 1 / n ! * n
  :=
    by
      have h3 : | x | = x := by simpa
        have h4 : | x | ≤ 1 := by rwa [ h3 ]
        have h' := Real.exp_bound h4 hn
        rw [ h3 ] at h'
        have h'' := abs_sub_le_iff . 1 h' . 1
        have t := sub_le_iff_le_add' . 1 h''
        simpa [ mul_div_assoc ] using t

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " A finite initial segment of the exponential series, followed by an arbitrary tail.\nFor fixed `n` this is just a linear map wrt `r`, and each map is a simple linear function\nof the previous (see `exp_near_succ`), with `exp_near n x r ⟶ exp x` as `n ⟶ ∞`,\nfor any `r`. -/")]
  []
  []
  []
  []
  [])
 (Command.def
  "def"
  (Command.declId `exp_near [])
  (Command.optDeclSig
   [(Term.explicitBinder "(" [`n] [":" (termℕ "ℕ")] [] ")")
    (Term.explicitBinder "(" [`x `r] [":" (Data.Real.Basic.termℝ "ℝ")] [] ")")]
   [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))])
  (Command.declValSimple
   ":="
   (Init.Logic.«term_+_»
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
     " in "
     (Term.app `range [`n])
     ", "
     («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
    "+"
    (Finset.Data.Finset.Fold.«term_*_»
     («term_/_» («term_^_» `x "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
     "*"
     `r))
   [])
  []
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [`n])
    ", "
    («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
   "+"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_/_» («term_^_» `x "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
    "*"
    `r))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_/_» («term_^_» `x "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
   "*"
   `r)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `r
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_» («term_^_» `x "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `n "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `n)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» `x "^" `n) "/" (Nat.Data.Nat.Factorial.Basic.term_! `n "!")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [`n])
   ", "
   («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" `m) "/" (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `n
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    A finite initial segment of the exponential series, followed by an arbitrary tail.
    For fixed `n` this is just a linear map wrt `r`, and each map is a simple linear function
    of the previous (see `exp_near_succ`), with `exp_near n x r ⟶ exp x` as `n ⟶ ∞`,
    for any `r`. -/
  def exp_near ( n : ℕ ) ( x r : ℝ ) : ℝ := ∑ m in range n , x ^ m / m ! + x ^ n / n ! * r

@[simp]
theorem exp_near_zero x r : exp_near 0 x r = r := by
  simp [exp_near]

@[simp]
theorem exp_near_succ n x r : exp_near (n+1) x r = exp_near n x (1+(x / n+1)*r) := by
  simp [exp_near, range_succ, mul_addₓ, add_left_commₓ, add_assocₓ, pow_succₓ, div_eq_mul_inv, mul_inv₀] <;> ac_rfl

theorem exp_near_sub n x r₁ r₂ : exp_near n x r₁ - exp_near n x r₂ = (x ^ n / n !)*r₁ - r₂ := by
  simp [exp_near, mul_sub]

theorem exp_approx_end (n m : ℕ) (x : ℝ) (e₁ : (n+1) = m) (h : |x| ≤ 1) :
    |exp x - exp_near m x 0| ≤ (|x| ^ m / m !)*(m+1) / m := by
  simp [exp_near]
  convert exp_bound h _ using 1
  field_simp [mul_commₓ]
  linarith

theorem exp_approx_succ {n} {x a₁ b₁ : ℝ} (m : ℕ) (e₁ : (n+1) = m) (a₂ b₂ : ℝ)
    (e : |(1+(x / m)*a₂) - a₁| ≤ b₁ - (|x| / m)*b₂) (h : |exp x - exp_near m x a₂| ≤ (|x| ^ m / m !)*b₂) :
    |exp x - exp_near n x a₁| ≤ (|x| ^ n / n !)*b₁ := by
  refine' (_root_.abs_sub_le _ _ _).trans ((add_le_add_right h _).trans _)
  subst e₁
  rw [exp_near_succ, exp_near_sub, _root_.abs_mul]
  convert mul_le_mul_of_nonneg_left (le_sub_iff_add_le'.1 e) _
  ·
    simp [mul_addₓ, pow_succ'ₓ, div_eq_mul_inv, _root_.abs_mul, _root_.abs_inv, ← pow_abs, mul_inv₀]
    ac_rfl
  ·
    simp [_root_.div_nonneg, _root_.abs_nonneg]

theorem exp_approx_end' {n} {x a b : ℝ} (m : ℕ) (e₁ : (n+1) = m) (rm : ℝ) (er : ↑m = rm) (h : |x| ≤ 1)
    (e : |1 - a| ≤ b - (|x| / rm)*(rm+1) / rm) : |exp x - exp_near n x a| ≤ (|x| ^ n / n !)*b := by
  subst er <;>
    exact
      exp_approx_succ _ e₁ _ _
        (by
          simpa using e)
        (exp_approx_end _ _ _ e₁ h)

theorem exp_1_approx_succ_eq {n} {a₁ b₁ : ℝ} {m : ℕ} (en : (n+1) = m) {rm : ℝ} (er : ↑m = rm)
    (h : |exp 1 - exp_near m 1 ((a₁ - 1)*rm)| ≤ (|1| ^ m / m !)*b₁*rm) :
    |exp 1 - exp_near n 1 a₁| ≤ (|1| ^ n / n !)*b₁ := by
  subst er
  refine' exp_approx_succ _ en _ _ _ h
  field_simp [show (m : ℝ) ≠ 0 by
      norm_cast <;> linarith]

theorem exp_approx_start (x a b : ℝ) (h : |exp x - exp_near 0 x a| ≤ (|x| ^ 0 / 0!)*b) : |exp x - a| ≤ b := by
  simpa using h

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `cos_bound [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Algebra.Abs.«term|_|»
      "|"
      («term_-_»
       (Term.app `cos [`x])
       "-"
       («term_-_» (numLit "1") "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))))
      "|")
     "≤"
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
      "*"
      («term_/_» (numLit "5") "/" (numLit "96"))))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_=_»
       (Algebra.Abs.«term|_|»
        "|"
        («term_-_»
         (Term.app `cos [`x])
         "-"
         («term_-_» (numLit "1") "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))))
        "|")
       "="
       (Term.app
        `abs
        [(«term_-_»
          (Term.app `Complex.cos [`x])
          "-"
          («term_-_» (numLit "1") "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `abs_of_real)] "]") [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `of_real_bit0)
               ","
               (Tactic.simpLemma [] [] `of_real_one)
               ","
               (Tactic.simpLemma [] [] `of_real_inv)]
              "]"]
             []))
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `abs
        [(«term_/_»
          («term_-_»
           (Init.Logic.«term_+_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "+"
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]))
           "-"
           («term_-_» (numLit "2") "-" («term_^_» `x "^" (numLit "2"))))
          "/"
          (numLit "2"))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `Complex.cos)
              ","
              (Tactic.simpLemma [] [] `sub_div)
              ","
              (Tactic.simpLemma [] [] `add_div)
              ","
              (Tactic.simpLemma [] [] `neg_div)
              ","
              (Tactic.simpLemma
               []
               []
               (Term.app
                `div_self
                [(Term.app
                  (Term.explicit "@" `two_ne_zero')
                  [(Data.Complex.Basic.termℂ "ℂ") (Term.hole "_") (Term.hole "_") (Term.hole "_")])]))]
             "]"]
            [])
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `abs
        [(«term_/_»
          (Init.Logic.«term_+_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
           "+"
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
          "/"
          (numLit "2"))]))
      ":="
      (Term.app
       `congr_argₓ
       [`abs
        (Term.app
         `congr_argₓ
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`x] [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))])]
            "=>"
            («term_/_» `x "/" (numLit "2"))))
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])
              (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `pow_succₓ)] "]"] []) [])
              (group
               (Tactic.«tactic_<;>_»
                (Tactic.apply "apply" `Complex.ext)
                "<;>"
                (Tactic.«tactic_<;>_»
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["[" [(Tactic.simpLemma [] [] `div_eq_mul_inv) "," (Tactic.simpLemma [] [] `norm_sq)] "]"]
                  [])
                 "<;>"
                 (Tactic.Ring.tacticRing "ring")))
               [])])))])]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Init.Logic.«term_+_»
        (Term.app
         `abs
         [(«term_/_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
           "/"
           (numLit "2"))])
        "+"
        (Term.app
         `abs
         [(«term_/_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
           "/"
           (numLit "2"))])))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_div)] "]") [])
            "<;>"
            (Tactic.exact "exact" (Term.app `abs_add [(Term.hole "_") (Term.hole "_")])))
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Init.Logic.«term_+_»
        («term_/_»
         (Term.app
          `abs
          [(«term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "/"
         (numLit "2"))
        "+"
        («term_/_»
         (Term.app
          `abs
          [(«term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "/"
         (numLit "2"))))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Complex.abs_div)] "]"] []) [])]))))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Init.Logic.«term_+_»
        («term_/_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
          "*"
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `Nat.succ [(numLit "4")])
           "*"
           (Init.Logic.«term_⁻¹»
            (Finset.Data.Finset.Fold.«term_*_»
             (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
             "*"
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
            "⁻¹")))
         "/"
         (numLit "2"))
        "+"
        («term_/_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_^_»
           (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "^"
           (numLit "4"))
          "*"
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `Nat.succ [(numLit "4")])
           "*"
           (Init.Logic.«term_⁻¹»
            (Finset.Data.Finset.Fold.«term_*_»
             (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
             "*"
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
            "⁻¹")))
         "/"
         (numLit "2"))))
      ":="
      (Term.app
       `add_le_add
       [(Term.app
         (Term.proj
          (Term.app
           `div_le_div_right
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
          "."
          (fieldIdx "2"))
         [(Term.app
           `Complex.exp_bound
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
        (Term.app
         (Term.proj
          (Term.app
           `div_le_div_right
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
          "."
          (fieldIdx "2"))
         [(Term.app
           `Complex.exp_bound
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
        "*"
        («term_/_» (numLit "5") "/" (numLit "96"))))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Lean.Tactic.normNum "norm_num" [] [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `mul_assocₓ)
               ","
               (Tactic.simpLemma [] [] `mul_commₓ)
               ","
               (Tactic.simpLemma [] [] `mul_left_commₓ)
               ","
               (Tactic.simpLemma [] [] `mul_div_assoc)]
              "]"]
             []))
           [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Algebra.Abs.«term|_|»
       "|"
       («term_-_»
        (Term.app `cos [`x])
        "-"
        («term_-_» (numLit "1") "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))))
       "|")
      "="
      (Term.app
       `abs
       [(«term_-_»
         (Term.app `Complex.cos [`x])
         "-"
         («term_-_» (numLit "1") "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `abs_of_real)] "]") [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `of_real_bit0)
              ","
              (Tactic.simpLemma [] [] `of_real_one)
              ","
              (Tactic.simpLemma [] [] `of_real_inv)]
             "]"]
            []))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Term.app
       `abs
       [(«term_/_»
         («term_-_»
          (Init.Logic.«term_+_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
           "+"
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]))
          "-"
          («term_-_» (numLit "2") "-" («term_^_» `x "^" (numLit "2"))))
         "/"
         (numLit "2"))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `Complex.cos)
             ","
             (Tactic.simpLemma [] [] `sub_div)
             ","
             (Tactic.simpLemma [] [] `add_div)
             ","
             (Tactic.simpLemma [] [] `neg_div)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app
               `div_self
               [(Term.app
                 (Term.explicit "@" `two_ne_zero')
                 [(Data.Complex.Basic.termℂ "ℂ") (Term.hole "_") (Term.hole "_") (Term.hole "_")])]))]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Term.app
       `abs
       [(«term_/_»
         (Init.Logic.«term_+_»
          («term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
          "+"
          («term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
         "/"
         (numLit "2"))]))
     ":="
     (Term.app
      `congr_argₓ
      [`abs
       (Term.app
        `congr_argₓ
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`x] [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))])]
           "=>"
           («term_/_» `x "/" (numLit "2"))))
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])
             (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `pow_succₓ)] "]"] []) [])
             (group
              (Tactic.«tactic_<;>_»
               (Tactic.apply "apply" `Complex.ext)
               "<;>"
               (Tactic.«tactic_<;>_»
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `div_eq_mul_inv) "," (Tactic.simpLemma [] [] `norm_sq)] "]"]
                 [])
                "<;>"
                (Tactic.Ring.tacticRing "ring")))
              [])])))])]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Init.Logic.«term_+_»
       (Term.app
        `abs
        [(«term_/_»
          («term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
          "/"
          (numLit "2"))])
       "+"
       (Term.app
        `abs
        [(«term_/_»
          («term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
          "/"
          (numLit "2"))])))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_div)] "]") [])
           "<;>"
           (Tactic.exact "exact" (Term.app `abs_add [(Term.hole "_") (Term.hole "_")])))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Init.Logic.«term_+_»
       («term_/_»
        (Term.app
         `abs
         [(«term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
        "/"
        (numLit "2"))
       "+"
       («term_/_»
        (Term.app
         `abs
         [(«term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
        "/"
        (numLit "2"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Complex.abs_div)] "]"] []) [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Init.Logic.«term_+_»
       («term_/_»
        (Finset.Data.Finset.Fold.«term_*_»
         («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
         "*"
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `Nat.succ [(numLit "4")])
          "*"
          (Init.Logic.«term_⁻¹»
           (Finset.Data.Finset.Fold.«term_*_»
            (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
            "*"
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
           "⁻¹")))
        "/"
        (numLit "2"))
       "+"
       («term_/_»
        (Finset.Data.Finset.Fold.«term_*_»
         («term_^_»
          (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
          "^"
          (numLit "4"))
         "*"
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `Nat.succ [(numLit "4")])
          "*"
          (Init.Logic.«term_⁻¹»
           (Finset.Data.Finset.Fold.«term_*_»
            (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
            "*"
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
           "⁻¹")))
        "/"
        (numLit "2"))))
     ":="
     (Term.app
      `add_le_add
      [(Term.app
        (Term.proj
         (Term.app
          `div_le_div_right
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
         "."
         (fieldIdx "2"))
        [(Term.app
          `Complex.exp_bound
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
           (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
       (Term.app
        (Term.proj
         (Term.app
          `div_le_div_right
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
         "."
         (fieldIdx "2"))
        [(Term.app
          `Complex.exp_bound
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
       "*"
       («term_/_» (numLit "5") "/" (numLit "96"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Lean.Tactic.normNum "norm_num" [] [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `mul_assocₓ)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)
              ","
              (Tactic.simpLemma [] [] `mul_left_commₓ)
              ","
              (Tactic.simpLemma [] [] `mul_div_assoc)]
             "]"]
            []))
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Lean.Tactic.normNum "norm_num" [] [])
        "<;>"
        (Tactic.simp
         "simp"
         []
         []
         ["["
          [(Tactic.simpLemma [] [] `mul_assocₓ)
           ","
           (Tactic.simpLemma [] [] `mul_commₓ)
           ","
           (Tactic.simpLemma [] [] `mul_left_commₓ)
           ","
           (Tactic.simpLemma [] [] `mul_div_assoc)]
          "]"]
         []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Lean.Tactic.normNum "norm_num" [] [])
   "<;>"
   (Tactic.simp
    "simp"
    []
    []
    ["["
     [(Tactic.simpLemma [] [] `mul_assocₓ)
      ","
      (Tactic.simpLemma [] [] `mul_commₓ)
      ","
      (Tactic.simpLemma [] [] `mul_left_commₓ)
      ","
      (Tactic.simpLemma [] [] `mul_div_assoc)]
     "]"]
    []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `mul_assocₓ)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_left_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_div_assoc)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_assoc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
    "*"
    («term_/_» (numLit "5") "/" (numLit "96"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
   "*"
   («term_/_» (numLit "5") "/" (numLit "96")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (numLit "5") "/" (numLit "96"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "96")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "5")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Algebra.Abs.«term|_|» "|" `x "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `add_le_add
   [(Term.app
     (Term.proj
      (Term.app
       `div_le_div_right
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
      "."
      (fieldIdx "2"))
     [(Term.app
       `Complex.exp_bound
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
        (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
    (Term.app
     (Term.proj
      (Term.app
       `div_le_div_right
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
      "."
      (fieldIdx "2"))
     [(Term.app
       `Complex.exp_bound
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
        (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    (Term.app
     `div_le_div_right
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    "."
    (fieldIdx "2"))
   [(Term.app
     `Complex.exp_bound
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Complex.exp_bound
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Complex.exp_bound
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      []]
     ")")
    (Term.paren
     "("
     [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    `div_le_div_right
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `div_le_div_right
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_le_div_right
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       `div_le_div_right
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")])
      []]
     ")")
    "."
    (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app
       `Complex.exp_bound
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
          []]
         ")")
        (Term.paren
         "("
         [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     `div_le_div_right
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    "."
    (fieldIdx "2"))
   [(Term.app
     `Complex.exp_bound
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Complex.exp_bound
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Complex.exp_bound
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      []]
     ")")
    (Term.paren
     "("
     [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    `div_le_div_right
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `div_le_div_right
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_le_div_right
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       `div_le_div_right
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")])
      []]
     ")")
    "."
    (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app
       `Complex.exp_bound
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
          []]
         ")")
        (Term.paren
         "("
         [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Init.Logic.«term_+_»
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_»
         (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
         "*"
         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
        "⁻¹")))
     "/"
     (numLit "2"))
    "+"
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_»
       (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
       "^"
       (numLit "4"))
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_»
         (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
         "*"
         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
        "⁻¹")))
     "/"
     (numLit "2"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   («term_/_»
    (Finset.Data.Finset.Fold.«term_*_»
     («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
     "*"
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.app `Nat.succ [(numLit "4")])
      "*"
      (Init.Logic.«term_⁻¹»
       (Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       "⁻¹")))
    "/"
    (numLit "2"))
   "+"
   («term_/_»
    (Finset.Data.Finset.Fold.«term_*_»
     («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
     "*"
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.app `Nat.succ [(numLit "4")])
      "*"
      (Init.Logic.«term_⁻¹»
       (Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       "⁻¹")))
    "/"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "4")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
       "*"
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹")))
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
      "*"
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "4")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
     "*"
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
    "*"
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term-_» "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term-_» "-" `x) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_»
   (Term.app
    `Complex.abs
    [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []] ")")])
   "^"
   (numLit "4"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.paren
    "("
    [(«term_^_»
      (Term.app
       `Complex.abs
       [(Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
         ")")])
      "^"
      (numLit "4"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Term.paren
      "("
      [(Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       []]
      ")")
     "⁻¹")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_»
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "4")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
       "*"
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹")))
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
      "*"
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "4")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
     "*"
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
    "*"
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» `x "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_»
   (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
   "^"
   (numLit "4"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.paren
    "("
    [(«term_^_»
      (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
      "^"
      (numLit "4"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Term.paren
      "("
      [(Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       []]
      ")")
     "⁻¹")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.«term_*_»
      (Term.paren
       "("
       [(«term_^_»
         (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
         "^"
         (numLit "4"))
        []]
       ")")
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_»
           (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
           "*"
           (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
          []]
         ")")
        "⁻¹")))
     []]
    ")")
   "/"
   (numLit "2"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Complex.abs_div)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `Complex.abs_div)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Complex.abs_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   (Init.Logic.«term_+_»
    («term_/_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [(numLit "4")])
         ", "
         («term_/_»
          («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
          "/"
          (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "/"
     (numLit "2"))
    "+"
    («term_/_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [(numLit "4")])
         ", "
         («term_/_»
          («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
          "/"
          (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "/"
     (numLit "2"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   («term_/_»
    (Term.app
     `abs
     [(«term_-_»
       (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
       "-"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(numLit "4")])
        ", "
        («term_/_»
         («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
         "/"
         (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
    "/"
    (numLit "2"))
   "+"
   («term_/_»
    (Term.app
     `abs
     [(«term_-_»
       (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
       "-"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(numLit "4")])
        ", "
        («term_/_»
         («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
         "/"
         (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
    "/"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   (Term.app
    `abs
    [(«term_-_»
      (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
      "-"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(numLit "4")])
       ", "
       («term_/_»
        («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
        "/"
        (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Term.app
   `abs
   [(«term_-_»
     (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
     "-"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [(numLit "4")])
      ", "
      («term_/_»
       («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
       "/"
       (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_»
   (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
   "-"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [(numLit "4")])
    ", "
    («term_/_»
     («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
     "/"
     (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [(numLit "4")])
   ", "
   («term_/_»
    («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
    "/"
    (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
   "/"
   (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term-_» "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term-_» "-" `x) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 0, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  cos_bound
  { x : ℝ } ( hx : | x | ≤ 1 ) : | cos x - 1 - x ^ 2 / 2 | ≤ | x | ^ 4 * 5 / 96
  :=
    calc
      | cos x - 1 - x ^ 2 / 2 | = abs Complex.cos x - 1 - x ^ 2 / 2
          :=
          by rw [ ← abs_of_real ] <;> simp [ of_real_bit0 , of_real_one , of_real_inv ]
        _ = abs Complex.exp x * I + Complex.exp - x * I - 2 - x ^ 2 / 2
          :=
          by simp [ Complex.cos , sub_div , add_div , neg_div , div_self @ two_ne_zero' ℂ _ _ _ ]
        _
            =
            abs
              Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m !
                  +
                  Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m !
                /
                2
          :=
          congr_argₓ
            abs
              congr_argₓ
                fun x : ℂ => x / 2
                  by
                    simp only [ sum_range_succ ]
                      simp [ pow_succₓ ]
                      apply Complex.ext <;> simp [ div_eq_mul_inv , norm_sq ] <;> ring
        _
            ≤
            abs Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m ! / 2
              +
              abs Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m ! / 2
          :=
          by rw [ add_div ] <;> exact abs_add _ _
        _
            =
            abs Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m ! / 2
              +
              abs Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m ! / 2
          :=
          by simp [ Complex.abs_div ]
        _
            ≤
            Complex.abs x * I ^ 4 * Nat.succ 4 * 4 ! * ( 4 : ℕ ) ⁻¹ / 2
              +
              Complex.abs - x * I ^ 4 * Nat.succ 4 * 4 ! * ( 4 : ℕ ) ⁻¹ / 2
          :=
          add_le_add
            div_le_div_right by norm_num . 2 Complex.exp_bound by simpa by decide
              div_le_div_right by norm_num . 2 Complex.exp_bound by simpa by decide
        _ ≤ | x | ^ 4 * 5 / 96 := by norm_num <;> simp [ mul_assocₓ , mul_commₓ , mul_left_commₓ , mul_div_assoc ]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `sin_bound [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`hx] [":" («term_≤_» (Algebra.Abs.«term|_|» "|" `x "|") "≤" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Algebra.Abs.«term|_|»
      "|"
      («term_-_»
       (Term.app `sin [`x])
       "-"
       («term_-_» `x "-" («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "6"))))
      "|")
     "≤"
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
      "*"
      («term_/_» (numLit "5") "/" (numLit "96"))))))
  (Command.declValSimple
   ":="
   (calc
    "calc"
    [(calcStep
      («term_=_»
       (Algebra.Abs.«term|_|»
        "|"
        («term_-_»
         (Term.app `sin [`x])
         "-"
         («term_-_» `x "-" («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "6"))))
        "|")
       "="
       (Term.app
        `abs
        [(«term_-_»
          (Term.app `Complex.sin [`x])
          "-"
          («term_-_» `x "-" («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "6"))))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `abs_of_real)] "]") [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `of_real_bit0)
               ","
               (Tactic.simpLemma [] [] `of_real_one)
               ","
               (Tactic.simpLemma [] [] `of_real_inv)]
              "]"]
             []))
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `abs
        [(«term_/_»
          («term_-_»
           (Finset.Data.Finset.Fold.«term_*_»
            («term_-_»
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
             "-"
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]))
            "*"
            `I)
           "-"
           («term_-_»
            (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `x)
            "-"
            («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "3"))))
          "/"
          (numLit "2"))]))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `Complex.sin)
              ","
              (Tactic.simpLemma [] [] `sub_div)
              ","
              (Tactic.simpLemma [] [] `add_div)
              ","
              (Tactic.simpLemma [] [] `neg_div)
              ","
              (Tactic.simpLemma
               []
               []
               (Term.app
                `mul_div_cancel_left
                [(Term.hole "_")
                 (Term.app
                  (Term.explicit "@" `two_ne_zero')
                  [(Data.Complex.Basic.termℂ "ℂ") (Term.hole "_") (Term.hole "_") (Term.hole "_")])]))
              ","
              (Tactic.simpLemma [] [] `div_div_eq_div_mul)
              ","
              (Tactic.simpLemma
               []
               []
               (Term.show
                "show"
                («term_=_»
                 (Finset.Data.Finset.Fold.«term_*_»
                  (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                  "*"
                  (numLit "2"))
                 "="
                 (numLit "6"))
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))]
             "]"]
            [])
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `abs
        [(«term_/_»
          (Finset.Data.Finset.Fold.«term_*_»
           («term_-_»
            («term_-_»
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [(numLit "4")])
              ", "
              («term_/_»
               («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
            "-"
            («term_-_»
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [(numLit "4")])
              ", "
              («term_/_»
               («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
           "*"
           `I)
          "/"
          (numLit "2"))]))
      ":="
      (Term.app
       `congr_argₓ
       [`abs
        (Term.app
         `congr_argₓ
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`x] [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))])]
            "=>"
            («term_/_» `x "/" (numLit "2"))))
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])
              (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `pow_succₓ)] "]"] []) [])
              (group
               (Tactic.«tactic_<;>_»
                (Tactic.apply "apply" `Complex.ext)
                "<;>"
                (Tactic.«tactic_<;>_»
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["[" [(Tactic.simpLemma [] [] `div_eq_mul_inv) "," (Tactic.simpLemma [] [] `norm_sq)] "]"]
                  [])
                 "<;>"
                 (Tactic.Ring.tacticRing "ring")))
               [])])))])]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Init.Logic.«term_+_»
        (Term.app
         `abs
         [(«term_/_»
           (Finset.Data.Finset.Fold.«term_*_»
            («term_-_»
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [(numLit "4")])
              ", "
              («term_/_»
               («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
            "*"
            `I)
           "/"
           (numLit "2"))])
        "+"
        (Term.app
         `abs
         [(«term_/_»
           («term-_»
            "-"
            (Finset.Data.Finset.Fold.«term_*_»
             («term_-_»
              (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
              "-"
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
               " in "
               (Term.app `range [(numLit "4")])
               ", "
               («term_/_»
                («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
                "/"
                (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
             "*"
             `I))
           "/"
           (numLit "2"))])))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `sub_mul) "," (Tactic.rwRule [] `sub_eq_add_neg) "," (Tactic.rwRule [] `add_div)]
              "]")
             [])
            "<;>"
            (Tactic.exact "exact" (Term.app `abs_add [(Term.hole "_") (Term.hole "_")])))
           [])]))))
     (calcStep
      («term_=_»
       (Term.hole "_")
       "="
       (Init.Logic.«term_+_»
        («term_/_»
         (Term.app
          `abs
          [(«term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "/"
         (numLit "2"))
        "+"
        («term_/_»
         (Term.app
          `abs
          [(«term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
         "/"
         (numLit "2"))))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `add_commₓ)
              ","
              (Tactic.simpLemma [] [] `Complex.abs_div)
              ","
              (Tactic.simpLemma [] [] `Complex.abs_mul)]
             "]"]
            [])
           [])]))))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Init.Logic.«term_+_»
        («term_/_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
          "*"
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `Nat.succ [(numLit "4")])
           "*"
           (Init.Logic.«term_⁻¹»
            (Finset.Data.Finset.Fold.«term_*_»
             (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
             "*"
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
            "⁻¹")))
         "/"
         (numLit "2"))
        "+"
        («term_/_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_^_»
           (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "^"
           (numLit "4"))
          "*"
          (Finset.Data.Finset.Fold.«term_*_»
           (Term.app `Nat.succ [(numLit "4")])
           "*"
           (Init.Logic.«term_⁻¹»
            (Finset.Data.Finset.Fold.«term_*_»
             (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
             "*"
             (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
            "⁻¹")))
         "/"
         (numLit "2"))))
      ":="
      (Term.app
       `add_le_add
       [(Term.app
         (Term.proj
          (Term.app
           `div_le_div_right
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
          "."
          (fieldIdx "2"))
         [(Term.app
           `Complex.exp_bound
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
        (Term.app
         (Term.proj
          (Term.app
           `div_le_div_right
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
          "."
          (fieldIdx "2"))
         [(Term.app
           `Complex.exp_bound
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])]))
     (calcStep
      («term_≤_»
       (Term.hole "_")
       "≤"
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
        "*"
        («term_/_» (numLit "5") "/" (numLit "96"))))
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.«tactic_<;>_»
            (Lean.Tactic.normNum "norm_num" [] [])
            "<;>"
            (Tactic.simp
             "simp"
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `mul_assocₓ)
               ","
               (Tactic.simpLemma [] [] `mul_commₓ)
               ","
               (Tactic.simpLemma [] [] `mul_left_commₓ)
               ","
               (Tactic.simpLemma [] [] `mul_div_assoc)]
              "]"]
             []))
           [])]))))])
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Algebra.Abs.«term|_|»
       "|"
       («term_-_»
        (Term.app `sin [`x])
        "-"
        («term_-_» `x "-" («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "6"))))
       "|")
      "="
      (Term.app
       `abs
       [(«term_-_»
         (Term.app `Complex.sin [`x])
         "-"
         («term_-_» `x "-" («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "6"))))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `abs_of_real)] "]") [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `of_real_bit0)
              ","
              (Tactic.simpLemma [] [] `of_real_one)
              ","
              (Tactic.simpLemma [] [] `of_real_inv)]
             "]"]
            []))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Term.app
       `abs
       [(«term_/_»
         («term_-_»
          (Finset.Data.Finset.Fold.«term_*_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]))
           "*"
           `I)
          "-"
          («term_-_»
           (Finset.Data.Finset.Fold.«term_*_» (numLit "2") "*" `x)
           "-"
           («term_/_» («term_^_» `x "^" (numLit "3")) "/" (numLit "3"))))
         "/"
         (numLit "2"))]))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `Complex.sin)
             ","
             (Tactic.simpLemma [] [] `sub_div)
             ","
             (Tactic.simpLemma [] [] `add_div)
             ","
             (Tactic.simpLemma [] [] `neg_div)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app
               `mul_div_cancel_left
               [(Term.hole "_")
                (Term.app
                 (Term.explicit "@" `two_ne_zero')
                 [(Data.Complex.Basic.termℂ "ℂ") (Term.hole "_") (Term.hole "_") (Term.hole "_")])]))
             ","
             (Tactic.simpLemma [] [] `div_div_eq_div_mul)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.show
               "show"
               («term_=_»
                (Finset.Data.Finset.Fold.«term_*_»
                 (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (Data.Complex.Basic.termℂ "ℂ"))]] ")")
                 "*"
                 (numLit "2"))
                "="
                (numLit "6"))
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))))]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Term.app
       `abs
       [(«term_/_»
         (Finset.Data.Finset.Fold.«term_*_»
          («term_-_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
           "-"
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))))
          "*"
          `I)
         "/"
         (numLit "2"))]))
     ":="
     (Term.app
      `congr_argₓ
      [`abs
       (Term.app
        `congr_argₓ
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`x] [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))])]
           "=>"
           («term_/_» `x "/" (numLit "2"))))
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.simp "simp" [] ["only"] ["[" [(Tactic.simpLemma [] [] `sum_range_succ)] "]"] []) [])
             (group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `pow_succₓ)] "]"] []) [])
             (group
              (Tactic.«tactic_<;>_»
               (Tactic.apply "apply" `Complex.ext)
               "<;>"
               (Tactic.«tactic_<;>_»
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `div_eq_mul_inv) "," (Tactic.simpLemma [] [] `norm_sq)] "]"]
                 [])
                "<;>"
                (Tactic.Ring.tacticRing "ring")))
              [])])))])]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Init.Logic.«term_+_»
       (Term.app
        `abs
        [(«term_/_»
          (Finset.Data.Finset.Fold.«term_*_»
           («term_-_»
            (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
            "-"
            (Algebra.BigOperators.Basic.«term∑_in_,_»
             "∑"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
             " in "
             (Term.app `range [(numLit "4")])
             ", "
             («term_/_»
              («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
              "/"
              (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
           "*"
           `I)
          "/"
          (numLit "2"))])
       "+"
       (Term.app
        `abs
        [(«term_/_»
          («term-_»
           "-"
           (Finset.Data.Finset.Fold.«term_*_»
            («term_-_»
             (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
             "-"
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
              " in "
              (Term.app `range [(numLit "4")])
              ", "
              («term_/_»
               («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
               "/"
               (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
            "*"
            `I))
          "/"
          (numLit "2"))])))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `sub_mul) "," (Tactic.rwRule [] `sub_eq_add_neg) "," (Tactic.rwRule [] `add_div)]
             "]")
            [])
           "<;>"
           (Tactic.exact "exact" (Term.app `abs_add [(Term.hole "_") (Term.hole "_")])))
          [])]))))
    (calcStep
     («term_=_»
      (Term.hole "_")
      "="
      (Init.Logic.«term_+_»
       («term_/_»
        (Term.app
         `abs
         [(«term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
        "/"
        (numLit "2"))
       "+"
       («term_/_»
        (Term.app
         `abs
         [(«term_-_»
           (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
           "-"
           (Algebra.BigOperators.Basic.«term∑_in_,_»
            "∑"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
            " in "
            (Term.app `range [(numLit "4")])
            ", "
            («term_/_»
             («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
             "/"
             (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
        "/"
        (numLit "2"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.simp
           "simp"
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `add_commₓ)
             ","
             (Tactic.simpLemma [] [] `Complex.abs_div)
             ","
             (Tactic.simpLemma [] [] `Complex.abs_mul)]
            "]"]
           [])
          [])]))))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Init.Logic.«term_+_»
       («term_/_»
        (Finset.Data.Finset.Fold.«term_*_»
         («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
         "*"
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `Nat.succ [(numLit "4")])
          "*"
          (Init.Logic.«term_⁻¹»
           (Finset.Data.Finset.Fold.«term_*_»
            (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
            "*"
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
           "⁻¹")))
        "/"
        (numLit "2"))
       "+"
       («term_/_»
        (Finset.Data.Finset.Fold.«term_*_»
         («term_^_»
          (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
          "^"
          (numLit "4"))
         "*"
         (Finset.Data.Finset.Fold.«term_*_»
          (Term.app `Nat.succ [(numLit "4")])
          "*"
          (Init.Logic.«term_⁻¹»
           (Finset.Data.Finset.Fold.«term_*_»
            (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
            "*"
            (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
           "⁻¹")))
        "/"
        (numLit "2"))))
     ":="
     (Term.app
      `add_le_add
      [(Term.app
        (Term.proj
         (Term.app
          `div_le_div_right
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
         "."
         (fieldIdx "2"))
        [(Term.app
          `Complex.exp_bound
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
           (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
       (Term.app
        (Term.proj
         (Term.app
          `div_le_div_right
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
         "."
         (fieldIdx "2"))
        [(Term.app
          `Complex.exp_bound
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])]))
    (calcStep
     («term_≤_»
      (Term.hole "_")
      "≤"
      (Finset.Data.Finset.Fold.«term_*_»
       («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
       "*"
       («term_/_» (numLit "5") "/" (numLit "96"))))
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.«tactic_<;>_»
           (Lean.Tactic.normNum "norm_num" [] [])
           "<;>"
           (Tactic.simp
            "simp"
            []
            []
            ["["
             [(Tactic.simpLemma [] [] `mul_assocₓ)
              ","
              (Tactic.simpLemma [] [] `mul_commₓ)
              ","
              (Tactic.simpLemma [] [] `mul_left_commₓ)
              ","
              (Tactic.simpLemma [] [] `mul_div_assoc)]
             "]"]
            []))
          [])]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Lean.Tactic.normNum "norm_num" [] [])
        "<;>"
        (Tactic.simp
         "simp"
         []
         []
         ["["
          [(Tactic.simpLemma [] [] `mul_assocₓ)
           ","
           (Tactic.simpLemma [] [] `mul_commₓ)
           ","
           (Tactic.simpLemma [] [] `mul_left_commₓ)
           ","
           (Tactic.simpLemma [] [] `mul_div_assoc)]
          "]"]
         []))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Lean.Tactic.normNum "norm_num" [] [])
   "<;>"
   (Tactic.simp
    "simp"
    []
    []
    ["["
     [(Tactic.simpLemma [] [] `mul_assocₓ)
      ","
      (Tactic.simpLemma [] [] `mul_commₓ)
      ","
      (Tactic.simpLemma [] [] `mul_left_commₓ)
      ","
      (Tactic.simpLemma [] [] `mul_div_assoc)]
     "]"]
    []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `mul_assocₓ)
     ","
     (Tactic.simpLemma [] [] `mul_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_left_commₓ)
     ","
     (Tactic.simpLemma [] [] `mul_div_assoc)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_assoc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_left_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
    "*"
    («term_/_» (numLit "5") "/" (numLit "96"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
   "*"
   («term_/_» (numLit "5") "/" (numLit "96")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (numLit "5") "/" (numLit "96"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "96")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "5")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Algebra.Abs.«term|_|» "|" `x "|")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Abs.«term|_|»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_» (Algebra.Abs.«term|_|» "|" `x "|") "^" (numLit "4")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `add_le_add
   [(Term.app
     (Term.proj
      (Term.app
       `div_le_div_right
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
      "."
      (fieldIdx "2"))
     [(Term.app
       `Complex.exp_bound
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
        (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
    (Term.app
     (Term.proj
      (Term.app
       `div_le_div_right
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
      "."
      (fieldIdx "2"))
     [(Term.app
       `Complex.exp_bound
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
        (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    (Term.app
     `div_le_div_right
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    "."
    (fieldIdx "2"))
   [(Term.app
     `Complex.exp_bound
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Complex.exp_bound
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Complex.exp_bound
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      []]
     ")")
    (Term.paren
     "("
     [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    `div_le_div_right
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `div_le_div_right
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_le_div_right
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       `div_le_div_right
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")])
      []]
     ")")
    "."
    (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app
       `Complex.exp_bound
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
          []]
         ")")
        (Term.paren
         "("
         [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     `div_le_div_right
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
    "."
    (fieldIdx "2"))
   [(Term.app
     `Complex.exp_bound
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Complex.exp_bound
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
    (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.decide "decide")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.decide', expected 'Lean.Parser.Tactic.decide.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.exp_bound
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `Complex.exp_bound
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
      []]
     ")")
    (Term.paren
     "("
     [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    `div_le_div_right
    [(Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
   "."
   (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `div_le_div_right
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `div_le_div_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `div_le_div_right
   [(Term.paren
     "("
     [(Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       `div_le_div_right
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Lean.Tactic.normNum "norm_num" [] []) [])])))
          []]
         ")")])
      []]
     ")")
    "."
    (fieldIdx "2"))
   [(Term.paren
     "("
     [(Term.app
       `Complex.exp_bound
       [(Term.paren
         "("
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
          []]
         ")")
        (Term.paren
         "("
         [(Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.decide "decide") [])]))) []]
         ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.hole "_")
   "≤"
   (Init.Logic.«term_+_»
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_»
         (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
         "*"
         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
        "⁻¹")))
     "/"
     (numLit "2"))
    "+"
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_»
       (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
       "^"
       (numLit "4"))
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Finset.Data.Finset.Fold.«term_*_»
         (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
         "*"
         (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
        "⁻¹")))
     "/"
     (numLit "2"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   («term_/_»
    (Finset.Data.Finset.Fold.«term_*_»
     («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
     "*"
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.app `Nat.succ [(numLit "4")])
      "*"
      (Init.Logic.«term_⁻¹»
       (Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       "⁻¹")))
    "/"
    (numLit "2"))
   "+"
   («term_/_»
    (Finset.Data.Finset.Fold.«term_*_»
     («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
     "*"
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.app `Nat.succ [(numLit "4")])
      "*"
      (Init.Logic.«term_⁻¹»
       (Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       "⁻¹")))
    "/"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "4")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
       "*"
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹")))
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
      "*"
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "4")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
     "*"
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
    "*"
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)]) "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term-_» "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term-_» "-" `x) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_»
   (Term.app
    `Complex.abs
    [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []] ")")])
   "^"
   (numLit "4"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.paren
    "("
    [(«term_^_»
      (Term.app
       `Complex.abs
       [(Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
         ")")])
      "^"
      (numLit "4"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Term.paren
      "("
      [(Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       []]
      ")")
     "⁻¹")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_/_»
   (Finset.Data.Finset.Fold.«term_*_»
    («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
    "*"
    (Finset.Data.Finset.Fold.«term_*_»
     (Term.app `Nat.succ [(numLit "4")])
     "*"
     (Init.Logic.«term_⁻¹»
      (Finset.Data.Finset.Fold.«term_*_»
       (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
       "*"
       (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
      "⁻¹")))
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_»
   («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Finset.Data.Finset.Fold.«term_*_»
      (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
      "*"
      (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
     "⁻¹")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_»
   (Term.app `Nat.succ [(numLit "4")])
   "*"
   (Init.Logic.«term_⁻¹»
    (Finset.Data.Finset.Fold.«term_*_»
     (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
     "*"
     (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
    "⁻¹"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_⁻¹»
   (Finset.Data.Finset.Fold.«term_*_»
    (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
    "*"
    (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
   "⁻¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_⁻¹»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (termℕ "ℕ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℕ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10000, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
   "*"
   (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.app `Nat.succ [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Nat.succ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)]) "^" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.app `Complex.abs [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Finset.Data.Finset.Fold.«term_*_» `x "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Complex.abs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_^_»
   (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
   "^"
   (numLit "4"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_»
   (Term.paren
    "("
    [(«term_^_»
      (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
      "^"
      (numLit "4"))
     []]
    ")")
   "*"
   (Finset.Data.Finset.Fold.«term_*_»
    (Term.app `Nat.succ [(numLit "4")])
    "*"
    (Init.Logic.«term_⁻¹»
     (Term.paren
      "("
      [(Finset.Data.Finset.Fold.«term_*_»
        (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
        "*"
        (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
       []]
      ")")
     "⁻¹")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.«term_*_»
      (Term.paren
       "("
       [(«term_^_»
         (Term.app `Complex.abs [(Term.paren "(" [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I) []] ")")])
         "^"
         (numLit "4"))
        []]
       ")")
      "*"
      (Finset.Data.Finset.Fold.«term_*_»
       (Term.app `Nat.succ [(numLit "4")])
       "*"
       (Init.Logic.«term_⁻¹»
        (Term.paren
         "("
         [(Finset.Data.Finset.Fold.«term_*_»
           (Nat.Data.Nat.Factorial.Basic.term_! (numLit "4") "!")
           "*"
           (Term.paren "(" [(numLit "4") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))
          []]
         ")")
        "⁻¹")))
     []]
    ")")
   "/"
   (numLit "2"))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        []
        ["["
         [(Tactic.simpLemma [] [] `add_commₓ)
          ","
          (Tactic.simpLemma [] [] `Complex.abs_div)
          ","
          (Tactic.simpLemma [] [] `Complex.abs_mul)]
         "]"]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp
   "simp"
   []
   []
   ["["
    [(Tactic.simpLemma [] [] `add_commₓ)
     ","
     (Tactic.simpLemma [] [] `Complex.abs_div)
     ","
     (Tactic.simpLemma [] [] `Complex.abs_mul)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Complex.abs_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Complex.abs_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.hole "_")
   "="
   (Init.Logic.«term_+_»
    («term_/_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [(numLit "4")])
         ", "
         («term_/_»
          («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
          "/"
          (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "/"
     (numLit "2"))
    "+"
    («term_/_»
     (Term.app
      `abs
      [(«term_-_»
        (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
        "-"
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
         " in "
         (Term.app `range [(numLit "4")])
         ", "
         («term_/_»
          («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
          "/"
          (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
     "/"
     (numLit "2"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Logic.«term_+_»
   («term_/_»
    (Term.app
     `abs
     [(«term_-_»
       (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» `x "*" `I)])
       "-"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(numLit "4")])
        ", "
        («term_/_»
         («term_^_» (Finset.Data.Finset.Fold.«term_*_» `x "*" `I) "^" `m)
         "/"
         (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
    "/"
    (numLit "2"))
   "+"
   («term_/_»
    (Term.app
     `abs
     [(«term_-_»
       (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
       "-"
       (Algebra.BigOperators.Basic.«term∑_in_,_»
        "∑"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
        " in "
        (Term.app `range [(numLit "4")])
        ", "
        («term_/_»
         («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
         "/"
         (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
    "/"
    (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   (Term.app
    `abs
    [(«term_-_»
      (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
      "-"
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
       " in "
       (Term.app `range [(numLit "4")])
       ", "
       («term_/_»
        («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
        "/"
        (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
   "/"
   (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Term.app
   `abs
   [(«term_-_»
     (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
     "-"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
      " in "
      (Term.app `range [(numLit "4")])
      ", "
      («term_/_»
       («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
       "/"
       (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_»
   (Term.app `Complex.exp [(Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)])
   "-"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
    " in "
    (Term.app `range [(numLit "4")])
    ", "
    («term_/_»
     («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
     "/"
     (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `m)] []))
   " in "
   (Term.app `range [(numLit "4")])
   ", "
   («term_/_»
    («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
    "/"
    (Nat.Data.Nat.Factorial.Basic.term_! `m "!")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_»
   («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
   "/"
   (Nat.Data.Nat.Factorial.Basic.term_! `m "!"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Nat.Data.Nat.Factorial.Basic.term_! `m "!")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Nat.Data.Nat.Factorial.Basic.term_!', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10000, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10000, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 10000, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I) "^" `m)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Finset.Data.Finset.Fold.«term_*_» («term-_» "-" `x) "*" `I)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term-_» "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 100, (some 100, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term-_» "-" `x) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 0, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term-_» "-" `x) []] ")") "*" `I) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [(numLit "4")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  sin_bound
  { x : ℝ } ( hx : | x | ≤ 1 ) : | sin x - x - x ^ 3 / 6 | ≤ | x | ^ 4 * 5 / 96
  :=
    calc
      | sin x - x - x ^ 3 / 6 | = abs Complex.sin x - x - x ^ 3 / 6
          :=
          by rw [ ← abs_of_real ] <;> simp [ of_real_bit0 , of_real_one , of_real_inv ]
        _ = abs Complex.exp - x * I - Complex.exp x * I * I - 2 * x - x ^ 3 / 3 / 2
          :=
          by
            simp
              [
                Complex.sin
                  ,
                  sub_div
                  ,
                  add_div
                  ,
                  neg_div
                  ,
                  mul_div_cancel_left _ @ two_ne_zero' ℂ _ _ _
                  ,
                  div_div_eq_div_mul
                  ,
                  show ( 3 : ℂ ) * 2 = 6 by norm_num
                ]
        _
            =
            abs
              Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m !
                    -
                    Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m !
                  *
                  I
                /
                2
          :=
          congr_argₓ
            abs
              congr_argₓ
                fun x : ℂ => x / 2
                  by
                    simp only [ sum_range_succ ]
                      simp [ pow_succₓ ]
                      apply Complex.ext <;> simp [ div_eq_mul_inv , norm_sq ] <;> ring
        _
            ≤
            abs Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m ! * I / 2
              +
              abs - Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m ! * I / 2
          :=
          by rw [ sub_mul , sub_eq_add_neg , add_div ] <;> exact abs_add _ _
        _
            =
            abs Complex.exp x * I - ∑ m in range 4 , x * I ^ m / m ! / 2
              +
              abs Complex.exp - x * I - ∑ m in range 4 , - x * I ^ m / m ! / 2
          :=
          by simp [ add_commₓ , Complex.abs_div , Complex.abs_mul ]
        _
            ≤
            Complex.abs x * I ^ 4 * Nat.succ 4 * 4 ! * ( 4 : ℕ ) ⁻¹ / 2
              +
              Complex.abs - x * I ^ 4 * Nat.succ 4 * 4 ! * ( 4 : ℕ ) ⁻¹ / 2
          :=
          add_le_add
            div_le_div_right by norm_num . 2 Complex.exp_bound by simpa by decide
              div_le_div_right by norm_num . 2 Complex.exp_bound by simpa by decide
        _ ≤ | x | ^ 4 * 5 / 96 := by norm_num <;> simp [ mul_assocₓ , mul_commₓ , mul_left_commₓ , mul_div_assoc ]

theorem cos_pos_of_le_one {x : ℝ} (hx : |x| ≤ 1) : 0 < cos x :=
  calc 0 < 1 - x ^ 2 / 2 - (|x| ^ 4)*5 / 96 :=
    sub_pos.2 $
      lt_sub_iff_add_lt.2
        (calc (((|x| ^ 4)*5 / 96)+x ^ 2 / 2) ≤ (1*5 / 96)+1 / 2 :=
          add_le_add
            (mul_le_mul_of_nonneg_right (pow_le_one _ (abs_nonneg _) hx)
              (by
                norm_num))
            ((div_le_div_right
                  (by
                    norm_num)).2
              (by
                rw [sq, ← abs_mul_self, _root_.abs_mul] <;> exact mul_le_one hx (abs_nonneg _) hx))
          _ < 1 := by
          norm_num
          )
    _ ≤ cos x := sub_le.1 (abs_sub_le_iff.1 (cos_bound hx)).2
    

theorem sin_pos_of_pos_of_le_one {x : ℝ} (hx0 : 0 < x) (hx : x ≤ 1) : 0 < sin x :=
  calc 0 < x - x ^ 3 / 6 - (|x| ^ 4)*5 / 96 :=
    sub_pos.2 $
      lt_sub_iff_add_lt.2
        (calc (((|x| ^ 4)*5 / 96)+x ^ 3 / 6) ≤ (x*5 / 96)+x / 6 :=
          add_le_add
            (mul_le_mul_of_nonneg_right
              (calc |x| ^ 4 ≤ |x| ^ 1 :=
                pow_le_pow_of_le_one (abs_nonneg _)
                  (by
                    rwa [_root_.abs_of_nonneg (le_of_ltₓ hx0)])
                  (by
                    decide)
                _ = x := by
                simp [_root_.abs_of_nonneg (le_of_ltₓ hx0)]
                )
              (by
                norm_num))
            ((div_le_div_right
                  (by
                    norm_num)).2
              (calc x ^ 3 ≤ x ^ 1 :=
                pow_le_pow_of_le_one (le_of_ltₓ hx0) hx
                  (by
                    decide)
                _ = x := pow_oneₓ _
                ))
          _ < x := by
          linarith
          )
    _ ≤ sin x :=
    sub_le.1
      (abs_sub_le_iff.1
          (sin_bound
            (by
              rwa [_root_.abs_of_nonneg (le_of_ltₓ hx0)]))).2
    

theorem sin_pos_of_pos_of_le_two {x : ℝ} (hx0 : 0 < x) (hx : x ≤ 2) : 0 < sin x :=
  have : x / 2 ≤ 1 :=
    (div_le_iff
          (by
            norm_num)).mpr
      (by
        simpa)
  calc 0 < (2*sin (x / 2))*cos (x / 2) :=
    mul_pos
      (mul_pos
        (by
          norm_num)
        (sin_pos_of_pos_of_le_one (half_pos hx0) this))
      (cos_pos_of_le_one
        (by
          rwa [_root_.abs_of_nonneg (le_of_ltₓ (half_pos hx0))]))
    _ = sin x := by
    rw [← sin_two_mul, two_mul, add_halves]
    

theorem cos_one_le : cos 1 ≤ 2 / 3 :=
  calc cos 1 ≤ ((|(1 : ℝ)| ^ 4)*5 / 96)+1 - 1 ^ 2 / 2 :=
    sub_le_iff_le_add.1
      (abs_sub_le_iff.1
          (cos_bound
            (by
              simp ))).1
    _ ≤ 2 / 3 := by
    norm_num
    

theorem cos_one_pos : 0 < cos 1 :=
  cos_pos_of_le_one (le_of_eqₓ abs_one)

theorem cos_two_neg : cos 2 < 0 :=
  calc cos 2 = cos (2*1) := congr_argₓ cos (mul_oneₓ _).symm
    _ = _ := Real.cos_two_mul 1
    _ ≤ (2*(2 / 3) ^ 2) - 1 :=
    sub_le_sub_right
      (mul_le_mul_of_nonneg_left
        (by
          rw [sq, sq]
          exact mul_self_le_mul_self (le_of_ltₓ cos_one_pos) cos_one_le)
        zero_le_two)
      _
    _ < 0 := by
    norm_num
    

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound_div_one_sub_of_interval_approx [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`h1] [":" («term_≤_» (numLit "0") "≤" `x)] [] ")")
    (Term.explicitBinder "(" [`h2] [":" («term_≤_» `x "≤" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_»
     (Init.Logic.«term_+_»
      (Algebra.BigOperators.Basic.«term∑_in_,_»
       "∑"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] [":" (termℕ "ℕ")]))
       " in "
       (Term.app `Finset.range [(numLit "3")])
       ", "
       («term_/_» («term_^_» `x "^" `j) "/" `j.factorial))
      "+"
      («term_/_»
       (Finset.Data.Finset.Fold.«term_*_»
        («term_^_» `x "^" (numLit "3"))
        "*"
        (Init.Logic.«term_+_»
         (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
         "+"
         (numLit "1")))
       "/"
       (Finset.Data.Finset.Fold.«term_*_»
        (Term.proj (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")") "." `factorial)
        "*"
        (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))))
     "≤"
     (Algebra.BigOperators.Basic.«term∑_in_,_»
      "∑"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
      " in "
      (Term.app `Finset.range [(numLit "3")])
      ", "
      («term_^_» `x "^" `j)))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `add_assocₓ)
           ","
           (Tactic.rwRule
            []
            (Term.app
             `add_commₓ
             [(Init.Logic.«term_+_» `x "+" (numLit "1"))
              («term_/_»
               (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4"))
               "/"
               (numLit "18"))]))
           ","
           (Tactic.rwRule ["←"] `add_assocₓ)
           ","
           (Tactic.rwRule [] `add_le_add_iff_right)
           ","
           (Tactic.rwRule
            ["←"]
            (Term.app
             `add_le_add_iff_left
             [(«term-_» "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")))]))
           ","
           (Tactic.rwRule ["←"] `add_assocₓ)
           ","
           (Tactic.rwRule
            []
            (Term.app `CommRingₓ.add_left_neg [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))]))
           ","
           (Tactic.rwRule [] `zero_addₓ)
           ","
           (Tactic.rwRule [] `neg_add_eq_sub)
           ","
           (Tactic.rwRule [] `sub_half)
           ","
           (Tactic.rwRule [] `sq)
           ","
           (Tactic.rwRule [] `pow_succₓ)
           ","
           (Tactic.rwRule [] `sq)]
          "]")
         [])
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`i1 []]
           [(Term.typeSpec
             ":"
             («term_≤_»
              («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
              "≤"
              («term_/_» (numLit "1") "/" (numLit "2"))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`i2 []]
           [(Term.typeSpec
             ":"
             («term_≤_»
              (numLit "0")
              "≤"
              («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl (Term.haveIdDecl [`i3 []] [] ":=" (Term.app `mul_le_mul [`h1 `h1 `le_rfl `h1]))))
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_mul)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`i3] []))])
        [])
       (group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl (Term.haveIdDecl [`t []] [] ":=" (Term.app `mul_le_mul [`le_rfl `i1 `i2 `i3]))))
        [])
       (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_assocₓ)] "]") []) [])
       (group
        (tacticRwa__
         "rwa"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `mul_one_div)
           ","
           (Tactic.rwRule ["←"] `mul_div_assoc)
           ","
           (Tactic.rwRule ["←"] `mul_assocₓ)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`t] []))])
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `add_assocₓ)
          ","
          (Tactic.rwRule
           []
           (Term.app
            `add_commₓ
            [(Init.Logic.«term_+_» `x "+" (numLit "1"))
             («term_/_»
              (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4"))
              "/"
              (numLit "18"))]))
          ","
          (Tactic.rwRule ["←"] `add_assocₓ)
          ","
          (Tactic.rwRule [] `add_le_add_iff_right)
          ","
          (Tactic.rwRule
           ["←"]
           (Term.app
            `add_le_add_iff_left
            [(«term-_» "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")))]))
          ","
          (Tactic.rwRule ["←"] `add_assocₓ)
          ","
          (Tactic.rwRule
           []
           (Term.app `CommRingₓ.add_left_neg [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))]))
          ","
          (Tactic.rwRule [] `zero_addₓ)
          ","
          (Tactic.rwRule [] `neg_add_eq_sub)
          ","
          (Tactic.rwRule [] `sub_half)
          ","
          (Tactic.rwRule [] `sq)
          ","
          (Tactic.rwRule [] `pow_succₓ)
          ","
          (Tactic.rwRule [] `sq)]
         "]")
        [])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`i1 []]
          [(Term.typeSpec
            ":"
            («term_≤_»
             («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
             "≤"
             («term_/_» (numLit "1") "/" (numLit "2"))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`i2 []]
          [(Term.typeSpec
            ":"
            («term_≤_»
             (numLit "0")
             "≤"
             («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl (Term.haveIdDecl [`i3 []] [] ":=" (Term.app `mul_le_mul [`h1 `h1 `le_rfl `h1]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_mul)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`i3] []))])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl (Term.haveIdDecl [`t []] [] ":=" (Term.app `mul_le_mul [`le_rfl `i1 `i2 `i3]))))
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_assocₓ)] "]") []) [])
      (group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `mul_one_div)
          ","
          (Tactic.rwRule ["←"] `mul_div_assoc)
          ","
          (Tactic.rwRule ["←"] `mul_assocₓ)]
         "]")
        [(Tactic.location "at" (Tactic.locationHyp [`t] []))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `mul_one_div) "," (Tactic.rwRule ["←"] `mul_div_assoc) "," (Tactic.rwRule ["←"] `mul_assocₓ)]
    "]")
   [(Tactic.location "at" (Tactic.locationHyp [`t] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_div_assoc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_one_div
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `mul_assocₓ)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl (Term.haveIdDecl [`t []] [] ":=" (Term.app `mul_le_mul [`le_rfl `i1 `i2 `i3]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul [`le_rfl `i1 `i2 `i3])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i3
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i2
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `le_rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_mul)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`i3] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `i3
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl (Term.haveIdDecl [`i3 []] [] ":=" (Term.app `mul_le_mul [`h1 `h1 `le_rfl `h1]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mul_le_mul [`h1 `h1 `le_rfl `h1])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `le_rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mul_le_mul
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`i2 []]
     [(Term.typeSpec
       ":"
       («term_≤_»
        (numLit "0")
        "≤"
        («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (numLit "0") "≤" («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "18")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`i1 []]
     [(Term.typeSpec
       ":"
       («term_≤_»
        («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
        "≤"
        («term_/_» (numLit "1") "/" (numLit "2"))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
   "≤"
   («term_/_» (numLit "1") "/" (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (numLit "1") "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  («term_/_» (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) "/" (numLit "18"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "18")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» `x "*" (numLit "4")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `add_assocₓ)
     ","
     (Tactic.rwRule
      []
      (Term.app
       `add_commₓ
       [(Init.Logic.«term_+_» `x "+" (numLit "1"))
        («term_/_»
         (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4"))
         "/"
         (numLit "18"))]))
     ","
     (Tactic.rwRule ["←"] `add_assocₓ)
     ","
     (Tactic.rwRule [] `add_le_add_iff_right)
     ","
     (Tactic.rwRule
      ["←"]
      (Term.app `add_le_add_iff_left [(«term-_» "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")))]))
     ","
     (Tactic.rwRule ["←"] `add_assocₓ)
     ","
     (Tactic.rwRule
      []
      (Term.app `CommRingₓ.add_left_neg [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))]))
     ","
     (Tactic.rwRule [] `zero_addₓ)
     ","
     (Tactic.rwRule [] `neg_add_eq_sub)
     ","
     (Tactic.rwRule [] `sub_half)
     ","
     (Tactic.rwRule [] `sq)
     ","
     (Tactic.rwRule [] `pow_succₓ)
     ","
     (Tactic.rwRule [] `sq)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `pow_succₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_half
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `neg_add_eq_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `zero_addₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `CommRingₓ.add_left_neg [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CommRingₓ.add_left_neg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `add_le_add_iff_left [(«term-_» "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term-_» "-" («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  («term_^_» `x "^" (numLit "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 100 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 100, (some 100, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term-_» "-" (Term.paren "(" [(«term_/_» («term_^_» `x "^" (numLit "2")) "/" (numLit "2")) []] ")")) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_le_add_iff_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_le_add_iff_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `add_commₓ
   [(Init.Logic.«term_+_» `x "+" (numLit "1"))
    («term_/_» (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4")) "/" (numLit "18"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4")) "/" (numLit "18"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "18")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Finset.Data.Finset.Fold.«term_*_» («term_^_» `x "^" (numLit "3")) "*" (numLit "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Finset.Data.Finset.Fold.«term_*_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "4")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_^_» `x "^" (numLit "3"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "3")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_^_» `x "^" (numLit "3")) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term_^_» `x "^" (numLit "3")) []] ")") "*" (numLit "4")) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_/_»
   (Term.paren
    "("
    [(Finset.Data.Finset.Fold.«term_*_» (Term.paren "(" [(«term_^_» `x "^" (numLit "3")) []] ")") "*" (numLit "4")) []]
    ")")
   "/"
   (numLit "18"))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Logic.«term_+_» `x "+" (numLit "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Logic.«term_+_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Init.Logic.«term_+_» `x "+" (numLit "1")) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `add_commₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Finset.sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declSig', expected 'Lean.Parser.Command.declSig.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  («term_≤_»
   (Init.Logic.«term_+_»
    (Algebra.BigOperators.Basic.«term∑_in_,_»
     "∑"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] [":" (termℕ "ℕ")]))
     " in "
     (Term.app `Finset.range [(numLit "3")])
     ", "
     («term_/_» («term_^_» `x "^" `j) "/" `j.factorial))
    "+"
    («term_/_»
     (Finset.Data.Finset.Fold.«term_*_»
      («term_^_» `x "^" (numLit "3"))
      "*"
      (Init.Logic.«term_+_»
       (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")")
       "+"
       (numLit "1")))
     "/"
     (Finset.Data.Finset.Fold.«term_*_»
      (Term.proj (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")") "." `factorial)
      "*"
      (Term.paren "(" [(numLit "3") [(Term.typeAscription ":" (termℕ "ℕ"))]] ")"))))
   "≤"
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
    " in "
    (Term.app `Finset.range [(numLit "3")])
    ", "
    («term_^_» `x "^" `j)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
   " in "
   (Term.app `Finset.range [(numLit "3")])
   ", "
   («term_^_» `x "^" `j))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» `x "^" `j)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Finset.range [(numLit "3")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "3")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound_div_one_sub_of_interval_approx
  { x : ℝ } ( h1 : 0 ≤ x ) ( h2 : x ≤ 1 )
    :
      ∑ j : ℕ in Finset.range 3 , x ^ j / j.factorial + x ^ 3 * ( 3 : ℕ ) + 1 / ( 3 : ℕ ) . factorial * ( 3 : ℕ )
        ≤
        ∑ j in Finset.range 3 , x ^ j
  :=
    by
      norm_num [ Finset.sum ]
        rw
          [
            add_assocₓ
              ,
              add_commₓ x + 1 x ^ 3 * 4 / 18
              ,
              ← add_assocₓ
              ,
              add_le_add_iff_right
              ,
              ← add_le_add_iff_left - x ^ 2 / 2
              ,
              ← add_assocₓ
              ,
              CommRingₓ.add_left_neg x ^ 2 / 2
              ,
              zero_addₓ
              ,
              neg_add_eq_sub
              ,
              sub_half
              ,
              sq
              ,
              pow_succₓ
              ,
              sq
            ]
        have i1 : x * 4 / 18 ≤ 1 / 2 := by linarith
        have i2 : 0 ≤ x * 4 / 18 := by linarith
        have i3 := mul_le_mul h1 h1 le_rfl h1
        rw [ zero_mul ] at i3
        have t := mul_le_mul le_rfl i1 i2 i3
        rw [ ← mul_assocₓ ]
        rwa [ mul_one_div , ← mul_div_assoc , ← mul_assocₓ ] at t

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `exp_bound_div_one_sub_of_interval [])
  (Command.declSig
   [(Term.implicitBinder "{" [`x] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
    (Term.explicitBinder "(" [`h1] [":" («term_≤_» (numLit "0") "≤" `x)] [] ")")
    (Term.explicitBinder "(" [`h2] [":" («term_<_» `x "<" (numLit "1"))] [] ")")]
   (Term.typeSpec
    ":"
    («term_≤_» (Term.app `Real.exp [`x]) "≤" («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x)))))
  (Command.declValSimple
   ":="
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h []]
           [(Term.typeSpec
             ":"
             («term_≤_»
              (Algebra.BigOperators.Basic.«term∑_in_,_»
               "∑"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
               " in "
               (Term.app `Finset.range [(numLit "3")])
               ", "
               («term_^_» `x "^" `j))
              "≤"
              («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
               (group
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h1x []]
                   [(Term.typeSpec ":" («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x)))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
                [])
               (group
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `le_div_iff [`h1x]))] "]") [])
                [])
               (group
                (Lean.Tactic.normNum
                 "norm_num"
                 ["["
                  [(Tactic.simpLemma [] ["←"] `add_assocₓ)
                   ","
                   (Tactic.simpLemma [] [] `mul_sub_left_distrib)
                   ","
                   (Tactic.simpLemma [] [] `mul_oneₓ)
                   ","
                   (Tactic.simpLemma [] [] `add_mulₓ)
                   ","
                   (Tactic.simpLemma [] [] `sub_add_eq_sub_sub)
                   ","
                   (Tactic.simpLemma [] [] (Term.app `pow_succ'ₓ [`x (numLit "2")]))]
                  "]"]
                 [])
                [])
               (group
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hx3 []]
                   [(Term.typeSpec ":" («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3"))))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])]))))))
                [])
               (group (Tactic.linarith "linarith" [] [] []) [])]))))))
        [])
       (group
        (Tactic.exact
         "exact"
         (Term.app
          (Term.proj
           («term_$__»
            (Term.app `exp_bound' [`h1 `h2.le])
            "$"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
           "."
           `trans)
          [(Term.app (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans) [`h])]))
        [])])))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h []]
          [(Term.typeSpec
            ":"
            («term_≤_»
             (Algebra.BigOperators.Basic.«term∑_in_,_»
              "∑"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
              " in "
              (Term.app `Finset.range [(numLit "3")])
              ", "
              («term_^_» `x "^" `j))
             "≤"
             («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h1x []]
                  [(Term.typeSpec ":" («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x)))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
               [])
              (group
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `le_div_iff [`h1x]))] "]") [])
               [])
              (group
               (Lean.Tactic.normNum
                "norm_num"
                ["["
                 [(Tactic.simpLemma [] ["←"] `add_assocₓ)
                  ","
                  (Tactic.simpLemma [] [] `mul_sub_left_distrib)
                  ","
                  (Tactic.simpLemma [] [] `mul_oneₓ)
                  ","
                  (Tactic.simpLemma [] [] `add_mulₓ)
                  ","
                  (Tactic.simpLemma [] [] `sub_add_eq_sub_sub)
                  ","
                  (Tactic.simpLemma [] [] (Term.app `pow_succ'ₓ [`x (numLit "2")]))]
                 "]"]
                [])
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hx3 []]
                  [(Term.typeSpec ":" («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])]))))))
               [])
              (group (Tactic.linarith "linarith" [] [] []) [])]))))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         (Term.proj
          («term_$__»
           (Term.app `exp_bound' [`h1 `h2.le])
           "$"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
          "."
          `trans)
         [(Term.app (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans) [`h])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app
    (Term.proj
     («term_$__»
      (Term.app `exp_bound' [`h1 `h2.le])
      "$"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
     "."
     `trans)
    [(Term.app (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans) [`h])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    («term_$__»
     (Term.app `exp_bound' [`h1 `h2.le])
     "$"
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
    "."
    `trans)
   [(Term.app (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans) [`h])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h2.le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp_bound_div_one_sub_of_interval_approx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.paren "(" [(Term.app `exp_bound_div_one_sub_of_interval_approx [`h1 `h2.le]) []] ")") "." `trans)
   [`h])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   («term_$__»
    (Term.app `exp_bound' [`h1 `h2.le])
    "$"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_$__»
   (Term.app `exp_bound' [`h1 `h2.le])
   "$"
   (Term.byTactic
    "by"
    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.app `exp_bound' [`h1 `h2.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h2.le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `exp_bound'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__»
   (Term.app `exp_bound' [`h1 `h2.le])
   "$"
   (Term.byTactic
    "by"
    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.linarith "linarith" [] [] []) [])]))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h []]
     [(Term.typeSpec
       ":"
       («term_≤_»
        (Algebra.BigOperators.Basic.«term∑_in_,_»
         "∑"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
         " in "
         (Term.app `Finset.range [(numLit "3")])
         ", "
         («term_^_» `x "^" `j))
        "≤"
        («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h1x []]
             [(Term.typeSpec ":" («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x)))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
          [])
         (group
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `le_div_iff [`h1x]))] "]") [])
          [])
         (group
          (Lean.Tactic.normNum
           "norm_num"
           ["["
            [(Tactic.simpLemma [] ["←"] `add_assocₓ)
             ","
             (Tactic.simpLemma [] [] `mul_sub_left_distrib)
             ","
             (Tactic.simpLemma [] [] `mul_oneₓ)
             ","
             (Tactic.simpLemma [] [] `add_mulₓ)
             ","
             (Tactic.simpLemma [] [] `sub_add_eq_sub_sub)
             ","
             (Tactic.simpLemma [] [] (Term.app `pow_succ'ₓ [`x (numLit "2")]))]
            "]"]
           [])
          [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hx3 []]
             [(Term.typeSpec ":" («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])]))))))
          [])
         (group (Tactic.linarith "linarith" [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] []) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h1x []]
          [(Term.typeSpec ":" («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x)))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `le_div_iff [`h1x]))] "]") []) [])
      (group
       (Lean.Tactic.normNum
        "norm_num"
        ["["
         [(Tactic.simpLemma [] ["←"] `add_assocₓ)
          ","
          (Tactic.simpLemma [] [] `mul_sub_left_distrib)
          ","
          (Tactic.simpLemma [] [] `mul_oneₓ)
          ","
          (Tactic.simpLemma [] [] `add_mulₓ)
          ","
          (Tactic.simpLemma [] [] `sub_add_eq_sub_sub)
          ","
          (Tactic.simpLemma [] [] (Term.app `pow_succ'ₓ [`x (numLit "2")]))]
         "]"]
        [])
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hx3 []]
          [(Term.typeSpec ":" («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3"))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])]))))))
       [])
      (group (Tactic.linarith "linarith" [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.linarith "linarith" [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.linarith', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hx3 []]
     [(Term.typeSpec ":" («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3"))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Lean.Tactic.normNum "norm_num" [] []) []) (group (Tactic.exact "exact" `h1) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" `h1)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h1
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum "norm_num" [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (numLit "0") "≤" («term_^_» `x "^" (numLit "3")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» `x "^" (numLit "3"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "3")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum
   "norm_num"
   ["["
    [(Tactic.simpLemma [] ["←"] `add_assocₓ)
     ","
     (Tactic.simpLemma [] [] `mul_sub_left_distrib)
     ","
     (Tactic.simpLemma [] [] `mul_oneₓ)
     ","
     (Tactic.simpLemma [] [] `add_mulₓ)
     ","
     (Tactic.simpLemma [] [] `sub_add_eq_sub_sub)
     ","
     (Tactic.simpLemma [] [] (Term.app `pow_succ'ₓ [`x (numLit "2")]))]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `pow_succ'ₓ [`x (numLit "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "2")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `pow_succ'ₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `sub_add_eq_sub_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_mulₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_oneₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mul_sub_left_distrib
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `add_assocₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `le_div_iff [`h1x]))] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_div_iff [`h1x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h1x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_div_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h1x []]
     [(Term.typeSpec ":" («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x)))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.simpa "simpa" [] [] [] [] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] [] [] [] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_<_» (numLit "0") "<" («term_-_» (numLit "1") "-" `x))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» (numLit "1") "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (numLit "0")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Lean.Tactic.normNum "norm_num" ["[" [(Tactic.simpLemma [] [] `Finset.sum)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Tactic.normNum', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Finset.sum
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Algebra.BigOperators.Basic.«term∑_in_,_»
    "∑"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
    " in "
    (Term.app `Finset.range [(numLit "3")])
    ", "
    («term_^_» `x "^" `j))
   "≤"
   («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_/_» (numLit "1") "/" («term_-_» (numLit "1") "-" `x))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_-_» (numLit "1") "-" `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(«term_-_» (numLit "1") "-" `x) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (numLit "1")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Algebra.BigOperators.Basic.«term∑_in_,_»
   "∑"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `j)] []))
   " in "
   (Term.app `Finset.range [(numLit "3")])
   ", "
   («term_^_» `x "^" `j))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.BigOperators.Basic.«term∑_in_,_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_^_» `x "^" `j)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_^_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Finset.range [(numLit "3")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (numLit "3")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'numLit', expected 'numLit.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Finset.range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exp_bound_div_one_sub_of_interval
  { x : ℝ } ( h1 : 0 ≤ x ) ( h2 : x < 1 ) : Real.exp x ≤ 1 / 1 - x
  :=
    by
      have
          h
            : ∑ j in Finset.range 3 , x ^ j ≤ 1 / 1 - x
            :=
            by
              norm_num [ Finset.sum ]
                have h1x : 0 < 1 - x := by simpa
                rw [ le_div_iff h1x ]
                norm_num
                  [ ← add_assocₓ , mul_sub_left_distrib , mul_oneₓ , add_mulₓ , sub_add_eq_sub_sub , pow_succ'ₓ x 2 ]
                have hx3 : 0 ≤ x ^ 3 := by norm_num exact h1
                linarith
        exact exp_bound' h1 h2.le $ by linarith . trans exp_bound_div_one_sub_of_interval_approx h1 h2.le . trans h

theorem one_sub_le_exp_minus_of_pos {y : ℝ} (h : 0 ≤ y) : 1 - y ≤ Real.exp (-y) := by
  rw [Real.exp_neg]
  have r1 : ((1 - y)*Real.exp y) ≤ 1 := by
    cases le_or_ltₓ (1 - y) 0
    ·
      have h'' : ((1 - y)*y.exp) ≤ 0 := by
        rw [mul_nonpos_iff]
        right
        exact ⟨h_1, y.exp_pos.le⟩
      linarith
    have hy1 : y < 1 := by
      linarith
    rw [← le_div_iff' h_1]
    exact exp_bound_div_one_sub_of_interval h hy1
  rw [inv_eq_one_div]
  rw [le_div_iff' y.exp_pos]
  rwa [mul_commₓ] at r1

theorem add_one_le_exp_of_nonpos {x : ℝ} (h : x ≤ 0) : (x+1) ≤ Real.exp x := by
  rw [add_commₓ]
  have h1 : 0 ≤ -x := by
    linarith
  simpa using one_sub_le_exp_minus_of_pos h1

theorem add_one_le_exp (x : ℝ) : (x+1) ≤ Real.exp x := by
  cases le_or_ltₓ 0 x
  ·
    exact Real.add_one_le_exp_of_nonneg h
  exact add_one_le_exp_of_nonpos h.le

end Real

namespace Complex

@[simp]
theorem abs_cos_add_sin_mul_I (x : ℝ) : abs (cos x+sin x*I) = 1 :=
  have := Real.sin_sq_add_cos_sq x
  by
  simp_all [add_commₓ, abs, norm_sq, sq, sin_of_real_re, cos_of_real_re, mul_re]

@[simp]
theorem abs_exp_of_real (x : ℝ) : abs (exp x) = Real.exp x := by
  rw [← of_real_exp] <;> exact abs_of_nonneg (le_of_ltₓ (Real.exp_pos _))

@[simp]
theorem abs_exp_of_real_mul_I (x : ℝ) : abs (exp (x*I)) = 1 := by
  rw [exp_mul_I, abs_cos_add_sin_mul_I]

theorem abs_exp (z : ℂ) : abs (exp z) = Real.exp z.re := by
  rw [exp_eq_exp_re_mul_sin_add_cos, abs_mul, abs_exp_of_real, abs_cos_add_sin_mul_I, mul_oneₓ]

theorem abs_exp_eq_iff_re_eq {x y : ℂ} : abs (exp x) = abs (exp y) ↔ x.re = y.re := by
  rw [abs_exp, abs_exp, Real.exp_eq_exp]

end Complex

