import Mathbin.Data.Zmod.Basic 
import Mathbin.GroupTheory.QuotientGroup 
import Mathbin.RingTheory.Int.Basic

/-!
# `zmod n` and quotient groups / rings

This file relates `zmod n` to the quotient group
`quotient_add_group.quotient (add_subgroup.zmultiples n)` and to the quotient ring
`(ideal.span {n}).quotient`.

## Main definitions

 - `zmod.quotient_zmultiples_nat_equiv_zmod` and `zmod.quotient_zmultiples_equiv_zmod`:
   `zmod n` is the group quotient of `ℤ` by `n ℤ := add_subgroup.zmultiples (n)`,
   (where `n : ℕ` and `n : ℤ` respectively)
 - `zmod.quotient_span_nat_equiv_zmod` and `zmod.quotient_span_equiv_zmod`:
   `zmod n` is the ring quotient of `ℤ` by `n ℤ : ideal.span {n}`
   (where `n : ℕ` and `n : ℤ` respectively)
 - `zmod.lift n f` is the map from `zmod n` induced by `f : ℤ →+ A` that maps `n` to `0`.

## Tags

zmod, quotient group, quotient ring, ideal quotient
-/


open QuotientAddGroup

open Zmod

variable (n : ℕ) {A R : Type _} [AddGroupₓ A] [Ringₓ R]

namespace Int

/-- `ℤ` modulo multiples of `n : ℕ` is `zmod n`. -/
def quotient_zmultiples_nat_equiv_zmod : ℤ ⧸ AddSubgroup.zmultiples (n : ℤ) ≃+ Zmod n :=
  (equiv_quotient_of_eq (Zmod.ker_int_cast_add_hom _)).symm.trans$
    quotient_ker_equiv_of_right_inverse (Int.castAddHom (Zmod n)) coeₓ int_cast_zmod_cast

/-- `ℤ` modulo multiples of `a : ℤ` is `zmod a.nat_abs`. -/
def quotient_zmultiples_equiv_zmod (a : ℤ) : ℤ ⧸ AddSubgroup.zmultiples a ≃+ Zmod a.nat_abs :=
  (equiv_quotient_of_eq (zmultiples_nat_abs a)).symm.trans (quotient_zmultiples_nat_equiv_zmod a.nat_abs)

/-- `ℤ` modulo the ideal generated by `n : ℕ` is `zmod n`. -/
def quotient_span_nat_equiv_zmod : ℤ ⧸ Ideal.span {↑n} ≃+* Zmod n :=
  (Ideal.quotEquivOfEq (Zmod.ker_int_cast_ring_hom _)).symm.trans$
    RingHom.quotientKerEquivOfRightInverse$
      show Function.RightInverse coeₓ (Int.castRingHom (Zmod n)) from int_cast_zmod_cast

/-- `ℤ` modulo the ideal generated by `a : ℤ` is `zmod a.nat_abs`. -/
def quotient_span_equiv_zmod (a : ℤ) : ℤ ⧸ Ideal.span ({a} : Set ℤ) ≃+* Zmod a.nat_abs :=
  (Ideal.quotEquivOfEq (span_nat_abs a)).symm.trans (quotient_span_nat_equiv_zmod a.nat_abs)

end Int

