import Mathbin.Topology.FiberBundle
import Mathbin.Geometry.Manifold.SmoothManifoldWithCorners

/-!
# Basic smooth bundles

In general, a smooth bundle is a bundle over a smooth manifold, whose fiber is a manifold, and
for which the coordinate changes are smooth. In this definition, there are charts involved at
several places: in the manifold structure of the base, in the manifold structure of the fibers, and
in the local trivializations. This makes it a complicated object in general. There is however a
specific situation where things are much simpler: when the fiber is a vector space (no need for
charts for the fibers), and when the local trivializations of the bundle and the charts of the base
coincide. Then everything is expressed in terms of the charts of the base, making for a much
simpler overall structure, which is easier to manipulate formally.

Most vector bundles that naturally occur in differential geometry are of this form:
the tangent bundle, the cotangent bundle, differential forms (used to define de Rham cohomology)
and the bundle of Riemannian metrics. Therefore, it is worth defining a specific constructor for
this kind of bundle, that we call basic smooth bundles.

A basic smooth bundle is thus a smooth bundle over a smooth manifold whose fiber is a vector space,
and which is trivial in the coordinate charts of the base. (We recall that in our notion of manifold
there is a distinguished atlas, which does not need to be maximal: we require the triviality above
this specific atlas). It can be constructed from a basic smooth bundled core, defined below,
specifying the changes in the fiber when one goes from one coordinate chart to another one. We do
not require that this changes in fiber are linear, but only diffeomorphisms.

## Main definitions

* `basic_smooth_bundle_core I M F`: assuming that `M` is a smooth manifold over the model with
  corners `I` on `(ùïú, E, H)`, and `F` is a normed vector space over `ùïú`, this structure registers,
  for each pair of charts of `M`, a smooth change of coordinates on `F`. This is the core structure
  from which one will build a smooth bundle with fiber `F` over `M`.

Let `Z` be a basic smooth bundle core over `M` with fiber `F`. We define
`Z.to_topological_fiber_bundle_core`, the (topological) fiber bundle core associated to `Z`. From
it, we get a space `Z.to_topological_fiber_bundle_core.total_space` (which as a Type is just `Œ£ (x :
M), F`), with the fiber bundle topology. It inherits a manifold structure (where the charts are in
bijection with the charts of the basis). We show that this manifold is smooth.

Then we use this machinery to construct the tangent bundle of a smooth manifold.

* `tangent_bundle_core I M`: the basic smooth bundle core associated to a smooth manifold `M` over a
  model with corners `I`.
* `tangent_bundle I M`     : the total space of `tangent_bundle_core I M`. It is itself a
  smooth manifold over the model with corners `I.tangent`, the product of `I` and the trivial model
  with corners on `E`.
* `tangent_space I x`      : the tangent space to `M` at `x`
* `tangent_bundle.proj I M`: the projection from the tangent bundle to the base manifold

## Implementation notes

In the definition of a basic smooth bundle core, we do not require that the coordinate changes of
the fibers are linear map, only that they are diffeomorphisms. Therefore, the fibers of the
resulting fiber bundle do not inherit a vector space structure (as an algebraic object) in general.
As the fiber, as a type, is just `F`, one can still always register the vector space structure, but
it does not make sense to do so (i.e., it will not lead to any useful theorem) unless this structure
is canonical, i.e., the coordinate changes are linear maps.

For instance, we register the vector space structure on the fibers of the tangent bundle. However,
we do not register the normed space structure coming from that of `F` (as it is not canonical, and
we also want to keep the possibility to add a Riemannian structure on the manifold later on without
having two competing normed space instances on the tangent spaces).

We require `F` to be a normed space, and not just a topological vector space, as we want to talk
about smooth functions on `F`. The notion of derivative requires a norm to be defined.

## TODO
construct the cotangent bundle, and the bundles of differential forms. They should follow
functorially from the description of the tangent bundle as a basic smooth bundle.

## Tags
Smooth fiber bundle, vector bundle, tangent space, tangent bundle
-/


noncomputable section

universe u

open TopologicalSpace Set

open_locale Manifold TopologicalSpace

/--  Core structure used to create a smooth bundle above `M` (a manifold over the model with
corner `I`) with fiber the normed vector space `F` over `ùïú`, which is trivial in the chart domains
of `M`. This structure registers the changes in the fibers when one changes coordinate charts in the
base. We do not require the change of coordinates of the fibers to be linear, only smooth.
Therefore, the fibers of the resulting bundle will not inherit a canonical vector space structure
in general. -/
structure BasicSmoothBundleCore {ùïú : Type _} [NondiscreteNormedField ùïú] {E : Type _} [NormedGroup E] [NormedSpace ùïú E]
  {H : Type _} [TopologicalSpace H] (I : ModelWithCorners ùïú E H) (M : Type _) [TopologicalSpace M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M] (F : Type _) [NormedGroup F] [NormedSpace ùïú F] where
  coordChange : atlas H M ‚Üí atlas H M ‚Üí H ‚Üí F ‚Üí F
  coord_change_self : ‚àÄ i : atlas H M, ‚àÄ, ‚àÄ x ‚àà i.1.Target, ‚àÄ, ‚àÄ v, coord_change i i x v = v
  coord_change_comp :
    ‚àÄ i j k : atlas H M,
      ‚àÄ,
        ‚àÄ x ‚àà ((i.1.symm.trans j.1).trans (j.1.symm.trans k.1)).Source,
          ‚àÄ, ‚àÄ v, (coord_change j k ((i.1.symm.trans j.1) x)) (coord_change i j x v) = coord_change i k x v
  coord_change_smooth :
    ‚àÄ i j : atlas H M,
      TimesContDiffOn ùïú ‚àû (fun p : E √ó F => coord_change i j (I.symm p.1) p.2)
        ((I '' (i.1.symm.trans j.1).Source).Prod (univ : Set F))

/--  The trivial basic smooth bundle core, in which all the changes of coordinates are the
identity. -/
def trivialBasicSmoothBundleCore {ùïú : Type _} [NondiscreteNormedField ùïú] {E : Type _} [NormedGroup E] [NormedSpace ùïú E]
    {H : Type _} [TopologicalSpace H] (I : ModelWithCorners ùïú E H) (M : Type _) [TopologicalSpace M] [ChartedSpace H M]
    [SmoothManifoldWithCorners I M] (F : Type _) [NormedGroup F] [NormedSpace ùïú F] : BasicSmoothBundleCore I M F :=
  { coordChange := fun i j x v => v, coord_change_self := fun i x hx v => rfl,
    coord_change_comp := fun i j k x hx v => rfl,
    coord_change_smooth := fun i j => times_cont_diff_snd.TimesContDiffOn }

namespace BasicSmoothBundleCore

variable {ùïú : Type _} [NondiscreteNormedField ùïú] {E : Type _} [NormedGroup E] [NormedSpace ùïú E] {H : Type _}
  [TopologicalSpace H] {I : ModelWithCorners ùïú E H} {M : Type _} [TopologicalSpace M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M] {F : Type _} [NormedGroup F] [NormedSpace ùïú F] (Z : BasicSmoothBundleCore I M F)

instance : Inhabited (BasicSmoothBundleCore I M F) :=
  ‚ü®trivialBasicSmoothBundleCore I M F‚ü©

/--  Fiber bundle core associated to a basic smooth bundle core -/
def to_topological_fiber_bundle_core : TopologicalFiberBundleCore (atlas H M) M F :=
  { BaseSet := fun i => i.1.Source, is_open_base_set := fun i => i.1.open_source,
    indexAt := fun x => ‚ü®chart_at H x, chart_mem_atlas H x‚ü©, mem_base_set_at := fun x => mem_chart_source H x,
    coordChange := fun i j x v => Z.coord_change i j (i.1 x) v,
    coord_change_self := fun i x hx v => Z.coord_change_self i (i.1 x) (i.1.map_source hx) v,
    coord_change_comp := fun i j k x ‚ü®‚ü®hx1, hx2‚ü©, hx3‚ü© v => by
      have := Z.coord_change_comp i j k (i.1 x) _ v
      convert this using 2
      ¬∑
        simp' only [hx1] with mfld_simps
      ¬∑
        simp' only [hx1, hx2, hx3] with mfld_simps,
    coord_change_continuous := fun i j => by
      have A :
        ContinuousOn (fun p : E √ó F => Z.coord_change i j (I.symm p.1) p.2)
          ((I '' (i.1.symm.trans j.1).Source).Prod (univ : Set F)) :=
        (Z.coord_change_smooth i j).ContinuousOn
      have B : ContinuousOn (fun x : M => I (i.1 x)) i.1.Source := I.continuous.comp_continuous_on i.1.ContinuousOn
      have C : ContinuousOn (fun p : M √ó F => (‚ü®I (i.1 p.1), p.2‚ü© : E √ó F)) (i.1.Source.Prod univ) := by
        apply ContinuousOn.prod _ continuous_snd.continuous_on
        exact B.comp continuous_fst.continuous_on (prod_subset_preimage_fst _ _)
      have C' : ContinuousOn (fun p : M √ó F => (‚ü®I (i.1 p.1), p.2‚ü© : E √ó F)) ((i.1.Source ‚à© j.1.Source).Prod univ) :=
        ContinuousOn.mono C (prod_mono (inter_subset_left _ _) (subset.refl _))
      have D :
        (i.1.Source ‚à© j.1.Source).Prod univ ‚äÜ
          (fun p : M √ó F => (I (i.1 p.1), p.2)) ‚Åª¬π' (I '' (i.1.symm.trans j.1).Source).Prod univ :=
        by
        rintro ‚ü®x, v‚ü© hx
        simp' only with mfld_simps  at hx
        simp' only [hx] with mfld_simps
      convert ContinuousOn.comp A C' D
      ext p
      simp' only with mfld_simps }

@[simp, mfld_simps]
theorem base_set (i : atlas H M) : (Z.to_topological_fiber_bundle_core.local_triv i).BaseSet = i.1.Source :=
  rfl

/--  Local chart for the total space of a basic smooth bundle -/
def chart {e : LocalHomeomorph M H} (he : e ‚àà atlas H M) :
    LocalHomeomorph Z.to_topological_fiber_bundle_core.total_space (ModelProd H F) :=
  (Z.to_topological_fiber_bundle_core.local_triv ‚ü®e, he‚ü©).toLocalHomeomorph.trans
    (LocalHomeomorph.prod e (LocalHomeomorph.refl F))

@[simp, mfld_simps]
theorem chart_source (e : LocalHomeomorph M H) (he : e ‚àà atlas H M) :
    (Z.chart he).Source = Z.to_topological_fiber_bundle_core.proj ‚Åª¬π' e.source := by
  simp only [chart, mem_prod]
  mfld_set_tac

@[simp, mfld_simps]
theorem chart_target (e : LocalHomeomorph M H) (he : e ‚àà atlas H M) : (Z.chart he).Target = e.target.prod univ := by
  simp only [chart]
  mfld_set_tac

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " The total space of a basic smooth bundle is endowed with a charted space structure, where the\ncharts are in bijection with the charts of the basis. -/")]
  []
  []
  []
  []
  [])
 (Command.instance
  (Term.attrKind [])
  "instance"
  []
  [(Command.declId `to_charted_space [])]
  (Command.declSig
   []
   (Term.typeSpec
    ":"
    (Term.app `ChartedSpace [(Term.app `ModelProd [`H `F]) `Z.to_topological_fiber_bundle_core.total_space])))
  (Command.whereStructInst
   "where"
   [(group
     (Command.whereStructField
      (Term.letDecl
       (Term.letIdDecl
        `Atlas
        []
        []
        ":="
        (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
         "‚ãÉ"
         (Lean.explicitBinders
          [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `e)] ":" (Term.app `LocalHomeomorph [`M `H]) ")")
           (Lean.bracketedExplicitBinders
            "("
            [(Lean.binderIdent `he)]
            ":"
            (Init.Core.¬´term_‚àà_¬ª `e " ‚àà " (Term.app `atlas [`H `M]))
            ")")])
         ", "
         (Set.¬´term{_}¬ª "{" [(Term.app `Z.chart [`he])] "}")))))
     [])
    (group
     (Command.whereStructField
      (Term.letDecl
       (Term.letIdDecl
        `chartAt
        [(Term.simpleBinder [(Term.simpleBinder [`p] [])] [])]
        []
        ":="
        (Term.app `Z.chart [(Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])]))))
     [])
    (group
     (Command.whereStructField
      (Term.letDecl
       (Term.letIdDecl
        `mem_chart_source
        [(Term.simpleBinder [(Term.simpleBinder [`p] [])] [])]
        []
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `mem_chart_source)] "]"] []) [])]))))))
     [])
    (group
     (Command.whereStructField
      (Term.letDecl
       (Term.letIdDecl
        `chart_mem_atlas
        [(Term.simpleBinder [(Term.simpleBinder [`p] [])] [])]
        []
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.simp
              "simp"
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `mem_Union)
                ","
                (Tactic.simpLemma [] [] `mem_singleton_iff)
                ","
                (Tactic.simpLemma [] [] `chart_mem_atlas)]
               "]"]
              [])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "‚ü®"
               [(Term.app `chart_at [`H (Term.proj `p "." (fieldIdx "1"))])
                ","
                (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
                ","
                `rfl]
               "‚ü©"))
             [])]))))))
     [])])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructInst', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructInst', expected 'Lean.Parser.Command.declValSimple'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructInst', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructInst', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructInst', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructField', expected 'Lean.Parser.Command.whereStructField.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] `mem_Union)
          ","
          (Tactic.simpLemma [] [] `mem_singleton_iff)
          ","
          (Tactic.simpLemma [] [] `chart_mem_atlas)]
         "]"]
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.anonymousCtor
         "‚ü®"
         [(Term.app `chart_at [`H (Term.proj `p "." (fieldIdx "1"))])
          ","
          (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
          ","
          `rfl]
         "‚ü©"))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.anonymousCtor
    "‚ü®"
    [(Term.app `chart_at [`H (Term.proj `p "." (fieldIdx "1"))])
     ","
     (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
     ","
     `rfl]
    "‚ü©"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "‚ü®"
   [(Term.app `chart_at [`H (Term.proj `p "." (fieldIdx "1"))])
    ","
    (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
    ","
    `rfl]
   "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `chart_mem_atlas
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `chart_at [`H (Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `chart_at
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] `mem_Union)
     ","
     (Tactic.simpLemma [] [] `mem_singleton_iff)
     ","
     (Tactic.simpLemma [] [] `chart_mem_atlas)]
    "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `chart_mem_atlas
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_singleton_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_Union
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructField', expected 'Lean.Parser.Command.whereStructField.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `mem_chart_source)] "]"] []) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp "simp" [] [] ["[" [(Tactic.simpLemma [] [] `mem_chart_source)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_chart_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructField', expected 'Lean.Parser.Command.whereStructField.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `Z.chart [(Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `H
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `chart_mem_atlas
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `chart_mem_atlas [`H (Term.proj `p "." (fieldIdx "1"))]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Z.chart
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.whereStructField', expected 'Lean.Parser.Command.whereStructField.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
   "‚ãÉ"
   (Lean.explicitBinders
    [(Lean.bracketedExplicitBinders "(" [(Lean.binderIdent `e)] ":" (Term.app `LocalHomeomorph [`M `H]) ")")
     (Lean.bracketedExplicitBinders
      "("
      [(Lean.binderIdent `he)]
      ":"
      (Init.Core.¬´term_‚àà_¬ª `e " ‚àà " (Term.app `atlas [`H `M]))
      ")")])
   ", "
   (Set.¬´term{_}¬ª "{" [(Term.app `Z.chart [`he])] "}"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.¬´term{_}¬ª "{" [(Term.app `Z.chart [`he])] "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.¬´term{_}¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Z.chart [`he])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `he
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Z.chart
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letIdDecl', expected 'Lean.Parser.Term.letEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.instance', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The total space of a basic smooth bundle is endowed with a charted space structure, where the
    charts are in bijection with the charts of the basis. -/
  instance
    to_charted_space
    : ChartedSpace ModelProd H F Z.to_topological_fiber_bundle_core.total_space
    where
      Atlas := ‚ãÉ ( e : LocalHomeomorph M H ) ( he : e ‚àà atlas H M ) , { Z.chart he }
        chartAt p := Z.chart chart_mem_atlas H p . 1
        mem_chart_source p := by simp [ mem_chart_source ]
        chart_mem_atlas
          p
          :=
          by
            simp only [ mem_Union , mem_singleton_iff , chart_mem_atlas ]
              exact ‚ü® chart_at H p . 1 , chart_mem_atlas H p . 1 , rfl ‚ü©

theorem mem_atlas_iff (f : LocalHomeomorph Z.to_topological_fiber_bundle_core.total_space (ModelProd H F)) :
    f ‚àà atlas (ModelProd H F) Z.to_topological_fiber_bundle_core.total_space ‚Üî
      ‚àÉ (e : LocalHomeomorph M H)(he : e ‚àà atlas H M), f = Z.chart he :=
  by
  simp only [atlas, mem_Union, mem_singleton_iff]

@[simp, mfld_simps]
theorem mem_chart_source_iff (p q : Z.to_topological_fiber_bundle_core.total_space) :
    p ‚àà (chart_at (ModelProd H F) q).Source ‚Üî p.1 ‚àà (chart_at H q.1).Source := by
  simp' only [chart_at] with mfld_simps

@[simp, mfld_simps]
theorem mem_chart_target_iff (p : H √ó F) (q : Z.to_topological_fiber_bundle_core.total_space) :
    p ‚àà (chart_at (ModelProd H F) q).Target ‚Üî p.1 ‚àà (chart_at H q.1).Target := by
  simp' only [chart_at] with mfld_simps

@[simp, mfld_simps]
theorem coe_chart_at_fst (p q : Z.to_topological_fiber_bundle_core.total_space) :
    ((chart_at (ModelProd H F) q) p).1 = chart_at H q.1 p.1 :=
  rfl

@[simp, mfld_simps]
theorem coe_chart_at_symm_fst (p : H √ó F) (q : Z.to_topological_fiber_bundle_core.total_space) :
    ((chart_at (ModelProd H F) q).symm p).1 = ((chart_at H q.1).symm : H ‚Üí M) p.1 :=
  rfl

/--  Smooth manifold structure on the total space of a basic smooth bundle -/
instance to_smooth_manifold :
    SmoothManifoldWithCorners (I.prod ùìò(ùïú, F)) Z.to_topological_fiber_bundle_core.total_space := by
  let J := ModelWithCorners.toLocalEquiv (I.prod ùìò(ùïú, F))
  have A :
    ‚àÄ e e' : LocalHomeomorph M H he : e ‚àà atlas H M he' : e' ‚àà atlas H M,
      TimesContDiffOn ùïú ‚àû (J ‚àò (Z.chart he).symm.trans (Z.chart he') ‚àò J.symm)
        (J.symm ‚Åª¬π' ((Z.chart he).symm.trans (Z.chart he')).Source ‚à© range J) :=
    by
    intro e e' he he'
    have :
      J.symm ‚Åª¬π' ((chart Z he).symm.trans (chart Z he')).Source ‚à© range J =
        (I.symm ‚Åª¬π' (e.symm.trans e').Source ‚à© range I).Prod univ :=
      by
      ¬∑
        simp only [J, chart, ModelWithCorners.prod]
        mfld_set_tac
    rw [this]
    apply TimesContDiffOn.prod
    show
      TimesContDiffOn ùïú ‚àû (fun p : E √ó F => (I ‚àò e' ‚àò e.symm ‚àò I.symm) p.1)
        ((I.symm ‚Åª¬π' (e.symm.trans e').Source ‚à© range I).Prod (univ : Set F))
    ¬∑
      have A : TimesContDiffOn ùïú ‚àû (I ‚àò e.symm.trans e' ‚àò I.symm) (I.symm ‚Åª¬π' (e.symm.trans e').Source ‚à© range I) :=
        (HasGroupoid.compatible (timesContDiffGroupoid ‚àû I) he he').1
      have B : TimesContDiffOn ùïú ‚àû (fun p : E √ó F => p.1) ((I.symm ‚Åª¬π' (e.symm.trans e').Source ‚à© range I).Prod univ) :=
        times_cont_diff_fst.times_cont_diff_on
      exact TimesContDiffOn.comp A B (prod_subset_preimage_fst _ _)
    show
      TimesContDiffOn ùïú ‚àû
        (fun p : E √ó F =>
          Z.coord_change ‚ü®chart_at H (e.symm (I.symm p.1)), _‚ü© ‚ü®e', he'‚ü©
            ((chart_at H (e.symm (I.symm p.1)) : M ‚Üí H) (e.symm (I.symm p.1)))
            (Z.coord_change ‚ü®e, he‚ü© ‚ü®chart_at H (e.symm (I.symm p.1)), _‚ü© (e (e.symm (I.symm p.1))) p.2))
        ((I.symm ‚Åª¬π' (e.symm.trans e').Source ‚à© range I).Prod (univ : Set F))
    ¬∑
      have := Z.coord_change_smooth ‚ü®e, he‚ü© ‚ü®e', he'‚ü©
      rw [I.image_eq] at this
      apply TimesContDiffOn.congr this
      rintro ‚ü®x, v‚ü© hx
      simp' only with mfld_simps  at hx
      let f := chart_at H (e.symm (I.symm x))
      have A : I.symm x ‚àà ((e.symm.trans f).trans (f.symm.trans e')).Source := by
        simp' only [hx.1.1, hx.1.2] with mfld_simps
      rw [e.right_inv hx.1.1]
      have := Z.coord_change_comp ‚ü®e, he‚ü© ‚ü®f, chart_mem_atlas _ _‚ü© ‚ü®e', he'‚ü© (I.symm x) A v
      simpa only using this
  refine' @SmoothManifoldWithCorners.mk _ _ _ _ _ _ _ _ _ _ _ ‚ü®_‚ü©
  intro e‚ÇÄ e‚ÇÄ' he‚ÇÄ he‚ÇÄ'
  rcases(Z.mem_atlas_iff _).1 he‚ÇÄ with ‚ü®e, he, rfl‚ü©
  rcases(Z.mem_atlas_iff _).1 he‚ÇÄ' with ‚ü®e', he', rfl‚ü©
  rw [timesContDiffGroupoid, mem_groupoid_of_pregroupoid]
  exact ‚ü®A e e' he he', A e' e he' he‚ü©

end BasicSmoothBundleCore

section TangentBundle

variable {ùïú : Type _} [NondiscreteNormedField ùïú] {E : Type _} [NormedGroup E] [NormedSpace ùïú E] {H : Type _}
  [TopologicalSpace H] (I : ModelWithCorners ùïú E H) (M : Type _) [TopologicalSpace M] [ChartedSpace H M]
  [SmoothManifoldWithCorners I M]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " Basic smooth bundle core version of the tangent bundle of a smooth manifold `M` modelled over a\nmodel with corners `I` on `(E, H)`. The fibers are equal to `E`, and the coordinate change in the\nfiber corresponds to the derivative of the coordinate change in `M`. -/")]
  []
  []
  []
  []
  [])
 (Command.def
  "def"
  (Command.declId `tangentBundleCore [])
  (Command.optDeclSig [] [(Term.typeSpec ":" (Term.app `BasicSmoothBundleCore [`I `M `E]))])
  (Command.declValSimple
   ":="
   (Term.structInst
    "{"
    []
    [(group
      (Term.structInstField
       (Term.structInstLVal `coordChange [])
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`i `j `x `v] [])]
         "=>"
         (Term.app
          (Term.paren
           "("
           [(Term.app
             `fderivWithin
             [`ùïú
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               `I
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Term.proj `j "." (fieldIdx "1"))
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
              (Term.app `range [`I])
              (Term.app `I [`x])])
            [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]]
           ")")
          [`v]))))
      [","])
     (group
      (Term.structInstField
       (Term.structInstLVal `coord_change_smooth [])
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`i `j] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `I.image_eq)] "]") []) [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`A []]
                 [(Term.typeSpec
                   ":"
                   (Term.app
                    `TimesContDiffOn
                    [`ùïú
                     (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       " ‚àò "
                       `I.symm))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))]))]
                 ":="
                 (Term.proj
                  (Term.app
                   `HasGroupoid.compatible
                   [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                    (Term.proj `i "." (fieldIdx "2"))
                    (Term.proj `j "." (fieldIdx "2"))])
                  "."
                  (fieldIdx "1")))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`B []]
                 [(Term.typeSpec
                   ":"
                   (Term.app
                    `UniqueDiffOn
                    [`ùïú
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))]))]
                 ":="
                 `I.unique_diff_preimage_source)))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`C []]
                 [(Term.typeSpec
                   ":"
                   (Term.app
                    `TimesContDiffOn
                    [`ùïú
                     (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" (¬´term_√ó_¬ª `E "√ó" `E))])]
                       "=>"
                       (Term.app
                        (Term.paren
                         "("
                         [(Term.app
                           `fderivWithin
                           [`ùïú
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             `I
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj `j "." (fieldIdx "1"))
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                               " ‚àò "
                               `I.symm)))
                            (Init.Core.¬´term_‚à©_¬ª
                             (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                              `I.symm
                              " ‚Åª¬π' "
                              (Term.proj
                               (Term.app
                                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                [(Term.proj `j "." (fieldIdx "1"))])
                               "."
                               `Source))
                             " ‚à© "
                             (Term.app `range [`I]))
                            (Term.proj `p "." (fieldIdx "1"))])
                          [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]]
                         ")")
                        [(Term.proj `p "." (fieldIdx "2"))])))
                     (Term.app
                      (Term.proj
                       (Init.Core.¬´term_‚à©_¬ª
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         `I.symm
                         " ‚Åª¬π' "
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `Source))
                        " ‚à© "
                        (Term.app `range [`I]))
                       "."
                       `Prod)
                      [`univ])]))]
                 ":="
                 (Term.app `times_cont_diff_on_fderiv_within_apply [`A `B `le_top]))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`D []]
                 [(Term.typeSpec
                   ":"
                   (Term.forall
                    "‚àÄ"
                    []
                    ","
                    (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                     "‚àÄ"
                     `x
                     (¬´binderTerm‚àà_¬ª
                      "‚àà"
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I])))
                     ","
                     (Term.forall
                      "‚àÄ"
                      []
                      ","
                      (¬´term_=_¬ª
                       (Term.app
                        `fderivWithin
                        [`ùïú
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         (Term.app `range [`I])
                         `x])
                       "="
                       (Term.app
                        `fderivWithin
                        [`ùïú
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         (Init.Core.¬´term_‚à©_¬ª
                          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                           `I.symm
                           " ‚Åª¬π' "
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `j "." (fieldIdx "1"))])
                            "."
                            `Source))
                          " ‚à© "
                          (Term.app `range [`I]))
                         `x]))))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.intro "intro" [`x `hx]) [])
                     (group
                      (Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`N []]
                         [(Term.typeSpec
                           ":"
                           (Init.Core.¬´term_‚àà_¬ª
                            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                             `I.symm
                             " ‚Åª¬π' "
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `Source))
                            " ‚àà "
                            (Term.app `nhds [`x])))]
                         ":="
                         (Term.app
                          `I.continuous_symm.continuous_at.preimage_mem_nhds
                          [(Term.app
                            `IsOpen.mem_nhds
                            [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")])
                             (Term.proj `hx "." (fieldIdx "1"))])]))))
                      [])
                     (group (Tactic.symm "symm") [])
                     (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                     (group
                      (Tactic.exact
                       "exact"
                       (Term.app
                        `fderiv_within_inter
                        [`N (Term.app `I.unique_diff [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])]))
                      [])]))))))
              [])
             (group (Tactic.apply "apply" (Term.app `TimesContDiffOn.congr [`C])) [])
             (group
              (Tactic.rintro
               "rintro"
               [(Tactic.rintroPat.one
                 (Tactic.rcasesPat.tuple
                  "‚ü®"
                  [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
                   ","
                   (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])]
                  "‚ü©"))
                (Tactic.rintroPat.one (Tactic.rcasesPat.one `hx))]
               [])
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`E []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.¬´term_‚àà_¬ª
                    `x
                    " ‚àà "
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.simpa
                       "simpa"
                       []
                       ["only"]
                       ["["
                        [(Tactic.simpLemma [] [] `prod_mk_mem_set_prod_eq)
                         ","
                         (Tactic.simpLemma [] [] `and_true‚Çì)
                         ","
                         (Tactic.simpLemma [] [] `mem_univ)]
                        "]"]
                       []
                       ["using" `hx])
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (¬´term_=_¬ª (Term.app `I [(Term.app `I.symm [`x])]) "=" `x))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.simp
                       "simp"
                       []
                       []
                       ["[" [(Tactic.simpLemma [] [] (Term.proj `E "." (fieldIdx "2")))] "]"]
                       [])
                      [])]))))))
              [])
             (group (Tactic.dsimp "dsimp" [] [] ["[" [(Tactic.simpErase "-" `Subtype.val_eq_coe)] "]"] [] []) [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] (Term.app `D [`x `E]))] "]")
               [])
              [])
             (group (Tactic.tacticRfl "rfl") [])]))))))
      [","])
     (group
      (Term.structInstField
       (Term.structInstLVal `coord_change_self [])
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`i `x `hx `v] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`A []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.¬´term_‚àà_¬ª
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `i "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))
                    " ‚àà "
                    (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                     (group (Tactic.apply "apply" `inter_mem_nhds_within) [])
                     (group
                      (Tactic.apply
                       "apply"
                       (Term.app
                        `I.continuous_symm.continuous_at.preimage_mem_nhds
                        [(Term.app
                          `IsOpen.mem_nhds
                          [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.simp'
                       "simp'"
                       []
                       []
                       ["only"]
                       ["["
                        [(Tactic.simpLemma [] [] `hx)
                         ","
                         (Tactic.simpLemma [] [] (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `map_target))]
                        "]"]
                       ["with" [`mfld_simps]]
                       [])
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`B []]
                 [(Term.typeSpec
                   ":"
                   (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
                    "‚àÄ·∂†"
                    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
                    " in "
                    (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
                    ", "
                    (¬´term_=_¬ª
                     (Term.app
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `i "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      [`y])
                     "="
                     (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
                     (group (Tactic.intro "intro" [`y `hy]) [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                      [])
                     (group
                      (Tactic.rcases
                       "rcases"
                       [(Tactic.casesTarget [] `hy)]
                       ["with"
                        (Tactic.rcasesPat.tuple
                         "‚ü®"
                         [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                          ","
                          (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
                         "‚ü©")])
                      [])
                     (group
                      (Tactic.simp'
                       "simp'"
                       []
                       []
                       ["only"]
                       []
                       ["with" [`mfld_simps]]
                       [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
                      [])
                     (group
                      (Tactic.simp'
                       "simp'"
                       []
                       []
                       ["only"]
                       ["["
                        [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
                         ","
                         (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
                        "]"]
                       ["with" [`mfld_simps]]
                       [])
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`C []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `i "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Term.app `range [`I])
                      (Term.app `I [`x])])
                    "="
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
                      (Term.app `range [`I])
                      (Term.app `I [`x])])))]
                 ":="
                 (Term.app
                  `Filter.EventuallyEq.fderiv_within_eq
                  [`I.unique_diff_at_image
                   `B
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.simp'
                         "simp'"
                         []
                         []
                         ["only"]
                         ["[" [(Tactic.simpLemma [] [] `hx)] "]"]
                         ["with" [`mfld_simps]]
                         [])
                        [])])))]))))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `fderiv_within_id [`I.unique_diff_at_image]))] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`C] []))])
              [])
             (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `C)] "]") []) [])
             (group (Tactic.tacticRfl "rfl") [])]))))))
      [","])
     (group
      (Term.structInstField
       (Term.structInstLVal `coord_change_comp [])
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`i `j `u `x `hx] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`M []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.¬´term_‚àà_¬ª
                    (Term.app `I [`x])
                    " ‚àà "
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `trans)
                        [(Term.app
                          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `u "." (fieldIdx "1"))])])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))))]
                 ":="
                 (Term.anonymousCtor
                  "‚ü®"
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (Tactic.simpa
                         "simpa"
                         []
                         ["only"]
                         ["["
                          [(Tactic.simpLemma [] [] `mem_preimage)
                           ","
                           (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                          "]"]
                         []
                         ["using" `hx])
                        [])])))
                   ","
                   (Term.app `mem_range_self [(Term.hole "_")])]
                  "‚ü©"))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`U []]
                 [(Term.typeSpec
                   ":"
                   (Term.app
                    `UniqueDiffWithinAt
                    [`ùïú
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])]))]
                 ":="
                 (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M]))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`A []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `u "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `j "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm))))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app `I [`x])])
                    "="
                    (Term.app
                     (Term.proj
                      (Term.app
                       `fderivWithin
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `u "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        (Term.app
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         [(Term.app `I [`x])])])
                      "."
                      `comp)
                     [(Term.app
                       `fderivWithin
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             "."
                             `trans)
                            [(Term.app
                              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `u "." (fieldIdx "1"))])])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        (Term.app `I [`x])])])))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.apply
                       "apply"
                       (Term.app
                        `fderivWithin.comp
                        [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
                      [])
                     (group
                      (Tactic.tacticShow_
                       "show"
                       (Term.app
                        `DifferentiableWithinAt
                        [`ùïú
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         (Init.Core.¬´term_‚à©_¬ª
                          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                           `I.symm
                           " ‚Åª¬π' "
                           (Term.proj
                            (Term.app
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `trans)
                             [(Term.app
                               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `u "." (fieldIdx "1"))])])
                            "."
                            `Source))
                          " ‚à© "
                          (Term.app `range [`I]))
                         (Term.app `I [`x])]))
                      [])
                     (group
                      (Tactic.¬´tactic¬∑._¬ª
                       "¬∑"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.tacticHave_
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`A []]
                              [(Term.typeSpec
                                ":"
                                (Term.app
                                 `TimesContDiffOn
                                 [`ùïú
                                  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   `I
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.app
                                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                     [(Term.proj `j "." (fieldIdx "1"))])
                                    " ‚àò "
                                    `I.symm))
                                  (Init.Core.¬´term_‚à©_¬ª
                                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                    `I.symm
                                    " ‚Åª¬π' "
                                    (Term.proj
                                     (Term.app
                                      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                      [(Term.proj `j "." (fieldIdx "1"))])
                                     "."
                                     `Source))
                                   " ‚à© "
                                   (Term.app `range [`I]))]))]
                              ":="
                              (Term.proj
                               (Term.app
                                `HasGroupoid.compatible
                                [(Term.app
                                  `timesContDiffGroupoid
                                  [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                                 (Term.proj `i "." (fieldIdx "2"))
                                 (Term.proj `j "." (fieldIdx "2"))])
                               "."
                               (fieldIdx "1")))))
                           [])
                          (group
                           (Tactic.tacticHave_
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`B []]
                              [(Term.typeSpec
                                ":"
                                (Term.app
                                 `DifferentiableOn
                                 [`ùïú
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   `I
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.proj `j "." (fieldIdx "1"))
                                    " ‚àò "
                                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                                     (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                     " ‚àò "
                                     `I.symm)))
                                  (Init.Core.¬´term_‚à©_¬ª
                                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                    `I.symm
                                    " ‚Åª¬π' "
                                    (Term.proj
                                     (Term.app
                                      (Term.proj
                                       (Term.app
                                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                        [(Term.proj `j "." (fieldIdx "1"))])
                                       "."
                                       `trans)
                                      [(Term.app
                                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                        [(Term.proj `u "." (fieldIdx "1"))])])
                                     "."
                                     `Source))
                                   " ‚à© "
                                   (Term.app `range [`I]))]))]
                              ":="
                              (Term.byTactic
                               "by"
                               (Tactic.tacticSeq
                                (Tactic.tacticSeq1Indented
                                 [(group
                                   (Tactic.apply
                                    "apply"
                                    (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono))
                                   [])
                                  (group
                                   (Tactic.tacticHave_
                                    "have"
                                    (Term.haveDecl
                                     (Term.haveIdDecl
                                      []
                                      [(Term.typeSpec
                                        ":"
                                        (Init.Core.¬´term_‚äÜ_¬ª
                                         (Term.proj
                                          (Term.app
                                           (Term.proj
                                            (Term.app
                                             (Term.proj
                                              (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                              "."
                                              `trans)
                                             [(Term.proj `j "." (fieldIdx "1"))])
                                            "."
                                            `trans)
                                           [(Term.app
                                             (Term.proj
                                              (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                                              "."
                                              `trans)
                                             [(Term.proj `u "." (fieldIdx "1"))])])
                                          "."
                                          `Source)
                                         " ‚äÜ "
                                         (Term.proj
                                          (Term.app
                                           (Term.proj
                                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                            "."
                                            `trans)
                                           [(Term.proj `j "." (fieldIdx "1"))])
                                          "."
                                          `Source)))]
                                      ":="
                                      (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                                   [])
                                  (group
                                   (Tactic.exact
                                    "exact"
                                    (Term.app
                                     `inter_subset_inter
                                     [(Term.app `preimage_mono [`this])
                                      (Term.app `subset.refl [(Term.app `range [`I])])]))
                                   [])]))))))
                           [])
                          (group (Tactic.apply "apply" `B) [])
                          (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
                      [])
                     (group
                      (Tactic.tacticShow_
                       "show"
                       (Term.app
                        `DifferentiableWithinAt
                        [`ùïú
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `u "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         (Init.Core.¬´term_‚à©_¬ª
                          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                           `I.symm
                           " ‚Åª¬π' "
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `u "." (fieldIdx "1"))])
                            "."
                            `Source))
                          " ‚à© "
                          (Term.app `range [`I]))
                         (Term.app
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           `I
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj `j "." (fieldIdx "1"))
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                             " ‚àò "
                             `I.symm)))
                          [(Term.app `I [`x])])]))
                      [])
                     (group
                      (Tactic.¬´tactic¬∑._¬ª
                       "¬∑"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.tacticHave_
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`A []]
                              [(Term.typeSpec
                                ":"
                                (Term.app
                                 `TimesContDiffOn
                                 [`ùïú
                                  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   `I
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.app
                                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                     [(Term.proj `u "." (fieldIdx "1"))])
                                    " ‚àò "
                                    `I.symm))
                                  (Init.Core.¬´term_‚à©_¬ª
                                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                    `I.symm
                                    " ‚Åª¬π' "
                                    (Term.proj
                                     (Term.app
                                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                      [(Term.proj `u "." (fieldIdx "1"))])
                                     "."
                                     `Source))
                                   " ‚à© "
                                   (Term.app `range [`I]))]))]
                              ":="
                              (Term.proj
                               (Term.app
                                `HasGroupoid.compatible
                                [(Term.app
                                  `timesContDiffGroupoid
                                  [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                                 (Term.proj `j "." (fieldIdx "2"))
                                 (Term.proj `u "." (fieldIdx "2"))])
                               "."
                               (fieldIdx "1")))))
                           [])
                          (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
                          (group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                            [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                           [])
                          (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                          (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
                      [])
                     (group
                      (Tactic.tacticShow_
                       "show"
                       (Init.Core.¬´term_‚äÜ_¬ª
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             "."
                             `trans)
                            [(Term.app
                              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `u "." (fieldIdx "1"))])])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        " ‚äÜ "
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         " ‚Åª¬π' "
                         (Init.Core.¬´term_‚à©_¬ª
                          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                           `I.symm
                           " ‚Åª¬π' "
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `u "." (fieldIdx "1"))])
                            "."
                            `Source))
                          " ‚à© "
                          (Term.app `range [`I])))))
                      [])
                     (group
                      (Tactic.¬´tactic¬∑._¬ª
                       "¬∑"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group (Tactic.intro "intro" [`y `hy]) [])
                          (group
                           (Tactic.simp'
                            "simp'"
                            []
                            []
                            ["only"]
                            []
                            ["with" [`mfld_simps]]
                            [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                           [])
                          (group
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
                            [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                           [])
                          (group
                           (Tactic.¬´tactic¬∑._¬ª
                            "¬∑"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.simp'
                                 "simp'"
                                 []
                                 []
                                 ["only"]
                                 ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                                 ["with" [`mfld_simps]]
                                 [])
                                [])])))
                           [])
                          (group
                           (Tactic.¬´tactic¬∑._¬ª
                            "¬∑"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(group
                                (Tactic.exact
                                 "exact"
                                 (Term.proj
                                  (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                                  "."
                                  (fieldIdx "2")))
                                [])])))
                           [])])))
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`B []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `u "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `j "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm))))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app `I [`x])])
                    "="
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app `I [`x])])))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`E []]
                         [(Term.typeSpec
                           ":"
                           (Term.forall
                            "‚àÄ"
                            []
                            ","
                            (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                             "‚àÄ"
                             `y
                             (¬´binderTerm‚àà_¬ª
                              "‚àà"
                              (Init.Core.¬´term_‚à©_¬ª
                               (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                `I.symm
                                " ‚Åª¬π' "
                                (Term.proj
                                 (Term.app
                                  (Term.proj
                                   (Term.app
                                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                    [(Term.proj `j "." (fieldIdx "1"))])
                                   "."
                                   `trans)
                                  [(Term.app
                                    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                    [(Term.proj `u "." (fieldIdx "1"))])])
                                 "."
                                 `Source))
                               " ‚à© "
                               (Term.app `range [`I])))
                             ","
                             (Term.forall
                              "‚àÄ"
                              []
                              ","
                              (¬´term_=_¬ª
                               (Term.app
                                (Rel.Data.Rel.¬´term_‚àò_¬ª
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  `I
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj `u "." (fieldIdx "1"))
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                                    " ‚àò "
                                    `I.symm)))
                                 " ‚àò "
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  `I
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj `j "." (fieldIdx "1"))
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                    " ‚àò "
                                    `I.symm))))
                                [`y])
                               "="
                               (Term.app
                                (Rel.Data.Rel.¬´term_‚àò_¬ª
                                 `I
                                 " ‚àò "
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  (Term.proj `u "." (fieldIdx "1"))
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                   " ‚àò "
                                   `I.symm)))
                                [`y]))))))]
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group (Tactic.intro "intro" [`y `hy]) [])
                             (group
                              (Tactic.simp
                               "simp"
                               []
                               ["only"]
                               ["["
                                [(Tactic.simpLemma [] [] `Function.comp_app)
                                 ","
                                 (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                                "]"]
                               [])
                              [])
                             (group
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                                "]")
                               [])
                              [])
                             (group
                              (Tactic.exact
                               "exact"
                               (Term.proj
                                (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                                "."
                                (fieldIdx "2")))
                              [])]))))))
                      [])
                     (group
                      (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`C []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app `I [`x])])
                    "="
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Term.app `range [`I])
                      (Term.app `I [`x])])))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                     (group
                      (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                      [])
                     (group
                      (Tactic.apply
                       "apply"
                       (Term.app
                        `I.continuous_symm.continuous_at.preimage_mem_nhds
                        [(Term.app
                          `IsOpen.mem_nhds
                          [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.simpa
                       "simpa"
                       []
                       ["only"]
                       ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                       []
                       ["using" `hx])
                      [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`D []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `u "." (fieldIdx "1"))])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `j "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       [(Term.app `I [`x])])])
                    "="
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Term.app `range [`I])
                      (Term.app
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `j "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       [(Term.app `I [`x])])])))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                     (group
                      (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                      [])
                     (group
                      (Tactic.apply
                       "apply"
                       (Term.app
                        `I.continuous_symm.continuous_at.preimage_mem_nhds
                        [(Term.app
                          `IsOpen.mem_nhds
                          [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                      [])
                     (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                     (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])]))))))
              [])
             (group
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`E []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      (Term.app `I [`x])])
                    "="
                    (Term.app
                     `fderivWithin
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Term.app `range [`I])
                      (Term.app `I [`x])])))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                     (group
                      (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                      [])
                     (group
                      (Tactic.apply
                       "apply"
                       (Term.app
                        `I.continuous_symm.continuous_at.preimage_mem_nhds
                        [(Term.app
                          `IsOpen.mem_nhds
                          [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                      [])
                     (group
                      (Tactic.simpa
                       "simpa"
                       []
                       ["only"]
                       ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                       []
                       ["using" `hx])
                      [])]))))))
              [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `B) "," (Tactic.rwRule [] `C) "," (Tactic.rwRule [] `D) "," (Tactic.rwRule [] `E)]
                "]")
               [(Tactic.location "at" (Tactic.locationHyp [`A] []))])
              [])
             (group
              (Tactic.simp'
               "simp'"
               []
               []
               ["only"]
               ["[" [(Tactic.simpLemma [] [] `A) "," (Tactic.simpLemma [] [] `ContinuousLinearMap.coe_comp')] "]"]
               ["with" [`mfld_simps]]
               [])
              [])]))))))
      [])]
    (Term.optEllipsis [])
    []
    "}")
   [])
  []
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.structInst
   "{"
   []
   [(group
     (Term.structInstField
      (Term.structInstLVal `coordChange [])
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`i `j `x `v] [])]
        "=>"
        (Term.app
         (Term.paren
          "("
          [(Term.app
            `fderivWithin
            [`ùïú
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `j "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             (Term.app `range [`I])
             (Term.app `I [`x])])
           [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]]
          ")")
         [`v]))))
     [","])
    (group
     (Term.structInstField
      (Term.structInstLVal `coord_change_smooth [])
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`i `j] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `I.image_eq)] "]") []) [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`A []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `TimesContDiffOn
                   [`ùïú
                    (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      " ‚àò "
                      `I.symm))
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))]))]
                ":="
                (Term.proj
                 (Term.app
                  `HasGroupoid.compatible
                  [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                   (Term.proj `i "." (fieldIdx "2"))
                   (Term.proj `j "." (fieldIdx "2"))])
                 "."
                 (fieldIdx "1")))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`B []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `UniqueDiffOn
                   [`ùïú
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))]))]
                ":="
                `I.unique_diff_preimage_source)))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`C []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `TimesContDiffOn
                   [`ùïú
                    (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`p] [(Term.typeSpec ":" (¬´term_√ó_¬ª `E "√ó" `E))])]
                      "=>"
                      (Term.app
                       (Term.paren
                        "("
                        [(Term.app
                          `fderivWithin
                          [`ùïú
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            `I
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj `j "." (fieldIdx "1"))
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                              " ‚àò "
                              `I.symm)))
                           (Init.Core.¬´term_‚à©_¬ª
                            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                             `I.symm
                             " ‚Åª¬π' "
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `Source))
                            " ‚à© "
                            (Term.app `range [`I]))
                           (Term.proj `p "." (fieldIdx "1"))])
                         [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]]
                        ")")
                       [(Term.proj `p "." (fieldIdx "2"))])))
                    (Term.app
                     (Term.proj
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))
                      "."
                      `Prod)
                     [`univ])]))]
                ":="
                (Term.app `times_cont_diff_on_fderiv_within_apply [`A `B `le_top]))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`D []]
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "‚àÄ"
                   []
                   ","
                   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                    "‚àÄ"
                    `x
                    (¬´binderTerm‚àà_¬ª
                     "‚àà"
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I])))
                    ","
                    (Term.forall
                     "‚àÄ"
                     []
                     ","
                     (¬´term_=_¬ª
                      (Term.app
                       `fderivWithin
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Term.app `range [`I])
                        `x])
                      "="
                      (Term.app
                       `fderivWithin
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        `x]))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.intro "intro" [`x `hx]) [])
                    (group
                     (Tactic.tacticHave_
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`N []]
                        [(Term.typeSpec
                          ":"
                          (Init.Core.¬´term_‚àà_¬ª
                           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                            `I.symm
                            " ‚Åª¬π' "
                            (Term.proj
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             "."
                             `Source))
                           " ‚àà "
                           (Term.app `nhds [`x])))]
                        ":="
                        (Term.app
                         `I.continuous_symm.continuous_at.preimage_mem_nhds
                         [(Term.app
                           `IsOpen.mem_nhds
                           [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")])
                            (Term.proj `hx "." (fieldIdx "1"))])]))))
                     [])
                    (group (Tactic.symm "symm") [])
                    (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                    (group
                     (Tactic.exact
                      "exact"
                      (Term.app
                       `fderiv_within_inter
                       [`N (Term.app `I.unique_diff [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])]))
                     [])]))))))
             [])
            (group (Tactic.apply "apply" (Term.app `TimesContDiffOn.congr [`C])) [])
            (group
             (Tactic.rintro
              "rintro"
              [(Tactic.rintroPat.one
                (Tactic.rcasesPat.tuple
                 "‚ü®"
                 [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `x)]) [])
                  ","
                  (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `v)]) [])]
                 "‚ü©"))
               (Tactic.rintroPat.one (Tactic.rcasesPat.one `hx))]
              [])
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`E []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.¬´term_‚àà_¬ª
                   `x
                   " ‚àà "
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.simpa
                      "simpa"
                      []
                      ["only"]
                      ["["
                       [(Tactic.simpLemma [] [] `prod_mk_mem_set_prod_eq)
                        ","
                        (Tactic.simpLemma [] [] `and_true‚Çì)
                        ","
                        (Tactic.simpLemma [] [] `mem_univ)]
                       "]"]
                      []
                      ["using" `hx])
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (¬´term_=_¬ª (Term.app `I [(Term.app `I.symm [`x])]) "=" `x))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.simp
                      "simp"
                      []
                      []
                      ["[" [(Tactic.simpLemma [] [] (Term.proj `E "." (fieldIdx "2")))] "]"]
                      [])
                     [])]))))))
             [])
            (group (Tactic.dsimp "dsimp" [] [] ["[" [(Tactic.simpErase "-" `Subtype.val_eq_coe)] "]"] [] []) [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] (Term.app `D [`x `E]))] "]")
              [])
             [])
            (group (Tactic.tacticRfl "rfl") [])]))))))
     [","])
    (group
     (Term.structInstField
      (Term.structInstLVal `coord_change_self [])
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`i `x `hx `v] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`A []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.¬´term_‚àà_¬ª
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `i "." (fieldIdx "1"))])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))
                   " ‚àà "
                   (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                    (group (Tactic.apply "apply" `inter_mem_nhds_within) [])
                    (group
                     (Tactic.apply
                      "apply"
                      (Term.app
                       `I.continuous_symm.continuous_at.preimage_mem_nhds
                       [(Term.app
                         `IsOpen.mem_nhds
                         [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                     [])
                    (group
                     (Tactic.simp'
                      "simp'"
                      []
                      []
                      ["only"]
                      ["["
                       [(Tactic.simpLemma [] [] `hx)
                        ","
                        (Tactic.simpLemma [] [] (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `map_target))]
                       "]"]
                      ["with" [`mfld_simps]]
                      [])
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`B []]
                [(Term.typeSpec
                  ":"
                  (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
                   "‚àÄ·∂†"
                   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
                   " in "
                   (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
                   ", "
                   (¬´term_=_¬ª
                    (Term.app
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `i "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     [`y])
                    "="
                    (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
                    (group (Tactic.intro "intro" [`y `hy]) [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                     [])
                    (group
                     (Tactic.rcases
                      "rcases"
                      [(Tactic.casesTarget [] `hy)]
                      ["with"
                       (Tactic.rcasesPat.tuple
                        "‚ü®"
                        [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                         ","
                         (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
                        "‚ü©")])
                     [])
                    (group
                     (Tactic.simp'
                      "simp'"
                      []
                      []
                      ["only"]
                      []
                      ["with" [`mfld_simps]]
                      [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
                     [])
                    (group
                     (Tactic.simp'
                      "simp'"
                      []
                      []
                      ["only"]
                      ["["
                       [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
                        ","
                        (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
                       "]"]
                      ["with" [`mfld_simps]]
                      [])
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`C []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `i "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Term.app `range [`I])
                     (Term.app `I [`x])])
                   "="
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
                     (Term.app `range [`I])
                     (Term.app `I [`x])])))]
                ":="
                (Term.app
                 `Filter.EventuallyEq.fderiv_within_eq
                 [`I.unique_diff_at_image
                  `B
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.simp'
                        "simp'"
                        []
                        []
                        ["only"]
                        ["[" [(Tactic.simpLemma [] [] `hx)] "]"]
                        ["with" [`mfld_simps]]
                        [])
                       [])])))]))))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `fderiv_within_id [`I.unique_diff_at_image]))] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`C] []))])
             [])
            (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `C)] "]") []) [])
            (group (Tactic.tacticRfl "rfl") [])]))))))
     [","])
    (group
     (Term.structInstField
      (Term.structInstLVal `coord_change_comp [])
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`i `j `u `x `hx] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`M []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.¬´term_‚àà_¬ª
                   (Term.app `I [`x])
                   " ‚àà "
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `trans)
                       [(Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))))]
                ":="
                (Term.anonymousCtor
                 "‚ü®"
                 [(Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.simpa
                        "simpa"
                        []
                        ["only"]
                        ["["
                         [(Tactic.simpLemma [] [] `mem_preimage)
                          ","
                          (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                         "]"]
                        []
                        ["using" `hx])
                       [])])))
                  ","
                  (Term.app `mem_range_self [(Term.hole "_")])]
                 "‚ü©"))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`U []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `UniqueDiffWithinAt
                   [`ùïú
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `trans)
                        [(Term.app
                          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `u "." (fieldIdx "1"))])])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))
                    (Term.app `I [`x])]))]
                ":="
                (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M]))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`A []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                         " ‚àò "
                         `I.symm))))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])])
                   "="
                   (Term.app
                    (Term.proj
                     (Term.app
                      `fderivWithin
                      [`ùïú
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `u "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       (Init.Core.¬´term_‚à©_¬ª
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         `I.symm
                         " ‚Åª¬π' "
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])
                          "."
                          `Source))
                        " ‚à© "
                        (Term.app `range [`I]))
                       (Term.app
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        [(Term.app `I [`x])])])
                     "."
                     `comp)
                    [(Term.app
                      `fderivWithin
                      [`ùïú
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        `I
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj `j "." (fieldIdx "1"))
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                          " ‚àò "
                          `I.symm)))
                       (Init.Core.¬´term_‚à©_¬ª
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         `I.symm
                         " ‚Åª¬π' "
                         (Term.proj
                          (Term.app
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `j "." (fieldIdx "1"))])
                            "."
                            `trans)
                           [(Term.app
                             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `u "." (fieldIdx "1"))])])
                          "."
                          `Source))
                        " ‚à© "
                        (Term.app `range [`I]))
                       (Term.app `I [`x])])])))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.apply
                      "apply"
                      (Term.app
                       `fderivWithin.comp
                       [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
                     [])
                    (group
                     (Tactic.tacticShow_
                      "show"
                      (Term.app
                       `DifferentiableWithinAt
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             "."
                             `trans)
                            [(Term.app
                              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `u "." (fieldIdx "1"))])])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        (Term.app `I [`x])]))
                     [])
                    (group
                     (Tactic.¬´tactic¬∑._¬ª
                      "¬∑"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.tacticHave_
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`A []]
                             [(Term.typeSpec
                               ":"
                               (Term.app
                                `TimesContDiffOn
                                [`ùïú
                                 (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  `I
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.app
                                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                    [(Term.proj `j "." (fieldIdx "1"))])
                                   " ‚àò "
                                   `I.symm))
                                 (Init.Core.¬´term_‚à©_¬ª
                                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                   `I.symm
                                   " ‚Åª¬π' "
                                   (Term.proj
                                    (Term.app
                                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                     [(Term.proj `j "." (fieldIdx "1"))])
                                    "."
                                    `Source))
                                  " ‚à© "
                                  (Term.app `range [`I]))]))]
                             ":="
                             (Term.proj
                              (Term.app
                               `HasGroupoid.compatible
                               [(Term.app
                                 `timesContDiffGroupoid
                                 [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                                (Term.proj `i "." (fieldIdx "2"))
                                (Term.proj `j "." (fieldIdx "2"))])
                              "."
                              (fieldIdx "1")))))
                          [])
                         (group
                          (Tactic.tacticHave_
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`B []]
                             [(Term.typeSpec
                               ":"
                               (Term.app
                                `DifferentiableOn
                                [`ùïú
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  `I
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj `j "." (fieldIdx "1"))
                                   " ‚àò "
                                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                                    (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                    " ‚àò "
                                    `I.symm)))
                                 (Init.Core.¬´term_‚à©_¬ª
                                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                   `I.symm
                                   " ‚Åª¬π' "
                                   (Term.proj
                                    (Term.app
                                     (Term.proj
                                      (Term.app
                                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                       [(Term.proj `j "." (fieldIdx "1"))])
                                      "."
                                      `trans)
                                     [(Term.app
                                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                       [(Term.proj `u "." (fieldIdx "1"))])])
                                    "."
                                    `Source))
                                  " ‚à© "
                                  (Term.app `range [`I]))]))]
                             ":="
                             (Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(group
                                  (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono))
                                  [])
                                 (group
                                  (Tactic.tacticHave_
                                   "have"
                                   (Term.haveDecl
                                    (Term.haveIdDecl
                                     []
                                     [(Term.typeSpec
                                       ":"
                                       (Init.Core.¬´term_‚äÜ_¬ª
                                        (Term.proj
                                         (Term.app
                                          (Term.proj
                                           (Term.app
                                            (Term.proj
                                             (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                             "."
                                             `trans)
                                            [(Term.proj `j "." (fieldIdx "1"))])
                                           "."
                                           `trans)
                                          [(Term.app
                                            (Term.proj
                                             (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                                             "."
                                             `trans)
                                            [(Term.proj `u "." (fieldIdx "1"))])])
                                         "."
                                         `Source)
                                        " ‚äÜ "
                                        (Term.proj
                                         (Term.app
                                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                          [(Term.proj `j "." (fieldIdx "1"))])
                                         "."
                                         `Source)))]
                                     ":="
                                     (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                                  [])
                                 (group
                                  (Tactic.exact
                                   "exact"
                                   (Term.app
                                    `inter_subset_inter
                                    [(Term.app `preimage_mono [`this])
                                     (Term.app `subset.refl [(Term.app `range [`I])])]))
                                  [])]))))))
                          [])
                         (group (Tactic.apply "apply" `B) [])
                         (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
                     [])
                    (group
                     (Tactic.tacticShow_
                      "show"
                      (Term.app
                       `DifferentiableWithinAt
                       [`ùïú
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `u "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I]))
                        (Term.app
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `j "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         [(Term.app `I [`x])])]))
                     [])
                    (group
                     (Tactic.¬´tactic¬∑._¬ª
                      "¬∑"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group
                          (Tactic.tacticHave_
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`A []]
                             [(Term.typeSpec
                               ":"
                               (Term.app
                                `TimesContDiffOn
                                [`ùïú
                                 (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  `I
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.app
                                    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                    [(Term.proj `u "." (fieldIdx "1"))])
                                   " ‚àò "
                                   `I.symm))
                                 (Init.Core.¬´term_‚à©_¬ª
                                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                                   `I.symm
                                   " ‚Åª¬π' "
                                   (Term.proj
                                    (Term.app
                                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                     [(Term.proj `u "." (fieldIdx "1"))])
                                    "."
                                    `Source))
                                  " ‚à© "
                                  (Term.app `range [`I]))]))]
                             ":="
                             (Term.proj
                              (Term.app
                               `HasGroupoid.compatible
                               [(Term.app
                                 `timesContDiffGroupoid
                                 [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                                (Term.proj `j "." (fieldIdx "2"))
                                (Term.proj `u "." (fieldIdx "2"))])
                              "."
                              (fieldIdx "1")))))
                          [])
                         (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
                         (group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                           [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                          [])
                         (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                         (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
                     [])
                    (group
                     (Tactic.tacticShow_
                      "show"
                      (Init.Core.¬´term_‚äÜ_¬ª
                       (Init.Core.¬´term_‚à©_¬ª
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         `I.symm
                         " ‚Åª¬π' "
                         (Term.proj
                          (Term.app
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `j "." (fieldIdx "1"))])
                            "."
                            `trans)
                           [(Term.app
                             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `u "." (fieldIdx "1"))])])
                          "."
                          `Source))
                        " ‚à© "
                        (Term.app `range [`I]))
                       " ‚äÜ "
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         `I
                         " ‚àò "
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Term.proj `j "." (fieldIdx "1"))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                           " ‚àò "
                           `I.symm)))
                        " ‚Åª¬π' "
                        (Init.Core.¬´term_‚à©_¬ª
                         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                          `I.symm
                          " ‚Åª¬π' "
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])
                           "."
                           `Source))
                         " ‚à© "
                         (Term.app `range [`I])))))
                     [])
                    (group
                     (Tactic.¬´tactic¬∑._¬ª
                      "¬∑"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(group (Tactic.intro "intro" [`y `hy]) [])
                         (group
                          (Tactic.simp'
                           "simp'"
                           []
                           []
                           ["only"]
                           []
                           ["with" [`mfld_simps]]
                           [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                          [])
                         (group
                          (Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
                           [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                          [])
                         (group
                          (Tactic.¬´tactic¬∑._¬ª
                           "¬∑"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.simp'
                                "simp'"
                                []
                                []
                                ["only"]
                                ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                                ["with" [`mfld_simps]]
                                [])
                               [])])))
                          [])
                         (group
                          (Tactic.¬´tactic¬∑._¬ª
                           "¬∑"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(group
                               (Tactic.exact
                                "exact"
                                (Term.proj
                                 (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                                 "."
                                 (fieldIdx "2")))
                               [])])))
                          [])])))
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`B []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `u "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª
                         (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                         " ‚àò "
                         `I.symm))))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])])
                   "="
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])])))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.tacticHave_
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`E []]
                        [(Term.typeSpec
                          ":"
                          (Term.forall
                           "‚àÄ"
                           []
                           ","
                           (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                            "‚àÄ"
                            `y
                            (¬´binderTerm‚àà_¬ª
                             "‚àà"
                             (Init.Core.¬´term_‚à©_¬ª
                              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                               `I.symm
                               " ‚Åª¬π' "
                               (Term.proj
                                (Term.app
                                 (Term.proj
                                  (Term.app
                                   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                   [(Term.proj `j "." (fieldIdx "1"))])
                                  "."
                                  `trans)
                                 [(Term.app
                                   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                   [(Term.proj `u "." (fieldIdx "1"))])])
                                "."
                                `Source))
                              " ‚à© "
                              (Term.app `range [`I])))
                            ","
                            (Term.forall
                             "‚àÄ"
                             []
                             ","
                             (¬´term_=_¬ª
                              (Term.app
                               (Rel.Data.Rel.¬´term_‚àò_¬ª
                                (Rel.Data.Rel.¬´term_‚àò_¬ª
                                 `I
                                 " ‚àò "
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  (Term.proj `u "." (fieldIdx "1"))
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                                   " ‚àò "
                                   `I.symm)))
                                " ‚àò "
                                (Rel.Data.Rel.¬´term_‚àò_¬ª
                                 `I
                                 " ‚àò "
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  (Term.proj `j "." (fieldIdx "1"))
                                  " ‚àò "
                                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                                   (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                   " ‚àò "
                                   `I.symm))))
                               [`y])
                              "="
                              (Term.app
                               (Rel.Data.Rel.¬´term_‚àò_¬ª
                                `I
                                " ‚àò "
                                (Rel.Data.Rel.¬´term_‚àò_¬ª
                                 (Term.proj `u "." (fieldIdx "1"))
                                 " ‚àò "
                                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                                  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                  " ‚àò "
                                  `I.symm)))
                               [`y]))))))]
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(group (Tactic.intro "intro" [`y `hy]) [])
                            (group
                             (Tactic.simp
                              "simp"
                              []
                              ["only"]
                              ["["
                               [(Tactic.simpLemma [] [] `Function.comp_app)
                                ","
                                (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                               "]"]
                              [])
                             [])
                            (group
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                               "]")
                              [])
                             [])
                            (group
                             (Tactic.exact
                              "exact"
                              (Term.proj
                               (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                               "."
                               (fieldIdx "2")))
                             [])]))))))
                     [])
                    (group
                     (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`C []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])])
                   "="
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Term.app `range [`I])
                     (Term.app `I [`x])])))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                    (group
                     (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                     [])
                    (group
                     (Tactic.apply
                      "apply"
                      (Term.app
                       `I.continuous_symm.continuous_at.preimage_mem_nhds
                       [(Term.app
                         `IsOpen.mem_nhds
                         [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                     [])
                    (group
                     (Tactic.simpa
                      "simpa"
                      []
                      ["only"]
                      ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                      []
                      ["using" `hx])
                     [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`D []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      [(Term.app `I [`x])])])
                   "="
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Term.app `range [`I])
                     (Term.app
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      [(Term.app `I [`x])])])))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                    (group
                     (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                     [])
                    (group
                     (Tactic.apply
                      "apply"
                      (Term.app
                       `I.continuous_symm.continuous_at.preimage_mem_nhds
                       [(Term.app
                         `IsOpen.mem_nhds
                         [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                     [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                     [])
                    (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                    (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])]))))))
             [])
            (group
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`E []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `j "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Init.Core.¬´term_‚à©_¬ª
                      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                       `I.symm
                       " ‚Åª¬π' "
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `j "." (fieldIdx "1"))])
                          "."
                          `trans)
                         [(Term.app
                           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                           [(Term.proj `u "." (fieldIdx "1"))])])
                        "."
                        `Source))
                      " ‚à© "
                      (Term.app `range [`I]))
                     (Term.app `I [`x])])
                   "="
                   (Term.app
                    `fderivWithin
                    [`ùïú
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `j "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     (Term.app `range [`I])
                     (Term.app `I [`x])])))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                    (group
                     (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                     [])
                    (group
                     (Tactic.apply
                      "apply"
                      (Term.app
                       `I.continuous_symm.continuous_at.preimage_mem_nhds
                       [(Term.app
                         `IsOpen.mem_nhds
                         [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                     [])
                    (group
                     (Tactic.simpa
                      "simpa"
                      []
                      ["only"]
                      ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                      []
                      ["using" `hx])
                     [])]))))))
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `B) "," (Tactic.rwRule [] `C) "," (Tactic.rwRule [] `D) "," (Tactic.rwRule [] `E)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`A] []))])
             [])
            (group
             (Tactic.simp'
              "simp'"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `A) "," (Tactic.simpLemma [] [] `ContinuousLinearMap.coe_comp')] "]"]
              ["with" [`mfld_simps]]
              [])
             [])]))))))
     [])]
   (Term.optEllipsis [])
   []
   "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInst', expected 'Lean.Parser.Term.structInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.optEllipsis', expected 'Lean.Parser.Term.optEllipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstField.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`i `j `u `x `hx] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`M []]
            [(Term.typeSpec
              ":"
              (Init.Core.¬´term_‚àà_¬ª
               (Term.app `I [`x])
               " ‚àà "
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))))]
            ":="
            (Term.anonymousCtor
             "‚ü®"
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.simpa
                    "simpa"
                    []
                    ["only"]
                    ["["
                     [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                     "]"]
                    []
                    ["using" `hx])
                   [])])))
              ","
              (Term.app `mem_range_self [(Term.hole "_")])]
             "‚ü©"))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`U []]
            [(Term.typeSpec
              ":"
              (Term.app
               `UniqueDiffWithinAt
               [`ùïú
                (Init.Core.¬´term_‚à©_¬ª
                 (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                  `I.symm
                  " ‚Åª¬π' "
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.app
                      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `j "." (fieldIdx "1"))])
                     "."
                     `trans)
                    [(Term.app
                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `u "." (fieldIdx "1"))])])
                   "."
                   `Source))
                 " ‚à© "
                 (Term.app `range [`I]))
                (Term.app `I [`x])]))]
            ":="
            (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M]))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`A []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `u "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])
               "="
               (Term.app
                (Term.proj
                 (Term.app
                  `fderivWithin
                  [`ùïú
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.proj `u "." (fieldIdx "1"))
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))
                   (Term.app
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.proj `j "." (fieldIdx "1"))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                    [(Term.app `I [`x])])])
                 "."
                 `comp)
                [(Term.app
                  `fderivWithin
                  [`ùïú
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.proj `j "." (fieldIdx "1"))
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `trans)
                       [(Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))
                   (Term.app `I [`x])])])))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.apply
                  "apply"
                  (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
                 [])
                (group
                 (Tactic.tacticShow_
                  "show"
                  (Term.app
                   `DifferentiableWithinAt
                   [`ùïú
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.proj `j "." (fieldIdx "1"))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `trans)
                        [(Term.app
                          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `u "." (fieldIdx "1"))])])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))
                    (Term.app `I [`x])]))
                 [])
                (group
                 (Tactic.¬´tactic¬∑._¬ª
                  "¬∑"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`A []]
                         [(Term.typeSpec
                           ":"
                           (Term.app
                            `TimesContDiffOn
                            [`ùïú
                             (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              `I
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.app
                                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                [(Term.proj `j "." (fieldIdx "1"))])
                               " ‚àò "
                               `I.symm))
                             (Init.Core.¬´term_‚à©_¬ª
                              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                               `I.symm
                               " ‚Åª¬π' "
                               (Term.proj
                                (Term.app
                                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `j "." (fieldIdx "1"))])
                                "."
                                `Source))
                              " ‚à© "
                              (Term.app `range [`I]))]))]
                         ":="
                         (Term.proj
                          (Term.app
                           `HasGroupoid.compatible
                           [(Term.app
                             `timesContDiffGroupoid
                             [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                            (Term.proj `i "." (fieldIdx "2"))
                            (Term.proj `j "." (fieldIdx "2"))])
                          "."
                          (fieldIdx "1")))))
                      [])
                     (group
                      (Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`B []]
                         [(Term.typeSpec
                           ":"
                           (Term.app
                            `DifferentiableOn
                            [`ùïú
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              `I
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.proj `j "." (fieldIdx "1"))
                               " ‚àò "
                               (Rel.Data.Rel.¬´term_‚àò_¬ª
                                (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                                " ‚àò "
                                `I.symm)))
                             (Init.Core.¬´term_‚à©_¬ª
                              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                               `I.symm
                               " ‚Åª¬π' "
                               (Term.proj
                                (Term.app
                                 (Term.proj
                                  (Term.app
                                   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                   [(Term.proj `j "." (fieldIdx "1"))])
                                  "."
                                  `trans)
                                 [(Term.app
                                   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                   [(Term.proj `u "." (fieldIdx "1"))])])
                                "."
                                `Source))
                              " ‚à© "
                              (Term.app `range [`I]))]))]
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(group
                              (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono))
                              [])
                             (group
                              (Tactic.tacticHave_
                               "have"
                               (Term.haveDecl
                                (Term.haveIdDecl
                                 []
                                 [(Term.typeSpec
                                   ":"
                                   (Init.Core.¬´term_‚äÜ_¬ª
                                    (Term.proj
                                     (Term.app
                                      (Term.proj
                                       (Term.app
                                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                        [(Term.proj `j "." (fieldIdx "1"))])
                                       "."
                                       `trans)
                                      [(Term.app
                                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                        [(Term.proj `u "." (fieldIdx "1"))])])
                                     "."
                                     `Source)
                                    " ‚äÜ "
                                    (Term.proj
                                     (Term.app
                                      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                      [(Term.proj `j "." (fieldIdx "1"))])
                                     "."
                                     `Source)))]
                                 ":="
                                 (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                              [])
                             (group
                              (Tactic.exact
                               "exact"
                               (Term.app
                                `inter_subset_inter
                                [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
                              [])]))))))
                      [])
                     (group (Tactic.apply "apply" `B) [])
                     (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
                 [])
                (group
                 (Tactic.tacticShow_
                  "show"
                  (Term.app
                   `DifferentiableWithinAt
                   [`ùïú
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.proj `u "." (fieldIdx "1"))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `u "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I]))
                    (Term.app
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `j "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     [(Term.app `I [`x])])]))
                 [])
                (group
                 (Tactic.¬´tactic¬∑._¬ª
                  "¬∑"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`A []]
                         [(Term.typeSpec
                           ":"
                           (Term.app
                            `TimesContDiffOn
                            [`ùïú
                             (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              `I
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.app
                                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                [(Term.proj `u "." (fieldIdx "1"))])
                               " ‚àò "
                               `I.symm))
                             (Init.Core.¬´term_‚à©_¬ª
                              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                               `I.symm
                               " ‚Åª¬π' "
                               (Term.proj
                                (Term.app
                                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `u "." (fieldIdx "1"))])
                                "."
                                `Source))
                              " ‚à© "
                              (Term.app `range [`I]))]))]
                         ":="
                         (Term.proj
                          (Term.app
                           `HasGroupoid.compatible
                           [(Term.app
                             `timesContDiffGroupoid
                             [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                            (Term.proj `j "." (fieldIdx "2"))
                            (Term.proj `u "." (fieldIdx "2"))])
                          "."
                          (fieldIdx "1")))))
                      [])
                     (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                      [])
                     (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                     (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
                 [])
                (group
                 (Tactic.tacticShow_
                  "show"
                  (Init.Core.¬´term_‚äÜ_¬ª
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `trans)
                       [(Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))
                   " ‚äÜ "
                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.proj `j "." (fieldIdx "1"))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                    " ‚Åª¬π' "
                    (Init.Core.¬´term_‚à©_¬ª
                     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                      `I.symm
                      " ‚Åª¬π' "
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `u "." (fieldIdx "1"))])
                       "."
                       `Source))
                     " ‚à© "
                     (Term.app `range [`I])))))
                 [])
                (group
                 (Tactic.¬´tactic¬∑._¬ª
                  "¬∑"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group (Tactic.intro "intro" [`y `hy]) [])
                     (group
                      (Tactic.simp'
                       "simp'"
                       []
                       []
                       ["only"]
                       []
                       ["with" [`mfld_simps]]
                       [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                      [])
                     (group
                      (Tactic.¬´tactic¬∑._¬ª
                       "¬∑"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.simp'
                            "simp'"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                            ["with" [`mfld_simps]]
                            [])
                           [])])))
                      [])
                     (group
                      (Tactic.¬´tactic¬∑._¬ª
                       "¬∑"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(group
                           (Tactic.exact
                            "exact"
                            (Term.proj
                             (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                             "."
                             (fieldIdx "2")))
                           [])])))
                      [])])))
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`B []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `u "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])
               "="
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`E []]
                    [(Term.typeSpec
                      ":"
                      (Term.forall
                       "‚àÄ"
                       []
                       ","
                       (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                        "‚àÄ"
                        `y
                        (¬´binderTerm‚àà_¬ª
                         "‚àà"
                         (Init.Core.¬´term_‚à©_¬ª
                          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                           `I.symm
                           " ‚Åª¬π' "
                           (Term.proj
                            (Term.app
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `trans)
                             [(Term.app
                               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `u "." (fieldIdx "1"))])])
                            "."
                            `Source))
                          " ‚à© "
                          (Term.app `range [`I])))
                        ","
                        (Term.forall
                         "‚àÄ"
                         []
                         ","
                         (¬´term_=_¬ª
                          (Term.app
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             `I
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj `u "." (fieldIdx "1"))
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                               " ‚àò "
                               `I.symm)))
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             `I
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj `j "." (fieldIdx "1"))
                              " ‚àò "
                              (Rel.Data.Rel.¬´term_‚àò_¬ª
                               (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                               " ‚àò "
                               `I.symm))))
                           [`y])
                          "="
                          (Term.app
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            `I
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj `u "." (fieldIdx "1"))
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                              " ‚àò "
                              `I.symm)))
                           [`y]))))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group (Tactic.intro "intro" [`y `hy]) [])
                        (group
                         (Tactic.simp
                          "simp"
                          []
                          ["only"]
                          ["["
                           [(Tactic.simpLemma [] [] `Function.comp_app)
                            ","
                            (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                           "]"]
                          [])
                         [])
                        (group
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                           "]")
                          [])
                         [])
                        (group
                         (Tactic.exact
                          "exact"
                          (Term.proj
                           (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                           "."
                           (fieldIdx "2")))
                         [])]))))))
                 [])
                (group
                 (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`C []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])
               "="
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Term.app `range [`I])
                 (Term.app `I [`x])])))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                (group
                 (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                 [])
                (group
                 (Tactic.apply
                  "apply"
                  (Term.app
                   `I.continuous_symm.continuous_at.preimage_mem_nhds
                   [(Term.app
                     `IsOpen.mem_nhds
                     [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                 [])
                (group
                 (Tactic.simpa
                  "simpa"
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                  []
                  ["using" `hx])
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`D []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  [(Term.app `I [`x])])])
               "="
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Term.app `range [`I])
                 (Term.app
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  [(Term.app `I [`x])])])))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                (group
                 (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                 [])
                (group
                 (Tactic.apply
                  "apply"
                  (Term.app
                   `I.continuous_symm.continuous_at.preimage_mem_nhds
                   [(Term.app
                     `IsOpen.mem_nhds
                     [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                 [])
                (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`E []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `j "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])
               "="
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `j "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Term.app `range [`I])
                 (Term.app `I [`x])])))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                (group
                 (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
                 [])
                (group
                 (Tactic.apply
                  "apply"
                  (Term.app
                   `I.continuous_symm.continuous_at.preimage_mem_nhds
                   [(Term.app
                     `IsOpen.mem_nhds
                     [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                 [])
                (group
                 (Tactic.simpa
                  "simpa"
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                  []
                  ["using" `hx])
                 [])]))))))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule [] `B) "," (Tactic.rwRule [] `C) "," (Tactic.rwRule [] `D) "," (Tactic.rwRule [] `E)]
           "]")
          [(Tactic.location "at" (Tactic.locationHyp [`A] []))])
         [])
        (group
         (Tactic.simp'
          "simp'"
          []
          []
          ["only"]
          ["[" [(Tactic.simpLemma [] [] `A) "," (Tactic.simpLemma [] [] `ContinuousLinearMap.coe_comp')] "]"]
          ["with" [`mfld_simps]]
          [])
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`M []]
          [(Term.typeSpec
            ":"
            (Init.Core.¬´term_‚àà_¬ª
             (Term.app `I [`x])
             " ‚àà "
             (Init.Core.¬´term_‚à©_¬ª
              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
               `I.symm
               " ‚Åª¬π' "
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `j "." (fieldIdx "1"))])
                  "."
                  `trans)
                 [(Term.app
                   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `u "." (fieldIdx "1"))])])
                "."
                `Source))
              " ‚à© "
              (Term.app `range [`I]))))]
          ":="
          (Term.anonymousCtor
           "‚ü®"
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simpa
                  "simpa"
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                   "]"]
                  []
                  ["using" `hx])
                 [])])))
            ","
            (Term.app `mem_range_self [(Term.hole "_")])]
           "‚ü©"))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`U []]
          [(Term.typeSpec
            ":"
            (Term.app
             `UniqueDiffWithinAt
             [`ùïú
              (Init.Core.¬´term_‚à©_¬ª
               (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                `I.symm
                " ‚Åª¬π' "
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.app
                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `j "." (fieldIdx "1"))])
                   "."
                   `trans)
                  [(Term.app
                    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `u "." (fieldIdx "1"))])])
                 "."
                 `Source))
               " ‚à© "
               (Term.app `range [`I]))
              (Term.app `I [`x])]))]
          ":="
          (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M]))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `u "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `j "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app `I [`x])])
             "="
             (Term.app
              (Term.proj
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  [(Term.app `I [`x])])])
               "."
               `comp)
              [(Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `j "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 (Term.app `I [`x])])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.apply
                "apply"
                (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
               [])
              (group
               (Tactic.tacticShow_
                "show"
                (Term.app
                 `DifferentiableWithinAt
                 [`ùïú
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  (Init.Core.¬´term_‚à©_¬ª
                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                    `I.symm
                    " ‚Åª¬π' "
                    (Term.proj
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       "."
                       `trans)
                      [(Term.app
                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `u "." (fieldIdx "1"))])])
                     "."
                     `Source))
                   " ‚à© "
                   (Term.app `range [`I]))
                  (Term.app `I [`x])]))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`A []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `TimesContDiffOn
                          [`ùïú
                           (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            `I
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             " ‚àò "
                             `I.symm))
                           (Init.Core.¬´term_‚à©_¬ª
                            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                             `I.symm
                             " ‚Åª¬π' "
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `Source))
                            " ‚à© "
                            (Term.app `range [`I]))]))]
                       ":="
                       (Term.proj
                        (Term.app
                         `HasGroupoid.compatible
                         [(Term.app
                           `timesContDiffGroupoid
                           [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                          (Term.proj `i "." (fieldIdx "2"))
                          (Term.proj `j "." (fieldIdx "2"))])
                        "."
                        (fieldIdx "1")))))
                    [])
                   (group
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`B []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `DifferentiableOn
                          [`ùïú
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            `I
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj `j "." (fieldIdx "1"))
                             " ‚àò "
                             (Rel.Data.Rel.¬´term_‚àò_¬ª
                              (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                              " ‚àò "
                              `I.symm)))
                           (Init.Core.¬´term_‚à©_¬ª
                            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                             `I.symm
                             " ‚Åª¬π' "
                             (Term.proj
                              (Term.app
                               (Term.proj
                                (Term.app
                                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `j "." (fieldIdx "1"))])
                                "."
                                `trans)
                               [(Term.app
                                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `u "." (fieldIdx "1"))])])
                              "."
                              `Source))
                            " ‚à© "
                            (Term.app `range [`I]))]))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(group
                            (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono))
                            [])
                           (group
                            (Tactic.tacticHave_
                             "have"
                             (Term.haveDecl
                              (Term.haveIdDecl
                               []
                               [(Term.typeSpec
                                 ":"
                                 (Init.Core.¬´term_‚äÜ_¬ª
                                  (Term.proj
                                   (Term.app
                                    (Term.proj
                                     (Term.app
                                      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                      [(Term.proj `j "." (fieldIdx "1"))])
                                     "."
                                     `trans)
                                    [(Term.app
                                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                      [(Term.proj `u "." (fieldIdx "1"))])])
                                   "."
                                   `Source)
                                  " ‚äÜ "
                                  (Term.proj
                                   (Term.app
                                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                    [(Term.proj `j "." (fieldIdx "1"))])
                                   "."
                                   `Source)))]
                               ":="
                               (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                            [])
                           (group
                            (Tactic.exact
                             "exact"
                             (Term.app
                              `inter_subset_inter
                              [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
                            [])]))))))
                    [])
                   (group (Tactic.apply "apply" `B) [])
                   (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
               [])
              (group
               (Tactic.tacticShow_
                "show"
                (Term.app
                 `DifferentiableWithinAt
                 [`ùïú
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `u "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  (Init.Core.¬´term_‚à©_¬ª
                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                    `I.symm
                    " ‚Åª¬π' "
                    (Term.proj
                     (Term.app
                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `u "." (fieldIdx "1"))])
                     "."
                     `Source))
                   " ‚à© "
                   (Term.app `range [`I]))
                  (Term.app
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.proj `j "." (fieldIdx "1"))
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                   [(Term.app `I [`x])])]))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`A []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `TimesContDiffOn
                          [`ùïú
                           (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            `I
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `u "." (fieldIdx "1"))])
                             " ‚àò "
                             `I.symm))
                           (Init.Core.¬´term_‚à©_¬ª
                            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                             `I.symm
                             " ‚Åª¬π' "
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `u "." (fieldIdx "1"))])
                              "."
                              `Source))
                            " ‚à© "
                            (Term.app `range [`I]))]))]
                       ":="
                       (Term.proj
                        (Term.app
                         `HasGroupoid.compatible
                         [(Term.app
                           `timesContDiffGroupoid
                           [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                          (Term.proj `j "." (fieldIdx "2"))
                          (Term.proj `u "." (fieldIdx "2"))])
                        "."
                        (fieldIdx "1")))))
                    [])
                   (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                    [])
                   (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
                   (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
               [])
              (group
               (Tactic.tacticShow_
                "show"
                (Init.Core.¬´term_‚äÜ_¬ª
                 (Init.Core.¬´term_‚à©_¬ª
                  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                   `I.symm
                   " ‚Åª¬π' "
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])])
                    "."
                    `Source))
                  " ‚à© "
                  (Term.app `range [`I]))
                 " ‚äÜ "
                 (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  " ‚Åª¬π' "
                  (Init.Core.¬´term_‚à©_¬ª
                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                    `I.symm
                    " ‚Åª¬π' "
                    (Term.proj
                     (Term.app
                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `u "." (fieldIdx "1"))])
                     "."
                     `Source))
                   " ‚à© "
                   (Term.app `range [`I])))))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.intro "intro" [`y `hy]) [])
                   (group
                    (Tactic.simp'
                     "simp'"
                     []
                     []
                     ["only"]
                     []
                     ["with" [`mfld_simps]]
                     [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                    [])
                   (group
                    (Tactic.¬´tactic¬∑._¬ª
                     "¬∑"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.simp'
                          "simp'"
                          []
                          []
                          ["only"]
                          ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                          ["with" [`mfld_simps]]
                          [])
                         [])])))
                    [])
                   (group
                    (Tactic.¬´tactic¬∑._¬ª
                     "¬∑"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(group
                         (Tactic.exact
                          "exact"
                          (Term.proj
                           (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                           "."
                           (fieldIdx "2")))
                         [])])))
                    [])])))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`B []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `u "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `j "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app `I [`x])])
             "="
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `u "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app `I [`x])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`E []]
                  [(Term.typeSpec
                    ":"
                    (Term.forall
                     "‚àÄ"
                     []
                     ","
                     (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                      "‚àÄ"
                      `y
                      (¬´binderTerm‚àà_¬ª
                       "‚àà"
                       (Init.Core.¬´term_‚à©_¬ª
                        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                         `I.symm
                         " ‚Åª¬π' "
                         (Term.proj
                          (Term.app
                           (Term.proj
                            (Term.app
                             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `j "." (fieldIdx "1"))])
                            "."
                            `trans)
                           [(Term.app
                             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                             [(Term.proj `u "." (fieldIdx "1"))])])
                          "."
                          `Source))
                        " ‚à© "
                        (Term.app `range [`I])))
                      ","
                      (Term.forall
                       "‚àÄ"
                       []
                       ","
                       (¬´term_=_¬ª
                        (Term.app
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           `I
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj `u "." (fieldIdx "1"))
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
                             " ‚àò "
                             `I.symm)))
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           `I
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj `j "." (fieldIdx "1"))
                            " ‚àò "
                            (Rel.Data.Rel.¬´term_‚àò_¬ª
                             (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                             " ‚àò "
                             `I.symm))))
                         [`y])
                        "="
                        (Term.app
                         (Rel.Data.Rel.¬´term_‚àò_¬ª
                          `I
                          " ‚àò "
                          (Rel.Data.Rel.¬´term_‚àò_¬ª
                           (Term.proj `u "." (fieldIdx "1"))
                           " ‚àò "
                           (Rel.Data.Rel.¬´term_‚àò_¬ª
                            (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
                            " ‚àò "
                            `I.symm)))
                         [`y]))))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.intro "intro" [`y `hy]) [])
                      (group
                       (Tactic.simp
                        "simp"
                        []
                        ["only"]
                        ["["
                         [(Tactic.simpLemma [] [] `Function.comp_app)
                          ","
                          (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                         "]"]
                        [])
                       [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.proj
                         (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
                         "."
                         (fieldIdx "2")))
                       [])]))))))
               [])
              (group
               (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`C []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `u "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app `I [`x])])
             "="
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `u "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Term.app `range [`I])
               (Term.app `I [`x])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
              (group
               (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
               [])
              (group
               (Tactic.apply
                "apply"
                (Term.app
                 `I.continuous_symm.continuous_at.preimage_mem_nhds
                 [(Term.app
                   `IsOpen.mem_nhds
                   [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
               [])
              (group
               (Tactic.simpa
                "simpa"
                []
                ["only"]
                ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                []
                ["using" `hx])
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`D []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `u "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `u "." (fieldIdx "1"))])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `j "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                [(Term.app `I [`x])])])
             "="
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `u "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Term.app `range [`I])
               (Term.app
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 `I
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Term.proj `j "." (fieldIdx "1"))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                [(Term.app `I [`x])])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
              (group
               (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
               [])
              (group
               (Tactic.apply
                "apply"
                (Term.app
                 `I.continuous_symm.continuous_at.preimage_mem_nhds
                 [(Term.app
                   `IsOpen.mem_nhds
                   [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
               [])
              (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
              (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`E []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `j "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               (Term.app `I [`x])])
             "="
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `j "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Term.app `range [`I])
               (Term.app `I [`x])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
              (group
               (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
               [])
              (group
               (Tactic.apply
                "apply"
                (Term.app
                 `I.continuous_symm.continuous_at.preimage_mem_nhds
                 [(Term.app
                   `IsOpen.mem_nhds
                   [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
               [])
              (group
               (Tactic.simpa
                "simpa"
                []
                ["only"]
                ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
                []
                ["using" `hx])
               [])]))))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule [] `B) "," (Tactic.rwRule [] `C) "," (Tactic.rwRule [] `D) "," (Tactic.rwRule [] `E)]
         "]")
        [(Tactic.location "at" (Tactic.locationHyp [`A] []))])
       [])
      (group
       (Tactic.simp'
        "simp'"
        []
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `A) "," (Tactic.simpLemma [] [] `ContinuousLinearMap.coe_comp')] "]"]
        ["with" [`mfld_simps]]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp'
   "simp'"
   []
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `A) "," (Tactic.simpLemma [] [] `ContinuousLinearMap.coe_comp')] "]"]
   ["with" [`mfld_simps]]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ContinuousLinearMap.coe_comp'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule [] `B) "," (Tactic.rwRule [] `C) "," (Tactic.rwRule [] `D) "," (Tactic.rwRule [] `E)]
    "]")
   [(Tactic.location "at" (Tactic.locationHyp [`A] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `D
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `C
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `B
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`E []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `j "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])])
        "="
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `j "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Term.app `range [`I])
          (Term.app `I [`x])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
         (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
         (group
          (Tactic.apply
           "apply"
           (Term.app
            `I.continuous_symm.continuous_at.preimage_mem_nhds
            [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
          [])
         (group
          (Tactic.simpa
           "simpa"
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
           []
           ["using" `hx])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
      (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
      (group
       (Tactic.apply
        "apply"
        (Term.app
         `I.continuous_symm.continuous_at.preimage_mem_nhds
         [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
       [])
      (group
       (Tactic.simpa
        "simpa"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
        []
        ["using" `hx])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"] [] ["using" `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ModelWithCorners.left_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply
   "apply"
   (Term.app
    `I.continuous_symm.continuous_at.preimage_mem_nhds
    [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `I.continuous_symm.continuous_at.preimage_mem_nhds
   [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `LocalHomeomorph.open_source [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `LocalHomeomorph.open_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `IsOpen.mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `IsOpen.mem_nhds
   [(Term.paren "(" [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []] ")") (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I.continuous_symm.continuous_at.preimage_mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.unique_diff_at_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderiv_within_inter
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inter_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])])
   "="
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Term.app `range [`I])
     (Term.app `I [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Term.app `range [`I])
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`D []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
              [(Term.proj `u "." (fieldIdx "1"))])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `j "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
           [(Term.app `I [`x])])])
        "="
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Term.app `range [`I])
          (Term.app
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `j "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
           [(Term.app `I [`x])])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
         (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
         (group
          (Tactic.apply
           "apply"
           (Term.app
            `I.continuous_symm.continuous_at.preimage_mem_nhds
            [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
          [])
         (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
         (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
      (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
      (group
       (Tactic.apply
        "apply"
        (Term.app
         `I.continuous_symm.continuous_at.preimage_mem_nhds
         [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
       [])
      (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
      (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `LocalHomeomorph.trans_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply
   "apply"
   (Term.app
    `I.continuous_symm.continuous_at.preimage_mem_nhds
    [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `I.continuous_symm.continuous_at.preimage_mem_nhds
   [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `LocalHomeomorph.open_source [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `LocalHomeomorph.open_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `IsOpen.mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `IsOpen.mem_nhds
   [(Term.paren "(" [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []] ")") (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I.continuous_symm.continuous_at.preimage_mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.unique_diff_at_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderiv_within_inter
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inter_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      [(Term.app `I [`x])])])
   "="
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Term.app `range [`I])
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      [(Term.app `I [`x])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Term.app `range [`I])
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [(Term.app `I [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [(Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   [(Term.paren "(" [(Term.app `I [`x]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [(Term.app `I [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [(Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   [(Term.paren "(" [(Term.app `I [`x]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`C []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])])
        "="
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Term.app `range [`I])
          (Term.app `I [`x])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
         (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
         (group
          (Tactic.apply
           "apply"
           (Term.app
            `I.continuous_symm.continuous_at.preimage_mem_nhds
            [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
          [])
         (group
          (Tactic.simpa
           "simpa"
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
           []
           ["using" `hx])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
      (group (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])) [])
      (group
       (Tactic.apply
        "apply"
        (Term.app
         `I.continuous_symm.continuous_at.preimage_mem_nhds
         [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
       [])
      (group
       (Tactic.simpa
        "simpa"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
        []
        ["using" `hx])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] ["only"] ["[" [(Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"] [] ["using" `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ModelWithCorners.left_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply
   "apply"
   (Term.app
    `I.continuous_symm.continuous_at.preimage_mem_nhds
    [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `I.continuous_symm.continuous_at.preimage_mem_nhds
   [(Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `IsOpen.mem_nhds [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `LocalHomeomorph.open_source [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `LocalHomeomorph.open_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `IsOpen.mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `IsOpen.mem_nhds
   [(Term.paren "(" [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) []] ")") (Term.hole "_")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I.continuous_symm.continuous_at.preimage_mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderiv_within_inter [(Term.hole "_") `I.unique_diff_at_image])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.unique_diff_at_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderiv_within_inter
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inter_comm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])])
   "="
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Term.app `range [`I])
     (Term.app `I [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Term.app `range [`I])
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`B []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `u "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `j "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])])
        "="
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`E []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                []
                ","
                (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
                 "‚àÄ"
                 `y
                 (¬´binderTerm‚àà_¬ª
                  "‚àà"
                  (Init.Core.¬´term_‚à©_¬ª
                   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                    `I.symm
                    " ‚Åª¬π' "
                    (Term.proj
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `j "." (fieldIdx "1"))])
                       "."
                       `trans)
                      [(Term.app
                        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                        [(Term.proj `u "." (fieldIdx "1"))])])
                     "."
                     `Source))
                   " ‚à© "
                   (Term.app `range [`I])))
                 ","
                 (Term.forall
                  "‚àÄ"
                  []
                  ","
                  (¬´term_=_¬ª
                   (Term.app
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `u "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      `I
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       (Term.proj `j "." (fieldIdx "1"))
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
                    [`y])
                   "="
                   (Term.app
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     `I
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª
                      (Term.proj `u "." (fieldIdx "1"))
                      " ‚àò "
                      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                    [`y]))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.intro "intro" [`y `hy]) [])
                 (group
                  (Tactic.simp
                   "simp"
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `Function.comp_app)
                     ","
                     (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                    "]"]
                   [])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
                  [])]))))))
          [])
         (group
          (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`E []]
          [(Term.typeSpec
            ":"
            (Term.forall
             "‚àÄ"
             []
             ","
             (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
              "‚àÄ"
              `y
              (¬´binderTerm‚àà_¬ª
               "‚àà"
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `j "." (fieldIdx "1"))])
                    "."
                    `trans)
                   [(Term.app
                     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                     [(Term.proj `u "." (fieldIdx "1"))])])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I])))
              ","
              (Term.forall
               "‚àÄ"
               []
               ","
               (¬´term_=_¬ª
                (Term.app
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `u "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   `I
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    (Term.proj `j "." (fieldIdx "1"))
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
                 [`y])
                "="
                (Term.app
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `u "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 [`y]))))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`y `hy]) [])
              (group
               (Tactic.simp
                "simp"
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `Function.comp_app) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
                 "]"]
                [])
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))]
                 "]")
                [])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
               [])]))))))
       [])
      (group (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])])) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderiv_within_congr [`U `E (Term.app `E [(Term.hole "_") `M])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `E [(Term.hole "_") `M])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `M
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `E [(Term.hole "_") `M]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `U
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderiv_within_congr
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`E []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "‚àÄ"
        []
        ","
        (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
         "‚àÄ"
         `y
         (¬´binderTerm‚àà_¬ª
          "‚àà"
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I])))
         ","
         (Term.forall
          "‚àÄ"
          []
          ","
          (¬´term_=_¬ª
           (Term.app
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `u "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `j "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
            [`y])
           "="
           (Term.app
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             `I
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              (Term.proj `u "." (fieldIdx "1"))
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
            [`y]))))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`y `hy]) [])
         (group
          (Tactic.simp
           "simp"
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `Function.comp_app) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)]
            "]"]
           [])
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))] "]")
           [])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`y `hy]) [])
      (group
       (Tactic.simp
        "simp"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `Function.comp_app) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))] "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `hy "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv))] "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `left_inv)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `Function.comp_app) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ModelWithCorners.left_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Function.comp_app
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`y `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
    "‚àÄ"
    `y
    (¬´binderTerm‚àà_¬ª
     "‚àà"
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I])))
    ","
    (Term.forall
     "‚àÄ"
     []
     ","
     (¬´term_=_¬ª
      (Term.app
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         `I
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          (Term.proj `u "." (fieldIdx "1"))
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         `I
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          (Term.proj `j "." (fieldIdx "1"))
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
       [`y])
      "="
      (Term.app
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `u "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
       [`y])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª
   "‚àÄ"
   `y
   (¬´binderTerm‚àà_¬ª
    "‚àà"
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I])))
   ","
   (Term.forall
    "‚àÄ"
    []
    ","
    (¬´term_=_¬ª
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `u "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `j "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
      [`y])
     "="
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      [`y]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Mathlib.ExtendedBinder.¬´term‚àÄ___,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "‚àÄ"
   []
   ","
   (¬´term_=_¬ª
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
     [`y])
    "="
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [`y])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
    [`y])
   "="
   (Term.app
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    [`y]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `u "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
   [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `u "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 0, (some 0, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´binderTerm‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])])
   "="
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `u "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 0, (some 0, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`A []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `u "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `j "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])])
        "="
        (Term.app
         (Term.proj
          (Term.app
           `fderivWithin
           [`ùïú
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             `I
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              (Term.proj `u "." (fieldIdx "1"))
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
            (Init.Core.¬´term_‚à©_¬ª
             (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
              `I.symm
              " ‚Åª¬π' "
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])
               "."
               `Source))
             " ‚à© "
             (Term.app `range [`I]))
            (Term.app
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `j "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             [(Term.app `I [`x])])])
          "."
          `comp)
         [(Term.app
           `fderivWithin
           [`ùïú
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             `I
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              (Term.proj `j "." (fieldIdx "1"))
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
            (Init.Core.¬´term_‚à©_¬ª
             (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
              `I.symm
              " ‚Åª¬π' "
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `j "." (fieldIdx "1"))])
                 "."
                 `trans)
                [(Term.app
                  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `u "." (fieldIdx "1"))])])
               "."
               `Source))
             " ‚à© "
             (Term.app `range [`I]))
            (Term.app `I [`x])])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.apply
           "apply"
           (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
          [])
         (group
          (Tactic.tacticShow_
           "show"
           (Term.app
            `DifferentiableWithinAt
            [`ùïú
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `j "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             (Init.Core.¬´term_‚à©_¬ª
              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
               `I.symm
               " ‚Åª¬π' "
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `j "." (fieldIdx "1"))])
                  "."
                  `trans)
                 [(Term.app
                   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `u "." (fieldIdx "1"))])])
                "."
                `Source))
              " ‚à© "
              (Term.app `range [`I]))
             (Term.app `I [`x])]))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`A []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `TimesContDiffOn
                     [`ùïú
                      (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        " ‚àò "
                        `I.symm))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `j "." (fieldIdx "1"))])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))]))]
                  ":="
                  (Term.proj
                   (Term.app
                    `HasGroupoid.compatible
                    [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                     (Term.proj `i "." (fieldIdx "2"))
                     (Term.proj `j "." (fieldIdx "2"))])
                   "."
                   (fieldIdx "1")))))
               [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`B []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `DifferentiableOn
                     [`ùïú
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.proj `j "." (fieldIdx "1"))
                        " ‚àò "
                        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `trans)
                          [(Term.app
                            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `u "." (fieldIdx "1"))])])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)) [])
                      (group
                       (Tactic.tacticHave_
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          []
                          [(Term.typeSpec
                            ":"
                            (Init.Core.¬´term_‚äÜ_¬ª
                             (Term.proj
                              (Term.app
                               (Term.proj
                                (Term.app
                                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `j "." (fieldIdx "1"))])
                                "."
                                `trans)
                               [(Term.app
                                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                                 [(Term.proj `u "." (fieldIdx "1"))])])
                              "."
                              `Source)
                             " ‚äÜ "
                             (Term.proj
                              (Term.app
                               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                               [(Term.proj `j "." (fieldIdx "1"))])
                              "."
                              `Source)))]
                          ":="
                          (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `inter_subset_inter
                         [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
                       [])]))))))
               [])
              (group (Tactic.apply "apply" `B) [])
              (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
          [])
         (group
          (Tactic.tacticShow_
           "show"
           (Term.app
            `DifferentiableWithinAt
            [`ùïú
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `u "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             (Init.Core.¬´term_‚à©_¬ª
              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
               `I.symm
               " ‚Åª¬π' "
               (Term.proj
                (Term.app
                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `u "." (fieldIdx "1"))])
                "."
                `Source))
              " ‚à© "
              (Term.app `range [`I]))
             (Term.app
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               `I
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Term.proj `j "." (fieldIdx "1"))
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
              [(Term.app `I [`x])])]))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`A []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `TimesContDiffOn
                     [`ùïú
                      (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                      (Rel.Data.Rel.¬´term_‚àò_¬ª
                       `I
                       " ‚àò "
                       (Rel.Data.Rel.¬´term_‚àò_¬ª
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])
                        " ‚àò "
                        `I.symm))
                      (Init.Core.¬´term_‚à©_¬ª
                       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                        `I.symm
                        " ‚Åª¬π' "
                        (Term.proj
                         (Term.app
                          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                          [(Term.proj `u "." (fieldIdx "1"))])
                         "."
                         `Source))
                       " ‚à© "
                       (Term.app `range [`I]))]))]
                  ":="
                  (Term.proj
                   (Term.app
                    `HasGroupoid.compatible
                    [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                     (Term.proj `j "." (fieldIdx "2"))
                     (Term.proj `u "." (fieldIdx "2"))])
                   "."
                   (fieldIdx "1")))))
               [])
              (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
               [])
              (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
              (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
          [])
         (group
          (Tactic.tacticShow_
           "show"
           (Init.Core.¬´term_‚äÜ_¬ª
            (Init.Core.¬´term_‚à©_¬ª
             (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
              `I.symm
              " ‚Åª¬π' "
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `j "." (fieldIdx "1"))])
                 "."
                 `trans)
                [(Term.app
                  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `u "." (fieldIdx "1"))])])
               "."
               `Source))
             " ‚à© "
             (Term.app `range [`I]))
            " ‚äÜ "
            (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
             (Rel.Data.Rel.¬´term_‚àò_¬ª
              `I
              " ‚àò "
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               (Term.proj `j "." (fieldIdx "1"))
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
             " ‚Åª¬π' "
             (Init.Core.¬´term_‚à©_¬ª
              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
               `I.symm
               " ‚Åª¬π' "
               (Term.proj
                (Term.app
                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `u "." (fieldIdx "1"))])
                "."
                `Source))
              " ‚à© "
              (Term.app `range [`I])))))
          [])
         (group
          (Tactic.¬´tactic¬∑._¬ª
           "¬∑"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`y `hy]) [])
              (group
               (Tactic.simp'
                "simp'"
                []
                []
                ["only"]
                []
                ["with" [`mfld_simps]]
                [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
               [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.simp'
                     "simp'"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                     ["with" [`mfld_simps]]
                     [])
                    [])])))
               [])
              (group
               (Tactic.¬´tactic¬∑._¬ª
                "¬∑"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.exact
                     "exact"
                     (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
                    [])])))
               [])])))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.apply
        "apply"
        (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
       [])
      (group
       (Tactic.tacticShow_
        "show"
        (Term.app
         `DifferentiableWithinAt
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `j "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               "."
               `trans)
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app `I [`x])]))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`A []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `TimesContDiffOn
                  [`ùïú
                   (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.app
                      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `j "." (fieldIdx "1"))])
                     " ‚àò "
                     `I.symm))
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))]))]
               ":="
               (Term.proj
                (Term.app
                 `HasGroupoid.compatible
                 [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                  (Term.proj `i "." (fieldIdx "2"))
                  (Term.proj `j "." (fieldIdx "2"))])
                "."
                (fieldIdx "1")))))
            [])
           (group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`B []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `DifferentiableOn
                  [`ùïú
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.proj `j "." (fieldIdx "1"))
                     " ‚àò "
                     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `trans)
                       [(Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))]))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)) [])
                   (group
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Init.Core.¬´term_‚äÜ_¬ª
                          (Term.proj
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `j "." (fieldIdx "1"))])
                             "."
                             `trans)
                            [(Term.app
                              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                              [(Term.proj `u "." (fieldIdx "1"))])])
                           "."
                           `Source)
                          " ‚äÜ "
                          (Term.proj
                           (Term.app
                            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                            [(Term.proj `j "." (fieldIdx "1"))])
                           "."
                           `Source)))]
                       ":="
                       (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
                    [])
                   (group
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `inter_subset_inter
                      [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
                    [])]))))))
            [])
           (group (Tactic.apply "apply" `B) [])
           (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
       [])
      (group
       (Tactic.tacticShow_
        "show"
        (Term.app
         `DifferentiableWithinAt
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `u "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
              [(Term.proj `u "." (fieldIdx "1"))])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I]))
          (Term.app
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            `I
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª
             (Term.proj `j "." (fieldIdx "1"))
             " ‚àò "
             (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
           [(Term.app `I [`x])])]))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`A []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `TimesContDiffOn
                  [`ùïú
                   (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
                   (Rel.Data.Rel.¬´term_‚àò_¬ª
                    `I
                    " ‚àò "
                    (Rel.Data.Rel.¬´term_‚àò_¬ª
                     (Term.app
                      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                      [(Term.proj `u "." (fieldIdx "1"))])
                     " ‚àò "
                     `I.symm))
                   (Init.Core.¬´term_‚à©_¬ª
                    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                     `I.symm
                     " ‚Åª¬π' "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `u "." (fieldIdx "1"))])
                      "."
                      `Source))
                    " ‚à© "
                    (Term.app `range [`I]))]))]
               ":="
               (Term.proj
                (Term.app
                 `HasGroupoid.compatible
                 [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
                  (Term.proj `j "." (fieldIdx "2"))
                  (Term.proj `u "." (fieldIdx "2"))])
                "."
                (fieldIdx "1")))))
            [])
           (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
            [])
           (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
           (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
       [])
      (group
       (Tactic.tacticShow_
        "show"
        (Init.Core.¬´term_‚äÜ_¬ª
         (Init.Core.¬´term_‚à©_¬ª
          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
           `I.symm
           " ‚Åª¬π' "
           (Term.proj
            (Term.app
             (Term.proj
              (Term.app
               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `j "." (fieldIdx "1"))])
              "."
              `trans)
             [(Term.app
               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `u "." (fieldIdx "1"))])])
            "."
            `Source))
          " ‚à© "
          (Term.app `range [`I]))
         " ‚äÜ "
         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `j "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          " ‚Åª¬π' "
          (Init.Core.¬´term_‚à©_¬ª
           (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
            `I.symm
            " ‚Åª¬π' "
            (Term.proj
             (Term.app
              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
              [(Term.proj `u "." (fieldIdx "1"))])
             "."
             `Source))
           " ‚à© "
           (Term.app `range [`I])))))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`y `hy]) [])
           (group
            (Tactic.simp'
             "simp'"
             []
             []
             ["only"]
             []
             ["with" [`mfld_simps]]
             [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
            [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simp'
                  "simp'"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `hy)] "]"]
                  ["with" [`mfld_simps]]
                  [])
                 [])])))
            [])
           (group
            (Tactic.¬´tactic¬∑._¬ª
             "¬∑"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.exact
                  "exact"
                  (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
                 [])])))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.intro "intro" [`y `hy]) [])
      (group
       (Tactic.simp'
        "simp'"
        []
        []
        ["only"]
        []
        ["with" [`mfld_simps]]
        [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] ["with" [`mfld_simps]] [])
            [])])))
       [])
      (group
       (Tactic.¬´tactic¬∑._¬ª
        "¬∑"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.exact
             "exact"
             (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
            [])])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.exact
        "exact"
        (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1")) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `hy "." (fieldIdx "1")) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `hy "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] ["with" [`mfld_simps]] [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hy)] "]"] ["with" [`mfld_simps]] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.left_inv)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `LocalHomeomorph.left_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`y `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticShow_
   "show"
   (Init.Core.¬´term_‚äÜ_¬ª
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    " ‚äÜ "
    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     " ‚Åª¬π' "
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticShow_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚äÜ_¬ª
   (Init.Core.¬´term_‚à©_¬ª
    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
     `I.symm
     " ‚Åª¬π' "
     (Term.proj
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `j "." (fieldIdx "1"))])
        "."
        `trans)
       [(Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])])
      "."
      `Source))
    " ‚à© "
    (Term.app `range [`I]))
   " ‚äÜ "
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    " ‚Åª¬π' "
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚äÜ_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   " ‚Åª¬π' "
   (Init.Core.¬´term_‚à©_¬ª
    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
     `I.symm
     " ‚Åª¬π' "
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      "."
      `Source))
    " ‚à© "
    (Term.app `range [`I])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 0, (some 0, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (Term.app
             `TimesContDiffOn
             [`ùïú
              (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               `I
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Term.app
                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `u "." (fieldIdx "1"))])
                " ‚àò "
                `I.symm))
              (Init.Core.¬´term_‚à©_¬ª
               (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                `I.symm
                " ‚Åª¬π' "
                (Term.proj
                 (Term.app
                  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `u "." (fieldIdx "1"))])
                 "."
                 `Source))
               " ‚à© "
               (Term.app `range [`I]))]))]
          ":="
          (Term.proj
           (Term.app
            `HasGroupoid.compatible
            [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
             (Term.proj `j "." (fieldIdx "2"))
             (Term.proj `u "." (fieldIdx "2"))])
           "."
           (fieldIdx "1")))))
       [])
      (group (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top])) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
       [])
      (group (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] []) [])
      (group (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2"))) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "2")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `LocalHomeomorph.trans_source)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `LocalHomeomorph.trans_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.app `A.differentiable_on [`le_top]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `A.differentiable_on [`le_top])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `le_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `A.differentiable_on
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`A []]
     [(Term.typeSpec
       ":"
       (Term.app
        `TimesContDiffOn
        [`ùïú
         (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          `I
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           " ‚àò "
           `I.symm))
         (Init.Core.¬´term_‚à©_¬ª
          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
           `I.symm
           " ‚Åª¬π' "
           (Term.proj
            (Term.app
             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
             [(Term.proj `u "." (fieldIdx "1"))])
            "."
            `Source))
          " ‚à© "
          (Term.app `range [`I]))]))]
     ":="
     (Term.proj
      (Term.app
       `HasGroupoid.compatible
       [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
        (Term.proj `j "." (fieldIdx "2"))
        (Term.proj `u "." (fieldIdx "2"))])
      "."
      (fieldIdx "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    `HasGroupoid.compatible
    [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
     (Term.proj `j "." (fieldIdx "2"))
     (Term.proj `u "." (fieldIdx "2"))])
   "."
   (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `HasGroupoid.compatible
   [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
    (Term.proj `j "." (fieldIdx "2"))
    (Term.proj `u "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `timesContDiffGroupoid
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `HasGroupoid.compatible
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `HasGroupoid.compatible
   [(Term.paren
     "("
     [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I]) []]
     ")")
    (Term.proj `j "." (fieldIdx "2"))
    (Term.proj `u "." (fieldIdx "2"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `TimesContDiffOn
   [`ùïú
    (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      " ‚àò "
      `I.symm))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    " ‚àò "
    `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   " ‚àò "
   `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1022, (some 1023, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    " ‚àò "
    `I.symm))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `TimesContDiffOn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticShow_
   "show"
   (Term.app
    `DifferentiableWithinAt
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      [(Term.app `I [`x])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticShow_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `DifferentiableWithinAt
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [(Term.app `I [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [(Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   [(Term.paren "(" [(Term.app `I [`x]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `DifferentiableWithinAt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.¬´tactic¬∑._¬ª
   "¬∑"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (Term.app
             `TimesContDiffOn
             [`ùïú
              (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               `I
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Term.app
                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `j "." (fieldIdx "1"))])
                " ‚àò "
                `I.symm))
              (Init.Core.¬´term_‚à©_¬ª
               (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                `I.symm
                " ‚Åª¬π' "
                (Term.proj
                 (Term.app
                  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `j "." (fieldIdx "1"))])
                 "."
                 `Source))
               " ‚à© "
               (Term.app `range [`I]))]))]
          ":="
          (Term.proj
           (Term.app
            `HasGroupoid.compatible
            [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
             (Term.proj `i "." (fieldIdx "2"))
             (Term.proj `j "." (fieldIdx "2"))])
           "."
           (fieldIdx "1")))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`B []]
          [(Term.typeSpec
            ":"
            (Term.app
             `DifferentiableOn
             [`ùïú
              (Rel.Data.Rel.¬´term_‚àò_¬ª
               `I
               " ‚àò "
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                (Term.proj `j "." (fieldIdx "1"))
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
              (Init.Core.¬´term_‚à©_¬ª
               (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                `I.symm
                " ‚Åª¬π' "
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.app
                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `j "." (fieldIdx "1"))])
                   "."
                   `trans)
                  [(Term.app
                    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `u "." (fieldIdx "1"))])])
                 "."
                 `Source))
               " ‚à© "
               (Term.app `range [`I]))]))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)) [])
              (group
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.¬´term_‚äÜ_¬ª
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `j "." (fieldIdx "1"))])
                        "."
                        `trans)
                       [(Term.app
                         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                         [(Term.proj `u "." (fieldIdx "1"))])])
                      "."
                      `Source)
                     " ‚äÜ "
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                       [(Term.proj `j "." (fieldIdx "1"))])
                      "."
                      `Source)))]
                  ":="
                  (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.app
                 `inter_subset_inter
                 [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
               [])]))))))
       [])
      (group (Tactic.apply "apply" `B) [])
      (group (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx]) [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.¬´tactic¬∑._¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa "simpa" [] ["only"] [] ["with" [`mfld_simps]] ["using" `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" `B)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `B
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`B []]
     [(Term.typeSpec
       ":"
       (Term.app
        `DifferentiableOn
        [`ùïú
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          `I
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Term.proj `j "." (fieldIdx "1"))
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
         (Init.Core.¬´term_‚à©_¬ª
          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
           `I.symm
           " ‚Åª¬π' "
           (Term.proj
            (Term.app
             (Term.proj
              (Term.app
               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `j "." (fieldIdx "1"))])
              "."
              `trans)
             [(Term.app
               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `u "." (fieldIdx "1"))])])
            "."
            `Source))
          " ‚à© "
          (Term.app `range [`I]))]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)) [])
         (group
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.¬´term_‚äÜ_¬ª
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.app
                    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `j "." (fieldIdx "1"))])
                   "."
                   `trans)
                  [(Term.app
                    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                    [(Term.proj `u "." (fieldIdx "1"))])])
                 "."
                 `Source)
                " ‚äÜ "
                (Term.proj
                 (Term.app
                  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                  [(Term.proj `j "." (fieldIdx "1"))])
                 "."
                 `Source)))]
             ":="
             (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.app
            `inter_subset_inter
            [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)) [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.¬´term_‚äÜ_¬ª
             (Term.proj
              (Term.app
               (Term.proj
                (Term.app
                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `j "." (fieldIdx "1"))])
                "."
                `trans)
               [(Term.app
                 (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `u "." (fieldIdx "1"))])])
              "."
              `Source)
             " ‚äÜ "
             (Term.proj
              (Term.app
               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `j "." (fieldIdx "1"))])
              "."
              `Source)))]
          ":="
          (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.app
         `inter_subset_inter
         [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.app `inter_subset_inter [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `inter_subset_inter [(Term.app `preimage_mono [`this]) (Term.app `subset.refl [(Term.app `range [`I])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `subset.refl [(Term.app `range [`I])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `subset.refl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `subset.refl [(Term.paren "(" [(Term.app `range [`I]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `preimage_mono [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage_mono
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage_mono [`this]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inter_subset_inter
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.¬´term_‚äÜ_¬ª
        (Term.proj
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           "."
           `trans)
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])])
         "."
         `Source)
        " ‚äÜ "
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `Source)))]
     ":="
     (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inter_subset_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚äÜ_¬ª
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source)
   " ‚äÜ "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚äÜ_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply "apply" (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.app `A.differentiable_on [`le_top]) "." `mono)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `A.differentiable_on [`le_top])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `le_top
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `A.differentiable_on
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `A.differentiable_on [`le_top]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `DifferentiableOn
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `DifferentiableOn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`A []]
     [(Term.typeSpec
       ":"
       (Term.app
        `TimesContDiffOn
        [`ùïú
         (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          `I
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           " ‚àò "
           `I.symm))
         (Init.Core.¬´term_‚à©_¬ª
          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
           `I.symm
           " ‚Åª¬π' "
           (Term.proj
            (Term.app
             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
             [(Term.proj `j "." (fieldIdx "1"))])
            "."
            `Source))
          " ‚à© "
          (Term.app `range [`I]))]))]
     ":="
     (Term.proj
      (Term.app
       `HasGroupoid.compatible
       [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
        (Term.proj `i "." (fieldIdx "2"))
        (Term.proj `j "." (fieldIdx "2"))])
      "."
      (fieldIdx "1")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    `HasGroupoid.compatible
    [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
     (Term.proj `i "." (fieldIdx "2"))
     (Term.proj `j "." (fieldIdx "2"))])
   "."
   (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `HasGroupoid.compatible
   [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
    (Term.proj `i "." (fieldIdx "2"))
    (Term.proj `j "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `timesContDiffGroupoid
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `HasGroupoid.compatible
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `HasGroupoid.compatible
   [(Term.paren
     "("
     [(Term.app `timesContDiffGroupoid [(Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû") `I]) []]
     ")")
    (Term.proj `i "." (fieldIdx "2"))
    (Term.proj `j "." (fieldIdx "2"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `TimesContDiffOn
   [`ùïú
    (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      " ‚àò "
      `I.symm))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    " ‚àò "
    `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   " ‚àò "
   `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1022, (some 1023, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    " ‚àò "
    `I.symm))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª "‚àû")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Geometry.Manifold.SmoothManifoldWithCorners.¬´term‚àû¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `TimesContDiffOn
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticShow_
   "show"
   (Term.app
    `DifferentiableWithinAt
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticShow_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `DifferentiableWithinAt
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `DifferentiableWithinAt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.apply
   "apply"
   (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.apply', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderivWithin.comp [(Term.hole "_") (Term.hole "_") (Term.hole "_") (Term.hole "_") `U])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `U
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin.comp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `j "." (fieldIdx "1"))])
          "."
          `trans)
         [(Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app `I [`x])])
   "="
   (Term.app
    (Term.proj
     (Term.app
      `fderivWithin
      [`ùïú
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `u "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
       (Init.Core.¬´term_‚à©_¬ª
        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
         `I.symm
         " ‚Åª¬π' "
         (Term.proj
          (Term.app
           (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
           [(Term.proj `u "." (fieldIdx "1"))])
          "."
          `Source))
        " ‚à© "
        (Term.app `range [`I]))
       (Term.app
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         `I
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª
          (Term.proj `j "." (fieldIdx "1"))
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
        [(Term.app `I [`x])])])
     "."
     `comp)
    [(Term.app
      `fderivWithin
      [`ùïú
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `j "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
       (Init.Core.¬´term_‚à©_¬ª
        (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
         `I.symm
         " ‚Åª¬π' "
         (Term.proj
          (Term.app
           (Term.proj
            (Term.app
             (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
             [(Term.proj `j "." (fieldIdx "1"))])
            "."
            `trans)
           [(Term.app
             (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
             [(Term.proj `u "." (fieldIdx "1"))])])
          "."
          `Source))
        " ‚à© "
        (Term.app `range [`I]))
       (Term.app `I [`x])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj
    (Term.app
     `fderivWithin
     [`ùïú
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      (Init.Core.¬´term_‚à©_¬ª
       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
        `I.symm
        " ‚Åª¬π' "
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])
         "."
         `Source))
       " ‚à© "
       (Term.app `range [`I]))
      (Term.app
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        `I
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª
         (Term.proj `j "." (fieldIdx "1"))
         " ‚àò "
         (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
       [(Term.app `I [`x])])])
    "."
    `comp)
   [(Term.app
     `fderivWithin
     [`ùïú
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      (Init.Core.¬´term_‚à©_¬ª
       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
        `I.symm
        " ‚Åª¬π' "
        (Term.proj
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           "."
           `trans)
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])])
         "."
         `Source))
       " ‚à© "
       (Term.app `range [`I]))
      (Term.app `I [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `j "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `fderivWithin
   [`ùïú
    (Term.paren
     "("
     [(Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      []]
     ")")
    (Term.paren
     "("
     [(Init.Core.¬´term_‚à©_¬ª
       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
        `I.symm
        " ‚Åª¬π' "
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj
             (Term.paren
              "("
              [(Term.app
                (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `j "." (fieldIdx "1"))])
               []]
              ")")
             "."
             `trans)
            [(Term.paren
              "("
              [(Term.app
                (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
                [(Term.proj `u "." (fieldIdx "1"))])
               []]
              ")")])
           []]
          ")")
         "."
         `Source))
       " ‚à© "
       (Term.app `range [`I]))
      []]
     ")")
    (Term.paren "(" [(Term.app `I [`x]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Init.Core.¬´term_‚à©_¬ª
      (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
       `I.symm
       " ‚Åª¬π' "
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])
        "."
        `Source))
      " ‚à© "
      (Term.app `range [`I]))
     (Term.app
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `j "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      [(Term.app `I [`x])])])
   "."
   `comp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `u "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [(Term.app `I [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [(Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   [(Term.paren "(" [(Term.app `I [`x]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `u "." (fieldIdx "1"))])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `fderivWithin
   [`ùïú
    (Term.paren
     "("
     [(Rel.Data.Rel.¬´term_‚àò_¬ª
       `I
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª
        (Term.proj `u "." (fieldIdx "1"))
        " ‚àò "
        (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
      []]
     ")")
    (Term.paren
     "("
     [(Init.Core.¬´term_‚à©_¬ª
       (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
        `I.symm
        " ‚Åª¬π' "
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `Source))
       " ‚à© "
       (Term.app `range [`I]))
      []]
     ")")
    (Term.paren
     "("
     [(Term.app
       (Term.paren
        "("
        [(Rel.Data.Rel.¬´term_‚àò_¬ª
          `I
          " ‚àò "
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           (Term.proj `j "." (fieldIdx "1"))
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
         []]
        ")")
       [(Term.paren "(" [(Term.app `I [`x]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `j "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `u "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `j "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `j "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `u "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 0, (some 0, term) <=? (some 0, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `u "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.paren
    "("
    [(Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `u "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     []]
    ")")
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `j "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`U []]
     [(Term.typeSpec
       ":"
       (Term.app
        `UniqueDiffWithinAt
        [`ùïú
         (Init.Core.¬´term_‚à©_¬ª
          (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
           `I.symm
           " ‚Åª¬π' "
           (Term.proj
            (Term.app
             (Term.proj
              (Term.app
               (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `j "." (fieldIdx "1"))])
              "."
              `trans)
             [(Term.app
               (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
               [(Term.proj `u "." (fieldIdx "1"))])])
            "."
            `Source))
          " ‚à© "
          (Term.app `range [`I]))
         (Term.app `I [`x])]))]
     ":="
     (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I.unique_diff_preimage_source [(Term.hole "_") `M])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `M
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I.unique_diff_preimage_source
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `UniqueDiffWithinAt
   [`ùïú
    (Init.Core.¬´term_‚à©_¬ª
     (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
      `I.symm
      " ‚Åª¬π' "
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `j "." (fieldIdx "1"))])
         "."
         `trans)
        [(Term.app
          (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
          [(Term.proj `u "." (fieldIdx "1"))])])
       "."
       `Source))
     " ‚à© "
     (Term.app `range [`I]))
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.paren
      "("
      [(Term.app
        (Term.proj
         (Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `j "." (fieldIdx "1"))])
           []]
          ")")
         "."
         `trans)
        [(Term.paren
          "("
          [(Term.app
            (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
            [(Term.proj `u "." (fieldIdx "1"))])
           []]
          ")")])
       []]
      ")")
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `UniqueDiffWithinAt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`M []]
     [(Term.typeSpec
       ":"
       (Init.Core.¬´term_‚àà_¬ª
        (Term.app `I [`x])
        " ‚àà "
        (Init.Core.¬´term_‚à©_¬ª
         (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
          `I.symm
          " ‚Åª¬π' "
          (Term.proj
           (Term.app
            (Term.proj
             (Term.app
              (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
              [(Term.proj `j "." (fieldIdx "1"))])
             "."
             `trans)
            [(Term.app
              (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
              [(Term.proj `u "." (fieldIdx "1"))])])
           "."
           `Source))
         " ‚à© "
         (Term.app `range [`I]))))]
     ":="
     (Term.anonymousCtor
      "‚ü®"
      [(Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simpa
             "simpa"
             []
             ["only"]
             ["[" [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
             []
             ["using" `hx])
            [])])))
       ","
       (Term.app `mem_range_self [(Term.hole "_")])]
      "‚ü©"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "‚ü®"
   [(Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.simpa
          "simpa"
          []
          ["only"]
          ["[" [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
          []
          ["using" `hx])
         [])])))
    ","
    (Term.app `mem_range_self [(Term.hole "_")])]
   "‚ü©")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mem_range_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_range_self
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simpa
        "simpa"
        []
        ["only"]
        ["[" [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
        []
        ["using" `hx])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simpa
   "simpa"
   []
   ["only"]
   ["[" [(Tactic.simpLemma [] [] `mem_preimage) "," (Tactic.simpLemma [] [] `ModelWithCorners.left_inv)] "]"]
   []
   ["using" `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpa', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ModelWithCorners.left_inv
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚àà_¬ª
   (Term.app `I [`x])
   " ‚àà "
   (Init.Core.¬´term_‚à©_¬ª
    (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
     `I.symm
     " ‚Åª¬π' "
     (Term.proj
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `j "." (fieldIdx "1"))])
        "."
        `trans)
       [(Term.app
         (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
         [(Term.proj `u "." (fieldIdx "1"))])])
      "."
      `Source))
    " ‚à© "
    (Term.app `range [`I])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚àà_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.¬´term_‚à©_¬ª
   (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
    `I.symm
    " ‚Åª¬π' "
    (Term.proj
     (Term.app
      (Term.proj
       (Term.app
        (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `j "." (fieldIdx "1"))])
       "."
       `trans)
      [(Term.app
        (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
        [(Term.proj `u "." (fieldIdx "1"))])])
     "."
     `Source))
   " ‚à© "
   (Term.app `range [`I]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.¬´term_‚à©_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
   `I.symm
   " ‚Åª¬π' "
   (Term.proj
    (Term.app
     (Term.proj
      (Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      "."
      `trans)
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])])
    "."
    `Source))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj
   (Term.app
    (Term.proj
     (Term.app
      (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `j "." (fieldIdx "1"))])
     "."
     `trans)
    [(Term.app
      (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
      [(Term.proj `u "." (fieldIdx "1"))])])
   "."
   `Source)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj
    (Term.app
     (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `j "." (fieldIdx "1"))])
    "."
    `trans)
   [(Term.app
     (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
     [(Term.proj `u "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `u "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `u
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `u "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj
   (Term.app
    (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
    [(Term.proj `j "." (fieldIdx "1"))])
   "."
   `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `j
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
   [(Term.proj `j "." (fieldIdx "1"))])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   (Term.proj
    (Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `j "." (fieldIdx "1"))])
      []]
     ")")
    "."
    `trans)
   [(Term.paren
     "("
     [(Term.app
       (Term.proj (Term.proj (Term.proj `j "." (fieldIdx "1")) "." `symm) "." `trans)
       [(Term.proj `u "." (fieldIdx "1"))])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 81, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstLVal', expected 'Lean.Parser.Term.structInstLVal.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´,¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstField.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`i `x `hx `v] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`A []]
            [(Term.typeSpec
              ":"
              (Init.Core.¬´term_‚àà_¬ª
               (Init.Core.¬´term_‚à©_¬ª
                (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
                 `I.symm
                 " ‚Åª¬π' "
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                   [(Term.proj `i "." (fieldIdx "1"))])
                  "."
                  `Source))
                " ‚à© "
                (Term.app `range [`I]))
               " ‚àà "
               (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
                (group (Tactic.apply "apply" `inter_mem_nhds_within) [])
                (group
                 (Tactic.apply
                  "apply"
                  (Term.app
                   `I.continuous_symm.continuous_at.preimage_mem_nhds
                   [(Term.app
                     `IsOpen.mem_nhds
                     [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
                 [])
                (group
                 (Tactic.simp'
                  "simp'"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `hx)
                    ","
                    (Tactic.simpLemma [] [] (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `map_target))]
                   "]"]
                  ["with" [`mfld_simps]]
                  [])
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`B []]
            [(Term.typeSpec
              ":"
              (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
               "‚àÄ·∂†"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
               " in "
               (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
               ", "
               (¬´term_=_¬ª
                (Term.app
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `i "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 [`y])
                "="
                (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
                (group (Tactic.intro "intro" [`y `hy]) [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
                 [])
                (group
                 (Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget [] `hy)]
                  ["with"
                   (Tactic.rcasesPat.tuple
                    "‚ü®"
                    [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                     ","
                     (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
                    "‚ü©")])
                 [])
                (group
                 (Tactic.simp'
                  "simp'"
                  []
                  []
                  ["only"]
                  []
                  ["with" [`mfld_simps]]
                  [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
                 [])
                (group
                 (Tactic.simp'
                  "simp'"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
                    ","
                    (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
                   "]"]
                  ["with" [`mfld_simps]]
                  [])
                 [])]))))))
         [])
        (group
         (Tactic.tacticHave_
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`C []]
            [(Term.typeSpec
              ":"
              (¬´term_=_¬ª
               (Term.app
                `fderivWithin
                [`ùïú
                 (Rel.Data.Rel.¬´term_‚àò_¬ª
                  `I
                  " ‚àò "
                  (Rel.Data.Rel.¬´term_‚àò_¬ª
                   (Term.proj `i "." (fieldIdx "1"))
                   " ‚àò "
                   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
                 (Term.app `range [`I])
                 (Term.app `I [`x])])
               "="
               (Term.app
                `fderivWithin
                [`ùïú
                 (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
                 (Term.app `range [`I])
                 (Term.app `I [`x])])))]
            ":="
            (Term.app
             `Filter.EventuallyEq.fderiv_within_eq
             [`I.unique_diff_at_image
              `B
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.simp'
                    "simp'"
                    []
                    []
                    ["only"]
                    ["[" [(Tactic.simpLemma [] [] `hx)] "]"]
                    ["with" [`mfld_simps]]
                    [])
                   [])])))]))))
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `fderiv_within_id [`I.unique_diff_at_image]))] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`C] []))])
         [])
        (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `C)] "]") []) [])
        (group (Tactic.tacticRfl "rfl") [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`A []]
          [(Term.typeSpec
            ":"
            (Init.Core.¬´term_‚àà_¬ª
             (Init.Core.¬´term_‚à©_¬ª
              (Set.Data.Set.Basic.¬´term_‚Åª¬π'_¬ª
               `I.symm
               " ‚Åª¬π' "
               (Term.proj
                (Term.app
                 (Term.proj (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) "." `trans)
                 [(Term.proj `i "." (fieldIdx "1"))])
                "."
                `Source))
              " ‚à© "
              (Term.app `range [`I]))
             " ‚àà "
             (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inter_comm)] "]") []) [])
              (group (Tactic.apply "apply" `inter_mem_nhds_within) [])
              (group
               (Tactic.apply
                "apply"
                (Term.app
                 `I.continuous_symm.continuous_at.preimage_mem_nhds
                 [(Term.app
                   `IsOpen.mem_nhds
                   [(Term.app `LocalHomeomorph.open_source [(Term.hole "_")]) (Term.hole "_")])]))
               [])
              (group
               (Tactic.simp'
                "simp'"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `hx)
                  ","
                  (Tactic.simpLemma [] [] (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `map_target))]
                 "]"]
                ["with" [`mfld_simps]]
                [])
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`B []]
          [(Term.typeSpec
            ":"
            (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
             "‚àÄ·∂†"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
             " in "
             (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
             ", "
             (¬´term_=_¬ª
              (Term.app
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `i "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               [`y])
              "="
              (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
              (group (Tactic.intro "intro" [`y `hy]) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
               [])
              (group
               (Tactic.rcases
                "rcases"
                [(Tactic.casesTarget [] `hy)]
                ["with"
                 (Tactic.rcasesPat.tuple
                  "‚ü®"
                  [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
                   ","
                   (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
                  "‚ü©")])
               [])
              (group
               (Tactic.simp'
                "simp'"
                []
                []
                ["only"]
                []
                ["with" [`mfld_simps]]
                [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
               [])
              (group
               (Tactic.simp'
                "simp'"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
                  ","
                  (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
                 "]"]
                ["with" [`mfld_simps]]
                [])
               [])]))))))
       [])
      (group
       (Tactic.tacticHave_
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`C []]
          [(Term.typeSpec
            ":"
            (¬´term_=_¬ª
             (Term.app
              `fderivWithin
              [`ùïú
               (Rel.Data.Rel.¬´term_‚àò_¬ª
                `I
                " ‚àò "
                (Rel.Data.Rel.¬´term_‚àò_¬ª
                 (Term.proj `i "." (fieldIdx "1"))
                 " ‚àò "
                 (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
               (Term.app `range [`I])
               (Term.app `I [`x])])
             "="
             (Term.app
              `fderivWithin
              [`ùïú
               (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
               (Term.app `range [`I])
               (Term.app `I [`x])])))]
          ":="
          (Term.app
           `Filter.EventuallyEq.fderiv_within_eq
           [`I.unique_diff_at_image
            `B
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.simp'
                  "simp'"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `hx)] "]"]
                  ["with" [`mfld_simps]]
                  [])
                 [])])))]))))
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `fderiv_within_id [`I.unique_diff_at_image]))] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`C] []))])
       [])
      (group (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `C)] "]") []) [])
      (group (Tactic.tacticRfl "rfl") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.tacticRfl "rfl")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticRfl', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `C)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `C
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `fderiv_within_id [`I.unique_diff_at_image]))] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`C] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `C
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `fderiv_within_id [`I.unique_diff_at_image])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.unique_diff_at_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderiv_within_id
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`C []]
     [(Term.typeSpec
       ":"
       (¬´term_=_¬ª
        (Term.app
         `fderivWithin
         [`ùïú
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `i "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          (Term.app `range [`I])
          (Term.app `I [`x])])
        "="
        (Term.app
         `fderivWithin
         [`ùïú
          (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
          (Term.app `range [`I])
          (Term.app `I [`x])])))]
     ":="
     (Term.app
      `Filter.EventuallyEq.fderiv_within_eq
      [`I.unique_diff_at_image
       `B
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hx)] "]"] ["with" [`mfld_simps]] [])
            [])])))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Filter.EventuallyEq.fderiv_within_eq
   [`I.unique_diff_at_image
    `B
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hx)] "]"] ["with" [`mfld_simps]] [])
         [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hx)] "]"] ["with" [`mfld_simps]] [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hx)] "]"] ["with" [`mfld_simps]] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.simp' "simp'" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hx)] "]"] ["with" [`mfld_simps]] [])
       [])])))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `B
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `I.unique_diff_at_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Filter.EventuallyEq.fderiv_within_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    `fderivWithin
    [`ùïú
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `i "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     (Term.app `range [`I])
     (Term.app `I [`x])])
   "="
   (Term.app
    `fderivWithin
    [`ùïú
     (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
     (Term.app `range [`I])
     (Term.app `I [`x])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `fderivWithin
   [`ùïú
    (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
    (Term.app `range [`I])
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow `E "‚Üí" `E)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `id
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `fderivWithin
   [`ùïú
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `i "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    (Term.app `range [`I])
    (Term.app `I [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `I [`x]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `range [`I]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `i "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `i "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `i "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ùïú
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `fderivWithin
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.tacticHave_
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`B []]
     [(Term.typeSpec
       ":"
       (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
        "‚àÄ·∂†"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
        " in "
        (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
        ", "
        (¬´term_=_¬ª
         (Term.app
          (Rel.Data.Rel.¬´term_‚àò_¬ª
           `I
           " ‚àò "
           (Rel.Data.Rel.¬´term_‚àò_¬ª
            (Term.proj `i "." (fieldIdx "1"))
            " ‚àò "
            (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
          [`y])
         "="
         (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
         (group (Tactic.intro "intro" [`y `hy]) [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
          [])
         (group
          (Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hy)]
           ["with"
            (Tactic.rcasesPat.tuple
             "‚ü®"
             [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
              ","
              (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
             "‚ü©")])
          [])
         (group
          (Tactic.simp'
           "simp'"
           []
           []
           ["only"]
           []
           ["with" [`mfld_simps]]
           [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
          [])
         (group
          (Tactic.simp'
           "simp'"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
             ","
             (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
            "]"]
           ["with" [`mfld_simps]]
           [])
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticHave_', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" []) [])
      (group (Tactic.intro "intro" [`y `hy]) [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
       [])
      (group
       (Tactic.rcases
        "rcases"
        [(Tactic.casesTarget [] `hy)]
        ["with"
         (Tactic.rcasesPat.tuple
          "‚ü®"
          [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
           ","
           (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
          "‚ü©")])
       [])
      (group
       (Tactic.simp'
        "simp'"
        []
        []
        ["only"]
        []
        ["with" [`mfld_simps]]
        [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
       [])
      (group
       (Tactic.simp'
        "simp'"
        []
        []
        ["only"]
        ["["
         [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
          ","
          (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
         "]"]
        ["with" [`mfld_simps]]
        [])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.simp'
   "simp'"
   []
   []
   ["only"]
   ["["
    [(Tactic.simpLemma [] [] (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm))
     ","
     (Tactic.simpLemma [] [] (Term.proj `hz "." (fieldIdx "1")))]
    "]"]
   ["with" [`mfld_simps]]
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´]¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hz
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hz
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp' "simp'" [] [] ["only"] [] ["with" [`mfld_simps]] [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp'', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hz
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'only', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rcases
   "rcases"
   [(Tactic.casesTarget [] `hy)]
   ["with"
    (Tactic.rcasesPat.tuple
     "‚ü®"
     [(Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `z)]) [])
      ","
      (Tactic.rcasesPatLo (Tactic.rcasesPatMed [(Tactic.rcasesPat.one `hz)]) [])]
     "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcases', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.tuple', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPatLo', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rcasesPat.one', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.casesTarget', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["‚Üê"] `I.image_eq)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hy] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.image_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üê¬ª', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.intro "intro" [`y `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.intro', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.filterUpwards "filter_upwards" "[" [`A] "]" [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.filterUpwards', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `A
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª
   "‚àÄ·∂†"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `y)] []))
   " in "
   (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
   ", "
   (¬´term_=_¬ª
    (Term.app
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      `I
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª
       (Term.proj `i "." (fieldIdx "1"))
       " ‚àò "
       (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
     [`y])
    "="
    (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Filter.Order.Filter.Basic.¬´term‚àÄ·∂†_in_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (¬´term_=_¬ª
   (Term.app
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     `I
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª
      (Term.proj `i "." (fieldIdx "1"))
      " ‚àò "
      (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
    [`y])
   "="
   (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_=_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")") [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.paren "(" [`id [(Term.typeAscription ":" (Term.arrow `E "‚Üí" `E))]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow `E "‚Üí" `E)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  `E
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `id
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    `I
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª
     (Term.proj `i "." (fieldIdx "1"))
     " ‚àò "
     (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
   [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `i "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª
   (Term.proj `i "." (fieldIdx "1"))
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.¬´term_‚àò_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `i
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 0, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.¬´term_‚àò_¬ª
   `I
   " ‚àò "
   (Rel.Data.Rel.¬´term_‚àò_¬ª
    (Term.proj `i "." (fieldIdx "1"))
    " ‚àò "
    (Rel.Data.Rel.¬´term_‚àò_¬ª (Term.proj (Term.proj `i "." (fieldIdx "1")) "." `symm) " ‚àò " `I.symm)))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Topology.Basic.¬´termùìù[_]_¬ª "ùìù[" (Term.app `range [`I]) "] " (Term.app `I [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.¬´termùìù[_]_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `I [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`I])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 100, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Basic smooth bundle core version of the tangent bundle of a smooth manifold `M` modelled over a
    model with corners `I` on `(E, H)`. The fibers are equal to `E`, and the coordinate change in the
    fiber corresponds to the derivative of the coordinate change in `M`. -/
  def
    tangentBundleCore
    : BasicSmoothBundleCore I M E
    :=
      {
        coordChange := fun i j x v => ( fderivWithin ùïú I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm range I I x : E ‚Üí E ) v ,
          coord_change_smooth
              :=
              fun
                i j
                  =>
                  by
                    rw [ I.image_eq ]
                      have
                        A
                          :
                            TimesContDiffOn
                              ùïú
                                ‚àû
                                I ‚àò i . 1 . symm . trans j . 1 ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                          :=
                          HasGroupoid.compatible timesContDiffGroupoid ‚àû I i . 2 j . 2 . 1
                      have
                        B
                          : UniqueDiffOn ùïú I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                          :=
                          I.unique_diff_preimage_source
                      have
                        C
                          :
                            TimesContDiffOn
                              ùïú
                                ‚àû
                                fun
                                  p : E √ó E
                                    =>
                                    (
                                        fderivWithin
                                            ùïú
                                              I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                              I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                                              p . 1
                                          : E ‚Üí E
                                        )
                                      p . 2
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I . Prod univ
                          :=
                          times_cont_diff_on_fderiv_within_apply A B le_top
                      have
                        D
                          :
                            ‚àÄ
                              ,
                              ‚àÄ
                                x
                                ‚àà I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                                ,
                                ‚àÄ
                                  ,
                                  fderivWithin ùïú I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm range I x
                                    =
                                    fderivWithin
                                      ùïú
                                        I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                        I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                                        x
                          :=
                          by
                            intro x hx
                              have
                                N
                                  : I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚àà nhds x
                                  :=
                                  I.continuous_symm.continuous_at.preimage_mem_nhds
                                    IsOpen.mem_nhds LocalHomeomorph.open_source _ hx . 1
                              symm
                              rw [ inter_comm ]
                              exact fderiv_within_inter N I.unique_diff _ hx . 2
                      apply TimesContDiffOn.congr C
                      rintro ‚ü® x , v ‚ü© hx
                      have
                        E
                          : x ‚àà I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                          :=
                          by simpa only [ prod_mk_mem_set_prod_eq , and_true‚Çì , mem_univ ] using hx
                      have : I I.symm x = x := by simp [ E . 2 ]
                      dsimp [ - Subtype.val_eq_coe ]
                      rw [ this , D x E ]
                      rfl
            ,
          coord_change_self
              :=
              fun
                i x hx v
                  =>
                  by
                    have
                        A
                          : I.symm ‚Åª¬π' i . 1 . symm . trans i . 1 . Source ‚à© range I ‚àà ùìù[ range I ] I x
                          :=
                          by
                            rw [ inter_comm ]
                              apply inter_mem_nhds_within
                              apply
                                I.continuous_symm.continuous_at.preimage_mem_nhds
                                  IsOpen.mem_nhds LocalHomeomorph.open_source _ _
                              simp' only [ hx , i . 1 . map_target ] with mfld_simps
                      have
                        B
                          : ‚àÄ·∂† y in ùìù[ range I ] I x , I ‚àò i . 1 ‚àò i . 1 . symm ‚àò I.symm y = ( id : E ‚Üí E ) y
                          :=
                          by
                            filter_upwards [ A ]
                              intro y hy
                              rw [ ‚Üê I.image_eq ] at hy
                              rcases hy with ‚ü® z , hz ‚ü©
                              simp' only with mfld_simps at hz
                              simp' only [ hz . 2 . symm , hz . 1 ] with mfld_simps
                      have
                        C
                          :
                            fderivWithin ùïú I ‚àò i . 1 ‚àò i . 1 . symm ‚àò I.symm range I I x
                              =
                              fderivWithin ùïú ( id : E ‚Üí E ) range I I x
                          :=
                          Filter.EventuallyEq.fderiv_within_eq
                            I.unique_diff_at_image B by simp' only [ hx ] with mfld_simps
                      rw [ fderiv_within_id I.unique_diff_at_image ] at C
                      rw [ C ]
                      rfl
            ,
          coord_change_comp
            :=
            fun
              i j u x hx
                =>
                by
                  have
                      M
                        :
                          I x
                            ‚àà
                            I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source ‚à© range I
                        :=
                        ‚ü® by simpa only [ mem_preimage , ModelWithCorners.left_inv ] using hx , mem_range_self _ ‚ü©
                    have
                      U
                        :
                          UniqueDiffWithinAt
                            ùïú
                              I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                ‚à©
                                range I
                              I x
                        :=
                        I.unique_diff_preimage_source _ M
                    have
                      A
                        :
                          fderivWithin
                              ùïú
                                I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm ‚àò I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                I x
                            =
                            fderivWithin
                                  ùïú
                                    I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm
                                    I.symm ‚Åª¬π' j . 1 . symm . trans u . 1 . Source ‚à© range I
                                    I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm I x
                                .
                                comp
                              fderivWithin
                                ùïú
                                  I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                  I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                    ‚à©
                                    range I
                                  I x
                        :=
                        by
                          apply fderivWithin.comp _ _ _ _ U
                            show
                              DifferentiableWithinAt
                                ùïú
                                  I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                  I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                    ‚à©
                                    range I
                                  I x
                            ¬∑
                              have
                                  A
                                    :
                                      TimesContDiffOn
                                        ùïú
                                          ‚àû
                                          I ‚àò i . 1 . symm . trans j . 1 ‚àò I.symm
                                          I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . Source ‚à© range I
                                    :=
                                    HasGroupoid.compatible timesContDiffGroupoid ‚àû I i . 2 j . 2 . 1
                                have
                                  B
                                    :
                                      DifferentiableOn
                                        ùïú
                                          I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                          I.symm
                                              ‚Åª¬π'
                                              i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                            ‚à©
                                            range I
                                    :=
                                    by
                                      apply A.differentiable_on le_top . mono
                                        have
                                          :
                                              i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                                ‚äÜ
                                                i . 1 . symm . trans j . 1 . Source
                                            :=
                                            inter_subset_left _ _
                                        exact inter_subset_inter preimage_mono this subset.refl range I
                                apply B
                                simpa only with mfld_simps using hx
                            show
                              DifferentiableWithinAt
                                ùïú
                                  I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm
                                  I.symm ‚Åª¬π' j . 1 . symm . trans u . 1 . Source ‚à© range I
                                  I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm I x
                            ¬∑
                              have
                                  A
                                    :
                                      TimesContDiffOn
                                        ùïú
                                          ‚àû
                                          I ‚àò j . 1 . symm . trans u . 1 ‚àò I.symm
                                          I.symm ‚Åª¬π' j . 1 . symm . trans u . 1 . Source ‚à© range I
                                    :=
                                    HasGroupoid.compatible timesContDiffGroupoid ‚àû I j . 2 u . 2 . 1
                                apply A.differentiable_on le_top
                                rw [ LocalHomeomorph.trans_source ] at hx
                                simp' only with mfld_simps
                                exact hx . 2
                            show
                              I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                ‚äÜ
                                I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                  ‚Åª¬π'
                                  I.symm ‚Åª¬π' j . 1 . symm . trans u . 1 . Source ‚à© range I
                            ¬∑
                              intro y hy
                                simp' only with mfld_simps at hy
                                rw [ LocalHomeomorph.left_inv ] at hy
                                ¬∑ simp' only [ hy ] with mfld_simps
                                ¬∑ exact hy . 1 . 1 . 2
                    have
                      B
                        :
                          fderivWithin
                              ùïú
                                I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm ‚àò I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                I x
                            =
                            fderivWithin
                              ùïú
                                I ‚àò u . 1 ‚àò i . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                I x
                        :=
                        by
                          have
                              E
                                :
                                  ‚àÄ
                                    ,
                                    ‚àÄ
                                      y
                                      ‚àà
                                        I.symm
                                            ‚Åª¬π'
                                            i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                          ‚à©
                                          range I
                                      ,
                                      ‚àÄ
                                        ,
                                        I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm ‚àò I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm y
                                          =
                                          I ‚àò u . 1 ‚àò i . 1 . symm ‚àò I.symm y
                                :=
                                by
                                  intro y hy
                                    simp only [ Function.comp_app , ModelWithCorners.left_inv ]
                                    rw [ j . 1 . left_inv ]
                                    exact hy . 1 . 1 . 2
                            exact fderiv_within_congr U E E _ M
                    have
                      C
                        :
                          fderivWithin
                              ùïú
                                I ‚àò u . 1 ‚àò i . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                I x
                            =
                            fderivWithin ùïú I ‚àò u . 1 ‚àò i . 1 . symm ‚àò I.symm range I I x
                        :=
                        by
                          rw [ inter_comm ]
                            apply fderiv_within_inter _ I.unique_diff_at_image
                            apply
                              I.continuous_symm.continuous_at.preimage_mem_nhds
                                IsOpen.mem_nhds LocalHomeomorph.open_source _ _
                            simpa only [ ModelWithCorners.left_inv ] using hx
                    have
                      D
                        :
                          fderivWithin
                              ùïú
                                I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' j . 1 . symm . trans u . 1 . Source ‚à© range I
                                I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm I x
                            =
                            fderivWithin
                              ùïú I ‚àò u . 1 ‚àò j . 1 . symm ‚àò I.symm range I I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm I x
                        :=
                        by
                          rw [ inter_comm ]
                            apply fderiv_within_inter _ I.unique_diff_at_image
                            apply
                              I.continuous_symm.continuous_at.preimage_mem_nhds
                                IsOpen.mem_nhds LocalHomeomorph.open_source _ _
                            rw [ LocalHomeomorph.trans_source ] at hx
                            simp' only with mfld_simps
                            exact hx . 2
                    have
                      E
                        :
                          fderivWithin
                              ùïú
                                I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm
                                I.symm ‚Åª¬π' i . 1 . symm . trans j . 1 . trans j . 1 . symm . trans u . 1 . Source
                                  ‚à©
                                  range I
                                I x
                            =
                            fderivWithin ùïú I ‚àò j . 1 ‚àò i . 1 . symm ‚àò I.symm range I I x
                        :=
                        by
                          rw [ inter_comm ]
                            apply fderiv_within_inter _ I.unique_diff_at_image
                            apply
                              I.continuous_symm.continuous_at.preimage_mem_nhds
                                IsOpen.mem_nhds LocalHomeomorph.open_source _ _
                            simpa only [ ModelWithCorners.left_inv ] using hx
                    rw [ B , C , D , E ] at A
                    simp' only [ A , ContinuousLinearMap.coe_comp' ] with mfld_simps
        }

variable {M}

include I

/--  The tangent space at a point of the manifold `M`. It is just `E`. We could use instead
`(tangent_bundle_core I M).to_topological_fiber_bundle_core.fiber x`, but we use `E` to help the
kernel.
-/
@[nolint unused_arguments]
def TangentSpace (x : M) : Type _ :=
  E

omit I

variable (M)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers
  [(Command.docComment
    "/--"
    " The tangent bundle to a smooth manifold, as a plain type. We could use\n`(tangent_bundle_core I M).to_topological_fiber_bundle_core.total_space`, but instead we use the\n(definitionally equal) `Œ£ (x : M), tangent_space I x`, to make sure that rcasing an element of the\ntangent bundle gives a second component in the tangent space. -/")]
  [(Term.attributes
    "@["
    [(Term.attrInstance (Term.attrKind []) (Mathlib.Tactic.Lint.nolint "nolint" [`has_inhabited_instance]))
     ","
     (Term.attrInstance (Term.attrKind []) (Attr.simple `reducible []))]
    "]")]
  []
  []
  []
  [])
 (Command.def
  "def"
  (Command.declId `TangentBundle [])
  (Command.optDeclSig [] [])
  (Command.declValSimple
   ":="
   (Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª
    "Œ£"
    (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `M]))
    ", "
    (Term.app `TangentSpace [`I `x]))
   [])
  []
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª
   "Œ£"
   (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `M]))
   ", "
   (Term.app `TangentSpace [`I `x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Data.Sigma.Basic.¬´termŒ£_,_¬ª', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `TangentSpace [`I `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `I
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `TangentSpace
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.explicitBinders', expected 'Mathlib.ExtendedBinder.extBinders'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
      The tangent bundle to a smooth manifold, as a plain type. We could use
      `(tangent_bundle_core I M).to_topological_fiber_bundle_core.total_space`, but instead we use the
      (definitionally equal) `Œ£ (x : M), tangent_space I x`, to make sure that rcasing an element of the
      tangent bundle gives a second component in the tangent space. -/
    @[ nolint has_inhabited_instance , reducible ]
  def TangentBundle := Œ£ x : M , TangentSpace I x

/--  The projection from the tangent bundle of a smooth manifold to the manifold. As the tangent
bundle is represented internally as a sigma type, the notation `p.1` also works for the projection
of the point `p`. -/
def TangentBundle.proj : TangentBundle I M ‚Üí M := fun p => p.1

variable {M}

@[simp, mfld_simps]
theorem TangentBundle.proj_apply (x : M) (v : TangentSpace I x) : TangentBundle.proj I M ‚ü®x, v‚ü© = x :=
  rfl

section TangentBundleInstances

variable (M)

instance : TopologicalSpace (TangentBundle I M) :=
  (tangentBundleCore I M).toTopologicalFiberBundleCore.toTopologicalSpace (atlas H M)

instance : ChartedSpace (ModelProd H E) (TangentBundle I M) :=
  (tangentBundleCore I M).toChartedSpace

instance : SmoothManifoldWithCorners I.tangent (TangentBundle I M) :=
  (tangentBundleCore I M).to_smooth_manifold

attribute [local reducible] TangentSpace

variable {M} (x : M)

instance : HasContinuousSmul ùïú (TangentSpace I x) := by
  infer_instance

instance : TopologicalSpace (TangentSpace I x) := by
  infer_instance

instance : AddCommGroup‚Çì (TangentSpace I x) := by
  infer_instance

instance : TopologicalAddGroup (TangentSpace I x) := by
  infer_instance

instance : Module ùïú (TangentSpace I x) := by
  infer_instance

instance : Inhabited (TangentSpace I x) :=
  ‚ü®0‚ü©

end TangentBundleInstances

variable (M)

/--  The tangent bundle projection on the basis is a continuous map. -/
theorem tangent_bundle_proj_continuous : Continuous (TangentBundle.proj I M) :=
  TopologicalFiberBundleCore.continuous_proj _

/--  The tangent bundle projection on the basis is an open map. -/
theorem tangent_bundle_proj_open : IsOpenMap (TangentBundle.proj I M) :=
  TopologicalFiberBundleCore.is_open_map_proj _

/--  In the tangent bundle to the model space, the charts are just the canonical identification
between a product type and a sigma type, a.k.a. `equiv.sigma_equiv_prod`. -/
@[simp, mfld_simps]
theorem tangent_bundle_model_space_chart_at (p : TangentBundle I H) :
    (chart_at (ModelProd H E) p).toLocalEquiv = (Equiv‚Çì.sigmaEquivProd H E).toLocalEquiv := by
  have A : ‚àÄ x_fst, fderivWithin ùïú (I ‚àò I.symm) (range I) (I x_fst) = ContinuousLinearMap.id ùïú E := by
    intro x_fst
    have : fderivWithin ùïú (I ‚àò I.symm) (range I) (I x_fst) = fderivWithin ùïú id (range I) (I x_fst) := by
      refine'
        fderiv_within_congr I.unique_diff_at_image (fun y hy => _)
          (by
            simp )
      exact ModelWithCorners.right_inv _ hy
    rwa [fderiv_within_id I.unique_diff_at_image] at this
  ext x : 1
  show (chart_at (ModelProd H E) p : TangentBundle I H ‚Üí ModelProd H E) x = (Equiv‚Çì.sigmaEquivProd H E) x
  ¬∑
    cases x
    simp' only [chart_at, BasicSmoothBundleCore.chart, tangentBundleCore,
      BasicSmoothBundleCore.toTopologicalFiberBundleCore, A, Prod.mk.inj_iff‚Çì, ContinuousLinearMap.coe_id'] with
      mfld_simps
  show ‚àÄ x, (chart_at (ModelProd H E) p).toLocalEquiv.symm x = (Equiv‚Çì.sigmaEquivProd H E).symm x
  ¬∑
    rintro ‚ü®x_fst, x_snd‚ü©
    simp' only [chart_at, BasicSmoothBundleCore.chart, tangentBundleCore, ContinuousLinearMap.coe_id',
      BasicSmoothBundleCore.toTopologicalFiberBundleCore, A] with mfld_simps
  show (chart_at (ModelProd H E) p).toLocalEquiv.Source = univ
  ¬∑
    simp' only [chart_at] with mfld_simps

@[simp, mfld_simps]
theorem tangent_bundle_model_space_coe_chart_at (p : TangentBundle I H) :
    ‚áëchart_at (ModelProd H E) p = Equiv‚Çì.sigmaEquivProd H E := by
  unfold_coes
  simp' only with mfld_simps

@[simp, mfld_simps]
theorem tangent_bundle_model_space_coe_chart_at_symm (p : TangentBundle I H) :
    ((chart_at (ModelProd H E) p).symm : ModelProd H E ‚Üí TangentBundle I H) = (Equiv‚Çì.sigmaEquivProd H E).symm := by
  unfold_coes
  simp' only with mfld_simps

variable (H)

/--  The canonical identification between the tangent bundle to the model space and the product,
as a homeomorphism -/
def tangentBundleModelSpaceHomeomorph : TangentBundle I H ‚âÉ‚Çú ModelProd H E :=
  { Equiv‚Çì.sigmaEquivProd H E with
    continuous_to_fun := by
      let p : TangentBundle I H := ‚ü®I.symm (0 : E), (0 : E)‚ü©
      have : Continuous (chart_at (ModelProd H E) p) := by
        rw [continuous_iff_continuous_on_univ]
        convert LocalHomeomorph.continuous_on _
        simp' only with mfld_simps
      simpa only with mfld_simps using this,
    continuous_inv_fun := by
      let p : TangentBundle I H := ‚ü®I.symm (0 : E), (0 : E)‚ü©
      have : Continuous (chart_at (ModelProd H E) p).symm := by
        rw [continuous_iff_continuous_on_univ]
        convert LocalHomeomorph.continuous_on _
        simp' only with mfld_simps
      simpa only with mfld_simps using this }

@[simp, mfld_simps]
theorem tangent_bundle_model_space_homeomorph_coe :
    (tangentBundleModelSpaceHomeomorph H I : TangentBundle I H ‚Üí ModelProd H E) = Equiv‚Çì.sigmaEquivProd H E :=
  rfl

@[simp, mfld_simps]
theorem tangent_bundle_model_space_homeomorph_coe_symm :
    ((tangentBundleModelSpaceHomeomorph H I).symm : ModelProd H E ‚Üí TangentBundle I H) =
      (Equiv‚Çì.sigmaEquivProd H E).symm :=
  rfl

end TangentBundle

