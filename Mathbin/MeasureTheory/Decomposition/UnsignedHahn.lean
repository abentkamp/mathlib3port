import Mathbin.MeasureTheory.Measure.MeasureSpace

/-!
# Unsigned Hahn decomposition theorem

This file proves the unsigned version of the Hahn decomposition theorem.

## Main statements

* `hahn_decomposition` : Given two finite measures `Œº` and `ŒΩ`, there exists a measurable set `s`
    such that any measurable set `t` included in `s` satisfies `ŒΩ t ‚â§ Œº t`, and any
    measurable set `u` included in the complement of `s` satisfies `Œº u ‚â§ ŒΩ u`.

## Tags

Hahn decomposition
-/


open Set Filter

open_locale Classical TopologicalSpace Ennreal

namespace MeasureTheory

variable{Œ± : Type _}[MeasurableSpace Œ±]{Œº ŒΩ : Measure‚Çì Œ±}

private theorem aux {m : ‚Ñï} {Œ≥ d : ‚Ñù} (h : Œ≥ - (1 / 2) ^ m < d) : ((Œ≥ - 2*(1 / 2) ^ m)+(1 / 2) ^ m) ‚â§ d :=
  by 
    linarith

-- error in MeasureTheory.Decomposition.UnsignedHahn: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- **Hahn decomposition theorem** -/
theorem hahn_decomposition
[is_finite_measure Œº]
[is_finite_measure ŒΩ] : ¬´expr‚àÉ , ¬ª((s), ¬´expr ‚àß ¬ª(measurable_set s, ¬´expr ‚àß ¬ª(‚àÄ
   t, measurable_set t ‚Üí ¬´expr ‚äÜ ¬ª(t, s) ‚Üí ¬´expr ‚â§ ¬ª(ŒΩ t, Œº t), ‚àÄ
   t, measurable_set t ‚Üí ¬´expr ‚äÜ ¬ª(t, ¬´expr ·∂ú¬ª(s)) ‚Üí ¬´expr ‚â§ ¬ª(Œº t, ŒΩ t)))) :=
begin
  let [ident d] [":", expr set Œ± ‚Üí expr‚Ñù()] [":=", expr Œª s, ¬´expr - ¬ª(((Œº s).to_nnreal : expr‚Ñù()), (ŒΩ s).to_nnreal)],
  let [ident c] [":", expr set expr‚Ñù()] [":=", expr ¬´expr '' ¬ª(d, {s | measurable_set s})],
  let [ident Œ≥] [":", expr expr‚Ñù()] [":=", expr Sup c],
  have [ident hŒº] [":", expr ‚àÄ s, ¬´expr ‚â† ¬ª(Œº s, ¬´expr‚àû¬ª())] [":=", expr measure_ne_top Œº],
  have [ident hŒΩ] [":", expr ‚àÄ s, ¬´expr ‚â† ¬ª(ŒΩ s, ¬´expr‚àû¬ª())] [":=", expr measure_ne_top ŒΩ],
  have [ident to_nnreal_Œº] [":", expr ‚àÄ
   s, ¬´expr = ¬ª(((Œº s).to_nnreal : ¬´expr‚Ñù‚â•0‚àû¬ª()), Œº s)] [":=", expr assume s, ¬´expr $ ¬ª(ennreal.coe_to_nnreal, hŒº _)],
  have [ident to_nnreal_ŒΩ] [":", expr ‚àÄ
   s, ¬´expr = ¬ª(((ŒΩ s).to_nnreal : ¬´expr‚Ñù‚â•0‚àû¬ª()), ŒΩ s)] [":=", expr assume s, ¬´expr $ ¬ª(ennreal.coe_to_nnreal, hŒΩ _)],
  have [ident d_empty] [":", expr ¬´expr = ¬ª(d ¬´expr‚àÖ¬ª(), 0)] [],
  { change [expr ¬´expr = ¬ª(¬´expr - ¬ª(_, _), _)] [] [],
    rw ["[", expr measure_empty, ",", expr measure_empty, ",", expr sub_self, "]"] [] },
  have [ident d_split] [":", expr ‚àÄ
   s t, measurable_set s ‚Üí measurable_set t ‚Üí ¬´expr = ¬ª(d s, ¬´expr + ¬ª(d ¬´expr \ ¬ª(s, t), d ¬´expr ‚à© ¬ª(s, t)))] [],
  { assume [binders (s t hs ht)],
    simp [] [] ["only"] ["[", expr d, "]"] [] [],
    rw ["[", "<-", expr measure_inter_add_diff s ht, ",", "<-", expr measure_inter_add_diff s ht, ",", expr ennreal.to_nnreal_add (hŒº _) (hŒº _), ",", expr ennreal.to_nnreal_add (hŒΩ _) (hŒΩ _), ",", expr nnreal.coe_add, ",", expr nnreal.coe_add, "]"] [],
    simp [] [] ["only"] ["[", expr sub_eq_add_neg, ",", expr neg_add, "]"] [] [],
    ac_refl },
  have [ident d_Union] [":", expr ‚àÄ
   s : expr‚Ñï() ‚Üí set Œ±, ‚àÄ
   n, measurable_set (s n) ‚Üí monotone s ‚Üí tendsto (Œª n, d (s n)) at_top (exprùìù() (d ¬´expr‚ãÉ , ¬ª((n), s n)))] [],
  { assume [binders (s hs hm)],
    refine [expr tendsto.sub _ _]; refine [expr ¬´expr $ ¬ª(nnreal.tendsto_coe.2, ¬´expr $ ¬ª((ennreal.tendsto_to_nnreal _).comp, tendsto_measure_Union hs hm))],
    exact [expr hŒº _],
    exact [expr hŒΩ _] },
  have [ident d_Inter] [":", expr ‚àÄ
   s : expr‚Ñï() ‚Üí set Œ±, ‚àÄ
   n, measurable_set (s n) ‚Üí ‚àÄ
   n m, ¬´expr ‚â§ ¬ª(n, m) ‚Üí ¬´expr ‚äÜ ¬ª(s m, s n) ‚Üí tendsto (Œª n, d (s n)) at_top (exprùìù() (d ¬´expr‚ãÇ , ¬ª((n), s n)))] [],
  { assume [binders (s hs hm)],
    refine [expr tendsto.sub _ _]; refine [expr ¬´expr $ ¬ª(nnreal.tendsto_coe.2, ¬´expr $ ¬ª(¬´expr $ ¬ª(ennreal.tendsto_to_nnreal, _).comp, tendsto_measure_Inter hs hm _))],
    exacts ["[", expr hŒº _, ",", expr ‚ü®0, hŒº _‚ü©, ",", expr hŒΩ _, ",", expr ‚ü®0, hŒΩ _‚ü©, "]"] },
  have [ident bdd_c] [":", expr bdd_above c] [],
  { use [expr (Œº univ).to_nnreal],
    rintros [ident r, "‚ü®", ident s, ",", ident hs, ",", ident rfl, "‚ü©"],
    refine [expr le_trans ¬´expr $ ¬ª(sub_le_self _, nnreal.coe_nonneg _) _],
    rw ["[", expr nnreal.coe_le_coe, ",", "<-", expr ennreal.coe_le_coe, ",", expr to_nnreal_Œº, ",", expr to_nnreal_Œº, "]"] [],
    exact [expr measure_mono (subset_univ _)] },
  have [ident c_nonempty] [":", expr c.nonempty] [":=", expr nonempty.image _ ‚ü®_, measurable_set.empty‚ü©],
  have [ident d_le_Œ≥] [":", expr ‚àÄ
   s, measurable_set s ‚Üí ¬´expr ‚â§ ¬ª(d s, Œ≥)] [":=", expr assume s hs, le_cSup bdd_c ‚ü®s, hs, rfl‚ü©],
  have [] [":", expr ‚àÄ
   n : expr‚Ñï(), ¬´expr‚àÉ , ¬ª((s : set Œ±), ¬´expr ‚àß ¬ª(measurable_set s, ¬´expr < ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n)), d s)))] [],
  { assume [binders (n)],
    have [] [":", expr ¬´expr < ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n)), Œ≥)] [":=", expr sub_lt_self Œ≥ (pow_pos (half_pos zero_lt_one) n)],
    rcases [expr exists_lt_of_lt_cSup c_nonempty this, "with", "‚ü®", ident r, ",", "‚ü®", ident s, ",", ident hs, ",", ident rfl, "‚ü©", ",", ident hlt, "‚ü©"],
    exact [expr ‚ü®s, hs, hlt‚ü©] },
  rcases [expr classical.axiom_of_choice this, "with", "‚ü®", ident e, ",", ident he, "‚ü©"],
  change [expr expr‚Ñï() ‚Üí set Œ±] [] ["at", ident e],
  have [ident he‚ÇÅ] [":", expr ‚àÄ n, measurable_set (e n)] [":=", expr assume n, (he n).1],
  have [ident he‚ÇÇ] [":", expr ‚àÄ
   n, ¬´expr < ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n)), d (e n))] [":=", expr assume n, (he n).2],
  let [ident f] [":", expr expr‚Ñï() ‚Üí expr‚Ñï() ‚Üí set Œ±] [":=", expr Œª n m, (finset.Ico n ¬´expr + ¬ª(m, 1)).inf e],
  have [ident hf] [":", expr ‚àÄ n m, measurable_set (f n m)] [],
  { assume [binders (n m)],
    simp [] [] ["only"] ["[", expr f, ",", expr finset.inf_eq_infi, "]"] [] [],
    exact [expr measurable_set.bInter (countable_encodable _) (assume i _, he‚ÇÅ _)] },
  have [ident f_subset_f] [":", expr ‚àÄ {a b c d}, ¬´expr ‚â§ ¬ª(a, b) ‚Üí ¬´expr ‚â§ ¬ª(c, d) ‚Üí ¬´expr ‚äÜ ¬ª(f a d, f b c)] [],
  { assume [binders (a b c d hab hcd)],
    dsimp ["only"] ["[", expr f, "]"] [] [],
    rw ["[", expr finset.inf_eq_infi, ",", expr finset.inf_eq_infi, "]"] [],
    exact [expr bInter_subset_bInter_left ¬´expr $ ¬ª(finset.Ico_subset_Ico hab, nat.succ_le_succ hcd)] },
  have [ident f_succ] [":", expr ‚àÄ
   n m, ¬´expr ‚â§ ¬ª(n, m) ‚Üí ¬´expr = ¬ª(f n ¬´expr + ¬ª(m, 1), ¬´expr ‚à© ¬ª(f n m, e ¬´expr + ¬ª(m, 1)))] [],
  { assume [binders (n m hnm)],
    have [] [":", expr ¬´expr ‚â§ ¬ª(n, ¬´expr + ¬ª(m, 1))] [":=", expr le_of_lt (nat.succ_le_succ hnm)],
    simp [] [] ["only"] ["[", expr f, "]"] [] [],
    rw ["[", expr nat.Ico_succ_right_eq_insert_Ico this, ",", expr finset.inf_insert, ",", expr set.inter_comm, "]"] [],
    refl },
  have [ident le_d_f] [":", expr ‚àÄ
   n
   m, ¬´expr ‚â§ ¬ª(m, n) ‚Üí ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n)), d (f m n))] [],
  { assume [binders (n m h)],
    refine [expr nat.le_induction _ _ n h],
    { have [] [] [":=", expr he‚ÇÇ m],
      simp [] [] ["only"] ["[", expr f, "]"] [] [],
      rw ["[", expr nat.Ico_succ_singleton, ",", expr finset.inf_singleton, "]"] [],
      exact [expr aux this] },
    { assume [binders (n) (hmn : ¬´expr ‚â§ ¬ª(m, n)) (ih)],
      have [] [":", expr ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(Œ≥, ¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), ¬´expr + ¬ª(n, 1)))), ¬´expr + ¬ª(Œ≥, d (f m ¬´expr + ¬ª(n, 1))))] [],
      { calc
          ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(Œ≥, ¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), ¬´expr + ¬ª(n, 1)))), ¬´expr + ¬ª(Œ≥, ¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), ¬´expr - ¬ª(¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n), ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), ¬´expr + ¬ª(n, 1)))))) : begin
            refine [expr add_le_add_left (add_le_add_left _ _) Œ≥],
            simp [] [] ["only"] ["[", expr pow_add, ",", expr pow_one, ",", expr le_sub_iff_add_le, "]"] [] [],
            linarith [] [] []
          end
          ¬´expr = ¬ª(..., ¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), ¬´expr + ¬ª(n, 1))), ¬´expr + ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), n)))) : by simp [] [] ["only"] ["[", expr sub_eq_add_neg, "]"] [] []; ac_refl
          ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(d (e ¬´expr + ¬ª(n, 1)), d (f m n))) : add_le_add ¬´expr $ ¬ª(le_of_lt, he‚ÇÇ _) ih
          ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(¬´expr + ¬ª(d (e ¬´expr + ¬ª(n, 1)), d ¬´expr \ ¬ª(f m n, e ¬´expr + ¬ª(n, 1))), d (f m ¬´expr + ¬ª(n, 1)))) : by rw ["[", expr f_succ _ _ hmn, ",", expr d_split (f m n) (e ¬´expr + ¬ª(n, 1)) (hf _ _) (he‚ÇÅ _), ",", expr add_assoc, "]"] []
          ¬´expr = ¬ª(..., ¬´expr + ¬ª(d ¬´expr ‚à™ ¬ª(e ¬´expr + ¬ª(n, 1), f m n), d (f m ¬´expr + ¬ª(n, 1)))) : begin
            rw ["[", expr d_split ¬´expr ‚à™ ¬ª(e ¬´expr + ¬ª(n, 1), f m n) (e ¬´expr + ¬ª(n, 1)), ",", expr union_diff_left, ",", expr union_inter_cancel_left, "]"] [],
            ac_refl,
            exact [expr (he‚ÇÅ _).union (hf _ _)],
            exact [expr he‚ÇÅ _]
          end
          ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(Œ≥, d (f m ¬´expr + ¬ª(n, 1)))) : add_le_add_right ¬´expr $ ¬ª(d_le_Œ≥ _, (he‚ÇÅ _).union (hf _ _)) _ },
      exact [expr (add_le_add_iff_left Œ≥).1 this] } },
  let [ident s] [] [":=", expr ¬´expr‚ãÉ , ¬ª((m), ¬´expr‚ãÇ , ¬ª((n), f m n))],
  have [ident Œ≥_le_d_s] [":", expr ¬´expr ‚â§ ¬ª(Œ≥, d s)] [],
  { have [ident hŒ≥] [":", expr tendsto (Œª
      m : expr‚Ñï(), ¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m)))) at_top (exprùìù() Œ≥)] [],
    { suffices [] [":", expr tendsto (Œª
        m : expr‚Ñï(), ¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m)))) at_top (exprùìù() ¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, 0)))],
      { simpa [] [] [] [] [] [] },
      exact [expr ¬´expr $ ¬ª(tendsto_const_nhds.sub, ¬´expr $ ¬ª(tendsto_const_nhds.mul, tendsto_pow_at_top_nhds_0_of_lt_1 ¬´expr $ ¬ª(le_of_lt, ¬´expr $ ¬ª(half_pos, zero_lt_one)) (half_lt_self zero_lt_one)))] },
    have [ident hd] [":", expr tendsto (Œª
      m, d ¬´expr‚ãÇ , ¬ª((n), f m n)) at_top (exprùìù() (d ¬´expr‚ãÉ , ¬ª((m), ¬´expr‚ãÇ , ¬ª((n), f m n))))] [],
    { refine [expr d_Union _ _ _],
      { assume [binders (n)],
        exact [expr measurable_set.Inter (assume m, hf _ _)] },
      { exact [expr assume
         n
         m
         hnm, subset_Inter (assume
          i, ¬´expr $ ¬ª(subset.trans (Inter_subset (f n) i), ¬´expr $ ¬ª(f_subset_f hnm, le_refl _)))] } },
    refine [expr le_of_tendsto_of_tendsto' hŒ≥ hd (assume m, _)],
    have [] [":", expr tendsto (Œª n, d (f m n)) at_top (exprùìù() (d ¬´expr‚ãÇ , ¬ª((n), f m n)))] [],
    { refine [expr d_Inter _ _ _],
      { assume [binders (n)],
        exact [expr hf _ _] },
      { assume [binders (n m hnm)],
        exact [expr f_subset_f (le_refl _) hnm] } },
    refine [expr ge_of_tendsto this (eventually_at_top.2 ‚ü®m, assume n hmn, _‚ü©)],
    change [expr ¬´expr ‚â§ ¬ª(¬´expr - ¬ª(Œ≥, ¬´expr * ¬ª(2, ¬´expr ^ ¬ª(¬´expr / ¬ª(1, 2), m))), d (f m n))] [] [],
    refine [expr le_trans _ (le_d_f _ _ hmn)],
    exact [expr le_add_of_le_of_nonneg (le_refl _) (pow_nonneg ¬´expr $ ¬ª(le_of_lt, ¬´expr $ ¬ª(half_pos, zero_lt_one)) _)] },
  have [ident hs] [":", expr measurable_set s] [":=", expr measurable_set.Union (assume
    n, measurable_set.Inter (assume m, hf _ _))],
  refine [expr ‚ü®s, hs, _, _‚ü©],
  { assume [binders (t ht hts)],
    have [] [":", expr ¬´expr ‚â§ ¬ª(0, d t)] [":=", expr ¬´expr $ ¬ª((add_le_add_iff_left Œ≥).1, calc
        ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(Œ≥, 0), d s) : by rw ["[", expr add_zero, "]"] []; exact [expr Œ≥_le_d_s]
        ¬´expr = ¬ª(..., ¬´expr + ¬ª(d ¬´expr \ ¬ª(s, t), d t)) : by rw ["[", expr d_split _ _ hs ht, ",", expr inter_eq_self_of_subset_right hts, "]"] []
        ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(Œ≥, d t)) : add_le_add (d_le_Œ≥ _ (hs.diff ht)) (le_refl _))],
    rw ["[", "<-", expr to_nnreal_Œº, ",", "<-", expr to_nnreal_ŒΩ, ",", expr ennreal.coe_le_coe, ",", "<-", expr nnreal.coe_le_coe, "]"] [],
    simpa [] [] ["only"] ["[", expr d, ",", expr le_sub_iff_add_le, ",", expr zero_add, "]"] [] ["using", expr this] },
  { assume [binders (t ht hts)],
    have [] [":", expr ¬´expr ‚â§ ¬ª(d t, 0)] [],
    exact [expr ¬´expr $ ¬ª((add_le_add_iff_left Œ≥).1, calc
        ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(Œ≥, d t), ¬´expr + ¬ª(d s, d t)) : add_le_add Œ≥_le_d_s (le_refl _)
        ¬´expr = ¬ª(..., d ¬´expr ‚à™ ¬ª(s, t)) : begin
          rw ["[", expr d_split _ _ (hs.union ht) ht, ",", expr union_diff_right, ",", expr union_inter_cancel_right, ",", expr diff_eq_self.2, "]"] [],
          exact [expr assume (a) ‚ü®hat, has‚ü©, hts hat has]
        end
        ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(Œ≥, 0)) : by rw ["[", expr add_zero, "]"] []; exact [expr d_le_Œ≥ _ (hs.union ht)])],
    rw ["[", "<-", expr to_nnreal_Œº, ",", "<-", expr to_nnreal_ŒΩ, ",", expr ennreal.coe_le_coe, ",", "<-", expr nnreal.coe_le_coe, "]"] [],
    simpa [] [] ["only"] ["[", expr d, ",", expr sub_le_iff_le_add, ",", expr zero_add, "]"] [] ["using", expr this] }
end

end MeasureTheory

