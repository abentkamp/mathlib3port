import Mathbin.MeasureTheory.Function.L1Space

/-!
# Density of simple functions

Show that each Borel measurable function can be approximated pointwise, and each `L·µñ` Borel
measurable function can be approximated in `L·µñ` norm, by a sequence of simple functions.

## Main definitions

* `measure_theory.simple_func.nearest_pt (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) : Œ± ‚Üí‚Çõ ‚Ñï`: the `simple_func` sending
  each `x : Œ±` to the point `e k` which is the nearest to `x` among `e 0`, ..., `e N`.
* `measure_theory.simple_func.approx_on (f : Œ≤ ‚Üí Œ±) (hf : measurable f) (s : set Œ±) (y‚ÇÄ : Œ±)
  (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (n : ‚Ñï) : Œ≤ ‚Üí‚Çõ Œ±` : a simple function that takes values in `s`
  and approximates `f`.
* `measure_theory.Lp.simple_func`, the type of `Lp` simple functions
* `coe_to_Lp`, the embedding of `Lp.simple_func E p Œº` into `Lp E p Œº`

## Main results

* `tendsto_approx_on` (pointwise convergence): If `f x ‚àà s`, then the sequence of simple
  approximations `measure_theory.simple_func.approx_on f hf s y‚ÇÄ h‚ÇÄ n`, evaluated at `x`,
  tends to `f x` as `n` tends to `‚àû`.
* `tendsto_approx_on_univ_Lp` (L·µñ convergence): If `E` is a `normed_group` and `f` is measurable
  and `mem_‚Ñíp` (for `p < ‚àû`), then the simple functions `simple_func.approx_on f hf s 0 h‚ÇÄ n` may
  be considered as elements of `Lp E p Œº`, and they tend in L·µñ to `f`.
* `Lp.simple_func.dense_embedding`: the embedding `coe_to_Lp` of the `Lp` simple functions into
  `Lp` is dense.
* `Lp.simple_func.induction`, `Lp.induction`, `mem_‚Ñíp.induction`, `integrable.induction`: to prove
  a predicate for all elements of one of these classes of functions, it suffices to check that it
  behaves correctly on simple functions.

## TODO

For `E` finite-dimensional, simple functions `Œ± ‚Üí‚Çõ E` are dense in L^‚àû -- prove this.

## Notations

* `Œ± ‚Üí‚Çõ Œ≤` (local notation): the type of simple functions `Œ± ‚Üí Œ≤`.
* `Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E`: the type of `L1` simple functions `Œ± ‚Üí Œ≤`.
-/


open Set Function Filter TopologicalSpace Ennreal Emetric Finset

open_locale Classical TopologicalSpace Ennreal MeasureTheory BigOperators

variable{Œ± Œ≤ Œπ E F ùïú : Type _}

noncomputable theory

namespace MeasureTheory

local infixr:25 " ‚Üí‚Çõ " => simple_func

namespace SimpleFunc

/-! ### Pointwise approximation by simple functions -/


section Pointwise

variable[MeasurableSpace Œ±][EmetricSpace Œ±][OpensMeasurableSpace Œ±]

/-- `nearest_pt_ind e N x` is the index `k` such that `e k` is the nearest point to `x` among the
points `e 0`, ..., `e N`. If more than one point are at the same distance from `x`, then
`nearest_pt_ind e N x` returns the least of their indexes. -/
noncomputable def nearest_pt_ind (e : ‚Ñï ‚Üí Œ±) : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ ‚Ñï
| 0 => const Œ± 0
| N+1 =>
  piecewise (‚ãÇ(k : _)(_ : k ‚â§ N), { x | edist (e (N+1)) x < edist (e k) x })
    (MeasurableSet.Inter$
      fun k => MeasurableSet.Inter_Prop$ fun hk => measurable_set_lt measurable_edist_right measurable_edist_right)
    (const Œ±$ N+1) (nearest_pt_ind N)

/-- `nearest_pt e N x` is the nearest point to `x` among the points `e 0`, ..., `e N`. If more than
one point are at the same distance from `x`, then `nearest_pt e N x` returns the point with the
least possible index. -/
noncomputable def nearest_pt (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) : Œ± ‚Üí‚Çõ Œ± :=
  (nearest_pt_ind e N).map e

@[simp]
theorem nearest_pt_ind_zero (e : ‚Ñï ‚Üí Œ±) : nearest_pt_ind e 0 = const Œ± 0 :=
  rfl

@[simp]
theorem nearest_pt_zero (e : ‚Ñï ‚Üí Œ±) : nearest_pt e 0 = const Œ± (e 0) :=
  rfl

theorem nearest_pt_ind_succ (e : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) (x : Œ±) :
  nearest_pt_ind e (N+1) x = if ‚àÄ k _ : k ‚â§ N, edist (e (N+1)) x < edist (e k) x then N+1 else nearest_pt_ind e N x :=
  by 
    simp only [nearest_pt_ind, coe_piecewise, Set.piecewise]
    congr 
    simp 

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in exacts: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem nearest_pt_ind_le (e : expr‚Ñï() ‚Üí Œ±) (N : expr‚Ñï()) (x : Œ±) : ¬´expr ‚â§ ¬ª(nearest_pt_ind e N x, N) :=
begin
  induction [expr N] [] ["with", ident N, ident ihN] [],
  { simp [] [] [] [] [] [] },
  simp [] [] ["only"] ["[", expr nearest_pt_ind_succ, "]"] [] [],
  split_ifs [] [],
  exacts ["[", expr le_rfl, ",", expr ihN.trans N.le_succ, "]"]
end

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in exacts: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem edist_nearest_pt_le
(e : expr‚Ñï() ‚Üí Œ±)
(x : Œ±)
{k N : expr‚Ñï()}
(hk : ¬´expr ‚â§ ¬ª(k, N)) : ¬´expr ‚â§ ¬ª(edist (nearest_pt e N x) x, edist (e k) x) :=
begin
  induction [expr N] [] ["with", ident N, ident ihN] ["generalizing", ident k],
  { simp [] [] [] ["[", expr nonpos_iff_eq_zero.1 hk, ",", expr le_refl, "]"] [] [] },
  { simp [] [] ["only"] ["[", expr nearest_pt, ",", expr nearest_pt_ind_succ, ",", expr map_apply, "]"] [] [],
    split_ifs [] [],
    { rcases [expr hk.eq_or_lt, "with", ident rfl, "|", ident hk],
      exacts ["[", expr le_rfl, ",", expr (h k (nat.lt_succ_iff.1 hk)).le, "]"] },
    { push_neg ["at", ident h],
      rcases [expr h, "with", "‚ü®", ident l, ",", ident hlN, ",", ident hxl, "‚ü©"],
      rcases [expr hk.eq_or_lt, "with", ident rfl, "|", ident hk],
      exacts ["[", expr (ihN hlN).trans hxl, ",", expr ihN (nat.lt_succ_iff.1 hk), "]"] } }
end

theorem tendsto_nearest_pt {e : ‚Ñï ‚Üí Œ±} {x : Œ±} (hx : x ‚àà Closure (range e)) :
  tendsto (fun N => nearest_pt e N x) at_top (ùìù x) :=
  by 
    refine' (at_top_basis.tendsto_iff nhds_basis_eball).2 fun Œµ hŒµ => _ 
    rcases Emetric.mem_closure_iff.1 hx Œµ hŒµ with ‚ü®_, ‚ü®N, rfl‚ü©, hN‚ü©
    rw [edist_comm] at hN 
    exact ‚ü®N, trivial‚Çì, fun n hn => (edist_nearest_pt_le e x hn).trans_lt hN‚ü©

variable[MeasurableSpace Œ≤]{f : Œ≤ ‚Üí Œ±}

/-- Approximate a measurable function by a sequence of simple functions `F n` such that
`F n x ‚àà s`. -/
noncomputable def approx_on (f : Œ≤ ‚Üí Œ±) (hf : Measurable f) (s : Set Œ±) (y‚ÇÄ : Œ±) (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s]
  (n : ‚Ñï) : Œ≤ ‚Üí‚Çõ Œ± :=
  by 
    haveI  : Nonempty s := ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü© <;>
      exact comp (nearest_pt (fun k => Nat.casesOn k y‚ÇÄ (coe‚Çì ‚àò dense_seq s) : ‚Ñï ‚Üí Œ±) n) f hf

@[simp]
theorem approx_on_zero {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (x : Œ≤) :
  approx_on f hf s y‚ÇÄ h‚ÇÄ 0 x = y‚ÇÄ :=
  rfl

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in exacts: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem approx_on_mem
{f : Œ≤ ‚Üí Œ±}
(hf : measurable f)
{s : set Œ±}
{y‚ÇÄ : Œ±}
(h‚ÇÄ : ¬´expr ‚àà ¬ª(y‚ÇÄ, s))
[separable_space s]
(n : expr‚Ñï())
(x : Œ≤) : ¬´expr ‚àà ¬ª(approx_on f hf s y‚ÇÄ h‚ÇÄ n x, s) :=
begin
  haveI [] [":", expr nonempty s] [":=", expr ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©],
  suffices [] [":", expr ‚àÄ n, ¬´expr ‚àà ¬ª((nat.cases_on n y‚ÇÄ ¬´expr ‚àò ¬ª(coe, dense_seq s) : Œ±), s)],
  { apply [expr this] },
  rintro ["(", "_", "|", ident n, ")"],
  exacts ["[", expr h‚ÇÄ, ",", expr subtype.mem _, "]"]
end

@[simp]
theorem approx_on_comp {Œ≥ : Type _} [MeasurableSpace Œ≥] {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {g : Œ≥ ‚Üí Œ≤} (hg : Measurable g)
  {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (n : ‚Ñï) :
  approx_on (f ‚àò g) (hf.comp hg) s y‚ÇÄ h‚ÇÄ n = (approx_on f hf s y‚ÇÄ h‚ÇÄ n).comp g hg :=
  rfl

theorem tendsto_approx_on {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] {x : Œ≤}
  (hx : f x ‚àà Closure s) : tendsto (fun n => approx_on f hf s y‚ÇÄ h‚ÇÄ n x) at_top (ùìù$ f x) :=
  by 
    haveI  : Nonempty s := ‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©
    rw [‚Üê@Subtype.range_coe _ s, ‚Üêimage_univ, ‚Üê(dense_range_dense_seq s).closure_eq] at hx 
    simp only [approx_on, coe_comp]
    refine' tendsto_nearest_pt (closure_minimal _ is_closed_closure hx)
    simp only [Nat.range_cases_on, closure_union, range_comp coe‚Çì]
    exact subset.trans (image_closure_subset_closure_image continuous_subtype_coe) (subset_union_right _ _)

theorem edist_approx_on_mono {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s]
  (x : Œ≤) {m n : ‚Ñï} (h : m ‚â§ n) : edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) ‚â§ edist (approx_on f hf s y‚ÇÄ h‚ÇÄ m x) (f x) :=
  by 
    dsimp only [approx_on, coe_comp, ¬∑ ‚àò ¬∑]
    exact edist_nearest_pt_le _ _ ((nearest_pt_ind_le _ _ _).trans h)

theorem edist_approx_on_le {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s]
  (x : Œ≤) (n : ‚Ñï) : edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) ‚â§ edist y‚ÇÄ (f x) :=
  edist_approx_on_mono hf h‚ÇÄ x (zero_le n)

theorem edist_approx_on_y0_le {f : Œ≤ ‚Üí Œ±} (hf : Measurable f) {s : Set Œ±} {y‚ÇÄ : Œ±} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s]
  (x : Œ≤) (n : ‚Ñï) : edist y‚ÇÄ (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) ‚â§ edist y‚ÇÄ (f x)+edist y‚ÇÄ (f x) :=
  calc edist y‚ÇÄ (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) ‚â§ edist y‚ÇÄ (f x)+edist (approx_on f hf s y‚ÇÄ h‚ÇÄ n x) (f x) :=
    edist_triangle_right _ _ _ 
    _ ‚â§ edist y‚ÇÄ (f x)+edist y‚ÇÄ (f x) := add_le_add_left (edist_approx_on_le hf h‚ÇÄ x n) _
    

end Pointwise

/-! ### Lp approximation by simple functions -/


section Lp

variable[MeasurableSpace Œ≤]

variable[MeasurableSpace E][NormedGroup E]{q : ‚Ñù}{p : ‚Ñù‚â•0‚àû}

theorem nnnorm_approx_on_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s)
  [separable_space s] (x : Œ≤) (n : ‚Ñï) : ‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä ‚â§ ‚à•f x - y‚ÇÄ‚à•‚Çä :=
  by 
    have  := edist_approx_on_le hf h‚ÇÄ x n 
    rw [edist_comm y‚ÇÄ] at this 
    simp only [edist_nndist, nndist_eq_nnnorm] at this 
    exactModCast this

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in repeat: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem norm_approx_on_y‚ÇÄ_le
[opens_measurable_space E]
{f : Œ≤ ‚Üí E}
(hf : measurable f)
{s : set E}
{y‚ÇÄ : E}
(h‚ÇÄ : ¬´expr ‚àà ¬ª(y‚ÇÄ, s))
[separable_space s]
(x : Œ≤)
(n : expr‚Ñï()) : ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(approx_on f hf s y‚ÇÄ h‚ÇÄ n x, y‚ÇÄ)), ¬´expr + ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(f x, y‚ÇÄ)), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(f x, y‚ÇÄ)))) :=
begin
  have [] [] [":=", expr edist_approx_on_y0_le hf h‚ÇÄ x n],
  repeat { rw ["[", expr edist_comm y‚ÇÄ, ",", expr edist_eq_coe_nnnorm_sub, "]"] ["at", ident this] },
  exact_mod_cast [expr this]
end

theorem norm_approx_on_zero_le [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} (h‚ÇÄ : (0 : E) ‚àà s)
  [separable_space s] (x : Œ≤) (n : ‚Ñï) : ‚à•approx_on f hf s 0 h‚ÇÄ n x‚à• ‚â§ ‚à•f x‚à•+‚à•f x‚à• :=
  by 
    have  := edist_approx_on_y0_le hf h‚ÇÄ x n 
    simp [edist_comm (0 : E), edist_eq_coe_nnnorm] at this 
    exactModCast this

theorem tendsto_approx_on_Lp_snorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E}
  (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (hp_ne_top : p ‚â† ‚àû) {Œº : Measure‚Çì Œ≤} (hŒº : ‚àÄ·µêx ‚àÇŒº, f x ‚àà Closure s)
  (hi : snorm (fun x => f x - y‚ÇÄ) p Œº < ‚àû) : tendsto (fun n => snorm (approx_on f hf s y‚ÇÄ h‚ÇÄ n - f) p Œº) at_top (ùìù 0) :=
  by 
    byCases' hp_zero : p = 0
    ¬∑
      simpa only [hp_zero, snorm_exponent_zero] using tendsto_const_nhds 
    have hp : 0 < p.to_real := to_real_pos_iff.mpr ‚ü®bot_lt_iff_ne_bot.mpr hp_zero, hp_ne_top‚ü©
    suffices  : tendsto (fun n => ‚à´‚Åªx, ‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä^p.to_real ‚àÇŒº) at_top (ùìù 0)
    ¬∑
      simp only [snorm_eq_lintegral_rpow_nnnorm hp_zero hp_ne_top]
      convert continuous_rpow_const.continuous_at.tendsto.comp this <;> simp [_root_.inv_pos.mpr hp]
    have hF_meas : ‚àÄ n, Measurable fun x => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä : ‚Ñù‚â•0‚àû)^p.to_real
    ¬∑
      simpa only [‚Üêedist_eq_coe_nnnorm_sub] using
        fun n =>
          (approx_on f hf s y‚ÇÄ h‚ÇÄ n).measurable_bind (fun y x => edist y (f x)^p.to_real)
            fun y => (measurable_edist_right.comp hf).pow_const p.to_real 
    have h_bound :
      ‚àÄ n, (fun x => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä : ‚Ñù‚â•0‚àû)^p.to_real) ‚â§·µê[Œº] fun x => ‚à•f x - y‚ÇÄ‚à•‚Çä^p.to_real
    ¬∑
      exact
        fun n => eventually_of_forall fun x => rpow_le_rpow (coe_mono (nnnorm_approx_on_le hf h‚ÇÄ x n)) to_real_nonneg 
    have h_fin : (‚à´‚Åªa : Œ≤, ‚à•f a - y‚ÇÄ‚à•‚Çä^p.to_real ‚àÇŒº) ‚â† ‚ä§
    exact (lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top hp_zero hp_ne_top hi).Ne 
    have h_lim : ‚àÄ·µêa : Œ≤ ‚àÇŒº, tendsto (fun n => (‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n a - f a‚à•‚Çä : ‚Ñù‚â•0‚àû)^p.to_real) at_top (ùìù 0)
    ¬∑
      filterUpwards [hŒº]
      intro a ha 
      have  : tendsto (fun n => (approx_on f hf s y‚ÇÄ h‚ÇÄ n) a - f a) at_top (ùìù (f a - f a))
      ¬∑
        exact (tendsto_approx_on hf h‚ÇÄ ha).sub tendsto_const_nhds 
      convert continuous_rpow_const.continuous_at.tendsto.comp (tendsto_coe.mpr this.nnnorm)
      simp [zero_rpow_of_pos hp]
    simpa using tendsto_lintegral_of_dominated_convergence _ hF_meas h_bound h_fin h_lim

theorem mem_‚Ñíp_approx_on [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure‚Çì Œ≤} (fmeas : Measurable f) (hf : mem_‚Ñíp f p Œº)
  {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (hi‚ÇÄ : mem_‚Ñíp (fun x => y‚ÇÄ) p Œº) (n : ‚Ñï) :
  mem_‚Ñíp (approx_on f fmeas s y‚ÇÄ h‚ÇÄ n) p Œº :=
  by 
    refine' ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n).AeMeasurable, _‚ü©
    suffices  : snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº < ‚ä§
    ¬∑
      have  : mem_‚Ñíp (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº :=
        ‚ü®(approx_on f fmeas s y‚ÇÄ h‚ÇÄ n - const Œ≤ y‚ÇÄ).AeMeasurable, this‚ü©
      convert snorm_add_lt_top this hi‚ÇÄ 
      ext x 
      simp 
    have hf' : mem_‚Ñíp (fun x => ‚à•f x - y‚ÇÄ‚à•) p Œº
    ¬∑
      have h_meas : Measurable fun x => ‚à•f x - y‚ÇÄ‚à•
      ¬∑
        simp only [‚Üêdist_eq_norm]
        exact (continuous_id.dist continuous_const).Measurable.comp fmeas 
      refine' ‚ü®h_meas.ae_measurable, _‚ü©
      rw [snorm_norm]
      convert snorm_add_lt_top hf hi‚ÇÄ.neg 
      ext x 
      simp [sub_eq_add_neg]
    have  : ‚àÄ·µêx ‚àÇŒº, ‚à•approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ‚à• ‚â§ ‚à•‚à•f x - y‚ÇÄ‚à•+‚à•f x - y‚ÇÄ‚à•‚à•
    ¬∑
      refine' eventually_of_forall _ 
      intro x 
      convert norm_approx_on_y‚ÇÄ_le fmeas h‚ÇÄ x n 
      rw [Real.norm_eq_abs, abs_of_nonneg]
      exact add_nonneg (norm_nonneg _) (norm_nonneg _)
    calc snorm (fun x => approx_on f fmeas s y‚ÇÄ h‚ÇÄ n x - y‚ÇÄ) p Œº ‚â§ snorm (fun x => ‚à•f x - y‚ÇÄ‚à•+‚à•f x - y‚ÇÄ‚à•) p Œº :=
      snorm_mono_ae this _ < ‚ä§ := snorm_add_lt_top hf' hf'

theorem tendsto_approx_on_univ_Lp_snorm [OpensMeasurableSpace E] [second_countable_topology E] {f : Œ≤ ‚Üí E}
  (hp_ne_top : p ‚â† ‚àû) {Œº : Measure‚Çì Œ≤} (fmeas : Measurable f) (hf : snorm f p Œº < ‚àû) :
  tendsto (fun n => snorm (approx_on f fmeas univ 0 trivial‚Çì n - f) p Œº) at_top (ùìù 0) :=
  tendsto_approx_on_Lp_snorm fmeas trivial‚Çì hp_ne_top
    (by 
      simp )
    (by 
      simpa using hf)

theorem mem_‚Ñíp_approx_on_univ [BorelSpace E] [second_countable_topology E] {f : Œ≤ ‚Üí E} {Œº : Measure‚Çì Œ≤}
  (fmeas : Measurable f) (hf : mem_‚Ñíp f p Œº) (n : ‚Ñï) : mem_‚Ñíp (approx_on f fmeas univ 0 trivial‚Çì n) p Œº :=
  mem_‚Ñíp_approx_on fmeas hf (mem_univ _) zero_mem_‚Ñíp n

theorem tendsto_approx_on_univ_Lp [BorelSpace E] [second_countable_topology E] {f : Œ≤ ‚Üí E} [hp : Fact (1 ‚â§ p)]
  (hp_ne_top : p ‚â† ‚àû) {Œº : Measure‚Çì Œ≤} (fmeas : Measurable f) (hf : mem_‚Ñíp f p Œº) :
  tendsto (fun n => (mem_‚Ñíp_approx_on_univ fmeas hf n).toLp (approx_on f fmeas univ 0 trivial‚Çì n)) at_top
    (ùìù (hf.to_Lp f)) :=
  by 
    simp [Lp.tendsto_Lp_iff_tendsto_‚Ñíp'', tendsto_approx_on_univ_Lp_snorm hp_ne_top fmeas hf.2]

end Lp

/-! ### L1 approximation by simple functions -/


section Integrable

variable[MeasurableSpace Œ≤]

variable[MeasurableSpace E][NormedGroup E]

theorem tendsto_approx_on_L1_nnnorm [OpensMeasurableSpace E] {f : Œ≤ ‚Üí E} (hf : Measurable f) {s : Set E} {y‚ÇÄ : E}
  (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] {Œº : Measure‚Çì Œ≤} (hŒº : ‚àÄ·µêx ‚àÇŒº, f x ‚àà Closure s)
  (hi : has_finite_integral (fun x => f x - y‚ÇÄ) Œº) :
  tendsto (fun n => ‚à´‚Åªx, ‚à•approx_on f hf s y‚ÇÄ h‚ÇÄ n x - f x‚à•‚Çä ‚àÇŒº) at_top (ùìù 0) :=
  by 
    simpa [snorm_one_eq_lintegral_nnnorm] using
      tendsto_approx_on_Lp_snorm hf h‚ÇÄ one_ne_top hŒº
        (by 
          simpa [snorm_one_eq_lintegral_nnnorm] using hi)

theorem integrable_approx_on [BorelSpace E] {f : Œ≤ ‚Üí E} {Œº : Measure‚Çì Œ≤} (fmeas : Measurable f) (hf : integrable f Œº)
  {s : Set E} {y‚ÇÄ : E} (h‚ÇÄ : y‚ÇÄ ‚àà s) [separable_space s] (hi‚ÇÄ : integrable (fun x => y‚ÇÄ) Œº) (n : ‚Ñï) :
  integrable (approx_on f fmeas s y‚ÇÄ h‚ÇÄ n) Œº :=
  by 
    rw [‚Üêmem_‚Ñíp_one_iff_integrable] at hf hi‚ÇÄ‚ä¢
    exact mem_‚Ñíp_approx_on fmeas hf h‚ÇÄ hi‚ÇÄ n

theorem tendsto_approx_on_univ_L1_nnnorm [OpensMeasurableSpace E] [second_countable_topology E] {f : Œ≤ ‚Üí E}
  {Œº : Measure‚Çì Œ≤} (fmeas : Measurable f) (hf : integrable f Œº) :
  tendsto (fun n => ‚à´‚Åªx, ‚à•approx_on f fmeas univ 0 trivial‚Çì n x - f x‚à•‚Çä ‚àÇŒº) at_top (ùìù 0) :=
  tendsto_approx_on_L1_nnnorm fmeas trivial‚Çì
    (by 
      simp )
    (by 
      simpa using hf.2)

theorem integrable_approx_on_univ [BorelSpace E] [second_countable_topology E] {f : Œ≤ ‚Üí E} {Œº : Measure‚Çì Œ≤}
  (fmeas : Measurable f) (hf : integrable f Œº) (n : ‚Ñï) : integrable (approx_on f fmeas univ 0 trivial‚Çì n) Œº :=
  integrable_approx_on fmeas hf _ (integrable_zero _ _ _) n

end Integrable

section SimpleFuncProperties

variable[MeasurableSpace Œ±]

variable[NormedGroup E][MeasurableSpace E][NormedGroup F]

variable{Œº : Measure‚Çì Œ±}{p : ‚Ñù‚â•0‚àû}

/-!
### Properties of simple functions in `Lp` spaces

A simple function `f : Œ± ‚Üí‚Çõ E` into a normed group `E` verifies, for a measure `Œº`:
- `mem_‚Ñíp f 0 Œº` and `mem_‚Ñíp f ‚àû Œº`, since `f` is a.e.-measurable and bounded,
- for `0 < p < ‚àû`,
  `mem_‚Ñíp f p Œº ‚Üî integrable f Œº ‚Üî f.fin_meas_supp Œº ‚Üî ‚àÄ y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû`.
-/


theorem exists_forall_norm_le (f : Œ± ‚Üí‚Çõ F) : ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C :=
  exists_forall_le (f.map fun x => ‚à•x‚à•)

theorem mem_‚Ñíp_zero (f : Œ± ‚Üí‚Çõ E) (Œº : Measure‚Çì Œ±) : mem_‚Ñíp f 0 Œº :=
  mem_‚Ñíp_zero_iff_ae_measurable.mpr f.ae_measurable

theorem mem_‚Ñíp_top (f : Œ± ‚Üí‚Çõ E) (Œº : Measure‚Çì Œ±) : mem_‚Ñíp f ‚àû Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le 
  mem_‚Ñíp_top_of_bound f.ae_measurable C$ eventually_of_forall hfC

protected theorem snorm'_eq {p : ‚Ñù} (f : Œ± ‚Üí‚Çõ F) (Œº : Measure‚Çì Œ±) :
  snorm' f p Œº = ((‚àëy in f.range, ((nnnorm y : ‚Ñù‚â•0‚àû)^p)*Œº (f ‚Åª¬π' {y}))^1 / p) :=
  have h_map : (fun a => (nnnorm (f a) : ‚Ñù‚â•0‚àû)^p) = f.map fun a : F => (nnnorm a : ‚Ñù‚â•0‚àû)^p :=
    by 
      simp 
  by 
    rw [snorm', h_map, lintegral_eq_lintegral, map_lintegral]

theorem measure_preimage_lt_top_of_mem_‚Ñíp (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) (y : E)
  (hy_ne : y ‚â† 0) : Œº (f ‚Åª¬π' {y}) < ‚àû :=
  by 
    have hp_pos_real : 0 < p.to_real 
    exact ennreal.to_real_pos_iff.mpr ‚ü®hp_pos, hp_ne_top‚ü©
    have hf_snorm := mem_‚Ñíp.snorm_lt_top hf 
    rw [snorm_eq_snorm' hp_pos.ne.symm hp_ne_top, f.snorm'_eq,
      ‚Üê@Ennreal.lt_rpow_one_div_iff _ _ (1 / p.to_real)
        (by 
          simp [hp_pos_real]),
      @Ennreal.top_rpow_of_pos (1 / (1 / p.to_real))
        (by 
          simp [hp_pos_real]),
      Ennreal.sum_lt_top_iff] at hf_snorm 
    byCases' hyf : y ‚àà f.range 
    swap
    ¬∑
      suffices h_empty : f ‚Åª¬π' {y} = ‚àÖ
      ¬∑
        ¬∑
          rw [h_empty, measure_empty]
          exact Ennreal.coe_lt_top 
      ext1 x 
      rw [Set.mem_preimage, Set.mem_singleton_iff, mem_empty_eq, iff_false‚Çì]
      refine' fun hxy => hyf _ 
      rw [mem_range, Set.mem_range]
      exact ‚ü®x, hxy‚ü©
    specialize hf_snorm y hyf 
    rw [Ennreal.mul_lt_top_iff] at hf_snorm 
    cases hf_snorm
    ¬∑
      exact hf_snorm.2
    cases hf_snorm
    ¬∑
      refine' absurd _ hy_ne 
      simpa [hp_pos_real] using hf_snorm
    ¬∑
      simp [hf_snorm]

theorem mem_‚Ñíp_of_finite_measure_preimage (p : ‚Ñù‚â•0‚àû) {f : Œ± ‚Üí‚Çõ E} (hf : ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû) :
  mem_‚Ñíp f p Œº :=
  by 
    byCases' hp0 : p = 0
    ¬∑
      rw [hp0, mem_‚Ñíp_zero_iff_ae_measurable]
      exact f.ae_measurable 
    byCases' hp_top : p = ‚àû
    ¬∑
      rw [hp_top]
      exact mem_‚Ñíp_top f Œº 
    refine' ‚ü®f.ae_measurable, _‚ü©
    rw [snorm_eq_snorm' hp0 hp_top, f.snorm'_eq]
    refine'
      Ennreal.rpow_lt_top_of_nonneg
        (by 
          simp )
        (ennreal.sum_lt_top_iff.mpr fun y hy => _).Ne 
    byCases' hy0 : y = 0
    ¬∑
      simp [hy0, ennreal.to_real_pos_iff.mpr ‚ü®lt_of_le_of_ne‚Çì (zero_le _) (Ne.symm hp0), hp_top‚ü©]
    ¬∑
      refine' Ennreal.mul_lt_top _ (hf y hy0).Ne 
      exact (Ennreal.rpow_lt_top_of_nonneg Ennreal.to_real_nonneg Ennreal.coe_ne_top).Ne

theorem mem_‚Ñíp_iff {f : Œ± ‚Üí‚Çõ E} (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  mem_‚Ñíp f p Œº ‚Üî ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû :=
  ‚ü®fun h => measure_preimage_lt_top_of_mem_‚Ñíp hp_pos hp_ne_top f h, fun h => mem_‚Ñíp_of_finite_measure_preimage p h‚ü©

theorem integrable_iff {f : Œ± ‚Üí‚Çõ E} : integrable f Œº ‚Üî ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû :=
  mem_‚Ñíp_one_iff_integrable.symm.trans$ mem_‚Ñíp_iff Ennreal.zero_lt_one Ennreal.coe_ne_top

theorem mem_‚Ñíp_iff_integrable {f : Œ± ‚Üí‚Çõ E} (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) : mem_‚Ñíp f p Œº ‚Üî integrable f Œº :=
  (mem_‚Ñíp_iff hp_pos hp_ne_top).trans integrable_iff.symm

theorem mem_‚Ñíp_iff_fin_meas_supp {f : Œ± ‚Üí‚Çõ E} (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) : mem_‚Ñíp f p Œº ‚Üî f.fin_meas_supp Œº :=
  (mem_‚Ñíp_iff hp_pos hp_ne_top).trans fin_meas_supp_iff.symm

theorem integrable_iff_fin_meas_supp {f : Œ± ‚Üí‚Çõ E} : integrable f Œº ‚Üî f.fin_meas_supp Œº :=
  integrable_iff.trans fin_meas_supp_iff.symm

theorem fin_meas_supp.integrable {f : Œ± ‚Üí‚Çõ E} (h : f.fin_meas_supp Œº) : integrable f Œº :=
  integrable_iff_fin_meas_supp.2 h

theorem integrable_pair [MeasurableSpace F] {f : Œ± ‚Üí‚Çõ E} {g : Œ± ‚Üí‚Çõ F} :
  integrable f Œº ‚Üí integrable g Œº ‚Üí integrable (pair f g) Œº :=
  by 
    simpa only [integrable_iff_fin_meas_supp] using fin_meas_supp.pair

theorem mem_‚Ñíp_of_is_finite_measure (f : Œ± ‚Üí‚Çõ E) (p : ‚Ñù‚â•0‚àû) (Œº : Measure‚Çì Œ±) [is_finite_measure Œº] : mem_‚Ñíp f p Œº :=
  let ‚ü®C, hfC‚ü© := f.exists_forall_norm_le 
  mem_‚Ñíp.of_bound f.ae_measurable C$ eventually_of_forall hfC

theorem integrable_of_is_finite_measure [is_finite_measure Œº] (f : Œ± ‚Üí‚Çõ E) : integrable f Œº :=
  mem_‚Ñíp_one_iff_integrable.mp (f.mem_‚Ñíp_of_is_finite_measure 1 Œº)

theorem measure_preimage_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : integrable f Œº) {x : E} (hx : x ‚â† 0) :
  Œº (f ‚Åª¬π' {x}) < ‚àû :=
  integrable_iff.mp hf x hx

theorem measure_support_lt_top [HasZero Œ≤] (f : Œ± ‚Üí‚Çõ Œ≤) (hf : ‚àÄ y _ : y ‚â† 0, Œº (f ‚Åª¬π' {y}) < ‚àû) : Œº (support f) < ‚àû :=
  by 
    rw [support_eq]
    refine' (measure_bUnion_finset_le _ _).trans_lt (ennreal.sum_lt_top_iff.mpr fun y hy => _)
    rw [Finset.mem_filter] at hy 
    exact hf y hy.2

theorem measure_support_lt_top_of_mem_‚Ñíp (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
  Œº (support f) < ‚àû :=
  f.measure_support_lt_top ((mem_‚Ñíp_iff (pos_iff_ne_zero.mpr hp_ne_zero) hp_ne_top).mp hf)

theorem measure_support_lt_top_of_integrable (f : Œ± ‚Üí‚Çõ E) (hf : integrable f Œº) : Œº (support f) < ‚àû :=
  f.measure_support_lt_top (integrable_iff.mp hf)

theorem measure_lt_top_of_mem_‚Ñíp_indicator (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) {c : E} (hc : c ‚â† 0) {s : Set Œ±}
  (hs : MeasurableSet s) (hcs : mem_‚Ñíp ((const Œ± c).piecewise s hs (const Œ± 0)) p Œº) : Œº s < ‚ä§ :=
  by 
    have  : Function.Support (const Œ± c) = Set.Univ := Function.support_const hc 
    simpa only [mem_‚Ñíp_iff_fin_meas_supp hp_pos hp_ne_top, fin_meas_supp_iff_support, support_indicator, Set.inter_univ,
      this] using hcs

end SimpleFuncProperties

end SimpleFunc

/-! Construction of the space of `Lp` simple functions, and its dense embedding into `Lp`. -/


namespace Lp

open AeEqFun

variable[MeasurableSpace
      Œ±][NormedGroup
      E][second_countable_topology
      E][MeasurableSpace
      E][BorelSpace
      E][NormedGroup F][second_countable_topology F][MeasurableSpace F][BorelSpace F](p : ‚Ñù‚â•0‚àû)(Œº : Measure‚Çì Œ±)

variable(E)

/-- `Lp.simple_func` is a subspace of Lp consisting of equivalence classes of an integrable simple
    function. -/
def simple_func : AddSubgroup (Lp E p Œº) :=
  { Carrier := { f : Lp E p Œº | ‚àÉ s : Œ± ‚Üí‚Çõ E, (ae_eq_fun.mk s s.ae_measurable : Œ± ‚Üí‚Çò[Œº] E) = f }, zero_mem' := ‚ü®0, rfl‚ü©,
    add_mem' :=
      fun f g ‚ü®s, hs‚ü© ‚ü®t, ht‚ü© =>
        ‚ü®s+t,
          by 
            simp only [‚Üêhs, ‚Üêht, mk_add_mk, AddSubgroup.coe_add, mk_eq_mk, simple_func.coe_add]‚ü©,
    neg_mem' :=
      fun f ‚ü®s, hs‚ü© =>
        ‚ü®-s,
          by 
            simp only [‚Üêhs, neg_mk, simple_func.coe_neg, mk_eq_mk, AddSubgroup.coe_neg]‚ü© }

variable{E p Œº}

namespace SimpleFunc

section Instances

/-! Simple functions in Lp space form a `normed_space`. -/


@[normCast]
theorem coe_coe (f : Lp.simple_func E p Œº) : ¬´expr‚áë ¬ª (f : Lp E p Œº) = f :=
  rfl

protected theorem eq' {f g : Lp.simple_func E p Œº} : (f : Œ± ‚Üí‚Çò[Œº] E) = (g : Œ± ‚Üí‚Çò[Œº] E) ‚Üí f = g :=
  Subtype.eq ‚àò Subtype.eq

/-! Implementation note:  If `Lp.simple_func E p Œº` were defined as a `ùïú`-submodule of `Lp E p Œº`,
then the next few lemmas, putting a normed `ùïú`-group structure on `Lp.simple_func E p Œº`, would be
unnecessary.  But instead, `Lp.simple_func E p Œº` is defined as an `add_subgroup` of `Lp E p Œº`,
which does not permit this (but has the advantage of working when `E` itself is a normed group,
i.e. has no scalar action). -/


variable[NormedField ùïú][NormedSpace ùïú E][MeasurableSpace ùïú][OpensMeasurableSpace ùïú]

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a `has_scalar`. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def HasScalar : HasScalar ùïú (Lp.simple_func E p Œº) :=
  ‚ü®fun k f =>
      ‚ü®k ‚Ä¢ f,
        by 
          rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
          use k ‚Ä¢ s 
          apply Eq.trans (smul_mk k s s.ae_measurable).symm _ 
          rw [hs]
          rfl‚ü©‚ü©

attribute [local instance] simple_func.has_scalar

@[simp, normCast]
theorem coe_smul (c : ùïú) (f : Lp.simple_func E p Œº) :
  ((c ‚Ä¢ f : Lp.simple_func E p Œº) : Lp E p Œº) = c ‚Ä¢ (f : Lp E p Œº) :=
  rfl

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a module. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def Module : Module ùïú (Lp.simple_func E p Œº) :=
  { one_smul :=
      fun f =>
        by 
          ext1 
          exact one_smul _ _,
    mul_smul :=
      fun x y f =>
        by 
          ext1 
          exact mul_smul _ _ _,
    smul_add :=
      fun x f g =>
        by 
          ext1 
          exact smul_add _ _ _,
    smul_zero :=
      fun x =>
        by 
          ext1 
          exact smul_zero _,
    add_smul :=
      fun x y f =>
        by 
          ext1 
          exact add_smul _ _ _,
    zero_smul :=
      fun f =>
        by 
          ext1 
          exact zero_smul _ _ }

attribute [local instance] simple_func.module

/-- If `E` is a normed space, `Lp.simple_func E p Œº` is a normed space. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def NormedSpace [Fact (1 ‚â§ p)] : NormedSpace ùïú (Lp.simple_func E p Œº) :=
  ‚ü®fun c f =>
      by 
        rw [coe_norm_subgroup, coe_norm_subgroup, coe_smul, norm_smul]‚ü©

end Instances

attribute [local instance] simple_func.module simple_func.normed_space

section ToLp

/-- Construct the equivalence class `[f]` of a simple function `f` satisfying `mem_‚Ñíp`. -/
@[reducible]
def to_Lp (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) : Lp.simple_func E p Œº :=
  ‚ü®hf.to_Lp f, ‚ü®f, rfl‚ü©‚ü©

theorem to_Lp_eq_to_Lp (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) : (to_Lp f hf : Lp E p Œº) = hf.to_Lp f :=
  rfl

theorem to_Lp_eq_mk (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) : (to_Lp f hf : Œ± ‚Üí‚Çò[Œº] E) = ae_eq_fun.mk f f.ae_measurable :=
  rfl

theorem to_Lp_zero : to_Lp (0 : Œ± ‚Üí‚Çõ E) zero_mem_‚Ñíp = (0 : Lp.simple_func E p Œº) :=
  rfl

theorem to_Lp_add (f g : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) (hg : mem_‚Ñíp g p Œº) :
  to_Lp (f+g) (hf.add hg) = to_Lp f hf+to_Lp g hg :=
  rfl

theorem to_Lp_neg (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) : to_Lp (-f) hf.neg = -to_Lp f hf :=
  rfl

theorem to_Lp_sub (f g : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) (hg : mem_‚Ñíp g p Œº) :
  to_Lp (f - g) (hf.sub hg) = to_Lp f hf - to_Lp g hg :=
  by 
    simp only [sub_eq_add_neg, ‚Üêto_Lp_neg, ‚Üêto_Lp_add]
    rfl

variable[NormedField ùïú][NormedSpace ùïú E][MeasurableSpace ùïú][OpensMeasurableSpace ùïú]

theorem to_Lp_smul (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) (c : ùïú) : to_Lp (c ‚Ä¢ f) (hf.const_smul c) = c ‚Ä¢ to_Lp f hf :=
  rfl

theorem norm_to_Lp [Fact (1 ‚â§ p)] (f : Œ± ‚Üí‚Çõ E) (hf : mem_‚Ñíp f p Œº) : ‚à•to_Lp f hf‚à• = Ennreal.toReal (snorm f p Œº) :=
  norm_to_Lp f hf

end ToLp

section ToSimpleFunc

/-- Find a representative of a `Lp.simple_func`. -/
def to_simple_func (f : Lp.simple_func E p Œº) : Œ± ‚Üí‚Çõ E :=
  Classical.some f.2

/-- `(to_simple_func f)` is measurable. -/
@[measurability]
protected theorem Measurable (f : Lp.simple_func E p Œº) : Measurable (to_simple_func f) :=
  (to_simple_func f).Measurable

@[measurability]
protected theorem AeMeasurable (f : Lp.simple_func E p Œº) : AeMeasurable (to_simple_func f) Œº :=
  (simple_func.measurable f).AeMeasurable

theorem to_simple_func_eq_to_fun (f : Lp.simple_func E p Œº) : to_simple_func f =·µê[Œº] f :=
  show ¬´expr‚áë ¬ª (to_simple_func f) =·µê[Œº] ¬´expr‚áë ¬ª (f : Œ± ‚Üí‚Çò[Œº] E)by 
    convert (ae_eq_fun.coe_fn_mk (to_simple_func f) (simple_func.ae_measurable f)).symm using 2 
    exact (Classical.some_spec f.2).symm

/-- `to_simple_func f` satisfies the predicate `mem_‚Ñíp`. -/
protected theorem mem_‚Ñíp (f : Lp.simple_func E p Œº) : mem_‚Ñíp (to_simple_func f) p Œº :=
  mem_‚Ñíp.ae_eq (to_simple_func_eq_to_fun f).symm$ mem_Lp_iff_mem_‚Ñíp.mp (f : Lp E p Œº).2

theorem to_Lp_to_simple_func (f : Lp.simple_func E p Œº) : to_Lp (to_simple_func f) (simple_func.mem_‚Ñíp f) = f :=
  simple_func.eq' (Classical.some_spec f.2)

theorem to_simple_func_to_Lp (f : Œ± ‚Üí‚Çõ E) (hfi : mem_‚Ñíp f p Œº) : to_simple_func (to_Lp f hfi) =·µê[Œº] f :=
  by 
    rw [‚Üêmk_eq_mk]
    exact Classical.some_spec (to_Lp f hfi).2

variable(E Œº)

theorem zero_to_simple_func : to_simple_func (0 : Lp.simple_func E p Œº) =·µê[Œº] 0 :=
  by 
    filterUpwards [to_simple_func_eq_to_fun (0 : Lp.simple_func E p Œº), Lp.coe_fn_zero E 1 Œº]
    intro a h‚ÇÅ h‚ÇÇ 
    rwa [h‚ÇÅ]

variable{E Œº}

theorem add_to_simple_func (f g : Lp.simple_func E p Œº) :
  to_simple_func (f+g) =·µê[Œº] to_simple_func f+to_simple_func g :=
  by 
    filterUpwards [to_simple_func_eq_to_fun (f+g), to_simple_func_eq_to_fun f, to_simple_func_eq_to_fun g,
      Lp.coe_fn_add (f : Lp E p Œº) g]
    intro a 
    simp only [‚Üêcoe_coe, AddSubgroup.coe_add, Pi.add_apply]
    iterate 4
      intro h 
      rw [h]

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in repeat: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem neg_to_simple_func
(f : Lp.simple_func E p Œº) : ¬´expr =·µê[ ] ¬ª(to_simple_func ¬´expr- ¬ª(f), Œº, ¬´expr- ¬ª(to_simple_func f)) :=
begin
  filter_upwards ["[", expr to_simple_func_eq_to_fun ¬´expr- ¬ª(f), ",", expr to_simple_func_eq_to_fun f, ",", expr Lp.coe_fn_neg (f : Lp E p Œº), "]"] [],
  assume [binders (a)],
  simp [] [] ["only"] ["[", expr pi.neg_apply, ",", expr add_subgroup.coe_neg, ",", "<-", expr coe_coe, "]"] [] [],
  repeat { assume [binders (h)],
    rw [expr h] [] }
end

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in repeat: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem sub_to_simple_func
(f
 g : Lp.simple_func E p Œº) : ¬´expr =·µê[ ] ¬ª(to_simple_func ¬´expr - ¬ª(f, g), Œº, ¬´expr - ¬ª(to_simple_func f, to_simple_func g)) :=
begin
  filter_upwards ["[", expr to_simple_func_eq_to_fun ¬´expr - ¬ª(f, g), ",", expr to_simple_func_eq_to_fun f, ",", expr to_simple_func_eq_to_fun g, ",", expr Lp.coe_fn_sub (f : Lp E p Œº) g, "]"] [],
  assume [binders (a)],
  simp [] [] ["only"] ["[", expr add_subgroup.coe_sub, ",", expr pi.sub_apply, ",", "<-", expr coe_coe, "]"] [] [],
  repeat { assume [binders (h)],
    rw [expr h] [] }
end

variable[NormedField ùïú][NormedSpace ùïú E][MeasurableSpace ùïú][OpensMeasurableSpace ùïú]

-- error in MeasureTheory.Function.SimpleFuncDense: ././Mathport/Syntax/Translate/Basic.lean:340:40: in repeat: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
theorem smul_to_simple_func
(k : ùïú)
(f : Lp.simple_func E p Œº) : ¬´expr =·µê[ ] ¬ª(to_simple_func ¬´expr ‚Ä¢ ¬ª(k, f), Œº, ¬´expr ‚Ä¢ ¬ª(k, to_simple_func f)) :=
begin
  filter_upwards ["[", expr to_simple_func_eq_to_fun ¬´expr ‚Ä¢ ¬ª(k, f), ",", expr to_simple_func_eq_to_fun f, ",", expr Lp.coe_fn_smul k (f : Lp E p Œº), "]"] [],
  assume [binders (a)],
  simp [] [] ["only"] ["[", expr pi.smul_apply, ",", expr coe_smul, ",", "<-", expr coe_coe, "]"] [] [],
  repeat { assume [binders (h)],
    rw [expr h] [] }
end

theorem norm_to_simple_func [Fact (1 ‚â§ p)] (f : Lp.simple_func E p Œº) :
  ‚à•f‚à• = Ennreal.toReal (snorm (to_simple_func f) p Œº) :=
  by 
    simpa [to_Lp_to_simple_func] using norm_to_Lp (to_simple_func f) (simple_func.mem_‚Ñíp f)

end ToSimpleFunc

section Induction

variable(p)

/-- The characteristic function of a finite-measure measurable set `s`, as an `Lp` simple function.
-/
def indicator_const {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) : Lp.simple_func E p Œº :=
  to_Lp ((simple_func.const _ c).piecewise s hs (simple_func.const _ 0)) (mem_‚Ñíp_indicator_const p hs c (Or.inr hŒºs))

variable{p}

@[simp]
theorem coe_indicator_const {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
  (¬´expr‚Üë ¬ª (indicator_const p hs hŒºs c) : Lp E p Œº) = indicator_const_Lp p hs hŒºs c :=
  rfl

theorem to_simple_func_indicator_const {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
  to_simple_func (indicator_const p hs hŒºs c) =·µê[Œº] (simple_func.const _ c).piecewise s hs (simple_func.const _ 0) :=
  Lp.simple_func.to_simple_func_to_Lp _ _

/-- To prove something for an arbitrary `Lp` simple function, with `0 < p < ‚àû`, it suffices to show
that the property holds for (multiples of) characteristic functions of finite-measure measurable
sets and is closed under addition (of functions with disjoint support). -/
@[elab_as_eliminator]
protected theorem induction (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) {P : Lp.simple_func E p Œº ‚Üí Prop}
  (h_ind : ‚àÄ c : E {s : Set Œ±} hs : MeasurableSet s hŒºs : Œº s < ‚àû, P (Lp.simple_func.indicator_const p hs hŒºs.ne c))
  (h_add :
    ‚àÄ ‚¶Éf g : Œ± ‚Üí‚Çõ E‚¶Ñ,
      ‚àÄ hf : mem_‚Ñíp f p Œº,
        ‚àÄ hg : mem_‚Ñíp g p Œº,
          Disjoint (support f) (support g) ‚Üí
            P (Lp.simple_func.to_Lp f hf) ‚Üí
              P (Lp.simple_func.to_Lp g hg) ‚Üí P (Lp.simple_func.to_Lp f hf+Lp.simple_func.to_Lp g hg))
  (f : Lp.simple_func E p Œº) : P f :=
  by 
    suffices  : ‚àÄ f : Œ± ‚Üí‚Çõ E, ‚àÄ hf : mem_‚Ñíp f p Œº, P (to_Lp f hf)
    ¬∑
      rw [‚Üêto_Lp_to_simple_func f]
      apply this 
    clear f 
    refine' simple_func.induction _ _
    ¬∑
      intro c s hs hf 
      byCases' hc : c = 0
      ¬∑
        convert
          h_ind 0 MeasurableSet.empty
            (by 
              simp ) using
          1 
        ext1 
        simp [hc]
      exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs hf)
    ¬∑
      intro f g hfg hf hg hfg' 
      obtain ‚ü®hf', hg'‚ü© : mem_‚Ñíp f p Œº ‚àß mem_‚Ñíp g p Œº
      ¬∑
        exact (mem_‚Ñíp_add_of_disjoint hfg f.measurable g.measurable).mp hfg' 
      exact h_add hf' hg' hfg (hf hf') (hg hg')

end Induction

section CoeToLp

variable[Fact (1 ‚â§ p)]

protected theorem UniformContinuous : UniformContinuous (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  uniform_continuous_comap

protected theorem UniformEmbedding : UniformEmbedding (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  uniform_embedding_comap Subtype.val_injective

protected theorem UniformInducing : UniformInducing (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  simple_func.uniform_embedding.to_uniform_inducing

protected theorem DenseEmbedding (hp_ne_top : p ‚â† ‚àû) : DenseEmbedding (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  by 
    apply simple_func.uniform_embedding.dense_embedding 
    intro f 
    rw [mem_closure_iff_seq_limit]
    have hfi' : mem_‚Ñíp f p Œº := Lp.mem_‚Ñíp f 
    refine'
      ‚ü®fun n =>
          ¬´expr‚Üë ¬ª
            (to_Lp (simple_func.approx_on f (Lp.measurable f) univ 0 trivial‚Çì n)
              (simple_func.mem_‚Ñíp_approx_on_univ (Lp.measurable f) hfi' n)),
        fun n => mem_range_self _, _‚ü©
    convert simple_func.tendsto_approx_on_univ_Lp hp_ne_top (Lp.measurable f) hfi' 
    rw [to_Lp_coe_fn f (Lp.mem_‚Ñíp f)]

protected theorem DenseInducing (hp_ne_top : p ‚â† ‚àû) : DenseInducing (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  (simple_func.dense_embedding hp_ne_top).to_dense_inducing

protected theorem DenseRange (hp_ne_top : p ‚â† ‚àû) : DenseRange (coe‚Çì : Lp.simple_func E p Œº ‚Üí Lp E p Œº) :=
  (simple_func.dense_inducing hp_ne_top).dense

variable[NormedField ùïú][NormedSpace ùïú E][MeasurableSpace ùïú][OpensMeasurableSpace ùïú]

variable(Œ± E ùïú)

/-- The embedding of Lp simple functions into Lp functions, as a continuous linear map. -/
def coe_to_Lp : Lp.simple_func E p Œº ‚ÜíL[ùïú] Lp E p Œº :=
  { AddSubgroup.subtype (Lp.simple_func E p Œº) with map_smul' := fun k f => rfl,
    cont := Lp.simple_func.uniform_continuous.Continuous }

variable{Œ± E ùïú}

end CoeToLp

end SimpleFunc

end Lp

variable[MeasurableSpace
      Œ±][NormedGroup
      E][MeasurableSpace E][BorelSpace E][second_countable_topology E]{f : Œ± ‚Üí E}{p : ‚Ñù‚â•0‚àû}{Œº : Measure‚Çì Œ±}

/-- To prove something for an arbitrary `Lp` function in a second countable Borel normed group, it
suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in `Lp` for which the property holds is closed.
-/
@[elab_as_eliminator]
theorem Lp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : Lp E p Œº ‚Üí Prop)
  (h_ind : ‚àÄ c : E {s : Set Œ±} hs : MeasurableSet s hŒºs : Œº s < ‚àû, P (Lp.simple_func.indicator_const p hs hŒºs.ne c))
  (h_add :
    ‚àÄ ‚¶Éf g‚¶Ñ,
      ‚àÄ hf : mem_‚Ñíp f p Œº,
        ‚àÄ hg : mem_‚Ñíp g p Œº,
          Disjoint (support f) (support g) ‚Üí P (hf.to_Lp f) ‚Üí P (hg.to_Lp g) ‚Üí P (hf.to_Lp f+hg.to_Lp g))
  (h_closed : IsClosed { f : Lp E p Œº | P f }) : ‚àÄ f : Lp E p Œº, P f :=
  by 
    refine' fun f => (Lp.simple_func.dense_range hp_ne_top).induction_on f h_closed _ 
    refine' Lp.simple_func.induction (lt_of_lt_of_le‚Çì Ennreal.zero_lt_one _i.elim) hp_ne_top _ _
    ¬∑
      exact fun c s => h_ind c
    ¬∑
      exact fun f g hf hg => h_add hf hg

/-- To prove something for an arbitrary `mem_‚Ñíp` function in a second countable
Borel normed group, it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L·µñ` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_eliminator]
theorem mem_‚Ñíp.induction [_i : Fact (1 ‚â§ p)] (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí E) ‚Üí Prop)
  (h_ind : ‚àÄ c : E ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
  (h_add : ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ, Disjoint (support f) (support g) ‚Üí mem_‚Ñíp f p Œº ‚Üí mem_‚Ñíp g p Œº ‚Üí P f ‚Üí P g ‚Üí P (f+g))
  (h_closed : IsClosed { f : Lp E p Œº | P f }) (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí mem_‚Ñíp f p Œº ‚Üí P f ‚Üí P g) :
  ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ hf : mem_‚Ñíp f p Œº, P f :=
  by 
    have  : ‚àÄ f : simple_func Œ± E, mem_‚Ñíp f p Œº ‚Üí P f
    ¬∑
      refine' simple_func.induction _ _
      ¬∑
        intro c s hs h 
        byCases' hc : c = 0
        ¬∑
          subst hc 
          convert
            h_ind 0 MeasurableSet.empty
              (by 
                simp ) using
            1 
          ext 
          simp [const]
        have hp_pos : 0 < p := lt_of_lt_of_le‚Çì Ennreal.zero_lt_one _i.elim 
        exact h_ind c hs (simple_func.measure_lt_top_of_mem_‚Ñíp_indicator hp_pos hp_ne_top hc hs h)
      ¬∑
        intro f g hfg hf hg int_fg 
        rw [simple_func.coe_add, mem_‚Ñíp_add_of_disjoint hfg f.measurable g.measurable] at int_fg 
        refine' h_add hfg int_fg.1 int_fg.2 (hf int_fg.1) (hg int_fg.2)
    have  : ‚àÄ f : Lp.simple_func E p Œº, P f
    ¬∑
      intro f 
      exact
        h_ae (Lp.simple_func.to_simple_func_eq_to_fun f) (Lp.simple_func.mem_‚Ñíp f)
          (this (Lp.simple_func.to_simple_func f) (Lp.simple_func.mem_‚Ñíp f))
    have  : ‚àÄ f : Lp E p Œº, P f := fun f => (Lp.simple_func.dense_range hp_ne_top).induction_on f h_closed this 
    exact fun f hf => h_ae hf.coe_fn_to_Lp (Lp.mem_‚Ñíp _) (this (hf.to_Lp f))

section Integrable

attribute [local instance] fact_one_le_one_ennreal

notation:25 Œ± " ‚Üí‚ÇÅ‚Çõ[" Œº "] " E => @MeasureTheory.lp.simpleFunc Œ± E _ _ _ _ _ 1 Œº

theorem L1.simple_func.to_Lp_one_eq_to_L1 (f : Œ± ‚Üí‚Çõ E) (hf : integrable f Œº) :
  (Lp.simple_func.to_Lp f (mem_‚Ñíp_one_iff_integrable.2 hf) : Œ± ‚Üí‚ÇÅ[Œº] E) = hf.to_L1 f :=
  rfl

protected theorem L1.simple_func.integrable (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : integrable (Lp.simple_func.to_simple_func f) Œº :=
  by 
    rw [‚Üêmem_‚Ñíp_one_iff_integrable]
    exact Lp.simple_func.mem_‚Ñíp f

/-- To prove something for an arbitrary integrable function in a second countable
Borel normed group, it suffices to show that
* the property holds for (multiples of) characteristic functions;
* is closed under addition;
* the set of functions in the `L¬π` space for which the property holds is closed.
* the property is closed under the almost-everywhere equal relation.

It is possible to make the hypotheses in the induction steps a bit stronger, and such conditions
can be added once we need them (for example in `h_add` it is only necessary to consider the sum of
a simple function with a multiple of a characteristic function and that the intersection
of their images is a subset of `{0}`).
-/
@[elab_as_eliminator]
theorem integrable.induction (P : (Œ± ‚Üí E) ‚Üí Prop)
  (h_ind : ‚àÄ c : E ‚¶És‚¶Ñ, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
  (h_add : ‚àÄ ‚¶Éf g : Œ± ‚Üí E‚¶Ñ, Disjoint (support f) (support g) ‚Üí integrable f Œº ‚Üí integrable g Œº ‚Üí P f ‚Üí P g ‚Üí P (f+g))
  (h_closed : IsClosed { f : Œ± ‚Üí‚ÇÅ[Œº] E | P f }) (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí integrable f Œº ‚Üí P f ‚Üí P g) :
  ‚àÄ ‚¶Éf : Œ± ‚Üí E‚¶Ñ hf : integrable f Œº, P f :=
  by 
    simp only [‚Üêmem_‚Ñíp_one_iff_integrable] at *
    exact mem_‚Ñíp.induction one_ne_top P h_ind h_add h_closed h_ae

end Integrable

end MeasureTheory

