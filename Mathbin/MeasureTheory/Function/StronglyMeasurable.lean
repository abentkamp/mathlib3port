/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import Mathbin.MeasureTheory.Function.SimpleFuncDense

/-!
# Strongly measurable and finitely strongly measurable functions

A function `f` is said to be strongly measurable if `f` is the sequential limit of simple functions.
It is said to be finitely strongly measurable with respect to a measure `Œº` if the supports
of those simple functions have finite measure.

If the target space has a second countable topology, strongly measurable and measurable are
equivalent.

Functions in `Lp` for `0 < p < ‚àû` are finitely strongly measurable.
If the measure is sigma-finite, strongly measurable and finitely strongly measurable are equivalent.

The main property of finitely strongly measurable functions is
`fin_strongly_measurable.exists_set_sigma_finite`: there exists a measurable set `t` such that the
function is supported on `t` and `Œº.restrict t` is sigma-finite. As a consequence, we can prove some
results for those functions as if the measure was sigma-finite.

## Main definitions

* `strongly_measurable f`: `f : Œ± ‚Üí Œ≤` is the limit of a sequence `fs : ‚Ñï ‚Üí simple_func Œ± Œ≤`.
* `fin_strongly_measurable f Œº`: `f : Œ± ‚Üí Œ≤` is the limit of a sequence `fs : ‚Ñï ‚Üí simple_func Œ± Œ≤`
  such that for all `n ‚àà ‚Ñï`, the measure of the support of `fs n` is finite.
* `ae_fin_strongly_measurable f Œº`: `f` is almost everywhere equal to a `fin_strongly_measurable`
  function.

* `ae_fin_strongly_measurable.sigma_finite_set`: a measurable set `t` such that
  `f =·µê[Œº.restrict t·∂ú] 0` and `Œº.restrict t` is sigma-finite.

## Main statements

* `ae_fin_strongly_measurable.exists_set_sigma_finite`: there exists a measurable set `t` such that
  `f =·µê[Œº.restrict t·∂ú] 0` and `Œº.restrict t` is sigma-finite.
* `mem_‚Ñíp.ae_fin_strongly_measurable`: if `mem_‚Ñíp f p Œº` with `0 < p < ‚àû`, then
  `ae_fin_strongly_measurable f Œº`.
* `Lp.fin_strongly_measurable`: for `0 < p < ‚àû`, `Lp` functions are finitely strongly measurable.

## References

* Hyt√∂nen, Tuomas, Jan Van Neerven, Mark Veraar, and Lutz Weis. Analysis in Banach spaces.
  Springer, 2016.

-/


open MeasureTheory Filter TopologicalSpace Function

open_locale Ennreal TopologicalSpace MeasureTheory

namespace MeasureTheory

local infixr:25 " ‚Üí‚Çõ " => SimpleFunc

section Definitions

variable {Œ± Œ≤ : Type _} [TopologicalSpace Œ≤]

/-- A function is `strongly_measurable` if it is the limit of simple functions. -/
def StronglyMeasurable [MeasurableSpace Œ±] (f : Œ± ‚Üí Œ≤) : Prop :=
  ‚àÉ fs : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤, ‚àÄ x, Tendsto (fun n => fs n x) atTop (ùìù (f x))

/-- A function is `fin_strongly_measurable` with respect to a measure if it is the limit of simple
  functions with support with finite measure. -/
def FinStronglyMeasurable [Zero Œ≤] {m0 : MeasurableSpace Œ±} (f : Œ± ‚Üí Œ≤) (Œº : Measure Œ±) : Prop :=
  ‚àÉ fs : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤, (‚àÄ n, Œº (Support (fs n)) < ‚àû) ‚àß ‚àÄ x, Tendsto (fun n => fs n x) atTop (ùìù (f x))

/-- A function is `ae_fin_strongly_measurable` with respect to a measure if it is almost everywhere
equal to the limit of a sequence of simple functions with support with finite measure. -/
def AeFinStronglyMeasurable [Zero Œ≤] {m0 : MeasurableSpace Œ±} (f : Œ± ‚Üí Œ≤) (Œº : Measure Œ±) : Prop :=
  ‚àÉ g, FinStronglyMeasurable g Œº ‚àß f =·µê[Œº] g

end Definitions

/-! ## Strongly measurable functions -/


theorem Subsingleton.strongly_measurable {Œ± Œ≤} [MeasurableSpace Œ±] [TopologicalSpace Œ≤] [Subsingleton Œ≤] (f : Œ± ‚Üí Œ≤) :
    StronglyMeasurable f := by
  let f_sf : Œ± ‚Üí‚Çõ Œ≤ := ‚ü®f, fun x => _, Set.Subsingleton.finite Set.subsingleton_of_subsingleton‚ü©
  ¬∑ exact ‚ü®fun n => f_sf, fun x => tendsto_const_nhds‚ü©
    
  ¬∑ have h_univ : f ‚Åª¬π' {x} = Set.Univ := by
      ext1 y
      simp
    rw [h_univ]
    exact MeasurableSet.univ
    

namespace StronglyMeasurable

variable {Œ± Œ≤ : Type _} {f g : Œ± ‚Üí Œ≤}

/-- A sequence of simple functions such that `‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x))`.
That property is given by `strongly_measurable.tendsto_approx`. -/
protected noncomputable def approx [MeasurableSpace Œ±] [TopologicalSpace Œ≤] (hf : StronglyMeasurable f) : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤ :=
  hf.some

protected theorem tendsto_approx [MeasurableSpace Œ±] [TopologicalSpace Œ≤] (hf : StronglyMeasurable f) :
    ‚àÄ x, Tendsto (fun n => hf.approx n x) atTop (ùìù (f x)) :=
  hf.some_spec

-- ././Mathport/Syntax/Translate/Basic.lean:599:2: warning: expanding binder collection (x ¬´expr ‚àâ ¬ª t)
theorem fin_strongly_measurable_of_set_sigma_finite [TopologicalSpace Œ≤] [Zero Œ≤] {m : MeasurableSpace Œ±}
    {Œº : Measure Œ±} (hf_meas : StronglyMeasurable f) {t : Set Œ±} (ht : MeasurableSet t)
    (hft_zero : ‚àÄ, ‚àÄ x ‚àà t·∂ú, ‚àÄ, f x = 0) (htŒº : SigmaFinite (Œº.restrict t)) : FinStronglyMeasurable f Œº := by
  have : sigma_finite (Œº.restrict t) := htŒº
  let S := spanning_sets (Œº.restrict t)
  have hS_meas : ‚àÄ n, MeasurableSet (S n) := measurable_spanning_sets (Œº.restrict t)
  let f_approx := hf_meas.approx
  let fs := fun n => simple_func.restrict (f_approx n) (S n ‚à© t)
  have h_fs_t_compl : ‚àÄ n, ‚àÄ x _ : x ‚àâ t, fs n x = 0 := by
    intro n x hxt
    rw [simple_func.restrict_apply _ ((hS_meas n).inter ht)]
    refine' Set.indicator_of_not_mem _ _
    simp [hxt]
  refine' ‚ü®fs, _, fun x => _‚ü©
  ¬∑ simp_rw [simple_func.support_eq]
    refine' fun n => (measure_bUnion_finset_le _ _).trans_lt _
    refine' ennreal.sum_lt_top_iff.mpr fun y hy => _
    rw [simple_func.restrict_preimage_singleton _ ((hS_meas n).inter ht)]
    swap
    ¬∑ rw [Finset.mem_filter] at hy
      exact hy.2
      
    refine' (measure_mono (Set.inter_subset_left _ _)).trans_lt _
    have h_lt_top := measure_spanning_sets_lt_top (Œº.restrict t) n
    rwa [measure.restrict_apply' ht] at h_lt_top
    
  ¬∑ by_cases' hxt : x ‚àà t
    swap
    ¬∑ rw [funext fun n => h_fs_t_compl n x hxt, hft_zero x hxt]
      exact tendsto_const_nhds
      
    have h : tendsto (fun n => (f_approx n) x) at_top (ùìù (f x)) := hf_meas.tendsto_approx x
    obtain ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© : ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí fs m x = f_approx m x := by
      obtain ‚ü®n, hn‚ü© : ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí x ‚àà S m ‚à© t := by
        suffices ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí x ‚àà S m by
          obtain ‚ü®n, hn‚ü© := this
          exact ‚ü®n, fun m hnm => Set.mem_inter (hn m hnm) hxt‚ü©
        suffices ‚àÉ n, x ‚àà S n by
          rcases this with ‚ü®n, hn‚ü©
          exact ‚ü®n, fun m hnm => monotone_spanning_sets (Œº.restrict t) hnm hn‚ü©
        rw [‚Üê Set.mem_Union, Union_spanning_sets (Œº.restrict t)]
        trivial
      refine' ‚ü®n, fun m hnm => _‚ü©
      simp_rw [fs, simple_func.restrict_apply _ ((hS_meas m).inter ht), Set.indicator_of_mem (hn m hnm)]
    rw [tendsto_at_top'] at h‚ä¢
    intro s hs
    obtain ‚ü®n‚ÇÇ, hn‚ÇÇ‚ü© := h s hs
    refine' ‚ü®max n‚ÇÅ n‚ÇÇ, fun m hm => _‚ü©
    rw [hn‚ÇÅ m ((le_max_left‚Çì _ _).trans hm.le)]
    exact hn‚ÇÇ m ((le_max_right‚Çì _ _).trans hm.le)
    

/-- If the measure is sigma-finite, all strongly measurable functions are
  `fin_strongly_measurable`. -/
protected theorem fin_strongly_measurable [TopologicalSpace Œ≤] [Zero Œ≤] {m0 : MeasurableSpace Œ±}
    (hf : StronglyMeasurable f) (Œº : Measure Œ±) [SigmaFinite Œº] : FinStronglyMeasurable f Œº :=
  hf.fin_strongly_measurable_of_set_sigma_finite MeasurableSet.univ
    (by
      simp )
    (by
      rwa [measure.restrict_univ])

/-- A strongly measurable function is measurable. -/
protected theorem measurable [MeasurableSpace Œ±] [MetricSpace Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤]
    (hf : StronglyMeasurable f) : Measurable f :=
  measurable_of_tendsto_metric (fun n => (hf.approx n).Measurable) (tendsto_pi_nhds.mpr hf.tendsto_approx)

section Arithmetic

variable [MeasurableSpace Œ±] [TopologicalSpace Œ≤]

protected theorem add [Add Œ≤] [HasContinuousAdd Œ≤] (hf : StronglyMeasurable f) (hg : StronglyMeasurable g) :
    StronglyMeasurable (f + g) :=
  ‚ü®fun n => hf.approx n + hg.approx n, fun x => (hf.tendsto_approx x).add (hg.tendsto_approx x)‚ü©

protected theorem neg [AddGroup‚Çì Œ≤] [TopologicalAddGroup Œ≤] (hf : StronglyMeasurable f) : StronglyMeasurable (-f) :=
  ‚ü®fun n => -hf.approx n, fun x => (hf.tendsto_approx x).neg‚ü©

protected theorem sub [Sub Œ≤] [HasContinuousSub Œ≤] (hf : StronglyMeasurable f) (hg : StronglyMeasurable g) :
    StronglyMeasurable (f - g) :=
  ‚ü®fun n => hf.approx n - hg.approx n, fun x => (hf.tendsto_approx x).sub (hg.tendsto_approx x)‚ü©

end Arithmetic

end StronglyMeasurable

section SecondCountableStronglyMeasurable

variable {Œ± Œ≤ : Type _} [MeasurableSpace Œ±] [MeasurableSpace Œ≤] {f : Œ± ‚Üí Œ≤}

/-- In a space with second countable topology, measurable implies strongly measurable. -/
theorem _root_.measurable.strongly_measurable [EmetricSpace Œ≤] [OpensMeasurableSpace Œ≤] [SecondCountableTopology Œ≤]
    (hf : Measurable f) : StronglyMeasurable f := by
  rcases is_empty_or_nonempty Œ≤ with ‚ü®‚ü© <;> skip
  ¬∑ exact subsingleton.strongly_measurable f
    
  ¬∑ inhabit Œ≤
    exact
      ‚ü®simple_func.approx_on f hf Set.Univ default (Set.mem_univ _), fun x =>
        simple_func.tendsto_approx_on hf (Set.mem_univ _)
          (by
            simp )‚ü©
    

/-- In a space with second countable topology, strongly measurable and measurable are equivalent. -/
theorem strongly_measurable_iff_measurable [MetricSpace Œ≤] [BorelSpace Œ≤] [SecondCountableTopology Œ≤] :
    StronglyMeasurable f ‚Üî Measurable f :=
  ‚ü®fun h => h.Measurable, fun h => Measurable.strongly_measurable h‚ü©

end SecondCountableStronglyMeasurable

/-! ## Finitely strongly measurable functions -/


namespace FinStronglyMeasurable

variable {Œ± Œ≤ : Type _} [Zero Œ≤] {m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œ± ‚Üí Œ≤}

theorem ae_fin_strongly_measurable [TopologicalSpace Œ≤] (hf : FinStronglyMeasurable f Œº) :
    AeFinStronglyMeasurable f Œº :=
  ‚ü®f, hf, ae_eq_refl f‚ü©

section sequence

variable [TopologicalSpace Œ≤] (hf : FinStronglyMeasurable f Œº)

/-- A sequence of simple functions such that `‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x))`
and `‚àÄ n, Œº (support (hf.approx n)) < ‚àû`. These properties are given by
`fin_strongly_measurable.tendsto_approx` and `fin_strongly_measurable.fin_support_approx`. -/
protected noncomputable def approx : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤ :=
  hf.some

protected theorem fin_support_approx : ‚àÄ n, Œº (Support (hf.approx n)) < ‚àû :=
  hf.some_spec.1

protected theorem tendsto_approx : ‚àÄ x, Tendsto (fun n => hf.approx n x) atTop (ùìù (f x)) :=
  hf.some_spec.2

end sequence

protected theorem strongly_measurable [TopologicalSpace Œ≤] (hf : FinStronglyMeasurable f Œº) : StronglyMeasurable f :=
  ‚ü®hf.approx, hf.tendsto_approx‚ü©

theorem exists_set_sigma_finite [TopologicalSpace Œ≤] [T2Space Œ≤] (hf : FinStronglyMeasurable f Œº) :
    ‚àÉ t, MeasurableSet t ‚àß (‚àÄ, ‚àÄ x ‚àà t·∂ú, ‚àÄ, f x = 0) ‚àß SigmaFinite (Œº.restrict t) := by
  rcases hf with ‚ü®fs, hT_lt_top, h_approx‚ü©
  let T := fun n => support (fs n)
  have hT_meas : ‚àÄ n, MeasurableSet (T n) := fun n => simple_func.measurable_set_support (fs n)
  let t := ‚ãÉ n, T n
  refine' ‚ü®t, MeasurableSet.Union hT_meas, _, _‚ü©
  ¬∑ have h_fs_zero : ‚àÄ n, ‚àÄ, ‚àÄ x ‚àà t·∂ú, ‚àÄ, fs n x = 0 := by
      intro n x hxt
      rw [Set.mem_compl_iff, Set.mem_Union, not_exists] at hxt
      simpa using hxt n
    refine' fun x hxt => tendsto_nhds_unique (h_approx x) _
    rw [funext fun n => h_fs_zero n x hxt]
    exact tendsto_const_nhds
    
  ¬∑ refine' ‚ü®‚ü®‚ü®fun n => t·∂ú ‚à™ T n, fun n => trivial‚Çì, fun n => _, _‚ü©‚ü©‚ü©
    ¬∑ rw [measure.restrict_apply' (MeasurableSet.Union hT_meas), Set.union_inter_distrib_right, Set.compl_inter_self t,
        Set.empty_union]
      exact (measure_mono (Set.inter_subset_left _ _)).trans_lt (hT_lt_top n)
      
    ¬∑ rw [‚Üê Set.union_Union (t·∂ú) T]
      exact Set.compl_union_self _
      
    

/-- A finitely strongly measurable function is measurable. -/
protected theorem measurable [MetricSpace Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤] (hf : FinStronglyMeasurable f Œº) :
    Measurable f :=
  measurable_of_tendsto_metric (fun n => (hf.some n).Measurable) (tendsto_pi_nhds.mpr hf.some_spec.2)

protected theorem add {Œ≤} [TopologicalSpace Œ≤] [AddMonoid‚Çì Œ≤] [HasContinuousAdd Œ≤] {f g : Œ± ‚Üí Œ≤}
    (hf : FinStronglyMeasurable f Œº) (hg : FinStronglyMeasurable g Œº) : FinStronglyMeasurable (f + g) Œº :=
  ‚ü®fun n => hf.approx n + hg.approx n, fun n =>
    (measure_mono (Function.support_add _ _)).trans_lt
      ((measure_union_le _ _).trans_lt (Ennreal.add_lt_top.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©)),
    fun x => (hf.tendsto_approx x).add (hg.tendsto_approx x)‚ü©

protected theorem neg {Œ≤} [TopologicalSpace Œ≤] [AddGroup‚Çì Œ≤] [TopologicalAddGroup Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : FinStronglyMeasurable f Œº) : FinStronglyMeasurable (-f) Œº := by
  refine' ‚ü®fun n => -hf.approx n, fun n => _, fun x => (hf.tendsto_approx x).neg‚ü©
  suffices Œº (Function.Support fun x => -(hf.approx n) x) < ‚àû by
    convert this
  rw [Function.support_neg (hf.approx n)]
  exact hf.fin_support_approx n

protected theorem sub {Œ≤} [TopologicalSpace Œ≤] [AddGroup‚Çì Œ≤] [HasContinuousSub Œ≤] {f g : Œ± ‚Üí Œ≤}
    (hf : FinStronglyMeasurable f Œº) (hg : FinStronglyMeasurable g Œº) : FinStronglyMeasurable (f - g) Œº :=
  ‚ü®fun n => hf.approx n - hg.approx n, fun n =>
    (measure_mono (Function.support_sub _ _)).trans_lt
      ((measure_union_le _ _).trans_lt (Ennreal.add_lt_top.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©)),
    fun x => (hf.tendsto_approx x).sub (hg.tendsto_approx x)‚ü©

end FinStronglyMeasurable

theorem fin_strongly_measurable_iff_strongly_measurable_and_exists_set_sigma_finite {Œ± Œ≤} {f : Œ± ‚Üí Œ≤}
    [TopologicalSpace Œ≤] [T2Space Œ≤] [Zero Œ≤] {m : MeasurableSpace Œ±} {Œº : Measure Œ±} :
    FinStronglyMeasurable f Œº ‚Üî
      StronglyMeasurable f ‚àß ‚àÉ t, MeasurableSet t ‚àß (‚àÄ, ‚àÄ x ‚àà t·∂ú, ‚àÄ, f x = 0) ‚àß SigmaFinite (Œº.restrict t) :=
  ‚ü®fun hf => ‚ü®hf.StronglyMeasurable, hf.exists_set_sigma_finite‚ü©, fun hf =>
    hf.1.fin_strongly_measurable_of_set_sigma_finite hf.2.some_spec.1 hf.2.some_spec.2.1 hf.2.some_spec.2.2‚ü©

namespace AeFinStronglyMeasurable

variable {Œ± Œ≤ : Type _} {m : MeasurableSpace Œ±} {Œº : Measure Œ±} [TopologicalSpace Œ≤] {f g : Œ± ‚Üí Œ≤}

protected theorem add [AddMonoid‚Çì Œ≤] [HasContinuousAdd Œ≤] (hf : AeFinStronglyMeasurable f Œº)
    (hg : AeFinStronglyMeasurable g Œº) : AeFinStronglyMeasurable (f + g) Œº :=
  ‚ü®hf.some + hg.some, hf.some_spec.1.add hg.some_spec.1, hf.some_spec.2.add hg.some_spec.2‚ü©

protected theorem neg [AddGroup‚Çì Œ≤] [TopologicalAddGroup Œ≤] (hf : AeFinStronglyMeasurable f Œº) :
    AeFinStronglyMeasurable (-f) Œº :=
  ‚ü®-hf.some, hf.some_spec.1.neg, hf.some_spec.2.neg‚ü©

protected theorem sub [AddGroup‚Çì Œ≤] [HasContinuousSub Œ≤] (hf : AeFinStronglyMeasurable f Œº)
    (hg : AeFinStronglyMeasurable g Œº) : AeFinStronglyMeasurable (f - g) Œº :=
  ‚ü®hf.some - hg.some, hf.some_spec.1.sub hg.some_spec.1, hf.some_spec.2.sub hg.some_spec.2‚ü©

variable [Zero Œ≤] [T2Space Œ≤]

theorem exists_set_sigma_finite (hf : AeFinStronglyMeasurable f Œº) :
    ‚àÉ t, MeasurableSet t ‚àß f =·µê[Œº.restrict (t·∂ú)] 0 ‚àß SigmaFinite (Œº.restrict t) := by
  rcases hf with ‚ü®g, hg, hfg‚ü©
  obtain ‚ü®t, ht, hgt_zero, htŒº‚ü© := hg.exists_set_sigma_finite
  refine' ‚ü®t, ht, _, htŒº‚ü©
  refine' eventually_eq.trans (ae_restrict_of_ae hfg) _
  rw [eventually_eq, ae_restrict_iff' ht.compl]
  exact eventually_of_forall hgt_zero

/-- A measurable set `t` such that `f =·µê[Œº.restrict t·∂ú] 0` and `sigma_finite (Œº.restrict t)`. -/
def SigmaFiniteSet (hf : AeFinStronglyMeasurable f Œº) : Set Œ± :=
  hf.exists_set_sigma_finite.some

protected theorem measurable_set (hf : AeFinStronglyMeasurable f Œº) : MeasurableSet hf.SigmaFiniteSet :=
  hf.exists_set_sigma_finite.some_spec.1

theorem ae_eq_zero_compl (hf : AeFinStronglyMeasurable f Œº) : f =·µê[Œº.restrict (hf.SigmaFiniteSet·∂ú)] 0 :=
  hf.exists_set_sigma_finite.some_spec.2.1

instance sigma_finite_restrict (hf : AeFinStronglyMeasurable f Œº) : SigmaFinite (Œº.restrict hf.SigmaFiniteSet) :=
  hf.exists_set_sigma_finite.some_spec.2.2

end AeFinStronglyMeasurable

variable {Œ± G : Type _} {p : ‚Ñù‚â•0‚àû} {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} [NormedGroup G] [MeasurableSpace G]
  [BorelSpace G] [SecondCountableTopology G] {f : Œ± ‚Üí G}

/-- In a space with second countable topology and a sigma-finite measure, `fin_strongly_measurable`
  and `measurable` are equivalent. -/
theorem fin_strongly_measurable_iff_measurable {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) [SigmaFinite Œº] :
    FinStronglyMeasurable f Œº ‚Üî Measurable f :=
  ‚ü®fun h => h.Measurable, fun h => (Measurable.strongly_measurable h).FinStronglyMeasurable Œº‚ü©

/-- In a space with second countable topology and a sigma-finite measure,
  `ae_fin_strongly_measurable` and `ae_measurable` are equivalent. -/
theorem ae_fin_strongly_measurable_iff_ae_measurable {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) [SigmaFinite Œº] :
    AeFinStronglyMeasurable f Œº ‚Üî AeMeasurable f Œº := by
  simp_rw [ae_fin_strongly_measurable, AeMeasurable, fin_strongly_measurable_iff_measurable]

theorem Mem‚Ñíp.fin_strongly_measurable_of_measurable (hf : Mem‚Ñíp f p Œº) (hf_meas : Measurable f) (hp_ne_zero : p ‚â† 0)
    (hp_ne_top : p ‚â† ‚àû) : FinStronglyMeasurable f Œº := by
  let fs := simple_func.approx_on f hf_meas Set.Univ 0 (Set.mem_univ _)
  refine' ‚ü®fs, _, _‚ü©
  ¬∑ have h_fs_Lp : ‚àÄ n, mem_‚Ñíp (fs n) p Œº := simple_func.mem_‚Ñíp_approx_on_univ hf_meas hf
    exact fun n => (fs n).measure_support_lt_top_of_mem_‚Ñíp (h_fs_Lp n) hp_ne_zero hp_ne_top
    
  ¬∑ exact fun x =>
      simple_func.tendsto_approx_on hf_meas (Set.mem_univ 0)
        (by
          simp )
    

theorem Mem‚Ñíp.ae_fin_strongly_measurable (hf : Mem‚Ñíp f p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    AeFinStronglyMeasurable f Œº :=
  ‚ü®hf.AeMeasurable.mk f,
    ((mem_‚Ñíp_congr_ae hf.AeMeasurable.ae_eq_mk).mp hf).fin_strongly_measurable_of_measurable
      hf.AeMeasurable.measurable_mk hp_ne_zero hp_ne_top,
    hf.AeMeasurable.ae_eq_mk‚ü©

theorem Integrable.ae_fin_strongly_measurable (hf : Integrable f Œº) : AeFinStronglyMeasurable f Œº :=
  (mem_‚Ñíp_one_iff_integrable.mpr hf).AeFinStronglyMeasurable one_ne_zero Ennreal.coe_ne_top

theorem lp.fin_strongly_measurable (f : lp G p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    FinStronglyMeasurable f Œº :=
  (lp.mem_‚Ñíp f).fin_strongly_measurable_of_measurable (lp.measurable f) hp_ne_zero hp_ne_top

end MeasureTheory

