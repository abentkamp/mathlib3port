import Mathbin.Data.Polynomial.Degree.CardPowDegree 
import Mathbin.FieldTheory.Finite.Basic 
import Mathbin.NumberTheory.ClassNumber.AdmissibleAbsoluteValue

/-!
# Admissible absolute values on polynomials
This file defines an admissible absolute value
`polynomial.card_pow_degree_is_admissible` which we use to show the class number
of the ring of integers of a function field is finite.

## Main results

* `polynomial.card_pow_degree_is_admissible` shows `card_pow_degree`,
  mapping `p : polynomial ùîΩ_q` to `q ^ degree p`, is admissible
-/


namespace Polynomial

open AbsoluteValue Real

variable{Fq : Type _}[Field Fq][Fintype Fq]

/-- If `A` is a family of enough low-degree polynomials over a finite field, there is a
pair of equal elements in `A`. -/
theorem exists_eq_polynomial {d : ‚Ñï} {m : ‚Ñï} (hm : (Fintype.card Fq^d) ‚â§ m) (b : Polynomial Fq) (hb : nat_degree b ‚â§ d)
  (A : Fin‚Çì m.succ ‚Üí Polynomial Fq) (hA : ‚àÄ i, degree (A i) < degree b) : ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß A i‚ÇÅ = A i‚ÇÄ :=
  by 
    set f : Fin‚Çì m.succ ‚Üí Fin‚Çì d ‚Üí Fq := fun i j => (A i).coeff j 
    have  : Fintype.card (Fin‚Çì d ‚Üí Fq) < Fintype.card (Fin‚Çì m.succ)
    ¬∑
      simpa using lt_of_le_of_lt‚Çì hm (Nat.lt_succ_self‚Çì m)
    obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, i_eq‚ü© := Fintype.exists_ne_map_eq_of_card_lt f this 
    use i‚ÇÄ, i‚ÇÅ, i_ne 
    ext j 
    byCases' hbj : degree b ‚â§ j
    ¬∑
      rw [coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì (hA _) hbj),
        coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì (hA _) hbj)]
    rw [not_le‚Çì] at hbj 
    apply congr_fun‚Çì i_eq.symm ‚ü®j, _‚ü©
    exact lt_of_lt_of_le‚Çì (coe_lt_degree.mp hbj) hb

/-- If `A` is a family of enough low-degree polynomials over a finite field,
there is a pair of elements in `A` (with different indices but not necessarily
distinct), such that their difference has small degree. -/
theorem exists_approx_polynomial_aux {d : ‚Ñï} {m : ‚Ñï} (hm : (Fintype.card Fq^d) ‚â§ m) (b : Polynomial Fq)
  (A : Fin‚Çì m.succ ‚Üí Polynomial Fq) (hA : ‚àÄ i, degree (A i) < degree b) :
  ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß degree (A i‚ÇÅ - A i‚ÇÄ) < ¬´expr‚Üë ¬ª (nat_degree b - d) :=
  by 
    have hb : b ‚â† 0
    ¬∑
      rintro rfl 
      specialize hA 0
      rw [degree_zero] at hA 
      exact not_lt_of_le bot_le hA 
    set f : Fin‚Çì m.succ ‚Üí Fin‚Çì d ‚Üí Fq := fun i j => (A i).coeff (nat_degree b - j.succ)
    have  : Fintype.card (Fin‚Çì d ‚Üí Fq) < Fintype.card (Fin‚Çì m.succ)
    ¬∑
      simpa using lt_of_le_of_lt‚Çì hm (Nat.lt_succ_self‚Çì m)
    obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, i_eq‚ü© := Fintype.exists_ne_map_eq_of_card_lt f this 
    use i‚ÇÄ, i‚ÇÅ, i_ne 
    refine' (degree_lt_iff_coeff_zero _ _).mpr fun j hj => _ 
    byCases' hbj : degree b ‚â§ j
    ¬∑
      refine' coeff_eq_zero_of_degree_lt (lt_of_lt_of_le‚Çì _ hbj)
      exact lt_of_le_of_lt‚Çì (degree_sub_le _ _) (max_lt‚Çì (hA _) (hA _))
    rw [coeff_sub, sub_eq_zero]
    rw [not_le‚Çì, degree_eq_nat_degree hb, WithBot.coe_lt_coe] at hbj 
    have hj : nat_degree b - j.succ < d
    ¬∑
      byCases' hd : nat_degree b < d
      ¬∑
        exact lt_of_le_of_lt‚Çì tsub_le_self hd
      ¬∑
        rw [not_lt‚Çì] at hd 
        have  := lt_of_le_of_lt‚Çì hj (Nat.lt_succ_self‚Çì j)
        rwa [tsub_lt_iff_tsub_lt hd hbj] at this 
    have  : j = b.nat_degree - (nat_degree b - j.succ).succ
    ¬∑
      rw [‚ÜêNat.succ_sub‚Çì hbj, Nat.succ_sub_succ, tsub_tsub_cancel_of_le hbj.le]
    convert congr_fun‚Çì i_eq.symm ‚ü®nat_degree b - j.succ, hj‚ü©

/-- If `A` is a family of enough low-degree polynomials over a finite field,
there is a pair of elements in `A` (with different indices but not necessarily
distinct), such that the difference of their remainders is close together. -/
theorem exists_approx_polynomial {b : Polynomial Fq} (hb : b ‚â† 0) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ)
  (A : Fin‚Çì (Fintype.card Fq^‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä).succ ‚Üí Polynomial Fq) :
  ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß (card_pow_degree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < card_pow_degree b ‚Ä¢ Œµ :=
  by 
    have hbŒµ : 0 < card_pow_degree b ‚Ä¢ Œµ
    ¬∑
      rw [Algebra.smul_def, RingHom.eq_int_cast]
      exact mul_pos (int.cast_pos.mpr (AbsoluteValue.pos _ hb)) hŒµ 
    have one_lt_q : 1 < Fintype.card Fq := Fintype.one_lt_card 
    have one_lt_q' : (1 : ‚Ñù) < Fintype.card Fq
    ¬∑
      assumptionModCast 
    have q_pos : 0 < Fintype.card Fq
    ¬∑
      linarith 
    have q_pos' : (0 : ‚Ñù) < Fintype.card Fq
    ¬∑
      assumptionModCast 
    byCases' le_b : b.nat_degree ‚â§ ‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä
    ¬∑
      obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, mod_eq‚ü© :=
        exists_eq_polynomial le_rfl b le_b (fun i => A i % b) fun i => EuclideanDomain.mod_lt (A i) hb 
      refine' ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, _‚ü©
      simp only  at mod_eq 
      rwa [mod_eq, sub_self, AbsoluteValue.map_zero, Int.cast_zero]
    rw [not_le‚Çì] at le_b 
    obtain ‚ü®i‚ÇÄ, i‚ÇÅ, i_ne, deg_lt‚ü© :=
      exists_approx_polynomial_aux le_rfl b (fun i => A i % b) fun i => EuclideanDomain.mod_lt (A i) hb 
    simp only  at deg_lt 
    use i‚ÇÄ, i‚ÇÅ, i_ne 
    byCases' h : A i‚ÇÅ % b = A i‚ÇÄ % b
    ¬∑
      rwa [h, sub_self, AbsoluteValue.map_zero, Int.cast_zero]
    have h' : A i‚ÇÅ % b - A i‚ÇÄ % b ‚â† 0 := mt sub_eq_zero.mp h 
    suffices  : (nat_degree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < b.nat_degree+log Œµ / log (Fintype.card Fq)
    ¬∑
      rwa [‚ÜêReal.log_lt_log_iff (int.cast_pos.mpr (card_pow_degree.pos h')) hbŒµ, card_pow_degree_nonzero _ h',
        card_pow_degree_nonzero _ hb, Algebra.smul_def, RingHom.eq_int_cast, Int.cast_pow, Int.cast_coe_nat,
        Int.cast_pow, Int.cast_coe_nat, log_mul (pow_ne_zero _ q_pos'.ne') hŒµ.ne', ‚Üêrpow_nat_cast, ‚Üêrpow_nat_cast,
        log_rpow q_pos', log_rpow q_pos', ‚Üêlt_div_iff (log_pos one_lt_q'), add_div,
        mul_div_cancel _ (log_pos one_lt_q').ne']
    refine' lt_of_lt_of_le‚Çì (nat.cast_lt.mpr (with_bot.coe_lt_coe.mp _)) _ 
    swap
    ¬∑
      convert deg_lt 
      rw [degree_eq_nat_degree h']
    rw [‚Üêsub_neg_eq_add, neg_div]
    refine' le_trans‚Çì _ (sub_le_sub_left (Nat.le_ceil _) (b.nat_degree : ‚Ñù))
    rw [‚Üêneg_div]
    exact le_of_eq‚Çì (Nat.cast_sub le_b.le)

/-- If `x` is close to `y` and `y` is close to `z`, then `x` and `z` are at least as close. -/
theorem card_pow_degree_anti_archimedean {x y z : Polynomial Fq} {a : ‚Ñ§} (hxy : card_pow_degree (x - y) < a)
  (hyz : card_pow_degree (y - z) < a) : card_pow_degree (x - z) < a :=
  by 
    have ha : 0 < a := lt_of_le_of_lt‚Çì (AbsoluteValue.nonneg _ _) hxy 
    byCases' hxy' : x = y
    ¬∑
      rwa [hxy']
    byCases' hyz' : y = z
    ¬∑
      rwa [‚Üêhyz']
    byCases' hxz' : x = z
    ¬∑
      rwa [hxz', sub_self, AbsoluteValue.map_zero]
    rw [‚ÜêNe.def, ‚Üêsub_ne_zero] at hxy' hyz' hxz' 
    refine' lt_of_le_of_lt‚Çì _ (max_lt‚Çì hxy hyz)
    rw [card_pow_degree_nonzero _ hxz', card_pow_degree_nonzero _ hxy', card_pow_degree_nonzero _ hyz']
    have  : (1 : ‚Ñ§) ‚â§ Fintype.card Fq
    ¬∑
      exactModCast (@Fintype.one_lt_card Fq _ _).le 
    simp only [Int.cast_pow, Int.cast_coe_nat, le_max_iff]
    refine' Or.imp (pow_le_pow this) (pow_le_pow this) _ 
    rw [nat_degree_le_iff_degree_le, nat_degree_le_iff_degree_le, ‚Üêle_max_iff, ‚Üêdegree_eq_nat_degree hxy',
      ‚Üêdegree_eq_nat_degree hyz']
    convert degree_add_le (x - y) (y - z) using 2 
    exact (sub_add_sub_cancel _ _ _).symm

-- error in NumberTheory.ClassNumber.AdmissibleCardPowDegree: ././Mathport/Syntax/Translate/Basic.lean:340:40: in by_contra: ././Mathport/Syntax/Translate/Tactic/Basic.lean:41:45: missing argument
/-- A slightly stronger version of `exists_partition` on which we perform induction on `n`:
for all `Œµ > 0`, we can partition the remainders of any family of polynomials `A`
into equivalence classes, where the equivalence(!) relation is "closer than `Œµ`". -/
theorem exists_partition_polynomial_aux
(n : expr‚Ñï())
{Œµ : expr‚Ñù()}
(hŒµ : ¬´expr < ¬ª(0, Œµ))
{b : polynomial Fq}
(hb : ¬´expr ‚â† ¬ª(b, 0))
(A : fin n ‚Üí polynomial Fq) : ¬´expr‚àÉ , ¬ª((t : fin n ‚Üí fin ¬´expr ^ ¬ª(fintype.card Fq, ¬´expr‚åà ‚åâ‚Çä¬ª(¬´expr / ¬ª(¬´expr- ¬ª(log Œµ), log (fintype.card Fq))))), ‚àÄ
 i‚ÇÄ
 i‚ÇÅ : fin n, ¬´expr ‚Üî ¬ª(¬´expr = ¬ª(t i‚ÇÄ, t i‚ÇÅ), ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A i‚ÇÅ, b), ¬´expr % ¬ª(A i‚ÇÄ, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(card_pow_degree b, Œµ)))) :=
begin
  have [ident hbŒµ] [":", expr ¬´expr < ¬ª(0, ¬´expr ‚Ä¢ ¬ª(card_pow_degree b, Œµ))] [],
  { rw ["[", expr algebra.smul_def, ",", expr ring_hom.eq_int_cast, "]"] [],
    exact [expr mul_pos (int.cast_pos.mpr (absolute_value.pos _ hb)) hŒµ] },
  induction [expr n] [] ["with", ident n, ident ih] [],
  { refine [expr ‚ü®fin_zero_elim, fin_zero_elim‚ü©] },
  have [ident anti_archim'] [":", expr ‚àÄ
   {i j k}
   {Œµ : expr‚Ñù()}, ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A i, b), ¬´expr % ¬ª(A j, b)) : expr‚Ñù()), Œµ) ‚Üí ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A j, b), ¬´expr % ¬ª(A k, b)) : expr‚Ñù()), Œµ) ‚Üí ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A i, b), ¬´expr % ¬ª(A k, b)) : expr‚Ñù()), Œµ)] [],
  { intros [ident i, ident j, ident k, ident Œµ],
    simp_rw ["[", "<-", expr int.lt_ceil, "]"] [],
    exact [expr card_pow_degree_anti_archimedean] },
  obtain ["‚ü®", ident t', ",", ident ht', "‚ü©", ":=", expr ih (fin.tail A)],
  suffices [] [":", expr ¬´expr‚àÉ , ¬ª((j), ‚àÄ
    i, ¬´expr ‚Üî ¬ª(¬´expr = ¬ª(t' i, j), ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A 0, b), ¬´expr % ¬ª(A i.succ, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(card_pow_degree b, Œµ))))],
  { obtain ["‚ü®", ident j, ",", ident hj, "‚ü©", ":=", expr this],
    refine [expr ‚ü®fin.cons j t', Œª i‚ÇÄ i‚ÇÅ, _‚ü©],
    refine [expr fin.cases _ (Œª i‚ÇÄ, _) i‚ÇÄ]; refine [expr fin.cases _ (Œª i‚ÇÅ, _) i‚ÇÅ],
    { simpa [] [] [] [] [] ["using", expr hbŒµ] },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_zero, ",", expr eq_comm, ",", expr absolute_value.map_sub, "]"] [],
      exact [expr hj i‚ÇÅ] },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_zero, "]"] [],
      exact [expr hj i‚ÇÄ] },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_succ, "]"] [],
      exact [expr ht' i‚ÇÄ i‚ÇÅ] } },
  obtain ["‚ü®", ident j, ",", ident hj, "‚ü©", ":", expr ¬´expr‚àÉ , ¬ª((j), ‚àÄ
    i : fin n, ¬´expr = ¬ª(t' i, j) ‚Üí ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A 0, b), ¬´expr % ¬ª(A i.succ, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(card_pow_degree b, Œµ)))],
  { by_contra [ident this],
    push_neg ["at", ident this],
    obtain ["‚ü®", ident j‚ÇÄ, ",", ident j‚ÇÅ, ",", ident j_ne, ",", ident approx, "‚ü©", ":=", expr exists_approx_polynomial hb hŒµ (fin.cons (A 0) (Œª
       j, A (fin.succ (classical.some (this j)))))],
    revert [ident j_ne, ident approx],
    refine [expr fin.cases _ (Œª j‚ÇÄ, _) j‚ÇÄ]; refine [expr fin.cases (Œª j_ne approx, _) (Œª j‚ÇÅ j_ne approx, _) j‚ÇÅ],
    { exact [expr absurd rfl j_ne] },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_zero, ",", "<-", expr not_le, ",", expr absolute_value.map_sub, "]"] ["at", ident approx],
      have [] [] [":=", expr (classical.some_spec (this j‚ÇÅ)).2],
      contradiction },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_zero, ",", "<-", expr not_le, "]"] ["at", ident approx],
      have [] [] [":=", expr (classical.some_spec (this j‚ÇÄ)).2],
      contradiction },
    { rw ["[", expr fin.cons_succ, ",", expr fin.cons_succ, "]"] ["at", ident approx],
      rw ["[", expr ne.def, ",", expr fin.succ_inj, "]"] ["at", ident j_ne],
      have [] [":", expr ¬´expr = ¬ª(j‚ÇÄ, j‚ÇÅ)] [":=", expr (classical.some_spec (this j‚ÇÄ)).1.symm.trans (((ht' (classical.some (this j‚ÇÄ)) (classical.some (this j‚ÇÅ))).mpr approx).trans (classical.some_spec (this j‚ÇÅ)).1)],
      contradiction } },
  by_cases [expr exists_nonempty_j, ":", expr ¬´expr‚àÉ , ¬ª((j), ¬´expr ‚àß ¬ª(¬´expr‚àÉ , ¬ª((i), ¬´expr = ¬ª(t' i, j)), ‚àÄ
     i, ¬´expr = ¬ª(t' i, j) ‚Üí ¬´expr < ¬ª((card_pow_degree ¬´expr - ¬ª(¬´expr % ¬ª(A 0, b), ¬´expr % ¬ª(A i.succ, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(card_pow_degree b, Œµ))))],
  { obtain ["‚ü®", ident j, ",", "‚ü®", ident i, ",", ident hi, "‚ü©", ",", ident hj, "‚ü©", ":=", expr exists_nonempty_j],
    refine [expr ‚ü®j, Œª i', ‚ü®hj i', Œª hi', trans ((ht' _ _).mpr _) hi‚ü©‚ü©],
    apply [expr anti_archim' _ hi'],
    rw [expr absolute_value.map_sub] [],
    exact [expr hj _ hi] },
  refine [expr ‚ü®j, Œª i, ‚ü®hj i, Œª hi, _‚ü©‚ü©],
  have [] [] [":=", expr exists_nonempty_j ‚ü®t' i, ‚ü®i, rfl‚ü©, Œª i' hi', anti_archim' hi ((ht' _ _).mp hi')‚ü©],
  contradiction
end

/-- For all `Œµ > 0`, we can partition the remainders of any family of polynomials `A`
into classes, where all remainders in a class are close together. -/
theorem exists_partition_polynomial (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : Polynomial Fq} (hb : b ‚â† 0)
  (A : Fin‚Çì n ‚Üí Polynomial Fq) :
  ‚àÉ t : Fin‚Çì n ‚Üí Fin‚Çì (Fintype.card Fq^‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä),
    ‚àÄ i‚ÇÄ i‚ÇÅ : Fin‚Çì n, t i‚ÇÄ = t i‚ÇÅ ‚Üí (card_pow_degree (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < card_pow_degree b ‚Ä¢ Œµ :=
  by 
    obtain ‚ü®t, ht‚ü© := exists_partition_polynomial_aux n hŒµ hb A 
    exact ‚ü®t, fun i‚ÇÄ i‚ÇÅ hi => (ht i‚ÇÄ i‚ÇÅ).mp hi‚ü©

/-- `Œª p, fintype.card Fq ^ degree p` is an admissible absolute value.
We set `q ^ degree 0 = 0`. -/
noncomputable def card_pow_degree_is_admissible : is_admissible (card_pow_degree : AbsoluteValue (Polynomial Fq) ‚Ñ§) :=
  { @card_pow_degree_is_euclidean Fq _ _ with card := fun Œµ => Fintype.card Fq^‚åà-log Œµ / log (Fintype.card Fq)‚åâ‚Çä,
    exists_partition' := fun n Œµ hŒµ b hb => exists_partition_polynomial n hŒµ hb }

end Polynomial

