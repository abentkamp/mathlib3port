import Mathbin.Topology.Homeomorph
import Mathbin.GroupTheory.GroupAction.Basic

/-!
# Monoid actions continuous in the second variable

In this file we define class `has_continuous_smul‚ÇÇ`. We say `has_continuous_smul‚ÇÇ Œì T` if `Œì` acts
on `T` and for each `Œ≥`, the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous. (This differs from
`has_continuous_smul`, which requires simultaneous continuity in both variables.)

## Main definitions

* `has_continuous_smul‚ÇÇ Œì T` : typeclass saying that the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous on `T`;
* `properly_discontinuous_smul`: says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
  is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely
  many `Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
* `homeomorph.smul`: scalar multiplication by an element of a group `Œì` acting on `T`
  is a homeomorphism of `T`.

## Main results

* `is_open_map_quotient_mk_mul` : The quotient map by a group action is open.
* `t2_space_of_properly_discontinuous_smul_of_t2_space` : The quotient by a discontinuous group
  action of a locally compact t2 space is t2.

## Tags

Hausdorff, discrete group, properly discontinuous, quotient space

-/


open_locale TopologicalSpace

open Filter Set

attribute [local instance] MulAction.orbitRel

/-- Class `has_continuous_smul‚ÇÇ Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of multiplicative
actions, including (semi)modules and algebras.
-/
class HasContinuousSmul‚ÇÇ (Œì : Type _) (T : Type _) [TopologicalSpace T] [HasScalar Œì T] : Prop where
  continuous_smul‚ÇÇ : ‚àÄ Œ≥ : Œì, Continuous fun x : T => Œ≥ ‚Ä¢ x

/-- Class `has_continuous_vadd‚ÇÇ Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of additive actions,
including (semi)modules and algebras.
-/
class HasContinuousVadd‚ÇÇ (Œì : Type _) (T : Type _) [TopologicalSpace T] [HasVadd Œì T] : Prop where
  continuous_vadd‚ÇÇ : ‚àÄ Œ≥ : Œì, Continuous fun x : T => Œ≥ +·µ• x

attribute [to_additive HasContinuousVadd‚ÇÇ] HasContinuousSmul‚ÇÇ

export HasContinuousSmul‚ÇÇ (continuous_smul‚ÇÇ)

export HasContinuousVadd‚ÇÇ (continuous_vadd‚ÇÇ)

/-- Class `properly_discontinuous_smul Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class ProperlyDiscontinuousSmul (Œì : Type _) (T : Type _) [TopologicalSpace T] [HasScalar Œì T] : Prop where
  finite_disjoint_inter_image :
    ‚àÄ {K L : Set T}, IsCompact K ‚Üí IsCompact L ‚Üí Set.Finite { Œ≥ : Œì | (¬∑ ‚Ä¢ ¬∑) Œ≥ '' K ‚à© L ‚â† ‚àÖ }

/-- Class `properly_discontinuous_vadd Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class ProperlyDiscontinuousVadd (Œì : Type _) (T : Type _) [TopologicalSpace T] [HasVadd Œì T] : Prop where
  finite_disjoint_inter_image :
    ‚àÄ {K L : Set T}, IsCompact K ‚Üí IsCompact L ‚Üí Set.Finite { Œ≥ : Œì | (¬∑ +·µ• ¬∑) Œ≥ '' K ‚à© L ‚â† ‚àÖ }

attribute [to_additive] ProperlyDiscontinuousSmul

variable {Œì : Type _} [Group‚Çì Œì] {T : Type _} [TopologicalSpace T] [MulAction Œì T]

/-- A finite group action is always properly discontinuous
-/
@[to_additive]
instance (priority := 100) Fintype.properly_discontinuous_smul [Fintype Œì] : ProperlyDiscontinuousSmul Œì T where
  finite_disjoint_inter_image := fun _ _ _ _ => Set.Finite.of_fintype _

export ProperlyDiscontinuousSmul (finite_disjoint_inter_image)

export ProperlyDiscontinuousVadd (finite_disjoint_inter_image)

/-- The homeomorphism given by scalar multiplication by a given element of a group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
def Homeomorph.smul {T : Type _} [TopologicalSpace T] {Œì : Type _} [Group‚Çì Œì] [MulAction Œì T] [HasContinuousSmul‚ÇÇ Œì T]
    (Œ≥ : Œì) : T ‚âÉ‚Çú T where
  toEquiv := MulAction.toPermHom Œì T Œ≥
  continuous_to_fun := continuous_smul‚ÇÇ Œ≥
  continuous_inv_fun := continuous_smul‚ÇÇ Œ≥‚Åª¬π

/-- The homeomorphism given by affine-addition by an element of an additive group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
def Homeomorph.vadd {T : Type _} [TopologicalSpace T] {Œì : Type _} [AddGroup‚Çì Œì] [AddAction Œì T]
    [HasContinuousVadd‚ÇÇ Œì T] (Œ≥ : Œì) : T ‚âÉ‚Çú T where
  toEquiv := AddAction.toPermHom T Œì Œ≥
  continuous_to_fun := continuous_vadd‚ÇÇ Œ≥
  continuous_inv_fun := continuous_vadd‚ÇÇ (-Œ≥)

attribute [to_additive Homeomorph.vadd] Homeomorph.smul

/-- The quotient map by a group action is open. -/
@[to_additive]
theorem is_open_map_quotient_mk_mul [HasContinuousSmul‚ÇÇ Œì T] :
    IsOpenMap (Quotient‚Çì.mk : T ‚Üí Quotient‚Çì (MulAction.orbitRel Œì T)) := by
  intro U hU
  rw [is_open_coinduced, MulAction.quotient_preimage_image_eq_union_mul U]
  exact is_open_Union fun Œ≥ => (Homeomorph.smul Œ≥).IsOpenMap U hU

/-- The quotient by a discontinuous group action of a locally compact t2 space is t2. -/
@[to_additive]
instance (priority := 100) t2_space_of_properly_discontinuous_smul_of_t2_space [T2Space T] [LocallyCompactSpace T]
    [HasContinuousSmul‚ÇÇ Œì T] [ProperlyDiscontinuousSmul Œì T] : T2Space (Quotient‚Çì (MulAction.orbitRel Œì T)) := by
  set Q := Quotient‚Çì (MulAction.orbitRel Œì T)
  rw [t2_space_iff_nhds]
  let f : T ‚Üí Q := Quotient‚Çì.mk
  have f_op : IsOpenMap f := is_open_map_quotient_mk_mul
  rintro ‚ü®x‚ÇÄ‚ü© ‚ü®y‚ÇÄ‚ü© (hxy : f x‚ÇÄ ‚â† f y‚ÇÄ)
  show ‚àÉ U ‚àà ùìù (f x‚ÇÄ), ‚àÉ V ‚àà ùìù (f y‚ÇÄ), U ‚à© V = ‚àÖ
  have hx‚ÇÄy‚ÇÄ : x‚ÇÄ ‚â† y‚ÇÄ := ne_of_apply_ne _ hxy
  have hŒ≥x‚ÇÄy‚ÇÄ : ‚àÄ Œ≥ : Œì, Œ≥ ‚Ä¢ x‚ÇÄ ‚â† y‚ÇÄ := not_exists.mp (mt Quotient‚Çì.sound hxy.symm : _)
  obtain ‚ü®K‚ÇÄ, L‚ÇÄ, K‚ÇÄ_in, L‚ÇÄ_in, hK‚ÇÄ, hL‚ÇÄ, hK‚ÇÄL‚ÇÄ‚ü© := t2_separation_compact_nhds hx‚ÇÄy‚ÇÄ
  let bad_Œì_set := { Œ≥ : Œì | (¬∑ ‚Ä¢ ¬∑) Œ≥ '' K‚ÇÄ ‚à© L‚ÇÄ ‚â† ‚àÖ }
  have bad_Œì_finite : bad_Œì_set.finite := finite_disjoint_inter_image hK‚ÇÄ hL‚ÇÄ
  choose u v hu hv u_v_disjoint using fun Œ≥ => t2_separation_nhds (hŒ≥x‚ÇÄy‚ÇÄ Œ≥)
  let U‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, (¬∑ ‚Ä¢ ¬∑) Œ≥ ‚Åª¬π' u Œ≥
  let U‚ÇÄ := U‚ÇÄ‚ÇÄ ‚à© K‚ÇÄ
  let V‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, v Œ≥
  let V‚ÇÄ := V‚ÇÄ‚ÇÄ ‚à© L‚ÇÄ
  have U_nhds : f '' U‚ÇÄ ‚àà ùìù (f x‚ÇÄ) := by
    apply f_op.image_mem_nhds (inter_mem ((bInter_mem bad_Œì_finite).mpr fun Œ≥ hŒ≥ => _) K‚ÇÄ_in)
    exact (HasContinuousSmul‚ÇÇ.continuous_smul‚ÇÇ Œ≥).ContinuousAt (hu Œ≥)
  have V_nhds : f '' V‚ÇÄ ‚àà ùìù (f y‚ÇÄ) :=
    f_op.image_mem_nhds (inter_mem ((bInter_mem bad_Œì_finite).mpr fun Œ≥ hŒ≥ => hv Œ≥) L‚ÇÄ_in)
  refine' ‚ü®f '' U‚ÇÄ, U_nhds, f '' V‚ÇÄ, V_nhds, _‚ü©
  rw [MulAction.image_inter_image_iff]
  rintro x ‚ü®x_in_U‚ÇÄ‚ÇÄ, x_in_K‚ÇÄ‚ü© Œ≥
  by_cases' H : Œ≥ ‚àà bad_Œì_set
  ¬∑ rintro ‚ü®h, -‚ü©
    exact
      eq_empty_iff_forall_not_mem.mp (u_v_disjoint Œ≥) (Œ≥ ‚Ä¢ x) ‚ü®(mem_Inter‚ÇÇ.mp x_in_U‚ÇÄ‚ÇÄ Œ≥ H : _), mem_Inter‚ÇÇ.mp h Œ≥ H‚ü©
    
  ¬∑ rintro ‚ü®-, h'‚ü©
    simp only [image_smul, not_not, mem_set_of_eq, Ne.def] at H
    exact eq_empty_iff_forall_not_mem.mp H (Œ≥ ‚Ä¢ x) ‚ü®mem_image_of_mem _ x_in_K‚ÇÄ, h'‚ü©
    

