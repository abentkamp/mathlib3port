import Mathbin.Analysis.NormedSpace.Basic

/-!
# Completeness in terms of `cauchy` filters vs `is_cau_seq` sequences

In this file we apply `metric.complete_of_cauchy_seq_tendsto` to prove that a `normed_ring`
is complete in terms of `cauchy` filter if and only if it is complete in terms
of `cau_seq` Cauchy sequences.
-/


universe u v

open Set Filter

open_locale TopologicalSpace Classical

variable{Œ≤ : Type v}

-- error in Topology.MetricSpace.CauSeqFilter: ././Mathport/Syntax/Translate/Basic.lean:176:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Meta.solveByElim'
theorem cau_seq.tendsto_limit
[normed_ring Œ≤]
[hn : is_absolute_value (norm : Œ≤ ‚Üí expr‚Ñù())]
(f : cau_seq Œ≤ norm)
[cau_seq.is_complete Œ≤ norm] : tendsto f at_top (exprùìù() f.lim) :=
_root_.tendsto_nhds.mpr (begin
   intros [ident s, ident os, ident lfs],
   suffices [] [":", expr ¬´expr‚àÉ , ¬ª((a : expr‚Ñï()), ‚àÄ b : expr‚Ñï(), ¬´expr ‚â• ¬ª(b, a) ‚Üí ¬´expr ‚àà ¬ª(f b, s))],
   by simpa [] [] [] [] [] ["using", expr this],
   rcases [expr metric.is_open_iff.1 os _ lfs, "with", "‚ü®", ident Œµ, ",", "‚ü®", ident hŒµ, ",", ident hŒµs, "‚ü©", "‚ü©"],
   cases [expr setoid.symm (cau_seq.equiv_lim f) _ hŒµ] ["with", ident N, ident hN],
   existsi [expr N],
   intros [ident b, ident hb],
   apply [expr hŒµs],
   dsimp [] ["[", expr metric.ball, "]"] [] [],
   rw ["[", expr dist_comm, ",", expr dist_eq_norm, "]"] [],
   solve_by_elim [] [] [] []
 end)

variable[NormedField Œ≤]

instance NormedField.is_absolute_value : IsAbsoluteValue (norm : Œ≤ ‚Üí ‚Ñù) :=
  { abv_nonneg := norm_nonneg, abv_eq_zero := fun _ => norm_eq_zero, abv_add := norm_add_le,
    abv_mul := NormedField.norm_mul }

open Metric

-- error in Topology.MetricSpace.CauSeqFilter: ././Mathport/Syntax/Translate/Basic.lean:176:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Meta.solveByElim'
theorem cauchy_seq.is_cau_seq {f : expr‚Ñï() ‚Üí Œ≤} (hf : cauchy_seq f) : is_cau_seq norm f :=
begin
  cases [expr cauchy_iff.1 hf] ["with", ident hf1, ident hf2],
  intros [ident Œµ, ident hŒµ],
  rcases [expr hf2 {x | ¬´expr < ¬ª(dist x.1 x.2, Œµ)} (dist_mem_uniformity hŒµ), "with", "‚ü®", ident t, ",", "‚ü®", ident ht, ",", ident htsub, "‚ü©", "‚ü©"],
  simp [] [] [] [] [] ["at", ident ht],
  cases [expr ht] ["with", ident N, ident hN],
  existsi [expr N],
  intros [ident j, ident hj],
  rw ["<-", expr dist_eq_norm] [],
  apply [expr @htsub (f j, f N)],
  apply [expr set.mk_mem_prod]; solve_by_elim [] [] ["[", expr le_refl, "]"] []
end

theorem CauSeq.cauchy_seq (f : CauSeq Œ≤ norm) : CauchySeq f :=
  by 
    refine'
      cauchy_iff.2
        ‚ü®by 
            infer_instance,
          fun s hs => _‚ü©
    rcases mem_uniformity_dist.1 hs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©
    cases' CauSeq.cauchy‚ÇÇ f hŒµ with N hN 
    exists { n | n ‚â• N }.Image f 
    simp only [exists_prop, mem_at_top_sets, mem_map, mem_image, ge_iff_le, mem_set_of_eq]
    split 
    ¬∑
      exists N 
      intro b hb 
      exists b 
      simp [hb]
    ¬∑
      rintro ‚ü®a, b‚ü© ‚ü®‚ü®a', ‚ü®ha'1, ha'2‚ü©‚ü©, ‚ü®b', ‚ü®hb'1, hb'2‚ü©‚ü©‚ü©
      dsimp  at ha'1 ha'2 hb'1 hb'2 
      rw [‚Üêha'2, ‚Üêhb'2]
      apply hŒµs 
      rw [dist_eq_norm]
      apply hN <;> assumption

/-- In a normed field, `cau_seq` coincides with the usual notion of Cauchy sequences. -/
theorem cau_seq_iff_cauchy_seq {Œ± : Type u} [NormedField Œ±] {u : ‚Ñï ‚Üí Œ±} : IsCauSeq norm u ‚Üî CauchySeq u :=
  ‚ü®fun h => CauSeq.cauchy_seq ‚ü®u, h‚ü©, fun h => h.is_cau_seq‚ü©

/-- A complete normed field is complete as a metric space, as Cauchy sequences converge by
assumption and this suffices to characterize completeness. -/
instance (priority := 100)complete_space_of_cau_seq_complete [CauSeq.IsComplete Œ≤ norm] : CompleteSpace Œ≤ :=
  by 
    apply complete_of_cauchy_seq_tendsto 
    intro u hu 
    have C : IsCauSeq norm u := cau_seq_iff_cauchy_seq.2 hu 
    exists CauSeq.lim ‚ü®u, C‚ü©
    rw [Metric.tendsto_at_top]
    intro Œµ Œµpos 
    cases' (CauSeq.equiv_lim ‚ü®u, C‚ü©) _ Œµpos with N hN 
    exists N 
    simpa [dist_eq_norm] using hN

