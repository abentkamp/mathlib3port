import Mathbin.Topology.MetricSpace.EmetricSpace 
import Mathbin.Topology.Paracompact 
import Mathbin.SetTheory.Ordinal

/-!
# (Extended) metric spaces are paracompact

In this file we provide two instances:

* `emetric.paracompact_space`: a `pseudo_emetric_space` is paracompact; formalization is based
  on [MR0236876];
* `emetric.normal_of_metric`: an `emetric_space` is a normal topological space.

## Tags

metric space, paracompact space, normal space
-/


variable {Œ± : Type _}

open_locale Ennreal TopologicalSpace

open Set

namespace Emetric

-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr < ¬ª n)
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr < ¬ª n)
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr < ¬ª n)
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr ‚â• ¬ª ¬´expr + ¬ª(¬´expr + ¬ª(n, k), 1))
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr ‚â§ ¬ª ¬´expr + ¬ª(n, k))
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (m ¬´expr ‚â§ ¬ª ¬´expr + ¬ª(n, k))
-- ././Mathport/Syntax/Translate/Basic.lean:452:2: warning: expanding binder collection (i ¬´expr ‚àà ¬ª {i : Œπ | ¬´expr ‚à© ¬ª(D m i, B).nonempty})
-- failed to parenthesize: parenthesize: uncaught backtrack exception
-- failed to format: format: uncaught backtrack exception
/--
    A `pseudo_emetric_space` is always a paracompact space. Formalization is based
    on [MR0236876]. -/
  instance
    ( priority := 100 )
    [ PseudoEmetricSpace Œ± ] : ParacompactSpace Œ±
    :=
      by
        classical
          have pow_pos : ‚àÄ k : ‚Ñï , ( 0 : ‚Ñù‚â•0‚àû ) < 2 ‚Åª¬π ^ k
          exact fun k => Ennreal.pow_pos Ennreal.inv_pos . 2 Ennreal.two_ne_top _
          have hpow_le : ‚àÄ { m n : ‚Ñï } , m ‚â§ n ‚Üí ( 2 ‚Åª¬π : ‚Ñù‚â•0‚àû ) ^ n ‚â§ 2 ‚Åª¬π ^ m
          exact fun m n h => Ennreal.pow_le_pow_of_le_one Ennreal.inv_le_one . 2 ennreal.one_lt_two.le h
          have h2pow : ‚àÄ n : ‚Ñï , 2 * ( 2 ‚Åª¬π : ‚Ñù‚â•0‚àû ) ^ n + 1 = 2 ‚Åª¬π ^ n
          ¬∑ ¬∑ intro n simp [ pow_succ‚Çì , ‚Üê mul_assoc‚Çì , Ennreal.mul_inv_cancel ]
          refine' ‚ü® fun Œπ s ho hcov => _ ‚ü©
          simp only [ Union_eq_univ_iff ] at hcov
          let this' : LinearOrder‚Çì Œπ := linearOrderOfSTO' WellOrderingRel
          have wf : WellFounded ( ¬∑ < ¬∑ : Œπ ‚Üí Œπ ‚Üí Prop ) := @ IsWellOrder.wf Œπ WellOrderingRel _
          set ind : Œ± ‚Üí Œπ := fun x => wf.min { i : Œπ | x ‚àà s i } hcov x
          have mem_ind : ‚àÄ x , x ‚àà s ind x
          exact fun x => wf.min_mem _ hcov x
          have nmem_of_lt_ind : ‚àÄ { x i } , i < ind x ‚Üí x ‚àâ s i
          exact fun x i hlt hxi => wf.not_lt_min _ hcov x hxi hlt
          set
            D
            : ‚Ñï ‚Üí Œπ ‚Üí Set Œ±
            :=
            fun
              n
                =>
                Nat.strongRecOn'
                  n
                    fun
                      n D' i
                        =>
                        ‚ãÉ
                          ( x : Œ± )
                            ( hxs : ind x = i )
                            ( hb : ball x 3 * 2 ‚Åª¬π ^ n ‚äÜ s i )
                            ( hlt : ‚àÄ m _ : m < n j : Œπ , x ‚àâ D' m ‚Äπ _ ‚Ä∫ j )
                          ,
                          ball x 2 ‚Åª¬π ^ n
          have
            Dn
            :
              ‚àÄ
                n i
                ,
                D n i
                  =
                  ‚ãÉ
                    ( x : Œ± )
                      ( hxs : ind x = i )
                      ( hb : ball x 3 * 2 ‚Åª¬π ^ n ‚äÜ s i )
                      ( hlt : ‚àÄ m _ : m < n j : Œπ , x ‚àâ D m j )
                    ,
                    ball x 2 ‚Åª¬π ^ n
          exact fun n s => by simp only [ D ] rw [ Nat.strong_rec_on_beta' ]
          have
            memD
            :
              ‚àÄ
                { n i y }
                ,
                y ‚àà D n i
                  ‚Üî
                  ‚àÉ
                    ( x : _ )
                      ( hi : ind x = i )
                      ( hb : ball x 3 * 2 ‚Åª¬π ^ n ‚äÜ s i )
                      ( hlt : ‚àÄ m _ : m < n j : Œπ , x ‚àâ D m j )
                    ,
                    edist y x < 2 ‚Åª¬π ^ n
          ¬∑ intro n i y rw [ Dn n i ] simp only [ mem_Union , mem_ball ]
          have Dcov : ‚àÄ x , ‚àÉ n i , x ‚àà D n i
          ¬∑
            intro x
              obtain ‚ü® n , hn ‚ü© : ‚àÉ n : ‚Ñï , ball x 3 * 2 ‚Åª¬π ^ n ‚äÜ s ind x
              ¬∑
                rcases is_open_iff . 1 ho $ ind x x mem_ind x with ‚ü® Œµ , Œµ0 , hŒµ ‚ü©
                  have : 0 < Œµ / 3 := Ennreal.div_pos_iff . 2 ‚ü® Œµ0.lt.ne' , Ennreal.coe_ne_top ‚ü©
                  rcases Ennreal.exists_inv_two_pow_lt this.ne' with ‚ü® n , hn ‚ü©
                  refine' ‚ü® n , subset.trans ball_subset_ball _ hŒµ ‚ü©
                  simpa only [ div_eq_mul_inv , mul_comm‚Çì ] using Ennreal.mul_lt_of_lt_div hn . le
              byContra h
              pushNeg at h
              apply h n ind x
              exact memD . 2 ‚ü® x , rfl , hn , fun _ _ _ => h _ _ , mem_ball_self pow_pos _ ‚ü©
          have Dopen : ‚àÄ n i , IsOpen D n i
          ¬∑ intro n i rw [ Dn ] iterate 4 refine' is_open_Union fun _ => _ exact is_open_ball
          have HDS : ‚àÄ n i , D n i ‚äÜ s i
          ¬∑
            intro n s x
              rw [ memD ]
              rintro ‚ü® y , rfl , hsub , - , hyx ‚ü©
              refine' hsub lt_of_lt_of_le‚Çì hyx _
              calc 2 ‚Åª¬π ^ n = 1 * 2 ‚Åª¬π ^ n := one_mul‚Çì _ . symm _ ‚â§ 3 * 2 ‚Åª¬π ^ n := Ennreal.mul_le_mul _ le_rfl
              have : ( ( 1 : ‚Ñï ) : ‚Ñù‚â•0‚àû ) ‚â§ ( 3 : ‚Ñï )
              exact Ennreal.coe_nat_le_coe_nat . 2 by normNum1
              exactModCast this
          refine' ‚ü® ‚Ñï √ó Œπ , fun ni => D ni . 1 ni . 2 , fun _ => Dopen _ _ , _ , _ , fun ni => ‚ü® ni . 2 , HDS _ _ ‚ü© ‚ü©
          ¬∑ refine' Union_eq_univ_iff . 2 fun x => _ rcases Dcov x with ‚ü® n , i , h ‚ü© exact ‚ü® ‚ü® n , i ‚ü© , h ‚ü©
          ¬∑
            intro x
              rcases Dcov x with ‚ü® n , i , hn ‚ü©
              have : D n i ‚àà ùìù x
              exact IsOpen.mem_nhds Dopen _ _ hn
              rcases
                nhds_basis_uniformity uniformity_basis_edist_inv_two_pow . mem_iff . 1 this
                with ‚ü® k , - , hsub : ball x 2 ‚Åª¬π ^ k ‚äÜ D n i ‚ü©
              set B := ball x 2 ‚Åª¬π ^ n + k + 1
              refine' ‚ü® B , ball_mem_nhds _ pow_pos _ , _ ‚ü©
              have Hgt : ‚àÄ m _ : m ‚â• n + k + 1 i : Œπ , Disjoint D m i B
              ¬∑
                rintro m hm i y ‚ü® hym , hyx ‚ü©
                  rcases memD . 1 hym with ‚ü® z , rfl , hzi , H , hz ‚ü©
                  have : z ‚àâ ball x 2 ‚Åª¬π ^ k
                  exact fun hz => H n by linarith i hsub hz
                  apply this
                  calc
                    edist z x ‚â§ edist y z + edist y x := edist_triangle_left _ _ _
                      _ < 2 ‚Åª¬π ^ m + 2 ‚Åª¬π ^ n + k + 1 := Ennreal.add_lt_add hz hyx
                      _ ‚â§ 2 ‚Åª¬π ^ k + 1 + 2 ‚Åª¬π ^ k + 1 := add_le_add hpow_le $ by linarith hpow_le $ by linarith
                      _ = 2 ‚Åª¬π ^ k := by rw [ ‚Üê two_mul , h2pow ]
              have Hle : ‚àÄ m _ : m ‚â§ n + k , Set.Subsingleton { j | D m j ‚à© B . Nonempty }
              ¬∑
                rintro m hm j‚ÇÅ ‚ü® y , hyD , hyB ‚ü© j‚ÇÇ ‚ü® z , hzD , hzB ‚ü©
                  byContra h
                  wlog h : j‚ÇÅ < j‚ÇÇ := Ne.lt_or_lt h using j‚ÇÅ j‚ÇÇ y z , j‚ÇÇ j‚ÇÅ z y
                  rcases memD . 1 hyD with ‚ü® y' , rfl , hsuby , - , hdisty ‚ü©
                  rcases memD . 1 hzD with ‚ü® z' , rfl , - , - , hdistz ‚ü©
                  suffices : edist z' y' < 3 * 2 ‚Åª¬π ^ m
                  exact nmem_of_lt_ind h hsuby this
                  calc
                    edist z' y' ‚â§ edist z' x + edist x y' := edist_triangle _ _ _
                      _ ‚â§ edist z z' + edist z x + edist y x + edist y y'
                        :=
                        add_le_add edist_triangle_left _ _ _ edist_triangle_left _ _ _
                      _ < 2 ‚Åª¬π ^ m + 2 ‚Åª¬π ^ n + k + 1 + 2 ‚Åª¬π ^ n + k + 1 + 2 ‚Åª¬π ^ m
                        :=
                        by applyRules [ Ennreal.add_lt_add ]
                      _ = 2 * 2 ‚Åª¬π ^ m + 2 ‚Åª¬π ^ n + k + 1 := by simp only [ two_mul , add_comm‚Çì ]
                      _ ‚â§ 2 * 2 ‚Åª¬π ^ m + 2 ‚Åª¬π ^ m + 1
                        :=
                        Ennreal.mul_le_mul le_rfl $ add_le_add le_rfl $ hpow_le add_le_add hm le_rfl
                      _ = 3 * 2 ‚Åª¬π ^ m := by rw [ mul_add‚Çì , h2pow , bit1 , add_mul‚Çì , one_mul‚Çì ]
              have
                :
                  ‚ãÉ ( m : _ ) ( _ : m ‚â§ n + k ) ( i : _ ) ( _ : i ‚àà { i : Œπ | D m i ‚à© B . Nonempty } ) , { ( m , i ) }
                    .
                    Finite
              exact finite_le_nat _ . bUnion fun i hi => Hle i hi . Finite . bUnion fun _ _ => finite_singleton _
              refine' this.subset fun I hI => _
              simp only [ mem_Union ]
              refine' ‚ü® I . 1 , _ , I . 2 , hI , prod.mk.eta.symm ‚ü©
              exact not_lt‚Çì . 1 fun hlt => Hgt I . 1 hlt I . 2 hI.some_spec

instance (priority := 100) normal_of_emetric [EmetricSpace Œ±] : NormalSpace Œ± :=
  normal_of_paracompact_t2

end Emetric

