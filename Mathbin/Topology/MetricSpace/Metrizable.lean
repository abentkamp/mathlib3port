import Mathbin.Topology.UrysohnsLemma
import Mathbin.Topology.ContinuousFunction.Bounded

/-!
# Metrizability of a normal topological space with second countable topology

In this file we show that a normal topological space with second countable topology `X` is
metrizable: there exists a metric space structure that generates the same topology.

First we prove that `X` can be embedded into `l^‚àû`, then use this embedding to pull back the metric
space structure.
-/


open Set Filter Metric

open_locale BoundedContinuousFunction Filter TopologicalSpace

namespace TopologicalSpace

variable (X : Type _) [TopologicalSpace X] [NormalSpace X] [SecondCountableTopology X]

/-- A normal topological space with second countable topology can be embedded into `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`.
-/
theorem exists_embedding_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, Embedding f := by
  rcases exists_countable_basis X with ‚ü®B, hBc, -, hB‚ü©
  set s : Set (Set X √ó Set X) := { UV ‚àà B √óÀ¢ B | Closure UV.1 ‚äÜ UV.2 }
  have : Encodable s := ((hBc.prod hBc).mono (inter_subset_left _ _)).toEncodable
  let this' : TopologicalSpace s := ‚ä•
  have : DiscreteTopology s := ‚ü®rfl‚ü©
  suffices ‚àÉ f : X ‚Üí s ‚Üí·µá ‚Ñù, Embedding f by
    rcases this with ‚ü®f, hf‚ü©
    exact
      ‚ü®fun x => (f x).extend (Encodable.encode' s) 0,
        (BoundedContinuousFunction.isometry_extend (Encodable.encode' s) (0 : ‚Ñï ‚Üí·µá ‚Ñù)).Embedding.comp hf‚ü©
  have hd : ‚àÄ UV : s, Disjoint (Closure UV.1.1) (UV.1.2·∂ú) := fun UV =>
    disjoint_compl_right.mono_right (compl_subset_compl.2 UV.2.2)
  obtain ‚ü®Œµ, Œµ01, hŒµ‚ü© : ‚àÉ Œµ : s ‚Üí ‚Ñù, (‚àÄ UV, Œµ UV ‚àà Ioc (0 : ‚Ñù) 1) ‚àß tendsto Œµ cofinite (ùìù 0) := by
    rcases posSumOfEncodable zero_lt_one s with ‚ü®Œµ, Œµ0, c, hŒµc, hc1‚ü©
    refine' ‚ü®Œµ, fun UV => ‚ü®Œµ0 UV, _‚ü©, hŒµc.summable.tendsto_cofinite_zero‚ü©
    exact ((le_has_sum hŒµc UV) fun _ _ => (Œµ0 _).le).trans hc1
  have : ‚àÄ UV : s, ‚àÉ f : C(X, ‚Ñù), eq_on f 0 UV.1.1 ‚àß eq_on f (fun _ => Œµ UV) (UV.1.2·∂ú) ‚àß ‚àÄ x, f x ‚àà Icc 0 (Œµ UV) := by
    intro UV
    rcases exists_continuous_zero_one_of_closed is_closed_closure (hB.is_open UV.2.1.2).is_closed_compl (hd UV) with
      ‚ü®f, hf‚ÇÄ, hf‚ÇÅ, hf01‚ü©
    exact
      ‚ü®Œµ UV ‚Ä¢ f, fun x hx => by
        simp [hf‚ÇÄ (subset_closure hx)], fun x hx => by
        simp [hf‚ÇÅ hx], fun x => ‚ü®mul_nonneg (Œµ01 _).1.le (hf01 _).1, mul_le_of_le_one_right (Œµ01 _).1.le (hf01 _).2‚ü©‚ü©
  choose f hf0 hfŒµ hf0Œµ
  have hf01 : ‚àÄ UV x, f UV x ‚àà Icc (0 : ‚Ñù) 1 := fun UV x => Icc_subset_Icc_right (Œµ01 _).2 (hf0Œµ _ _)
  set F : X ‚Üí s ‚Üí·µá ‚Ñù := fun x =>
    ‚ü®‚ü®fun UV => f UV x, continuous_of_discrete_topology‚ü©, 1, fun UV‚ÇÅ UV‚ÇÇ =>
      Real.dist_le_of_mem_Icc_01 (hf01 _ _) (hf01 _ _)‚ü©
  have hF : ‚àÄ x UV, F x UV = f UV x := fun _ _ => rfl
  refine' ‚ü®F, Embedding.mk' _ (fun x y hxy => _) fun x => le_antisymm‚Çì _ _‚ü©
  ¬∑ refine' not_not.1 fun Hne => _
    rcases hB.mem_nhds_iff.1 (is_open_ne.mem_nhds Hne) with ‚ü®V, hVB, hxV, hVy‚ü©
    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©
    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©
    apply (Œµ01 UV).1.Ne
    calc (0 : ‚Ñù) = F x UV := (hf0 UV hxU).symm _ = F y UV := by
        rw [hxy]_ = Œµ UV := hfŒµ UV fun h : y ‚àà V => hVy h rfl
    
  ¬∑ refine' ((nhds_basis_ball.comap _).le_basis_iff hB.nhds_has_basis).2 _
    rintro V ‚ü®hVB, hxV‚ü©
    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©
    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©
    refine' ‚ü®Œµ UV, (Œµ01 UV).1, fun y hy : dist (F y) (F x) < Œµ UV => _‚ü©
    replace hy : dist (F y UV) (F x UV) < Œµ UV
    exact (BoundedContinuousFunction.dist_coe_le_dist _).trans_lt hy
    contrapose! hy
    rw [hF, hF, hfŒµ UV hy, hf0 UV hxU, Pi.zero_apply, dist_zero_right]
    exact le_abs_self _
    
  ¬∑ refine' (nhds_basis_closed_ball.comap _).ge_iff.2 fun Œ¥ Œ¥0 => _
    have h_fin : finite { UV : s | Œ¥ ‚â§ Œµ UV } := by
      simpa only [‚Üê not_lt‚Çì] using hŒµ (gt_mem_nhds Œ¥0)
    have : ‚àÄ·∂† y in ùìù x, ‚àÄ UV, Œ¥ ‚â§ Œµ UV ‚Üí dist (F y UV) (F x UV) ‚â§ Œ¥ := by
      refine' (eventually_all_finite h_fin).2 fun UV hUV => _
      exact (f UV).Continuous.Tendsto x (closed_ball_mem_nhds _ Œ¥0)
    refine' this.mono fun y hy => (BoundedContinuousFunction.dist_le Œ¥0.le).2 fun UV => _
    cases' le_total‚Çì Œ¥ (Œµ UV) with hle hle
    exacts[hy _ hle,
      (Real.dist_le_of_mem_Icc (hf0Œµ _ _) (hf0Œµ _ _)).trans
        (by
          rwa [sub_zero])]
    

/-- A normal topological space with second countable topology `X` is metrizable: there exists a
metric space structure that generates the same topology. This definition provides a `metric_space`
instance such that the corresponding `topological_space X` instance is definitionally equal
to the original one. -/
@[reducible]
noncomputable def to_metric_space : MetricSpace X :=
  @MetricSpace.replaceUniformity X
    ((UniformSpace.comap (exists_embedding_l_infty X).some inferInstance).replaceTopology
      (exists_embedding_l_infty X).some_spec.induced)
    (MetricSpace.induced (exists_embedding_l_infty X).some (exists_embedding_l_infty X).some_spec.inj inferInstance) rfl

end TopologicalSpace

