import Mathbin.Topology.UniformSpace.Cauchy
import Mathbin.Topology.UniformSpace.Separation
import Mathbin.Topology.DenseEmbedding

/-!
# Uniform embeddings of uniform spaces.

Extension of uniform continuous functions.
-/


open Filter TopologicalSpace Set Classical

open_locale Classical uniformity TopologicalSpace Filter

section

variable {α : Type _} {β : Type _} {γ : Type _} [UniformSpace α] [UniformSpace β] [UniformSpace γ]

universe u

/--  A map `f : α → β` between uniform spaces is called *uniform inducing* if the uniformity filter
on `α` is the pullback of the uniformity filter on `β` under `prod.map f f`. If `α` is a separated
space, then this implies that `f` is injective, hence it is a `uniform_embedding`. -/
structure UniformInducing (f : α → β) : Prop where
  comap_uniformity : comap (fun x : α × α => (f x.1, f x.2)) (𝓤 β) = 𝓤 α

theorem UniformInducing.mk' {f : α → β} (h : ∀ s, s ∈ 𝓤 α ↔ ∃ t ∈ 𝓤 β, ∀ x y : α, (f x, f y) ∈ t → (x, y) ∈ s) :
    UniformInducing f :=
  ⟨by
    simp [eq_comm, Filter.ext_iff, subset_def, h]⟩

theorem UniformInducing.comp {g : β → γ} (hg : UniformInducing g) {f : α → β} (hf : UniformInducing f) :
    UniformInducing (g ∘ f) :=
  ⟨by
    rw
      [show
        (fun x : α × α => ((g ∘ f) x.1, (g ∘ f) x.2)) =
          ((fun y : β × β => (g y.1, g y.2)) ∘ fun x : α × α => (f x.1, f x.2))by
        ext <;> simp ,
      ← Filter.comap_comap, hg.1, hf.1]⟩

theorem UniformInducing.basis_uniformity {f : α → β} (hf : UniformInducing f) {ι : Sort _} {p : ι → Prop}
    {s : ι → Set (β × β)} (H : (𝓤 β).HasBasis p s) : (𝓤 α).HasBasis p fun i => Prod.map f f ⁻¹' s i :=
  hf.1 ▸ H.comap _

/--  A map `f : α → β` between uniform spaces is a *uniform embedding* if it is uniform inducing and
injective. If `α` is a separated space, then the latter assumption follows from the former. -/
structure UniformEmbedding (f : α → β) extends UniformInducing f : Prop where
  inj : Function.Injective f

theorem uniform_embedding_subtype_val {p : α → Prop} : UniformEmbedding (Subtype.val : Subtype p → α) :=
  { comap_uniformity := rfl, inj := Subtype.val_injective }

theorem uniform_embedding_subtype_coe {p : α → Prop} : UniformEmbedding (coeₓ : Subtype p → α) :=
  uniform_embedding_subtype_val

theorem uniform_embedding_set_inclusion {s t : Set α} (hst : s ⊆ t) : UniformEmbedding (inclusion hst) :=
  { comap_uniformity := by
      erw [uniformity_subtype, uniformity_subtype, comap_comap]
      congr,
    inj := inclusion_injective hst }

theorem UniformEmbedding.comp {g : β → γ} (hg : UniformEmbedding g) {f : α → β} (hf : UniformEmbedding f) :
    UniformEmbedding (g ∘ f) :=
  { hg.to_uniform_inducing.comp hf.to_uniform_inducing with inj := hg.inj.comp hf.inj }

theorem uniform_embedding_def {f : α → β} :
    UniformEmbedding f ↔ Function.Injective f ∧ ∀ s, s ∈ 𝓤 α ↔ ∃ t ∈ 𝓤 β, ∀ x y : α, (f x, f y) ∈ t → (x, y) ∈ s := by
  constructor
  ·
    rintro ⟨⟨h⟩, h'⟩
    rw [eq_comm, Filter.ext_iff] at h
    simp [subset_def]
  ·
    rintro ⟨h, h'⟩
    refine' UniformEmbedding.mk ⟨_⟩ h
    rw [eq_comm, Filter.ext_iff]
    simp [subset_def]

theorem uniform_embedding_def' {f : α → β} :
    UniformEmbedding f ↔
      Function.Injective f ∧ UniformContinuous f ∧ ∀ s, s ∈ 𝓤 α → ∃ t ∈ 𝓤 β, ∀ x y : α, (f x, f y) ∈ t → (x, y) ∈ s :=
  by
  simp only [uniform_embedding_def, uniform_continuous_def] <;>
    exact
      ⟨fun ⟨I, H⟩ => ⟨I, fun s su => (H _).2 ⟨s, su, fun x y => id⟩, fun s => (H s).1⟩, fun ⟨I, H₁, H₂⟩ =>
        ⟨I, fun s => ⟨H₂ s, fun ⟨t, tu, h⟩ => mem_of_superset (H₁ t tu) fun ⟨a, b⟩ => h a b⟩⟩⟩

/--  If the domain of a `uniform_inducing` map `f` is a `separated_space`, then `f` is injective,
hence it is a `uniform_embedding`. -/
protected theorem UniformInducing.uniform_embedding [SeparatedSpace α] {f : α → β} (hf : UniformInducing f) :
    UniformEmbedding f :=
  ⟨hf, fun x y h =>
    eq_of_uniformity_basis (hf.basis_uniformity (𝓤 β).basis_sets) $ fun s hs =>
      mem_preimage.2 $ mem_uniformity_of_eq hs h⟩

/--  If a map `f : α → β` sends any two distinct points to point that are **not** related by a fixed
`s ∈ 𝓤 β`, then `f` is uniform inducing with respect to the discrete uniformity on `α`:
the preimage of `𝓤 β` under `prod.map f f` is the principal filter generated by the diagonal in
`α × α`. -/
theorem comap_uniformity_of_spaced_out {α} {f : α → β} {s : Set (β × β)} (hs : s ∈ 𝓤 β)
    (hf : Pairwise fun x y => (f x, f y) ∉ s) : comap (Prod.map f f) (𝓤 β) = 𝓟 IdRel := by
  refine' le_antisymmₓ _ (@refl_le_uniformity α (UniformSpace.comap f ‹_›))
  calc comap (Prod.map f f) (𝓤 β) ≤ comap (Prod.map f f) (𝓟 s) :=
    comap_mono (le_principal_iff.2 hs)_ = 𝓟 (Prod.map f f ⁻¹' s) := comap_principal _ ≤ 𝓟 IdRel := principal_mono.2 _
  rintro ⟨x, y⟩
  simpa [not_imp_not] using hf x y

/--  If a map `f : α → β` sends any two distinct points to point that are **not** related by a fixed
`s ∈ 𝓤 β`, then `f` is a uniform embedding with respect to the discrete uniformity on `α`. -/
theorem uniform_embedding_of_spaced_out {α} {f : α → β} {s : Set (β × β)} (hs : s ∈ 𝓤 β)
    (hf : Pairwise fun x y => (f x, f y) ∉ s) : @UniformEmbedding α β ⊥ ‹_› f := by
  let this' : UniformSpace α := ⊥
  have : SeparatedSpace α := separated_iff_t2.2 inferInstance
  exact UniformInducing.uniform_embedding ⟨comap_uniformity_of_spaced_out hs hf⟩

theorem UniformInducing.uniform_continuous {f : α → β} (hf : UniformInducing f) : UniformContinuous f := by
  simp [UniformContinuous, hf.comap_uniformity.symm, tendsto_comap]

theorem UniformInducing.uniform_continuous_iff {f : α → β} {g : β → γ} (hg : UniformInducing g) :
    UniformContinuous f ↔ UniformContinuous (g ∘ f) := by
  dsimp only [UniformContinuous, tendsto]
  rw [← hg.comap_uniformity, ← map_le_iff_le_comap, Filter.map_map]

theorem UniformInducing.inducing {f : α → β} (h : UniformInducing f) : Inducing f := by
  refine' ⟨eq_of_nhds_eq_nhds $ fun a => _⟩
  rw [nhds_induced, nhds_eq_uniformity, nhds_eq_uniformity, ← h.comap_uniformity, comap_lift'_eq, comap_lift'_eq2] <;>
    ·
      first |
        rfl|
        exact monotone_preimage

theorem UniformInducing.prod {α' : Type _} {β' : Type _} [UniformSpace α'] [UniformSpace β'] {e₁ : α → α'} {e₂ : β → β'}
    (h₁ : UniformInducing e₁) (h₂ : UniformInducing e₂) : UniformInducing fun p : α × β => (e₁ p.1, e₂ p.2) :=
  ⟨by
    simp [· ∘ ·, uniformity_prod, h₁.comap_uniformity.symm, h₂.comap_uniformity.symm, comap_inf, comap_comap]⟩

theorem UniformInducing.dense_inducing {f : α → β} (h : UniformInducing f) (hd : DenseRange f) : DenseInducing f :=
  { dense := hd, induced := h.inducing.induced }

theorem UniformEmbedding.embedding {f : α → β} (h : UniformEmbedding f) : Embedding f :=
  { induced := h.to_uniform_inducing.inducing.induced, inj := h.inj }

theorem UniformEmbedding.dense_embedding {f : α → β} (h : UniformEmbedding f) (hd : DenseRange f) : DenseEmbedding f :=
  { dense := hd, inj := h.inj, induced := h.embedding.induced }

theorem closed_embedding_of_spaced_out {α} [TopologicalSpace α] [DiscreteTopology α] [SeparatedSpace β] {f : α → β}
    {s : Set (β × β)} (hs : s ∈ 𝓤 β) (hf : Pairwise fun x y => (f x, f y) ∉ s) : ClosedEmbedding f := by
  (
    rcases DiscreteTopology.eq_bot α with rfl)
  let this' : UniformSpace α := ⊥
  exact { (uniform_embedding_of_spaced_out hs hf).Embedding with closed_range := is_closed_range_of_spaced_out hs hf }

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `closure_image_mem_nhds_of_uniform_inducing [])
  (Command.declSig
   [(Term.implicitBinder "{" [`s] [":" (Term.app `Set [(«term_×_» `α "×" `α)])] "}")
    (Term.implicitBinder "{" [`e] [":" (Term.arrow `α "→" `β)] "}")
    (Term.explicitBinder "(" [`b] [":" `β] [] ")")
    (Term.explicitBinder "(" [`he₁] [":" (Term.app `UniformInducing [`e])] [] ")")
    (Term.explicitBinder "(" [`he₂] [":" (Term.app `DenseInducing [`e])] [] ")")
    (Term.explicitBinder
     "("
     [`hs]
     [":" (Init.Core.«term_∈_» `s " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))]
     []
     ")")]
   (Term.typeSpec
    ":"
    («term∃_,_»
     "∃"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `a)] []))
     ","
     (Init.Core.«term_∈_»
      (Term.app
       `Closure
       [(Set.Data.Set.Basic.term_''_
         `e
         " '' "
         (Set.«term{_|_}»
          "{"
          `a'
          "|"
          (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
          "}"))])
      " ∈ "
      (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])))))
  (Command.declValSimple
   ":="
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         `s
         " ∈ "
         (Term.app
          `comap
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])])))]
      ":="
      (Term.subst `he₁.comap_uniformity.symm "▸" [`hs])))
    []
    (Term.let
     "let"
     (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t₁ "," `ht₁u "," `ht₁] "⟩") [] [] ":=" `this))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`ht₁ []]
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
           ","
           (Term.arrow
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")
             " ∈ "
             `t₁)
            "→"
            (Init.Core.«term_∈_» `p " ∈ " `s))))]
        ":="
        `ht₁))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`t₂ "," `ht₂u "," `ht₂s "," `ht₂c] "⟩")
         []
         []
         ":="
         (Term.app `comp_symm_of_uniformity [`ht₁u])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
          []
          []
          ":="
          (Term.app `comp_symm_of_uniformity [`ht₂u])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Term.app
               `preimage
               [`e
                (Set.«term{_|_}»
                 "{"
                 `b'
                 "|"
                 (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
                 "}")])
              " ∈ "
              (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
           ":="
           («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor
             "⟨"
             [`a
              ","
              (Term.paren
               "("
               [`ha
                [(Term.typeAscription
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")")
                   " ∈ "
                   `t₂))]]
               ")")]
             "⟩")
            []
            []
            ":="
            (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.simpleBinder [`b'] [])
                 (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
                ","
                (Term.arrow
                 (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                 "→"
                 (Term.arrow
                  (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
                  "→"
                  (Term.proj
                   (Init.Core.«term_∩_»
                    (Set.«term{_|_}»
                     "{"
                     (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                     "}")
                    " ∩ "
                    (Set.Data.Set.Basic.term_''_
                     `e
                     " '' "
                     (Set.«term{_|_}»
                      "{"
                      (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                      "}")))
                   "."
                   `Nonempty)))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
               "=>"
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.app
                      `preimage
                      [`e
                       (Set.«term{_|_}»
                        "{"
                        `b''
                        "|"
                        (Init.Core.«term_∈_»
                         (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                         " ∈ "
                         (Init.Core.«term_∩_» `s' " ∩ " `t))
                        "}")])
                     " ∈ "
                     (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
                  ":="
                  («term_$__»
                   `preimage_mem_comap
                   "$"
                   («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
                   []
                   []
                   ":="
                   (Term.app
                    (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem)
                    [`this])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                       " ∈ "
                       `t₁))]
                    ":="
                    («term_$__»
                     `ht₂c
                     "$"
                     («term_$__»
                      (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                      "$"
                      («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_»
                        (Term.app `e [`a₂])
                        " ∈ "
                        (Init.Core.«term_∩_»
                         (Set.«term{_|_}»
                          "{"
                          (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                          "|"
                          (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                          "}")
                         " ∩ "
                         (Set.Data.Set.Basic.term_''_
                          `e
                          " '' "
                          (Set.«term{_|_}»
                           "{"
                           `a'
                           "|"
                           (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                           "}")))))]
                     ":="
                     (Term.anonymousCtor
                      "⟨"
                      [`ha₂s'
                       ","
                       («term_$__»
                        (Term.app `mem_image_of_mem [(Term.hole "_")])
                        "$"
                        (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                      "⟩")))
                   []
                   (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.simpleBinder [`b'] [])]
                 ","
                 (Term.arrow
                  (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                  "→"
                  (Term.app
                   `ne_bot
                   [(Order.Lattice.«term_⊓_»
                     (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                     "⊓"
                     (Term.app
                      (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                      [(Set.Data.Set.Basic.term_''_
                        `e
                        " '' "
                        (Set.«term{_|_}»
                         "{"
                         `a'
                         "|"
                         (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                         "}"))]))]))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group (Tactic.intro "intro" [`b' `hb']) [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `nhds_eq_uniformity)
                      ","
                      (Tactic.rwRule [] `lift'_inf_principal_eq)
                      ","
                      (Tactic.rwRule [] `lift'_ne_bot_iff)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.exact
                    "exact"
                    (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
                   [])
                  (group
                   (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const]))
                   [])])))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "∀"
                  [(Term.simpleBinder [`b'] [])]
                  ","
                  (Term.arrow
                   (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                   "→"
                   (Init.Core.«term_∈_»
                    `b'
                    " ∈ "
                    (Term.app
                     `Closure
                     [(Set.Data.Set.Basic.term_''_
                       `e
                       " '' "
                       (Set.«term{_|_}»
                        "{"
                        `a'
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                        "}"))])))))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`b' `hb'] [])]
                 "=>"
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.«tactic_<;>_»
                       (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                       "<;>"
                       (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                      [])])))))))
             []
             (Term.anonymousCtor
              "⟨"
              [`a
               ","
               (Term.app
                (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
                [(Term.app `mem_nhds_left [`b `htu]) `this])]
              "⟩")))))))))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        `s
        " ∈ "
        (Term.app
         `comap
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])])))]
     ":="
     (Term.subst `he₁.comap_uniformity.symm "▸" [`hs])))
   []
   (Term.let
    "let"
    (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t₁ "," `ht₁u "," `ht₁] "⟩") [] [] ":=" `this))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ht₁ []]
       [(Term.typeSpec
         ":"
         (Term.forall
          "∀"
          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
          ","
          (Term.arrow
           (Init.Core.«term_∈_»
            (Term.paren
             "("
             [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")
            " ∈ "
            `t₁)
           "→"
           (Init.Core.«term_∈_» `p " ∈ " `s))))]
       ":="
       `ht₁))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`t₂ "," `ht₂u "," `ht₂s "," `ht₂c] "⟩")
        []
        []
        ":="
        (Term.app `comp_symm_of_uniformity [`ht₁u])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
         []
         []
         ":="
         (Term.app `comp_symm_of_uniformity [`ht₂u])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app
              `preimage
              [`e
               (Set.«term{_|_}»
                "{"
                `b'
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
                "}")])
             " ∈ "
             (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
          ":="
          («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor
            "⟨"
            [`a
             ","
             (Term.paren
              "("
              [`ha
               [(Term.typeAscription
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")")
                  " ∈ "
                  `t₂))]]
              ")")]
            "⟩")
           []
           []
           ":="
           (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Term.forall
               "∀"
               [(Term.simpleBinder [`b'] [])
                (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
               ","
               (Term.arrow
                (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                "→"
                (Term.arrow
                 (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
                 "→"
                 (Term.proj
                  (Init.Core.«term_∩_»
                   (Set.«term{_|_}»
                    "{"
                    (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                    "}")
                   " ∩ "
                   (Set.Data.Set.Basic.term_''_
                    `e
                    " '' "
                    (Set.«term{_|_}»
                     "{"
                     (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                     "}")))
                  "."
                  `Nonempty)))))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.app
                     `preimage
                     [`e
                      (Set.«term{_|_}»
                       "{"
                       `b''
                       "|"
                       (Init.Core.«term_∈_»
                        (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                        " ∈ "
                        (Init.Core.«term_∩_» `s' " ∩ " `t))
                       "}")])
                    " ∈ "
                    (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
                 ":="
                 («term_$__»
                  `preimage_mem_comap
                  "$"
                  («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
                  []
                  []
                  ":="
                  (Term.app
                   (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem)
                   [`this])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                      " ∈ "
                      `t₁))]
                   ":="
                   («term_$__»
                    `ht₂c
                    "$"
                    («term_$__»
                     (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                     "$"
                     («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Term.app `e [`a₂])
                       " ∈ "
                       (Init.Core.«term_∩_»
                        (Set.«term{_|_}»
                         "{"
                         (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                         "|"
                         (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                         "}")
                        " ∩ "
                        (Set.Data.Set.Basic.term_''_
                         `e
                         " '' "
                         (Set.«term{_|_}»
                          "{"
                          `a'
                          "|"
                          (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                          "}")))))]
                    ":="
                    (Term.anonymousCtor
                     "⟨"
                     [`ha₂s'
                      ","
                      («term_$__»
                       (Term.app `mem_image_of_mem [(Term.hole "_")])
                       "$"
                       (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                     "⟩")))
                  []
                  (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.simpleBinder [`b'] [])]
                ","
                (Term.arrow
                 (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                 "→"
                 (Term.app
                  `ne_bot
                  [(Order.Lattice.«term_⊓_»
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                    "⊓"
                    (Term.app
                     (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                     [(Set.Data.Set.Basic.term_''_
                       `e
                       " '' "
                       (Set.«term{_|_}»
                        "{"
                        `a'
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                        "}"))]))]))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group (Tactic.intro "intro" [`b' `hb']) [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `nhds_eq_uniformity)
                     ","
                     (Tactic.rwRule [] `lift'_inf_principal_eq)
                     ","
                     (Tactic.rwRule [] `lift'_ne_bot_iff)]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
                  [])
                 (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.simpleBinder [`b'] [])]
                 ","
                 (Term.arrow
                  (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                  "→"
                  (Init.Core.«term_∈_»
                   `b'
                   " ∈ "
                   (Term.app
                    `Closure
                    [(Set.Data.Set.Basic.term_''_
                      `e
                      " '' "
                      (Set.«term{_|_}»
                       "{"
                       `a'
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                       "}"))])))))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`b' `hb'] [])]
                "=>"
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.«tactic_<;>_»
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                      "<;>"
                      (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                     [])])))))))
            []
            (Term.anonymousCtor
             "⟨"
             [`a
              ","
              (Term.app
               (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
               [(Term.app `mem_nhds_left [`b `htu]) `this])]
             "⟩")))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t₁ "," `ht₁u "," `ht₁] "⟩") [] [] ":=" `this))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`ht₁ []]
      [(Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
         ","
         (Term.arrow
          (Init.Core.«term_∈_»
           (Term.paren
            "("
            [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
             [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
            ")")
           " ∈ "
           `t₁)
          "→"
          (Init.Core.«term_∈_» `p " ∈ " `s))))]
      ":="
      `ht₁))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`t₂ "," `ht₂u "," `ht₂s "," `ht₂c] "⟩")
       []
       []
       ":="
       (Term.app `comp_symm_of_uniformity [`ht₁u])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
        []
        []
        ":="
        (Term.app `comp_symm_of_uniformity [`ht₂u])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.app
             `preimage
             [`e
              (Set.«term{_|_}»
               "{"
               `b'
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
               "}")])
            " ∈ "
            (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
         ":="
         («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`a
            ","
            (Term.paren
             "("
             [`ha
              [(Term.typeAscription
                ":"
                (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
             ")")]
           "⟩")
          []
          []
          ":="
          (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "∀"
              [(Term.simpleBinder [`b'] [])
               (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
              ","
              (Term.arrow
               (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
               "→"
               (Term.arrow
                (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
                "→"
                (Term.proj
                 (Init.Core.«term_∩_»
                  (Set.«term{_|_}»
                   "{"
                   (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                   "}")
                  " ∩ "
                  (Set.Data.Set.Basic.term_''_
                   `e
                   " '' "
                   (Set.«term{_|_}»
                    "{"
                    (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                    "}")))
                 "."
                 `Nonempty)))))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
             "=>"
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.app
                    `preimage
                    [`e
                     (Set.«term{_|_}»
                      "{"
                      `b''
                      "|"
                      (Init.Core.«term_∈_»
                       (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                       " ∈ "
                       (Init.Core.«term_∩_» `s' " ∩ " `t))
                      "}")])
                   " ∈ "
                   (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
                ":="
                («term_$__»
                 `preimage_mem_comap
                 "$"
                 («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
                 []
                 []
                 ":="
                 (Term.app
                  (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem)
                  [`this])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                     " ∈ "
                     `t₁))]
                  ":="
                  («term_$__»
                   `ht₂c
                   "$"
                   («term_$__»
                    (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                    "$"
                    («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.app `e [`a₂])
                      " ∈ "
                      (Init.Core.«term_∩_»
                       (Set.«term{_|_}»
                        "{"
                        (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                        "}")
                       " ∩ "
                       (Set.Data.Set.Basic.term_''_
                        `e
                        " '' "
                        (Set.«term{_|_}»
                         "{"
                         `a'
                         "|"
                         (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                         "}")))))]
                   ":="
                   (Term.anonymousCtor
                    "⟨"
                    [`ha₂s'
                     ","
                     («term_$__»
                      (Term.app `mem_image_of_mem [(Term.hole "_")])
                      "$"
                      (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                    "⟩")))
                 []
                 (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Term.forall
               "∀"
               [(Term.simpleBinder [`b'] [])]
               ","
               (Term.arrow
                (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                "→"
                (Term.app
                 `ne_bot
                 [(Order.Lattice.«term_⊓_»
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                   "⊓"
                   (Term.app
                    (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                    [(Set.Data.Set.Basic.term_''_
                      `e
                      " '' "
                      (Set.«term{_|_}»
                       "{"
                       `a'
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                       "}"))]))]))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group (Tactic.intro "intro" [`b' `hb']) [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `nhds_eq_uniformity)
                    ","
                    (Tactic.rwRule [] `lift'_inf_principal_eq)
                    ","
                    (Tactic.rwRule [] `lift'_ne_bot_iff)]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
                 [])
                (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.simpleBinder [`b'] [])]
                ","
                (Term.arrow
                 (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                 "→"
                 (Init.Core.«term_∈_»
                  `b'
                  " ∈ "
                  (Term.app
                   `Closure
                   [(Set.Data.Set.Basic.term_''_
                     `e
                     " '' "
                     (Set.«term{_|_}»
                      "{"
                      `a'
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                      "}"))])))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`b' `hb'] [])]
               "=>"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.«tactic_<;>_»
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                     "<;>"
                     (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                    [])])))))))
           []
           (Term.anonymousCtor
            "⟨"
            [`a
             ","
             (Term.app
              (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
              [(Term.app `mem_nhds_left [`b `htu]) `this])]
            "⟩"))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`ht₁ []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
        ","
        (Term.arrow
         (Init.Core.«term_∈_»
          (Term.paren
           "("
           [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
            [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
           ")")
          " ∈ "
          `t₁)
         "→"
         (Init.Core.«term_∈_» `p " ∈ " `s))))]
     ":="
     `ht₁))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`t₂ "," `ht₂u "," `ht₂s "," `ht₂c] "⟩")
      []
      []
      ":="
      (Term.app `comp_symm_of_uniformity [`ht₁u])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
       []
       []
       ":="
       (Term.app `comp_symm_of_uniformity [`ht₂u])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Term.app
            `preimage
            [`e
             (Set.«term{_|_}»
              "{"
              `b'
              "|"
              (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
              "}")])
           " ∈ "
           (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
        ":="
        («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`a
           ","
           (Term.paren
            "("
            [`ha
             [(Term.typeAscription
               ":"
               (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "∀"
             [(Term.simpleBinder [`b'] [])
              (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
             ","
             (Term.arrow
              (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
              "→"
              (Term.arrow
               (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
               "→"
               (Term.proj
                (Init.Core.«term_∩_»
                 (Set.«term{_|_}»
                  "{"
                  (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                  "}")
                 " ∩ "
                 (Set.Data.Set.Basic.term_''_
                  `e
                  " '' "
                  (Set.«term{_|_}»
                   "{"
                   (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                   "}")))
                "."
                `Nonempty)))))]
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
            "=>"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.app
                   `preimage
                   [`e
                    (Set.«term{_|_}»
                     "{"
                     `b''
                     "|"
                     (Init.Core.«term_∈_»
                      (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                      " ∈ "
                      (Init.Core.«term_∩_» `s' " ∩ " `t))
                     "}")])
                  " ∈ "
                  (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
               ":="
               («term_$__»
                `preimage_mem_comap
                "$"
                («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
                []
                []
                ":="
                (Term.app
                 (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem)
                 [`this])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                    " ∈ "
                    `t₁))]
                 ":="
                 («term_$__»
                  `ht₂c
                  "$"
                  («term_$__»
                   (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                   "$"
                   («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.app `e [`a₂])
                     " ∈ "
                     (Init.Core.«term_∩_»
                      (Set.«term{_|_}»
                       "{"
                       (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                       "}")
                      " ∩ "
                      (Set.Data.Set.Basic.term_''_
                       `e
                       " '' "
                       (Set.«term{_|_}»
                        "{"
                        `a'
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                        "}")))))]
                  ":="
                  (Term.anonymousCtor
                   "⟨"
                   [`ha₂s'
                    ","
                    («term_$__»
                     (Term.app `mem_image_of_mem [(Term.hole "_")])
                     "$"
                     (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                   "⟩")))
                []
                (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "∀"
              [(Term.simpleBinder [`b'] [])]
              ","
              (Term.arrow
               (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
               "→"
               (Term.app
                `ne_bot
                [(Order.Lattice.«term_⊓_»
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                  "⊓"
                  (Term.app
                   (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                   [(Set.Data.Set.Basic.term_''_
                     `e
                     " '' "
                     (Set.«term{_|_}»
                      "{"
                      `a'
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                      "}"))]))]))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group (Tactic.intro "intro" [`b' `hb']) [])
               (group
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `nhds_eq_uniformity)
                   ","
                   (Tactic.rwRule [] `lift'_inf_principal_eq)
                   ","
                   (Tactic.rwRule [] `lift'_ne_bot_iff)]
                  "]")
                 [])
                [])
               (group
                (Tactic.exact
                 "exact"
                 (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
                [])
               (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Term.forall
               "∀"
               [(Term.simpleBinder [`b'] [])]
               ","
               (Term.arrow
                (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
                "→"
                (Init.Core.«term_∈_»
                 `b'
                 " ∈ "
                 (Term.app
                  `Closure
                  [(Set.Data.Set.Basic.term_''_
                    `e
                    " '' "
                    (Set.«term{_|_}»
                     "{"
                     `a'
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                     "}"))])))))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`b' `hb'] [])]
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.«tactic_<;>_»
                    (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                    "<;>"
                    (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                   [])])))))))
          []
          (Term.anonymousCtor
           "⟨"
           [`a
            ","
            (Term.app
             (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
             [(Term.app `mem_nhds_left [`b `htu]) `this])]
           "⟩")))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`t₂ "," `ht₂u "," `ht₂s "," `ht₂c] "⟩")
     []
     []
     ":="
     (Term.app `comp_symm_of_uniformity [`ht₁u])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
      []
      []
      ":="
      (Term.app `comp_symm_of_uniformity [`ht₂u])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.app
           `preimage
           [`e
            (Set.«term{_|_}»
             "{"
             `b'
             "|"
             (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
             "}")])
          " ∈ "
          (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
       ":="
       («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor
         "⟨"
         [`a
          ","
          (Term.paren
           "("
           [`ha
            [(Term.typeAscription
              ":"
              (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
           ")")]
         "⟩")
        []
        []
        ":="
        (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.simpleBinder [`b'] [])
             (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
            ","
            (Term.arrow
             (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
             "→"
             (Term.arrow
              (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
              "→"
              (Term.proj
               (Init.Core.«term_∩_»
                (Set.«term{_|_}»
                 "{"
                 (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                 "|"
                 (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                 "}")
                " ∩ "
                (Set.Data.Set.Basic.term_''_
                 `e
                 " '' "
                 (Set.«term{_|_}»
                  "{"
                  (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                  "}")))
               "."
               `Nonempty)))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.app
                  `preimage
                  [`e
                   (Set.«term{_|_}»
                    "{"
                    `b''
                    "|"
                    (Init.Core.«term_∈_»
                     (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                     " ∈ "
                     (Init.Core.«term_∩_» `s' " ∩ " `t))
                    "}")])
                 " ∈ "
                 (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
              ":="
              («term_$__»
               `preimage_mem_comap
               "$"
               («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
               []
               []
               ":="
               (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                   " ∈ "
                   `t₁))]
                ":="
                («term_$__»
                 `ht₂c
                 "$"
                 («term_$__»
                  (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                  "$"
                  («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.app `e [`a₂])
                    " ∈ "
                    (Init.Core.«term_∩_»
                     (Set.«term{_|_}»
                      "{"
                      (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                      "}")
                     " ∩ "
                     (Set.Data.Set.Basic.term_''_
                      `e
                      " '' "
                      (Set.«term{_|_}»
                       "{"
                       `a'
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                       "}")))))]
                 ":="
                 (Term.anonymousCtor
                  "⟨"
                  [`ha₂s'
                   ","
                   («term_$__»
                    (Term.app `mem_image_of_mem [(Term.hole "_")])
                    "$"
                    (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                  "⟩")))
               []
               (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "∀"
             [(Term.simpleBinder [`b'] [])]
             ","
             (Term.arrow
              (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
              "→"
              (Term.app
               `ne_bot
               [(Order.Lattice.«term_⊓_»
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                 "⊓"
                 (Term.app
                  (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                  [(Set.Data.Set.Basic.term_''_
                    `e
                    " '' "
                    (Set.«term{_|_}»
                     "{"
                     `a'
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                     "}"))]))]))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group (Tactic.intro "intro" [`b' `hb']) [])
              (group
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `nhds_eq_uniformity)
                  ","
                  (Tactic.rwRule [] `lift'_inf_principal_eq)
                  ","
                  (Tactic.rwRule [] `lift'_ne_bot_iff)]
                 "]")
                [])
               [])
              (group
               (Tactic.exact
                "exact"
                (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
               [])
              (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "∀"
              [(Term.simpleBinder [`b'] [])]
              ","
              (Term.arrow
               (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
               "→"
               (Init.Core.«term_∈_»
                `b'
                " ∈ "
                (Term.app
                 `Closure
                 [(Set.Data.Set.Basic.term_''_
                   `e
                   " '' "
                   (Set.«term{_|_}»
                    "{"
                    `a'
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                    "}"))])))))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`b' `hb'] [])]
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.«tactic_<;>_»
                   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                   "<;>"
                   (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                  [])])))))))
         []
         (Term.anonymousCtor
          "⟨"
          [`a
           ","
           (Term.app
            (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
            [(Term.app `mem_nhds_left [`b `htu]) `this])]
          "⟩"))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`t "," `htu "," `hts "," `htc] "⟩")
     []
     []
     ":="
     (Term.app `comp_symm_of_uniformity [`ht₂u])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app
          `preimage
          [`e
           (Set.«term{_|_}»
            "{"
            `b'
            "|"
            (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
            "}")])
         " ∈ "
         (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
      ":="
      («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`a
         ","
         (Term.paren
          "("
          [`ha
           [(Term.typeAscription
             ":"
             (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.simpleBinder [`b'] [])
            (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
           ","
           (Term.arrow
            (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
            "→"
            (Term.arrow
             (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
             "→"
             (Term.proj
              (Init.Core.«term_∩_»
               (Set.«term{_|_}»
                "{"
                (Mathlib.ExtendedBinder.extBinder `y [":" `β])
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
                "}")
               " ∩ "
               (Set.Data.Set.Basic.term_''_
                `e
                " '' "
                (Set.«term{_|_}»
                 "{"
                 (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                 "|"
                 (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                 "}")))
              "."
              `Nonempty)))))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
          "=>"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.app
                 `preimage
                 [`e
                  (Set.«term{_|_}»
                   "{"
                   `b''
                   "|"
                   (Init.Core.«term_∈_»
                    (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                    " ∈ "
                    (Init.Core.«term_∩_» `s' " ∩ " `t))
                   "}")])
                " ∈ "
                (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
             ":="
             («term_$__»
              `preimage_mem_comap
              "$"
              («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
              []
              []
              ":="
              (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                  " ∈ "
                  `t₁))]
               ":="
               («term_$__»
                `ht₂c
                "$"
                («term_$__»
                 (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                 "$"
                 («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.app `e [`a₂])
                   " ∈ "
                   (Init.Core.«term_∩_»
                    (Set.«term{_|_}»
                     "{"
                     (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                     "}")
                    " ∩ "
                    (Set.Data.Set.Basic.term_''_
                     `e
                     " '' "
                     (Set.«term{_|_}»
                      "{"
                      `a'
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                      "}")))))]
                ":="
                (Term.anonymousCtor
                 "⟨"
                 [`ha₂s'
                  ","
                  («term_$__»
                   (Term.app `mem_image_of_mem [(Term.hole "_")])
                   "$"
                   (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                 "⟩")))
              []
              (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.simpleBinder [`b'] [])]
            ","
            (Term.arrow
             (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
             "→"
             (Term.app
              `ne_bot
              [(Order.Lattice.«term_⊓_»
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
                "⊓"
                (Term.app
                 (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                 [(Set.Data.Set.Basic.term_''_
                   `e
                   " '' "
                   (Set.«term{_|_}»
                    "{"
                    `a'
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                    "}"))]))]))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group (Tactic.intro "intro" [`b' `hb']) [])
             (group
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `nhds_eq_uniformity)
                 ","
                 (Tactic.rwRule [] `lift'_inf_principal_eq)
                 ","
                 (Tactic.rwRule [] `lift'_ne_bot_iff)]
                "]")
               [])
              [])
             (group
              (Tactic.exact
               "exact"
               (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
              [])
             (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Term.forall
             "∀"
             [(Term.simpleBinder [`b'] [])]
             ","
             (Term.arrow
              (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
              "→"
              (Init.Core.«term_∈_»
               `b'
               " ∈ "
               (Term.app
                `Closure
                [(Set.Data.Set.Basic.term_''_
                  `e
                  " '' "
                  (Set.«term{_|_}»
                   "{"
                   `a'
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                   "}"))])))))]
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`b' `hb'] [])]
            "=>"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.«tactic_<;>_»
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                  "<;>"
                  (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                 [])])))))))
        []
        (Term.anonymousCtor
         "⟨"
         [`a
          ","
          (Term.app
           (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
           [(Term.app `mem_nhds_left [`b `htu]) `this])]
         "⟩")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app
         `preimage
         [`e
          (Set.«term{_|_}»
           "{"
           `b'
           "|"
           (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t₂)
           "}")])
        " ∈ "
        (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])))]
     ":="
     («term_$__» `preimage_mem_comap "$" (Term.app `mem_nhds_left [`b `ht₂u]))))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`a
        ","
        (Term.paren
         "("
         [`ha
          [(Term.typeAscription
            ":"
            (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Term.forall
          "∀"
          [(Term.simpleBinder [`b'] [])
           (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
          ","
          (Term.arrow
           (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
           "→"
           (Term.arrow
            (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
            "→"
            (Term.proj
             (Init.Core.«term_∩_»
              (Set.«term{_|_}»
               "{"
               (Mathlib.ExtendedBinder.extBinder `y [":" `β])
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
               "}")
              " ∩ "
              (Set.Data.Set.Basic.term_''_
               `e
               " '' "
               (Set.«term{_|_}»
                "{"
                (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                "}")))
             "."
             `Nonempty)))))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.app
                `preimage
                [`e
                 (Set.«term{_|_}»
                  "{"
                  `b''
                  "|"
                  (Init.Core.«term_∈_»
                   (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                   " ∈ "
                   (Init.Core.«term_∩_» `s' " ∩ " `t))
                  "}")])
               " ∈ "
               (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
            ":="
            («term_$__»
             `preimage_mem_comap
             "$"
             («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
             []
             []
             ":="
             (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                 " ∈ "
                 `t₁))]
              ":="
              («term_$__»
               `ht₂c
               "$"
               («term_$__»
                (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
                "$"
                («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.app `e [`a₂])
                  " ∈ "
                  (Init.Core.«term_∩_»
                   (Set.«term{_|_}»
                    "{"
                    (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                    "}")
                   " ∩ "
                   (Set.Data.Set.Basic.term_''_
                    `e
                    " '' "
                    (Set.«term{_|_}»
                     "{"
                     `a'
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                     "}")))))]
               ":="
               (Term.anonymousCtor
                "⟨"
                [`ha₂s'
                 ","
                 («term_$__»
                  (Term.app `mem_image_of_mem [(Term.hole "_")])
                  "$"
                  (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
                "⟩")))
             []
             (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.simpleBinder [`b'] [])]
           ","
           (Term.arrow
            (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
            "→"
            (Term.app
             `ne_bot
             [(Order.Lattice.«term_⊓_»
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
               "⊓"
               (Term.app
                (Filter.Order.Filter.Basic.term𝓟 "𝓟")
                [(Set.Data.Set.Basic.term_''_
                  `e
                  " '' "
                  (Set.«term{_|_}»
                   "{"
                   `a'
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                   "}"))]))]))))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group (Tactic.intro "intro" [`b' `hb']) [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `nhds_eq_uniformity)
                ","
                (Tactic.rwRule [] `lift'_inf_principal_eq)
                ","
                (Tactic.rwRule [] `lift'_ne_bot_iff)]
               "]")
              [])
             [])
            (group
             (Tactic.exact
              "exact"
              (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
             [])
            (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.simpleBinder [`b'] [])]
            ","
            (Term.arrow
             (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
             "→"
             (Init.Core.«term_∈_»
              `b'
              " ∈ "
              (Term.app
               `Closure
               [(Set.Data.Set.Basic.term_''_
                 `e
                 " '' "
                 (Set.«term{_|_}»
                  "{"
                  `a'
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                  "}"))])))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`b' `hb'] [])]
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (Tactic.«tactic_<;>_»
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                 "<;>"
                 (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
                [])])))))))
       []
       (Term.anonymousCtor
        "⟨"
        [`a
         ","
         (Term.app
          (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
          [(Term.app `mem_nhds_left [`b `htu]) `this])]
        "⟩"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`a
       ","
       (Term.paren
        "("
        [`ha
         [(Term.typeAscription
           ":"
           (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [(Term.app `e [`a])])]] ")") " ∈ " `t₂))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [(Term.simpleBinder [`b'] [])
          (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
         ","
         (Term.arrow
          (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
          "→"
          (Term.arrow
           (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
           "→"
           (Term.proj
            (Init.Core.«term_∩_»
             (Set.«term{_|_}»
              "{"
              (Mathlib.ExtendedBinder.extBinder `y [":" `β])
              "|"
              (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
              "}")
             " ∩ "
             (Set.Data.Set.Basic.term_''_
              `e
              " '' "
              (Set.«term{_|_}»
               "{"
               (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
               "}")))
            "."
            `Nonempty)))))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Term.app
               `preimage
               [`e
                (Set.«term{_|_}»
                 "{"
                 `b''
                 "|"
                 (Init.Core.«term_∈_»
                  (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                  " ∈ "
                  (Init.Core.«term_∩_» `s' " ∩ " `t))
                 "}")])
              " ∈ "
              (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
           ":="
           («term_$__»
            `preimage_mem_comap
            "$"
            («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
            []
            []
            ":="
            (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
                " ∈ "
                `t₁))]
             ":="
             («term_$__»
              `ht₂c
              "$"
              («term_$__»
               (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
               "$"
               («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.app `e [`a₂])
                 " ∈ "
                 (Init.Core.«term_∩_»
                  (Set.«term{_|_}»
                   "{"
                   (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                   "}")
                  " ∩ "
                  (Set.Data.Set.Basic.term_''_
                   `e
                   " '' "
                   (Set.«term{_|_}»
                    "{"
                    `a'
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                    "}")))))]
              ":="
              (Term.anonymousCtor
               "⟨"
               [`ha₂s'
                ","
                («term_$__»
                 (Term.app `mem_image_of_mem [(Term.hole "_")])
                 "$"
                 (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
               "⟩")))
            []
            (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Term.forall
          "∀"
          [(Term.simpleBinder [`b'] [])]
          ","
          (Term.arrow
           (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
           "→"
           (Term.app
            `ne_bot
            [(Order.Lattice.«term_⊓_»
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
              "⊓"
              (Term.app
               (Filter.Order.Filter.Basic.term𝓟 "𝓟")
               [(Set.Data.Set.Basic.term_''_
                 `e
                 " '' "
                 (Set.«term{_|_}»
                  "{"
                  `a'
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                  "}"))]))]))))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group (Tactic.intro "intro" [`b' `hb']) [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `nhds_eq_uniformity)
               ","
               (Tactic.rwRule [] `lift'_inf_principal_eq)
               ","
               (Tactic.rwRule [] `lift'_ne_bot_iff)]
              "]")
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
            [])
           (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.simpleBinder [`b'] [])]
           ","
           (Term.arrow
            (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
            "→"
            (Init.Core.«term_∈_»
             `b'
             " ∈ "
             (Term.app
              `Closure
              [(Set.Data.Set.Basic.term_''_
                `e
                " '' "
                (Set.«term{_|_}»
                 "{"
                 `a'
                 "|"
                 (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                 "}"))])))))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`b' `hb'] [])]
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (Tactic.«tactic_<;>_»
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
                "<;>"
                (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
               [])])))))))
      []
      (Term.anonymousCtor
       "⟨"
       [`a
        ","
        (Term.app
         (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
         [(Term.app `mem_nhds_left [`b `htu]) `this])]
       "⟩")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.simpleBinder [`b'] [])
         (Term.simpleBinder [`s'] [(Term.typeSpec ":" (Term.app `Set [(«term_×_» `β "×" `β)]))])]
        ","
        (Term.arrow
         (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
         "→"
         (Term.arrow
          (Init.Core.«term_∈_» `s' " ∈ " (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
          "→"
          (Term.proj
           (Init.Core.«term_∩_»
            (Set.«term{_|_}»
             "{"
             (Mathlib.ExtendedBinder.extBinder `y [":" `β])
             "|"
             (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`y])]] ")") " ∈ " `s')
             "}")
            " ∩ "
            (Set.Data.Set.Basic.term_''_
             `e
             " '' "
             (Set.«term{_|_}»
              "{"
              (Mathlib.ExtendedBinder.extBinder `a' [":" `α])
              "|"
              (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
              "}")))
           "."
           `Nonempty)))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`b' `s' `hb' `hs'] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app
              `preimage
              [`e
               (Set.«term{_|_}»
                "{"
                `b''
                "|"
                (Init.Core.«term_∈_»
                 (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")")
                 " ∈ "
                 (Init.Core.«term_∩_» `s' " ∩ " `t))
                "}")])
             " ∈ "
             (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])])))]
          ":="
          («term_$__»
           `preimage_mem_comap
           "$"
           («term_$__» (Term.app `mem_nhds_left [`b']) "$" (Term.app `inter_mem [`hs' `htu])))))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`a₂ "," `ha₂s' "," `ha₂t] "⟩")
           []
           []
           ":="
           (Term.app (Term.proj (Term.app `he₂.comap_nhds_ne_bot [(Term.hole "_")]) "." `nonempty_of_mem) [`this])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.paren "(" [(Term.app `e [`a]) [(Term.tupleTail "," [(Term.app `e [`a₂])])]] ")")
               " ∈ "
               `t₁))]
            ":="
            («term_$__»
             `ht₂c
             "$"
             («term_$__»
              (Term.app `prod_mk_mem_comp_rel [(Term.app `ht₂s [`ha])])
              "$"
              («term_$__» `htc "$" (Term.app `prod_mk_mem_comp_rel [`hb' `ha₂t]))))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.app `e [`a₂])
                " ∈ "
                (Init.Core.«term_∩_»
                 (Set.«term{_|_}»
                  "{"
                  (Mathlib.ExtendedBinder.extBinder `b'' [":" `β])
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`b' [(Term.tupleTail "," [`b''])]] ")") " ∈ " `s')
                  "}")
                 " ∩ "
                 (Set.Data.Set.Basic.term_''_
                  `e
                  " '' "
                  (Set.«term{_|_}»
                   "{"
                   `a'
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                   "}")))))]
             ":="
             (Term.anonymousCtor
              "⟨"
              [`ha₂s'
               ","
               («term_$__»
                (Term.app `mem_image_of_mem [(Term.hole "_")])
                "$"
                (Term.app `ht₁ [(Term.paren "(" [`a [(Term.tupleTail "," [`a₂])]] ")") `this]))]
              "⟩")))
           []
           (Term.anonymousCtor "⟨" [(Term.hole "_") "," `this] "⟩")))))))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [(Term.simpleBinder [`b'] [])]
         ","
         (Term.arrow
          (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
          "→"
          (Term.app
           `ne_bot
           [(Order.Lattice.«term_⊓_»
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
             "⊓"
             (Term.app
              (Filter.Order.Filter.Basic.term𝓟 "𝓟")
              [(Set.Data.Set.Basic.term_''_
                `e
                " '' "
                (Set.«term{_|_}»
                 "{"
                 `a'
                 "|"
                 (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                 "}"))]))]))))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group (Tactic.intro "intro" [`b' `hb']) [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `nhds_eq_uniformity)
              ","
              (Tactic.rwRule [] `lift'_inf_principal_eq)
              ","
              (Tactic.rwRule [] `lift'_ne_bot_iff)]
             "]")
            [])
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
           [])
          (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Term.forall
          "∀"
          [(Term.simpleBinder [`b'] [])]
          ","
          (Term.arrow
           (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
           "→"
           (Init.Core.«term_∈_»
            `b'
            " ∈ "
            (Term.app
             `Closure
             [(Set.Data.Set.Basic.term_''_
               `e
               " '' "
               (Set.«term{_|_}»
                "{"
                `a'
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                "}"))])))))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`b' `hb'] [])]
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (Tactic.«tactic_<;>_»
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
               "<;>"
               (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
              [])])))))))
     []
     (Term.anonymousCtor
      "⟨"
      [`a
       ","
       (Term.app
        (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
        [(Term.app `mem_nhds_left [`b `htu]) `this])]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.simpleBinder [`b'] [])]
        ","
        (Term.arrow
         (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
         "→"
         (Term.app
          `ne_bot
          [(Order.Lattice.«term_⊓_»
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`b'])
            "⊓"
            (Term.app
             (Filter.Order.Filter.Basic.term𝓟 "𝓟")
             [(Set.Data.Set.Basic.term_''_
               `e
               " '' "
               (Set.«term{_|_}»
                "{"
                `a'
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
                "}"))]))]))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group (Tactic.intro "intro" [`b' `hb']) [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `nhds_eq_uniformity)
             ","
             (Tactic.rwRule [] `lift'_inf_principal_eq)
             ","
             (Tactic.rwRule [] `lift'_ne_bot_iff)]
            "]")
           [])
          [])
         (group
          (Tactic.exact
           "exact"
           (Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `this [`b' `s `hb']))))
          [])
         (group (Tactic.exact "exact" (Term.app `monotone_inter [`monotone_preimage `monotone_const])) [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [(Term.simpleBinder [`b'] [])]
         ","
         (Term.arrow
          (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
          "→"
          (Init.Core.«term_∈_»
           `b'
           " ∈ "
           (Term.app
            `Closure
            [(Set.Data.Set.Basic.term_''_
              `e
              " '' "
              (Set.«term{_|_}»
               "{"
               `a'
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
               "}"))])))))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`b' `hb'] [])]
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.«tactic_<;>_»
              (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
              "<;>"
              (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
             [])])))))))
    []
    (Term.anonymousCtor
     "⟨"
     [`a
      ","
      (Term.app
       (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
       [(Term.app `mem_nhds_left [`b `htu]) `this])]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.simpleBinder [`b'] [])]
        ","
        (Term.arrow
         (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
         "→"
         (Init.Core.«term_∈_»
          `b'
          " ∈ "
          (Term.app
           `Closure
           [(Set.Data.Set.Basic.term_''_
             `e
             " '' "
             (Set.«term{_|_}»
              "{"
              `a'
              "|"
              (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
              "}"))])))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`b' `hb'] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.«tactic_<;>_»
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
             "<;>"
             (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
            [])])))))))
   []
   (Term.anonymousCtor
    "⟨"
    [`a
     ","
     (Term.app
      (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
      [(Term.app `mem_nhds_left [`b `htu]) `this])]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`a
    ","
    (Term.app
     (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
     [(Term.app `mem_nhds_left [`b `htu]) `this])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
   [(Term.app `mem_nhds_left [`b `htu]) `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mem_nhds_left [`b `htu])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `htu
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_nhds_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `mem_nhds_left [`b `htu]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) "." `sets_of_superset)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) []] ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`b' `hb'] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.«tactic_<;>_»
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
          "<;>"
          (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.«tactic_<;>_»
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
        "<;>"
        (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.«tactic_<;>_»
   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
   "<;>"
   (Tactic.exact "exact" (Term.app `this [`b' `hb'])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.«tactic_<;>_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact "exact" (Term.app `this [`b' `hb']))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `this [`b' `hb'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `b'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_eq_cluster_pts)] "]") [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `closure_eq_cluster_pts
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.forall
   "∀"
   [(Term.simpleBinder [`b'] [])]
   ","
   (Term.arrow
    (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
    "→"
    (Init.Core.«term_∈_»
     `b'
     " ∈ "
     (Term.app
      `Closure
      [(Set.Data.Set.Basic.term_''_
        `e
        " '' "
        (Set.«term{_|_}»
         "{"
         `a'
         "|"
         (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
         "}"))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.forall', expected 'Lean.Parser.Term.forall.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow
   (Init.Core.«term_∈_» (Term.paren "(" [`b [(Term.tupleTail "," [`b'])]] ")") " ∈ " `t)
   "→"
   (Init.Core.«term_∈_»
    `b'
    " ∈ "
    (Term.app
     `Closure
     [(Set.Data.Set.Basic.term_''_
       `e
       " '' "
       (Set.«term{_|_}»
        "{"
        `a'
        "|"
        (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
        "}"))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   `b'
   " ∈ "
   (Term.app
    `Closure
    [(Set.Data.Set.Basic.term_''_
      `e
      " '' "
      (Set.«term{_|_}»
       "{"
       `a'
       "|"
       (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
       "}"))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `Closure
   [(Set.Data.Set.Basic.term_''_
     `e
     " '' "
     (Set.«term{_|_}»
      "{"
      `a'
      "|"
      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
      "}"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_
   `e
   " '' "
   (Set.«term{_|_}»
    "{"
    `a'
    "|"
    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
    "}"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.«term{_|_}»
   "{"
   `a'
   "|"
   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
   "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")") " ∈ " `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`a [(Term.tupleTail "," [`a'])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Mathlib.ExtendedBinder.extBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  closure_image_mem_nhds_of_uniform_inducing
  { s : Set α × α } { e : α → β } ( b : β ) ( he₁ : UniformInducing e ) ( he₂ : DenseInducing e ) ( hs : s ∈ 𝓤 α )
    : ∃ a , Closure e '' { a' | ( a , a' ) ∈ s } ∈ 𝓝 b
  :=
    have
      : s ∈ comap fun p : α × α => ( e p . 1 , e p . 2 ) 𝓤 β := he₁.comap_uniformity.symm ▸ hs
      let
        ⟨ t₁ , ht₁u , ht₁ ⟩ := this
        have
          ht₁ : ∀ p : α × α , ( e p . 1 , e p . 2 ) ∈ t₁ → p ∈ s := ht₁
          let
            ⟨ t₂ , ht₂u , ht₂s , ht₂c ⟩ := comp_symm_of_uniformity ht₁u
            let
              ⟨ t , htu , hts , htc ⟩ := comp_symm_of_uniformity ht₂u
              have
                : preimage e { b' | ( b , b' ) ∈ t₂ } ∈ comap e 𝓝 b := preimage_mem_comap $ mem_nhds_left b ht₂u
                let
                  ⟨ a , ( ha : ( b , e a ) ∈ t₂ ) ⟩ := he₂.comap_nhds_ne_bot _ . nonempty_of_mem this
                  have
                    :
                        ∀
                          b' s' : Set β × β
                          ,
                          ( b , b' ) ∈ t
                            →
                            s' ∈ 𝓤 β → { y : β | ( b' , y ) ∈ s' } ∩ e '' { a' : α | ( a , a' ) ∈ s } . Nonempty
                      :=
                      fun
                        b' s' hb' hs'
                          =>
                          have
                            : preimage e { b'' | ( b' , b'' ) ∈ s' ∩ t } ∈ comap e 𝓝 b'
                              :=
                              preimage_mem_comap $ mem_nhds_left b' $ inter_mem hs' htu
                            let
                              ⟨ a₂ , ha₂s' , ha₂t ⟩ := he₂.comap_nhds_ne_bot _ . nonempty_of_mem this
                              have
                                : ( e a , e a₂ ) ∈ t₁
                                  :=
                                  ht₂c $ prod_mk_mem_comp_rel ht₂s ha $ htc $ prod_mk_mem_comp_rel hb' ha₂t
                                have
                                  : e a₂ ∈ { b'' : β | ( b' , b'' ) ∈ s' } ∩ e '' { a' | ( a , a' ) ∈ s }
                                    :=
                                    ⟨ ha₂s' , mem_image_of_mem _ $ ht₁ ( a , a₂ ) this ⟩
                                  ⟨ _ , this ⟩
                    have
                      : ∀ b' , ( b , b' ) ∈ t → ne_bot 𝓝 b' ⊓ 𝓟 e '' { a' | ( a , a' ) ∈ s }
                        :=
                        by
                          intro b' hb'
                            rw [ nhds_eq_uniformity , lift'_inf_principal_eq , lift'_ne_bot_iff ]
                            exact fun s => this b' s hb'
                            exact monotone_inter monotone_preimage monotone_const
                      have
                        : ∀ b' , ( b , b' ) ∈ t → b' ∈ Closure e '' { a' | ( a , a' ) ∈ s }
                          :=
                          fun b' hb' => by rw [ closure_eq_cluster_pts ] <;> exact this b' hb'
                        ⟨ a , 𝓝 b . sets_of_superset mem_nhds_left b htu this ⟩

theorem uniform_embedding_subtype_emb (p : α → Prop) {e : α → β} (ue : UniformEmbedding e) (de : DenseEmbedding e) :
    UniformEmbedding (DenseEmbedding.subtypeEmb p e) :=
  { comap_uniformity := by
      simp [comap_comap, · ∘ ·, DenseEmbedding.subtypeEmb, uniformity_subtype, ue.comap_uniformity.symm],
    inj := (de.subtype p).inj }

theorem UniformEmbedding.prod {α' : Type _} {β' : Type _} [UniformSpace α'] [UniformSpace β'] {e₁ : α → α'}
    {e₂ : β → β'} (h₁ : UniformEmbedding e₁) (h₂ : UniformEmbedding e₂) :
    UniformEmbedding fun p : α × β => (e₁ p.1, e₂ p.2) :=
  { h₁.to_uniform_inducing.prod h₂.to_uniform_inducing with inj := h₁.inj.prod_map h₂.inj }

theorem is_complete_of_complete_image {m : α → β} {s : Set α} (hm : UniformInducing m) (hs : IsComplete (m '' s)) :
    IsComplete s := by
  intro f hf hfs
  rw [le_principal_iff] at hfs
  obtain ⟨_, ⟨x, hx, rfl⟩, hyf⟩ : ∃ y ∈ m '' s, map m f ≤ 𝓝 y
  exact hs (f.map m) (hf.map hm.uniform_continuous) (le_principal_iff.2 (image_mem_map hfs))
  rw [map_le_iff_le_comap, ← nhds_induced, ← hm.inducing.induced] at hyf
  exact ⟨x, hx, hyf⟩

theorem IsComplete.complete_space_coe {s : Set α} (hs : IsComplete s) : CompleteSpace s :=
  complete_space_iff_is_complete_univ.2 $
    is_complete_of_complete_image uniform_embedding_subtype_coe.to_uniform_inducing $ by
      simp [hs]

/--  A set is complete iff its image under a uniform inducing map is complete. -/
theorem is_complete_image_iff {m : α → β} {s : Set α} (hm : UniformInducing m) : IsComplete (m '' s) ↔ IsComplete s :=
  by
  refine' ⟨is_complete_of_complete_image hm, fun c => _⟩
  have : CompleteSpace s := c.complete_space_coe
  set m' : s → β := m ∘ coeₓ
  suffices IsComplete (range m')by
    rwa [range_comp, Subtype.range_coe] at this
  have hm' : UniformInducing m' := hm.comp uniform_embedding_subtype_coe.to_uniform_inducing
  intro f hf hfm
  rw [Filter.le_principal_iff] at hfm
  have cf' : Cauchy (comap m' f) := hf.comap' hm'.comap_uniformity.le (ne_bot.comap_of_range_mem hf.1 hfm)
  rcases CompleteSpace.complete cf' with ⟨x, hx⟩
  rw [hm'.inducing.nhds_eq_comap, comap_le_comap_iff hfm] at hx
  use m' x, mem_range_self _, hx

theorem complete_space_iff_is_complete_range {f : α → β} (hf : UniformInducing f) :
    CompleteSpace α ↔ IsComplete (range f) := by
  rw [complete_space_iff_is_complete_univ, ← is_complete_image_iff hf, image_univ]

theorem UniformInducing.is_complete_range [CompleteSpace α] {f : α → β} (hf : UniformInducing f) :
    IsComplete (range f) :=
  (complete_space_iff_is_complete_range hf).1 ‹_›

theorem complete_space_congr {e : α ≃ β} (he : UniformEmbedding e) : CompleteSpace α ↔ CompleteSpace β := by
  rw [complete_space_iff_is_complete_range he.to_uniform_inducing, e.range_eq_univ, complete_space_iff_is_complete_univ]

theorem complete_space_coe_iff_is_complete {s : Set α} : CompleteSpace s ↔ IsComplete s :=
  (complete_space_iff_is_complete_range uniform_embedding_subtype_coe.to_uniform_inducing).trans $ by
    rw [Subtype.range_coe]

theorem IsClosed.complete_space_coe [CompleteSpace α] {s : Set α} (hs : IsClosed s) : CompleteSpace s :=
  hs.is_complete.complete_space_coe

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `complete_space_extension [])
  (Command.declSig
   [(Term.implicitBinder "{" [`m] [":" (Term.arrow `β "→" `α)] "}")
    (Term.explicitBinder "(" [`hm] [":" (Term.app `UniformInducing [`m])] [] ")")
    (Term.explicitBinder "(" [`dense] [":" (Term.app `DenseRange [`m])] [] ")")
    (Term.explicitBinder
     "("
     [`h]
     [":"
      (Term.forall
       "∀"
       [(Term.simpleBinder [`f] [(Term.typeSpec ":" (Term.app `Filter [`β]))])]
       ","
       (Term.arrow
        (Term.app `Cauchy [`f])
        "→"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
         ","
         («term_≤_» (Term.app `map [`m `f]) "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))))]
     []
     ")")]
   (Term.typeSpec ":" (Term.app `CompleteSpace [`α])))
  (Command.declValSimple
   ":="
   (Term.anonymousCtor
    "⟨"
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`f] [(Term.typeSpec ":" (Term.app `Filter [`α]))])]
       "=>"
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`hf] [(Term.typeSpec ":" (Term.app `Cauchy [`f]))])]
         "=>"
         (Term.let
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `p
            []
            [(Term.typeSpec
              ":"
              (Term.arrow
               (Term.app `Set [(«term_×_» `α "×" `α)])
               "→"
               (Term.arrow (Term.app `Set [`α]) "→" (Term.app `Set [`α]))))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`s `t] [])]
              "=>"
              (Set.«term{_|_}»
               "{"
               (Mathlib.ExtendedBinder.extBinder `y [":" `α])
               "|"
               («term∃_,_»
                "∃"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
                ","
                («term_∧_»
                 (Init.Core.«term_∈_» `x " ∈ " `t)
                 "∧"
                 (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `s)))
               "}")))))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `g
             []
             []
             ":="
             (Term.app
              (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
              [(Term.fun
                "fun"
                (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`mp₀ []]
              [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
                "=>"
                (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`mp₁ []]
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "∀"
                  [(Term.implicitBinder "{" [`s] [] "}")]
                  ","
                  (Term.app `Monotone [(Term.app `p [`s])])))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
                 "=>"
                 (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
                ":="
                («term_$__»
                 `le_infi
                 "$"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`s] [])]
                   "=>"
                   («term_$__»
                    `le_infi
                    "$"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`hs] [])]
                      "=>"
                      («term_$__»
                       `le_infi
                       "$"
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`t] [])]
                         "=>"
                         («term_$__»
                          `le_infi
                          "$"
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`ht] [])]
                            "=>"
                            («term_$__»
                             (Term.proj `le_principal_iff "." `mpr)
                             "$"
                             («term_$__»
                              (Term.app `mem_of_superset [`ht])
                              "$"
                              (Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`x `hx] [])]
                                "=>"
                                (Term.anonymousCtor
                                 "⟨"
                                 [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                                 "⟩")))))))))))))))))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (Term.app `ne_bot [`g]))]
                 ":="
                 (Term.app `hf.left.mono [`this])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
                  ":="
                  («term_$__»
                   `comap_ne_bot
                   "$"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`t `ht] [])]
                     "=>"
                     (Term.let
                      "let"
                      (Term.letDecl
                       (Term.letPatDecl
                        (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                        []
                        []
                        ":="
                        (Term.app
                         (Term.proj
                          («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀]))
                          "."
                          `mp)
                         [`ht])))
                      []
                      (Term.let
                       "let"
                       (Term.letDecl
                        (Term.letPatDecl
                         (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                         []
                         []
                         ":="
                         (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
                       []
                       (Term.let
                        "let"
                        (Term.letDecl
                         (Term.letPatDecl
                          (Term.anonymousCtor
                           "⟨"
                           [`x
                            ","
                            (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                           "⟩")
                          []
                          []
                          ":="
                          (Term.app `hf.left.nonempty_of_mem [`ht''])))
                        []
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           [`h₀ []]
                           [(Term.typeSpec
                             ":"
                             (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                           ":="
                           (Term.app `dense.nhds_within_ne_bot [`x])))
                         []
                         (Term.have
                          "have"
                          (Term.haveDecl
                           (Term.haveIdDecl
                            [`h₁ []]
                            [(Term.typeSpec
                              ":"
                              (Init.Core.«term_∈_»
                               (Set.«term{_|_}»
                                "{"
                                `y
                                "|"
                                (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                                "}")
                               " ∈ "
                               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                            ":="
                            («term_$__»
                             (Term.app
                              (Term.explicit "@" `mem_inf_of_left)
                              [`α
                               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                               (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                               (Term.hole "_")])
                             "$"
                             (Term.app `mem_nhds_left [`x `ht']))))
                          []
                          (Term.have
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`h₂ []]
                             [(Term.typeSpec
                               ":"
                               (Init.Core.«term_∈_»
                                (Term.app `range [`m])
                                " ∈ "
                                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                             ":="
                             («term_$__»
                              (Term.app
                               (Term.explicit "@" `mem_inf_of_right)
                               [`α
                                (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                                (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                                (Term.hole "_")])
                              "$"
                              (Term.app `subset.refl [(Term.hole "_")]))))
                           []
                           (Term.have
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              []
                              [(Term.typeSpec
                                ":"
                                (Init.Core.«term_∈_»
                                 (Init.Core.«term_∩_»
                                  (Set.«term{_|_}»
                                   "{"
                                   `y
                                   "|"
                                   (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                                   "}")
                                  " ∩ "
                                  (Term.app `range [`m]))
                                 " ∈ "
                                 (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                              ":="
                              (Term.app
                               (Term.explicit "@" `inter_mem)
                               [`α
                                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                                (Term.hole "_")
                                (Term.hole "_")
                                `h₁
                                `h₂])))
                            []
                            (Term.let
                             "let"
                             (Term.letDecl
                              (Term.letPatDecl
                               (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                               []
                               []
                               ":="
                               (Term.app `h₀.nonempty_of_mem [`this])))
                             []
                             (Term.anonymousCtor
                              "⟨"
                              [`b
                               ","
                               (Term.subst
                                `b_eq.symm
                                "▸"
                                [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                              "⟩"))))))))))))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
                   ":="
                   (Term.anonymousCtor
                    "⟨"
                    [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
                     ","
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`s `hs] [])]
                       "=>"
                       (Term.let
                        "let"
                        (Term.letDecl
                         (Term.letPatDecl
                          (Term.anonymousCtor
                           "⟨"
                           [`s₁
                            ","
                            `hs₁
                            ","
                            (Term.paren
                             "("
                             [`comp_s₁
                              [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                             ")")]
                           "⟩")
                          []
                          []
                          ":="
                          (Term.app `comp_mem_uniformity_sets [`hs])))
                        []
                        (Term.let
                         "let"
                         (Term.letDecl
                          (Term.letPatDecl
                           (Term.anonymousCtor
                            "⟨"
                            [`s₂
                             ","
                             `hs₂
                             ","
                             (Term.paren
                              "("
                              [`comp_s₂
                               [(Term.typeAscription
                                 ":"
                                 (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                              ")")]
                            "⟩")
                           []
                           []
                           ":="
                           (Term.app `comp_mem_uniformity_sets [`hs₁])))
                         []
                         (Term.let
                          "let"
                          (Term.letDecl
                           (Term.letPatDecl
                            (Term.anonymousCtor
                             "⟨"
                             [`t
                              ","
                              `ht
                              ","
                              (Term.paren
                               "("
                               [`prod_t
                                [(Term.typeAscription
                                  ":"
                                  (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                               ")")]
                             "⟩")
                            []
                            []
                            ":="
                            (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                          []
                          (Term.have
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`hg₁ []]
                             [(Term.typeSpec
                               ":"
                               (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                             ":="
                             («term_$__»
                              (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                              "$"
                              (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                           []
                           (Term.have
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`hg₂ []]
                              [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                              ":="
                              («term_$__»
                               (Term.app `mem_lift [`hs₂])
                               "$"
                               (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                            []
                            (Term.have
                             "have"
                             (Term.haveDecl
                              (Term.haveIdDecl
                               [`hg []]
                               [(Term.typeSpec
                                 ":"
                                 (Init.Core.«term_∈_»
                                  (Term.app
                                   `Set.Prod
                                   [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                                  " ∈ "
                                  (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                               ":="
                               (Term.app
                                (Term.explicit "@" `prod_mem_prod)
                                [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                             []
                             (Term.app
                              (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                              [`hg
                               (Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                                  (Term.anonymousCtor
                                   "⟨"
                                   [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                                    ","
                                    (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                                   "⟩")]
                                 "=>"
                                 (Term.have
                                  "have"
                                  (Term.haveDecl
                                   (Term.haveIdDecl
                                    []
                                    [(Term.typeSpec
                                      ":"
                                      (Init.Core.«term_∈_»
                                       (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                                       " ∈ "
                                       (Term.app `Set.Prod [`t `t])))]
                                    ":="
                                    (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                                  []
                                  («term_$__»
                                   `comp_s₁
                                   "$"
                                   («term_$__»
                                    (Term.app `prod_mk_mem_comp_rel [`hc₁])
                                    "$"
                                    («term_$__»
                                     `comp_s₂
                                     "$"
                                     (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
                    "⟩")))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
                    ":="
                    (Term.app
                     (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
                     [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor
                      "⟨"
                      [`x
                       ","
                       (Term.paren
                        "("
                        [`hx
                         [(Term.typeAscription
                           ":"
                           («term_≤_»
                            (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                            "≤"
                            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                        ")")]
                      "⟩")
                     []
                     []
                     ":="
                     (Term.app `h [(Term.hole "_") `this])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
                      ":="
                      (Term.app
                       (Term.proj
                        (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                        "."
                        `mp)
                       [`hx])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
                       ":="
                       (Term.app `this.mono [`map_comap_le])))
                     []
                     (Term.anonymousCtor
                      "⟨"
                      [`x
                       ","
                       (calc
                        "calc"
                        [(calcStep
                          («term_≤_» `f "≤" `g)
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                         (calcStep
                          («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                          ":="
                          (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
                      "⟩")))))))))))))))))]
    "⟩")
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`f] [(Term.typeSpec ":" (Term.app `Filter [`α]))])]
      "=>"
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`hf] [(Term.typeSpec ":" (Term.app `Cauchy [`f]))])]
        "=>"
        (Term.let
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `p
           []
           [(Term.typeSpec
             ":"
             (Term.arrow
              (Term.app `Set [(«term_×_» `α "×" `α)])
              "→"
              (Term.arrow (Term.app `Set [`α]) "→" (Term.app `Set [`α]))))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`s `t] [])]
             "=>"
             (Set.«term{_|_}»
              "{"
              (Mathlib.ExtendedBinder.extBinder `y [":" `α])
              "|"
              («term∃_,_»
               "∃"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
               ","
               («term_∧_»
                (Init.Core.«term_∈_» `x " ∈ " `t)
                "∧"
                (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `s)))
              "}")))))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letIdDecl
            `g
            []
            []
            ":="
            (Term.app
             (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
             [(Term.fun
               "fun"
               (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`mp₀ []]
             [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
               "=>"
               (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`mp₁ []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.implicitBinder "{" [`s] [] "}")]
                 ","
                 (Term.app `Monotone [(Term.app `p [`s])])))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
                "=>"
                (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
               ":="
               («term_$__»
                `le_infi
                "$"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`s] [])]
                  "=>"
                  («term_$__»
                   `le_infi
                   "$"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`hs] [])]
                     "=>"
                     («term_$__»
                      `le_infi
                      "$"
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`t] [])]
                        "=>"
                        («term_$__»
                         `le_infi
                         "$"
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`ht] [])]
                           "=>"
                           («term_$__»
                            (Term.proj `le_principal_iff "." `mpr)
                            "$"
                            («term_$__»
                             (Term.app `mem_of_superset [`ht])
                             "$"
                             (Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`x `hx] [])]
                               "=>"
                               (Term.anonymousCtor
                                "⟨"
                                [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                                "⟩")))))))))))))))))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
                 ":="
                 («term_$__»
                  `comap_ne_bot
                  "$"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`t `ht] [])]
                    "=>"
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                       []
                       []
                       ":="
                       (Term.app
                        (Term.proj
                         («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀]))
                         "."
                         `mp)
                        [`ht])))
                     []
                     (Term.let
                      "let"
                      (Term.letDecl
                       (Term.letPatDecl
                        (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                        []
                        []
                        ":="
                        (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
                      []
                      (Term.let
                       "let"
                       (Term.letDecl
                        (Term.letPatDecl
                         (Term.anonymousCtor
                          "⟨"
                          [`x
                           ","
                           (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                          "⟩")
                         []
                         []
                         ":="
                         (Term.app `hf.left.nonempty_of_mem [`ht''])))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`h₀ []]
                          [(Term.typeSpec
                            ":"
                            (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                          ":="
                          (Term.app `dense.nhds_within_ne_bot [`x])))
                        []
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           [`h₁ []]
                           [(Term.typeSpec
                             ":"
                             (Init.Core.«term_∈_»
                              (Set.«term{_|_}»
                               "{"
                               `y
                               "|"
                               (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                               "}")
                              " ∈ "
                              (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                           ":="
                           («term_$__»
                            (Term.app
                             (Term.explicit "@" `mem_inf_of_left)
                             [`α
                              (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                              (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                              (Term.hole "_")])
                            "$"
                            (Term.app `mem_nhds_left [`x `ht']))))
                         []
                         (Term.have
                          "have"
                          (Term.haveDecl
                           (Term.haveIdDecl
                            [`h₂ []]
                            [(Term.typeSpec
                              ":"
                              (Init.Core.«term_∈_»
                               (Term.app `range [`m])
                               " ∈ "
                               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                            ":="
                            («term_$__»
                             (Term.app
                              (Term.explicit "@" `mem_inf_of_right)
                              [`α
                               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                               (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                               (Term.hole "_")])
                             "$"
                             (Term.app `subset.refl [(Term.hole "_")]))))
                          []
                          (Term.have
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             []
                             [(Term.typeSpec
                               ":"
                               (Init.Core.«term_∈_»
                                (Init.Core.«term_∩_»
                                 (Set.«term{_|_}»
                                  "{"
                                  `y
                                  "|"
                                  (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                                  "}")
                                 " ∩ "
                                 (Term.app `range [`m]))
                                " ∈ "
                                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                             ":="
                             (Term.app
                              (Term.explicit "@" `inter_mem)
                              [`α
                               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                               (Term.hole "_")
                               (Term.hole "_")
                               `h₁
                               `h₂])))
                           []
                           (Term.let
                            "let"
                            (Term.letDecl
                             (Term.letPatDecl
                              (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                              []
                              []
                              ":="
                              (Term.app `h₀.nonempty_of_mem [`this])))
                            []
                            (Term.anonymousCtor
                             "⟨"
                             [`b
                              ","
                              (Term.subst
                               `b_eq.symm
                               "▸"
                               [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                             "⟩"))))))))))))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
                  ":="
                  (Term.anonymousCtor
                   "⟨"
                   [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
                    ","
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`s `hs] [])]
                      "=>"
                      (Term.let
                       "let"
                       (Term.letDecl
                        (Term.letPatDecl
                         (Term.anonymousCtor
                          "⟨"
                          [`s₁
                           ","
                           `hs₁
                           ","
                           (Term.paren
                            "("
                            [`comp_s₁
                             [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                            ")")]
                          "⟩")
                         []
                         []
                         ":="
                         (Term.app `comp_mem_uniformity_sets [`hs])))
                       []
                       (Term.let
                        "let"
                        (Term.letDecl
                         (Term.letPatDecl
                          (Term.anonymousCtor
                           "⟨"
                           [`s₂
                            ","
                            `hs₂
                            ","
                            (Term.paren
                             "("
                             [`comp_s₂
                              [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                             ")")]
                           "⟩")
                          []
                          []
                          ":="
                          (Term.app `comp_mem_uniformity_sets [`hs₁])))
                        []
                        (Term.let
                         "let"
                         (Term.letDecl
                          (Term.letPatDecl
                           (Term.anonymousCtor
                            "⟨"
                            [`t
                             ","
                             `ht
                             ","
                             (Term.paren
                              "("
                              [`prod_t
                               [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                              ")")]
                            "⟩")
                           []
                           []
                           ":="
                           (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                         []
                         (Term.have
                          "have"
                          (Term.haveDecl
                           (Term.haveIdDecl
                            [`hg₁ []]
                            [(Term.typeSpec
                              ":"
                              (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                            ":="
                            («term_$__»
                             (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                             "$"
                             (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                          []
                          (Term.have
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             [`hg₂ []]
                             [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                             ":="
                             («term_$__»
                              (Term.app `mem_lift [`hs₂])
                              "$"
                              (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                           []
                           (Term.have
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`hg []]
                              [(Term.typeSpec
                                ":"
                                (Init.Core.«term_∈_»
                                 (Term.app
                                  `Set.Prod
                                  [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                                 " ∈ "
                                 (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                              ":="
                              (Term.app
                               (Term.explicit "@" `prod_mem_prod)
                               [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                            []
                            (Term.app
                             (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                             [`hg
                              (Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                                 (Term.anonymousCtor
                                  "⟨"
                                  [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                                   ","
                                   (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                                  "⟩")]
                                "=>"
                                (Term.have
                                 "have"
                                 (Term.haveDecl
                                  (Term.haveIdDecl
                                   []
                                   [(Term.typeSpec
                                     ":"
                                     (Init.Core.«term_∈_»
                                      (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                                      " ∈ "
                                      (Term.app `Set.Prod [`t `t])))]
                                   ":="
                                   (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                                 []
                                 («term_$__»
                                  `comp_s₁
                                  "$"
                                  («term_$__»
                                   (Term.app `prod_mk_mem_comp_rel [`hc₁])
                                   "$"
                                   («term_$__»
                                    `comp_s₂
                                    "$"
                                    (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
                   "⟩")))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
                   ":="
                   (Term.app
                    (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
                    [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor
                     "⟨"
                     [`x
                      ","
                      (Term.paren
                       "("
                       [`hx
                        [(Term.typeAscription
                          ":"
                          («term_≤_»
                           (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                           "≤"
                           (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                       ")")]
                     "⟩")
                    []
                    []
                    ":="
                    (Term.app `h [(Term.hole "_") `this])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
                     ":="
                     (Term.app
                      (Term.proj
                       (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                       "."
                       `mp)
                      [`hx])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
                      ":="
                      (Term.app `this.mono [`map_comap_le])))
                    []
                    (Term.anonymousCtor
                     "⟨"
                     [`x
                      ","
                      (calc
                       "calc"
                       [(calcStep
                         («term_≤_» `f "≤" `g)
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                        (calcStep
                         («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                         ":="
                         (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
                     "⟩")))))))))))))))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`f] [(Term.typeSpec ":" (Term.app `Filter [`α]))])]
    "=>"
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`hf] [(Term.typeSpec ":" (Term.app `Cauchy [`f]))])]
      "=>"
      (Term.let
       "let"
       (Term.letDecl
        (Term.letIdDecl
         `p
         []
         [(Term.typeSpec
           ":"
           (Term.arrow
            (Term.app `Set [(«term_×_» `α "×" `α)])
            "→"
            (Term.arrow (Term.app `Set [`α]) "→" (Term.app `Set [`α]))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`s `t] [])]
           "=>"
           (Set.«term{_|_}»
            "{"
            (Mathlib.ExtendedBinder.extBinder `y [":" `α])
            "|"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
             ","
             («term_∧_»
              (Init.Core.«term_∈_» `x " ∈ " `t)
              "∧"
              (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `s)))
            "}")))))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `g
          []
          []
          ":="
          (Term.app
           (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
           [(Term.fun
             "fun"
             (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`mp₀ []]
           [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
             "=>"
             (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`mp₁ []]
            [(Term.typeSpec
              ":"
              (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
              "=>"
              (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
             ":="
             («term_$__»
              `le_infi
              "$"
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`s] [])]
                "=>"
                («term_$__»
                 `le_infi
                 "$"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`hs] [])]
                   "=>"
                   («term_$__»
                    `le_infi
                    "$"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`t] [])]
                      "=>"
                      («term_$__»
                       `le_infi
                       "$"
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`ht] [])]
                         "=>"
                         («term_$__»
                          (Term.proj `le_principal_iff "." `mpr)
                          "$"
                          («term_$__»
                           (Term.app `mem_of_superset [`ht])
                           "$"
                           (Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`x `hx] [])]
                             "=>"
                             (Term.anonymousCtor
                              "⟨"
                              [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                              "⟩")))))))))))))))))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
               ":="
               («term_$__»
                `comap_ne_bot
                "$"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`t `ht] [])]
                  "=>"
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                     []
                     []
                     ":="
                     (Term.app
                      (Term.proj
                       («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀]))
                       "."
                       `mp)
                      [`ht])))
                   []
                   (Term.let
                    "let"
                    (Term.letDecl
                     (Term.letPatDecl
                      (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                      []
                      []
                      ":="
                      (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
                    []
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor
                        "⟨"
                        [`x
                         ","
                         (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                        "⟩")
                       []
                       []
                       ":="
                       (Term.app `hf.left.nonempty_of_mem [`ht''])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`h₀ []]
                        [(Term.typeSpec
                          ":"
                          (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                        ":="
                        (Term.app `dense.nhds_within_ne_bot [`x])))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`h₁ []]
                         [(Term.typeSpec
                           ":"
                           (Init.Core.«term_∈_»
                            (Set.«term{_|_}»
                             "{"
                             `y
                             "|"
                             (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                             "}")
                            " ∈ "
                            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                         ":="
                         («term_$__»
                          (Term.app
                           (Term.explicit "@" `mem_inf_of_left)
                           [`α
                            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                            (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                            (Term.hole "_")])
                          "$"
                          (Term.app `mem_nhds_left [`x `ht']))))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`h₂ []]
                          [(Term.typeSpec
                            ":"
                            (Init.Core.«term_∈_»
                             (Term.app `range [`m])
                             " ∈ "
                             (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                          ":="
                          («term_$__»
                           (Term.app
                            (Term.explicit "@" `mem_inf_of_right)
                            [`α
                             (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                             (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                             (Term.hole "_")])
                           "$"
                           (Term.app `subset.refl [(Term.hole "_")]))))
                        []
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           []
                           [(Term.typeSpec
                             ":"
                             (Init.Core.«term_∈_»
                              (Init.Core.«term_∩_»
                               (Set.«term{_|_}»
                                "{"
                                `y
                                "|"
                                (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                                "}")
                               " ∩ "
                               (Term.app `range [`m]))
                              " ∈ "
                              (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                           ":="
                           (Term.app
                            (Term.explicit "@" `inter_mem)
                            [`α
                             (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                             (Term.hole "_")
                             (Term.hole "_")
                             `h₁
                             `h₂])))
                         []
                         (Term.let
                          "let"
                          (Term.letDecl
                           (Term.letPatDecl
                            (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                            []
                            []
                            ":="
                            (Term.app `h₀.nonempty_of_mem [`this])))
                          []
                          (Term.anonymousCtor
                           "⟨"
                           [`b
                            ","
                            (Term.subst
                             `b_eq.symm
                             "▸"
                             [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                           "⟩"))))))))))))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
                ":="
                (Term.anonymousCtor
                 "⟨"
                 [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
                  ","
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`s `hs] [])]
                    "=>"
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor
                        "⟨"
                        [`s₁
                         ","
                         `hs₁
                         ","
                         (Term.paren
                          "("
                          [`comp_s₁
                           [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                          ")")]
                        "⟩")
                       []
                       []
                       ":="
                       (Term.app `comp_mem_uniformity_sets [`hs])))
                     []
                     (Term.let
                      "let"
                      (Term.letDecl
                       (Term.letPatDecl
                        (Term.anonymousCtor
                         "⟨"
                         [`s₂
                          ","
                          `hs₂
                          ","
                          (Term.paren
                           "("
                           [`comp_s₂
                            [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                           ")")]
                         "⟩")
                        []
                        []
                        ":="
                        (Term.app `comp_mem_uniformity_sets [`hs₁])))
                      []
                      (Term.let
                       "let"
                       (Term.letDecl
                        (Term.letPatDecl
                         (Term.anonymousCtor
                          "⟨"
                          [`t
                           ","
                           `ht
                           ","
                           (Term.paren
                            "("
                            [`prod_t
                             [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                            ")")]
                          "⟩")
                         []
                         []
                         ":="
                         (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`hg₁ []]
                          [(Term.typeSpec
                            ":"
                            (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                          ":="
                          («term_$__»
                           (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                           "$"
                           (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                        []
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           [`hg₂ []]
                           [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                           ":="
                           («term_$__»
                            (Term.app `mem_lift [`hs₂])
                            "$"
                            (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                         []
                         (Term.have
                          "have"
                          (Term.haveDecl
                           (Term.haveIdDecl
                            [`hg []]
                            [(Term.typeSpec
                              ":"
                              (Init.Core.«term_∈_»
                               (Term.app
                                `Set.Prod
                                [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                               " ∈ "
                               (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                            ":="
                            (Term.app
                             (Term.explicit "@" `prod_mem_prod)
                             [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                          []
                          (Term.app
                           (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                           [`hg
                            (Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                               (Term.anonymousCtor
                                "⟨"
                                [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                                 ","
                                 (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                                "⟩")]
                              "=>"
                              (Term.have
                               "have"
                               (Term.haveDecl
                                (Term.haveIdDecl
                                 []
                                 [(Term.typeSpec
                                   ":"
                                   (Init.Core.«term_∈_»
                                    (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                                    " ∈ "
                                    (Term.app `Set.Prod [`t `t])))]
                                 ":="
                                 (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                               []
                               («term_$__»
                                `comp_s₁
                                "$"
                                («term_$__»
                                 (Term.app `prod_mk_mem_comp_rel [`hc₁])
                                 "$"
                                 («term_$__»
                                  `comp_s₂
                                  "$"
                                  (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
                 "⟩")))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
                 ":="
                 (Term.app
                  (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
                  [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor
                   "⟨"
                   [`x
                    ","
                    (Term.paren
                     "("
                     [`hx
                      [(Term.typeAscription
                        ":"
                        («term_≤_»
                         (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                         "≤"
                         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                     ")")]
                   "⟩")
                  []
                  []
                  ":="
                  (Term.app `h [(Term.hole "_") `this])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
                   ":="
                   (Term.app
                    (Term.proj
                     (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                     "."
                     `mp)
                    [`hx])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
                    ":="
                    (Term.app `this.mono [`map_comap_le])))
                  []
                  (Term.anonymousCtor
                   "⟨"
                   [`x
                    ","
                    (calc
                     "calc"
                     [(calcStep
                       («term_≤_» `f "≤" `g)
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                      (calcStep
                       («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                       ":="
                       (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
                   "⟩")))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`hf] [(Term.typeSpec ":" (Term.app `Cauchy [`f]))])]
    "=>"
    (Term.let
     "let"
     (Term.letDecl
      (Term.letIdDecl
       `p
       []
       [(Term.typeSpec
         ":"
         (Term.arrow
          (Term.app `Set [(«term_×_» `α "×" `α)])
          "→"
          (Term.arrow (Term.app `Set [`α]) "→" (Term.app `Set [`α]))))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`s `t] [])]
         "=>"
         (Set.«term{_|_}»
          "{"
          (Mathlib.ExtendedBinder.extBinder `y [":" `α])
          "|"
          («term∃_,_»
           "∃"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
           ","
           («term_∧_»
            (Init.Core.«term_∈_» `x " ∈ " `t)
            "∧"
            (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `s)))
          "}")))))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letIdDecl
        `g
        []
        []
        ":="
        (Term.app
         (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
         [(Term.fun
           "fun"
           (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`mp₀ []]
         [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
           "=>"
           (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`mp₁ []]
          [(Term.typeSpec
            ":"
            (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
          ":="
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
            "=>"
            (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
           ":="
           («term_$__»
            `le_infi
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`s] [])]
              "=>"
              («term_$__»
               `le_infi
               "$"
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`hs] [])]
                 "=>"
                 («term_$__»
                  `le_infi
                  "$"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`t] [])]
                    "=>"
                    («term_$__»
                     `le_infi
                     "$"
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`ht] [])]
                       "=>"
                       («term_$__»
                        (Term.proj `le_principal_iff "." `mpr)
                        "$"
                        («term_$__»
                         (Term.app `mem_of_superset [`ht])
                         "$"
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`x `hx] [])]
                           "=>"
                           (Term.anonymousCtor
                            "⟨"
                            [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                            "⟩")))))))))))))))))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
             ":="
             («term_$__»
              `comap_ne_bot
              "$"
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`t `ht] [])]
                "=>"
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                   []
                   []
                   ":="
                   (Term.app
                    (Term.proj
                     («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀]))
                     "."
                     `mp)
                    [`ht])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                    []
                    []
                    ":="
                    (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor
                      "⟨"
                      [`x
                       ","
                       (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                      "⟩")
                     []
                     []
                     ":="
                     (Term.app `hf.left.nonempty_of_mem [`ht''])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h₀ []]
                      [(Term.typeSpec
                        ":"
                        (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                      ":="
                      (Term.app `dense.nhds_within_ne_bot [`x])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`h₁ []]
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_∈_»
                          (Set.«term{_|_}»
                           "{"
                           `y
                           "|"
                           (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                           "}")
                          " ∈ "
                          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                       ":="
                       («term_$__»
                        (Term.app
                         (Term.explicit "@" `mem_inf_of_left)
                         [`α
                          (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                          (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                          (Term.hole "_")])
                        "$"
                        (Term.app `mem_nhds_left [`x `ht']))))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`h₂ []]
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_∈_»
                           (Term.app `range [`m])
                           " ∈ "
                           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                        ":="
                        («term_$__»
                         (Term.app
                          (Term.explicit "@" `mem_inf_of_right)
                          [`α
                           (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                           (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                           (Term.hole "_")])
                         "$"
                         (Term.app `subset.refl [(Term.hole "_")]))))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         []
                         [(Term.typeSpec
                           ":"
                           (Init.Core.«term_∈_»
                            (Init.Core.«term_∩_»
                             (Set.«term{_|_}»
                              "{"
                              `y
                              "|"
                              (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                              "}")
                             " ∩ "
                             (Term.app `range [`m]))
                            " ∈ "
                            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                         ":="
                         (Term.app
                          (Term.explicit "@" `inter_mem)
                          [`α
                           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                           (Term.hole "_")
                           (Term.hole "_")
                           `h₁
                           `h₂])))
                       []
                       (Term.let
                        "let"
                        (Term.letDecl
                         (Term.letPatDecl
                          (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                          []
                          []
                          ":="
                          (Term.app `h₀.nonempty_of_mem [`this])))
                        []
                        (Term.anonymousCtor
                         "⟨"
                         [`b
                          ","
                          (Term.subst
                           `b_eq.symm
                           "▸"
                           [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                         "⟩"))))))))))))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
              ":="
              (Term.anonymousCtor
               "⟨"
               [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
                ","
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`s `hs] [])]
                  "=>"
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor
                      "⟨"
                      [`s₁
                       ","
                       `hs₁
                       ","
                       (Term.paren
                        "("
                        [`comp_s₁
                         [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                        ")")]
                      "⟩")
                     []
                     []
                     ":="
                     (Term.app `comp_mem_uniformity_sets [`hs])))
                   []
                   (Term.let
                    "let"
                    (Term.letDecl
                     (Term.letPatDecl
                      (Term.anonymousCtor
                       "⟨"
                       [`s₂
                        ","
                        `hs₂
                        ","
                        (Term.paren
                         "("
                         [`comp_s₂
                          [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                         ")")]
                       "⟩")
                      []
                      []
                      ":="
                      (Term.app `comp_mem_uniformity_sets [`hs₁])))
                    []
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor
                        "⟨"
                        [`t
                         ","
                         `ht
                         ","
                         (Term.paren
                          "("
                          [`prod_t
                           [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                          ")")]
                        "⟩")
                       []
                       []
                       ":="
                       (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hg₁ []]
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                        ":="
                        («term_$__»
                         (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                         "$"
                         (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         [`hg₂ []]
                         [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                         ":="
                         («term_$__»
                          (Term.app `mem_lift [`hs₂])
                          "$"
                          (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                       []
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`hg []]
                          [(Term.typeSpec
                            ":"
                            (Init.Core.«term_∈_»
                             (Term.app
                              `Set.Prod
                              [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                             " ∈ "
                             (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                          ":="
                          (Term.app
                           (Term.explicit "@" `prod_mem_prod)
                           [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                        []
                        (Term.app
                         (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                         [`hg
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                             (Term.anonymousCtor
                              "⟨"
                              [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                               ","
                               (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                              "⟩")]
                            "=>"
                            (Term.have
                             "have"
                             (Term.haveDecl
                              (Term.haveIdDecl
                               []
                               [(Term.typeSpec
                                 ":"
                                 (Init.Core.«term_∈_»
                                  (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                                  " ∈ "
                                  (Term.app `Set.Prod [`t `t])))]
                               ":="
                               (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                             []
                             («term_$__»
                              `comp_s₁
                              "$"
                              («term_$__»
                               (Term.app `prod_mk_mem_comp_rel [`hc₁])
                               "$"
                               («term_$__»
                                `comp_s₂
                                "$"
                                (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
               "⟩")))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
               ":="
               (Term.app
                (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
                [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`x
                  ","
                  (Term.paren
                   "("
                   [`hx
                    [(Term.typeAscription
                      ":"
                      («term_≤_»
                       (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                       "≤"
                       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                   ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app `h [(Term.hole "_") `this])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
                 ":="
                 (Term.app
                  (Term.proj
                   (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                   "."
                   `mp)
                  [`hx])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
                  ":="
                  (Term.app `this.mono [`map_comap_le])))
                []
                (Term.anonymousCtor
                 "⟨"
                 [`x
                  ","
                  (calc
                   "calc"
                   [(calcStep
                     («term_≤_» `f "≤" `g)
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                    (calcStep
                     («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                     ":="
                     (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
                 "⟩")))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `p
     []
     [(Term.typeSpec
       ":"
       (Term.arrow
        (Term.app `Set [(«term_×_» `α "×" `α)])
        "→"
        (Term.arrow (Term.app `Set [`α]) "→" (Term.app `Set [`α]))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`s `t] [])]
       "=>"
       (Set.«term{_|_}»
        "{"
        (Mathlib.ExtendedBinder.extBinder `y [":" `α])
        "|"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" `α]))
         ","
         («term_∧_»
          (Init.Core.«term_∈_» `x " ∈ " `t)
          "∧"
          (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `s)))
        "}")))))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letIdDecl
      `g
      []
      []
      ":="
      (Term.app
       (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
       [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`mp₀ []]
       [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
         "=>"
         (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`mp₁ []]
        [(Term.typeSpec
          ":"
          (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
          "=>"
          (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
         ":="
         («term_$__»
          `le_infi
          "$"
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`s] [])]
            "=>"
            («term_$__»
             `le_infi
             "$"
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`hs] [])]
               "=>"
               («term_$__»
                `le_infi
                "$"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`t] [])]
                  "=>"
                  («term_$__»
                   `le_infi
                   "$"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`ht] [])]
                     "=>"
                     («term_$__»
                      (Term.proj `le_principal_iff "." `mpr)
                      "$"
                      («term_$__»
                       (Term.app `mem_of_superset [`ht])
                       "$"
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`x `hx] [])]
                         "=>"
                         (Term.anonymousCtor
                          "⟨"
                          [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                          "⟩")))))))))))))))))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
           ":="
           («term_$__»
            `comap_ne_bot
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`t `ht] [])]
              "=>"
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                 []
                 []
                 ":="
                 (Term.app
                  (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
                  [`ht])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                  []
                  []
                  ":="
                  (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor
                    "⟨"
                    [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                    "⟩")
                   []
                   []
                   ":="
                   (Term.app `hf.left.nonempty_of_mem [`ht''])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h₀ []]
                    [(Term.typeSpec
                      ":"
                      (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                    ":="
                    (Term.app `dense.nhds_within_ne_bot [`x])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h₁ []]
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_»
                        (Set.«term{_|_}»
                         "{"
                         `y
                         "|"
                         (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                         "}")
                        " ∈ "
                        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                     ":="
                     («term_$__»
                      (Term.app
                       (Term.explicit "@" `mem_inf_of_left)
                       [`α
                        (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                        (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                        (Term.hole "_")])
                      "$"
                      (Term.app `mem_nhds_left [`x `ht']))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h₂ []]
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_»
                         (Term.app `range [`m])
                         " ∈ "
                         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                      ":="
                      («term_$__»
                       (Term.app
                        (Term.explicit "@" `mem_inf_of_right)
                        [`α
                         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                         (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                         (Term.hole "_")])
                       "$"
                       (Term.app `subset.refl [(Term.hole "_")]))))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_∈_»
                          (Init.Core.«term_∩_»
                           (Set.«term{_|_}»
                            "{"
                            `y
                            "|"
                            (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                            "}")
                           " ∩ "
                           (Term.app `range [`m]))
                          " ∈ "
                          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                       ":="
                       (Term.app
                        (Term.explicit "@" `inter_mem)
                        [`α
                         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                         (Term.hole "_")
                         (Term.hole "_")
                         `h₁
                         `h₂])))
                     []
                     (Term.let
                      "let"
                      (Term.letDecl
                       (Term.letPatDecl
                        (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                        []
                        []
                        ":="
                        (Term.app `h₀.nonempty_of_mem [`this])))
                      []
                      (Term.anonymousCtor
                       "⟨"
                       [`b
                        ","
                        (Term.subst
                         `b_eq.symm
                         "▸"
                         [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                       "⟩"))))))))))))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
            ":="
            (Term.anonymousCtor
             "⟨"
             [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
              ","
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`s `hs] [])]
                "=>"
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor
                    "⟨"
                    [`s₁
                     ","
                     `hs₁
                     ","
                     (Term.paren
                      "("
                      [`comp_s₁
                       [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                      ")")]
                    "⟩")
                   []
                   []
                   ":="
                   (Term.app `comp_mem_uniformity_sets [`hs])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor
                     "⟨"
                     [`s₂
                      ","
                      `hs₂
                      ","
                      (Term.paren
                       "("
                       [`comp_s₂
                        [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                       ")")]
                     "⟩")
                    []
                    []
                    ":="
                    (Term.app `comp_mem_uniformity_sets [`hs₁])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor
                      "⟨"
                      [`t
                       ","
                       `ht
                       ","
                       (Term.paren
                        "("
                        [`prod_t
                         [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                        ")")]
                      "⟩")
                     []
                     []
                     ":="
                     (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hg₁ []]
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                      ":="
                      («term_$__»
                       (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                       "$"
                       (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hg₂ []]
                       [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                       ":="
                       («term_$__»
                        (Term.app `mem_lift [`hs₂])
                        "$"
                        (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        [`hg []]
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_∈_»
                           (Term.app
                            `Set.Prod
                            [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                           " ∈ "
                           (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                        ":="
                        (Term.app
                         (Term.explicit "@" `prod_mem_prod)
                         [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                      []
                      (Term.app
                       (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                       [`hg
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                           (Term.anonymousCtor
                            "⟨"
                            [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                             ","
                             (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                            "⟩")]
                          "=>"
                          (Term.have
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             []
                             [(Term.typeSpec
                               ":"
                               (Init.Core.«term_∈_»
                                (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                                " ∈ "
                                (Term.app `Set.Prod [`t `t])))]
                             ":="
                             (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                           []
                           («term_$__»
                            `comp_s₁
                            "$"
                            («term_$__»
                             (Term.app `prod_mk_mem_comp_rel [`hc₁])
                             "$"
                             («term_$__»
                              `comp_s₂
                              "$"
                              (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
             "⟩")))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
             ":="
             (Term.app
              (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
              [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`x
                ","
                (Term.paren
                 "("
                 [`hx
                  [(Term.typeAscription
                    ":"
                    («term_≤_»
                     (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                     "≤"
                     (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                 ")")]
               "⟩")
              []
              []
              ":="
              (Term.app `h [(Term.hole "_") `this])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
               ":="
               (Term.app
                (Term.proj
                 (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                 "."
                 `mp)
                [`hx])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
                ":="
                (Term.app `this.mono [`map_comap_le])))
              []
              (Term.anonymousCtor
               "⟨"
               [`x
                ","
                (calc
                 "calc"
                 [(calcStep
                   («term_≤_» `f "≤" `g)
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                  (calcStep
                   («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                   ":="
                   (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
               "⟩")))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letIdDecl
     `g
     []
     []
     ":="
     (Term.app
      (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `lift)
      [(Term.fun "fun" (Term.basicFun [(Term.simpleBinder [`s] [])] "=>" (Term.app `f.lift' [(Term.app `p [`s])])))])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`mp₀ []]
      [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
        "=>"
        (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`mp₁ []]
       [(Term.typeSpec
         ":"
         (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
         "=>"
         (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
        ":="
        («term_$__»
         `le_infi
         "$"
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`s] [])]
           "=>"
           («term_$__»
            `le_infi
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`hs] [])]
              "=>"
              («term_$__»
               `le_infi
               "$"
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`t] [])]
                 "=>"
                 («term_$__»
                  `le_infi
                  "$"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`ht] [])]
                    "=>"
                    («term_$__»
                     (Term.proj `le_principal_iff "." `mpr)
                     "$"
                     («term_$__»
                      (Term.app `mem_of_superset [`ht])
                      "$"
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`x `hx] [])]
                        "=>"
                        (Term.anonymousCtor
                         "⟨"
                         [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                         "⟩")))))))))))))))))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
          ":="
          («term_$__»
           `comap_ne_bot
           "$"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`t `ht] [])]
             "=>"
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
                []
                []
                ":="
                (Term.app
                 (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
                 [`ht])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                 []
                 []
                 ":="
                 (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor
                   "⟨"
                   [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                   "⟩")
                  []
                  []
                  ":="
                  (Term.app `hf.left.nonempty_of_mem [`ht''])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₀ []]
                   [(Term.typeSpec
                     ":"
                     (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                   ":="
                   (Term.app `dense.nhds_within_ne_bot [`x])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h₁ []]
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Set.«term{_|_}»
                        "{"
                        `y
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                        "}")
                       " ∈ "
                       (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                    ":="
                    («term_$__»
                     (Term.app
                      (Term.explicit "@" `mem_inf_of_left)
                      [`α
                       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                       (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                       (Term.hole "_")])
                     "$"
                     (Term.app `mem_nhds_left [`x `ht']))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`h₂ []]
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_»
                        (Term.app `range [`m])
                        " ∈ "
                        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                     ":="
                     («term_$__»
                      (Term.app
                       (Term.explicit "@" `mem_inf_of_right)
                       [`α
                        (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                        (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                        (Term.hole "_")])
                      "$"
                      (Term.app `subset.refl [(Term.hole "_")]))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_»
                         (Init.Core.«term_∩_»
                          (Set.«term{_|_}»
                           "{"
                           `y
                           "|"
                           (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                           "}")
                          " ∩ "
                          (Term.app `range [`m]))
                         " ∈ "
                         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                      ":="
                      (Term.app
                       (Term.explicit "@" `inter_mem)
                       [`α
                        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                        (Term.hole "_")
                        (Term.hole "_")
                        `h₁
                        `h₂])))
                    []
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                       []
                       []
                       ":="
                       (Term.app `h₀.nonempty_of_mem [`this])))
                     []
                     (Term.anonymousCtor
                      "⟨"
                      [`b
                       ","
                       (Term.subst
                        `b_eq.symm
                        "▸"
                        [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                      "⟩"))))))))))))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
           ":="
           (Term.anonymousCtor
            "⟨"
            [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
             ","
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`s `hs] [])]
               "=>"
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor
                   "⟨"
                   [`s₁
                    ","
                    `hs₁
                    ","
                    (Term.paren
                     "("
                     [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                     ")")]
                   "⟩")
                  []
                  []
                  ":="
                  (Term.app `comp_mem_uniformity_sets [`hs])))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor
                    "⟨"
                    [`s₂
                     ","
                     `hs₂
                     ","
                     (Term.paren
                      "("
                      [`comp_s₂
                       [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                      ")")]
                    "⟩")
                   []
                   []
                   ":="
                   (Term.app `comp_mem_uniformity_sets [`hs₁])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor
                     "⟨"
                     [`t
                      ","
                      `ht
                      ","
                      (Term.paren
                       "("
                       [`prod_t
                        [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                       ")")]
                     "⟩")
                    []
                    []
                    ":="
                    (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hg₁ []]
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                     ":="
                     («term_$__»
                      (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                      "$"
                      (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hg₂ []]
                      [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                      ":="
                      («term_$__»
                       (Term.app `mem_lift [`hs₂])
                       "$"
                       (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hg []]
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_∈_»
                          (Term.app
                           `Set.Prod
                           [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                          " ∈ "
                          (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                       ":="
                       (Term.app
                        (Term.explicit "@" `prod_mem_prod)
                        [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                     []
                     (Term.app
                      (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                      [`hg
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                          (Term.anonymousCtor
                           "⟨"
                           [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                            ","
                            (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                           "⟩")]
                         "=>"
                         (Term.have
                          "have"
                          (Term.haveDecl
                           (Term.haveIdDecl
                            []
                            [(Term.typeSpec
                              ":"
                              (Init.Core.«term_∈_»
                               (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                               " ∈ "
                               (Term.app `Set.Prod [`t `t])))]
                            ":="
                            (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                          []
                          («term_$__»
                           `comp_s₁
                           "$"
                           («term_$__»
                            (Term.app `prod_mk_mem_comp_rel [`hc₁])
                            "$"
                            («term_$__»
                             `comp_s₂
                             "$"
                             (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
            "⟩")))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
            ":="
            (Term.app
             (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
             [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor
              "⟨"
              [`x
               ","
               (Term.paren
                "("
                [`hx
                 [(Term.typeAscription
                   ":"
                   («term_≤_»
                    (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                    "≤"
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
                ")")]
              "⟩")
             []
             []
             ":="
             (Term.app `h [(Term.hole "_") `this])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
              ":="
              (Term.app
               (Term.proj
                (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
                "."
                `mp)
               [`hx])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
               ":="
               (Term.app `this.mono [`map_comap_le])))
             []
             (Term.anonymousCtor
              "⟨"
              [`x
               ","
               (calc
                "calc"
                [(calcStep
                  («term_≤_» `f "≤" `g)
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                 (calcStep
                  («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                  ":="
                  (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
              "⟩"))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`mp₀ []]
     [(Term.typeSpec ":" (Term.app `Monotone [`p]))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a `b `h `t `s] []) (Term.anonymousCtor "⟨" [`x "," `xs "," `xa] "⟩")]
       "=>"
       (Term.anonymousCtor "⟨" [`x "," `xs "," (Term.app `h [`xa])] "⟩")))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`mp₁ []]
      [(Term.typeSpec
        ":"
        (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
        "=>"
        (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
       ":="
       («term_$__»
        `le_infi
        "$"
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`s] [])]
          "=>"
          («term_$__»
           `le_infi
           "$"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`hs] [])]
             "=>"
             («term_$__»
              `le_infi
              "$"
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`t] [])]
                "=>"
                («term_$__»
                 `le_infi
                 "$"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`ht] [])]
                   "=>"
                   («term_$__»
                    (Term.proj `le_principal_iff "." `mpr)
                    "$"
                    («term_$__»
                     (Term.app `mem_of_superset [`ht])
                     "$"
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`x `hx] [])]
                       "=>"
                       (Term.anonymousCtor
                        "⟨"
                        [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                        "⟩")))))))))))))))))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
         ":="
         («term_$__»
          `comap_ne_bot
          "$"
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`t `ht] [])]
            "=>"
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
               []
               []
               ":="
               (Term.app
                (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
                [`ht])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
                []
                []
                ":="
                (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor
                  "⟨"
                  [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                  "⟩")
                 []
                 []
                 ":="
                 (Term.app `hf.left.nonempty_of_mem [`ht''])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₀ []]
                  [(Term.typeSpec
                    ":"
                    (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                  ":="
                  (Term.app `dense.nhds_within_ne_bot [`x])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₁ []]
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Set.«term{_|_}»
                       "{"
                       `y
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                       "}")
                      " ∈ "
                      (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                   ":="
                   («term_$__»
                    (Term.app
                     (Term.explicit "@" `mem_inf_of_left)
                     [`α
                      (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                      (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                      (Term.hole "_")])
                    "$"
                    (Term.app `mem_nhds_left [`x `ht']))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h₂ []]
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Term.app `range [`m])
                       " ∈ "
                       (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                    ":="
                    («term_$__»
                     (Term.app
                      (Term.explicit "@" `mem_inf_of_right)
                      [`α
                       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                       (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                       (Term.hole "_")])
                     "$"
                     (Term.app `subset.refl [(Term.hole "_")]))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_»
                        (Init.Core.«term_∩_»
                         (Set.«term{_|_}»
                          "{"
                          `y
                          "|"
                          (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                          "}")
                         " ∩ "
                         (Term.app `range [`m]))
                        " ∈ "
                        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                     ":="
                     (Term.app
                      (Term.explicit "@" `inter_mem)
                      [`α
                       (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                       (Term.hole "_")
                       (Term.hole "_")
                       `h₁
                       `h₂])))
                   []
                   (Term.let
                    "let"
                    (Term.letDecl
                     (Term.letPatDecl
                      (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                      []
                      []
                      ":="
                      (Term.app `h₀.nonempty_of_mem [`this])))
                    []
                    (Term.anonymousCtor
                     "⟨"
                     [`b
                      ","
                      (Term.subst
                       `b_eq.symm
                       "▸"
                       [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                     "⟩"))))))))))))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
          ":="
          (Term.anonymousCtor
           "⟨"
           [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
            ","
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`s `hs] [])]
              "=>"
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor
                  "⟨"
                  [`s₁
                   ","
                   `hs₁
                   ","
                   (Term.paren
                    "("
                    [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                    ")")]
                  "⟩")
                 []
                 []
                 ":="
                 (Term.app `comp_mem_uniformity_sets [`hs])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor
                   "⟨"
                   [`s₂
                    ","
                    `hs₂
                    ","
                    (Term.paren
                     "("
                     [`comp_s₂
                      [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                     ")")]
                   "⟩")
                  []
                  []
                  ":="
                  (Term.app `comp_mem_uniformity_sets [`hs₁])))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor
                    "⟨"
                    [`t
                     ","
                     `ht
                     ","
                     (Term.paren
                      "("
                      [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                      ")")]
                    "⟩")
                   []
                   []
                   ":="
                   (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hg₁ []]
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                    ":="
                    («term_$__»
                     (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                     "$"
                     (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hg₂ []]
                     [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                     ":="
                     («term_$__»
                      (Term.app `mem_lift [`hs₂])
                      "$"
                      (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hg []]
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_»
                         (Term.app
                          `Set.Prod
                          [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                         " ∈ "
                         (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                      ":="
                      (Term.app
                       (Term.explicit "@" `prod_mem_prod)
                       [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                    []
                    (Term.app
                     (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                     [`hg
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                         (Term.anonymousCtor
                          "⟨"
                          [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                           ","
                           (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                          "⟩")]
                        "=>"
                        (Term.have
                         "have"
                         (Term.haveDecl
                          (Term.haveIdDecl
                           []
                           [(Term.typeSpec
                             ":"
                             (Init.Core.«term_∈_»
                              (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                              " ∈ "
                              (Term.app `Set.Prod [`t `t])))]
                           ":="
                           (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                         []
                         («term_$__»
                          `comp_s₁
                          "$"
                          («term_$__»
                           (Term.app `prod_mk_mem_comp_rel [`hc₁])
                           "$"
                           («term_$__»
                            `comp_s₂
                            "$"
                            (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
           "⟩")))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
           ":="
           (Term.app
            (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
            [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor
             "⟨"
             [`x
              ","
              (Term.paren
               "("
               [`hx
                [(Term.typeAscription
                  ":"
                  («term_≤_»
                   (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                   "≤"
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
               ")")]
             "⟩")
            []
            []
            ":="
            (Term.app `h [(Term.hole "_") `this])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
             ":="
             (Term.app
              (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
              [`hx])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
              ":="
              (Term.app `this.mono [`map_comap_le])))
            []
            (Term.anonymousCtor
             "⟨"
             [`x
              ","
              (calc
               "calc"
               [(calcStep
                 («term_≤_» `f "≤" `g)
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
                (calcStep
                 («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                 ":="
                 (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
             "⟩")))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`mp₁ []]
     [(Term.typeSpec
       ":"
       (Term.forall "∀" [(Term.implicitBinder "{" [`s] [] "}")] "," (Term.app `Monotone [(Term.app `p [`s])])))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`s `a `b `h `x] []) (Term.anonymousCtor "⟨" [`y "," `ya "," `yxs] "⟩")]
       "=>"
       (Term.anonymousCtor "⟨" [`y "," (Term.app `h [`ya]) "," `yxs] "⟩")))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
      ":="
      («term_$__»
       `le_infi
       "$"
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`s] [])]
         "=>"
         («term_$__»
          `le_infi
          "$"
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`hs] [])]
            "=>"
            («term_$__»
             `le_infi
             "$"
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`t] [])]
               "=>"
               («term_$__»
                `le_infi
                "$"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`ht] [])]
                  "=>"
                  («term_$__»
                   (Term.proj `le_principal_iff "." `mpr)
                   "$"
                   («term_$__»
                    (Term.app `mem_of_superset [`ht])
                    "$"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`x `hx] [])]
                      "=>"
                      (Term.anonymousCtor
                       "⟨"
                       [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                       "⟩")))))))))))))))))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
        ":="
        («term_$__»
         `comap_ne_bot
         "$"
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`t `ht] [])]
           "=>"
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
              []
              []
              ":="
              (Term.app
               (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
               [`ht])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
               []
               []
               ":="
               (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app `hf.left.nonempty_of_mem [`ht''])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₀ []]
                 [(Term.typeSpec
                   ":"
                   (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                 ":="
                 (Term.app `dense.nhds_within_ne_bot [`x])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₁ []]
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Set.«term{_|_}»
                      "{"
                      `y
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                      "}")
                     " ∈ "
                     (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                  ":="
                  («term_$__»
                   (Term.app
                    (Term.explicit "@" `mem_inf_of_left)
                    [`α
                     (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                     (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                     (Term.hole "_")])
                   "$"
                   (Term.app `mem_nhds_left [`x `ht']))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`h₂ []]
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.app `range [`m])
                      " ∈ "
                      (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                   ":="
                   («term_$__»
                    (Term.app
                     (Term.explicit "@" `mem_inf_of_right)
                     [`α
                      (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                      (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                      (Term.hole "_")])
                    "$"
                    (Term.app `subset.refl [(Term.hole "_")]))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Init.Core.«term_∩_»
                        (Set.«term{_|_}»
                         "{"
                         `y
                         "|"
                         (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                         "}")
                        " ∩ "
                        (Term.app `range [`m]))
                       " ∈ "
                       (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                    ":="
                    (Term.app
                     (Term.explicit "@" `inter_mem)
                     [`α
                      (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                      (Term.hole "_")
                      (Term.hole "_")
                      `h₁
                      `h₂])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                     []
                     []
                     ":="
                     (Term.app `h₀.nonempty_of_mem [`this])))
                   []
                   (Term.anonymousCtor
                    "⟨"
                    [`b
                     ","
                     (Term.subst
                      `b_eq.symm
                      "▸"
                      [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                    "⟩"))))))))))))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
         ":="
         (Term.anonymousCtor
          "⟨"
          [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
           ","
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`s `hs] [])]
             "=>"
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`s₁
                  ","
                  `hs₁
                  ","
                  (Term.paren
                   "("
                   [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                   ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app `comp_mem_uniformity_sets [`hs])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor
                  "⟨"
                  [`s₂
                   ","
                   `hs₂
                   ","
                   (Term.paren
                    "("
                    [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                    ")")]
                  "⟩")
                 []
                 []
                 ":="
                 (Term.app `comp_mem_uniformity_sets [`hs₁])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor
                   "⟨"
                   [`t
                    ","
                    `ht
                    ","
                    (Term.paren
                     "("
                     [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                     ")")]
                   "⟩")
                  []
                  []
                  ":="
                  (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hg₁ []]
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                   ":="
                   («term_$__»
                    (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                    "$"
                    (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hg₂ []]
                    [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                    ":="
                    («term_$__»
                     (Term.app `mem_lift [`hs₂])
                     "$"
                     (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hg []]
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_»
                        (Term.app
                         `Set.Prod
                         [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                        " ∈ "
                        (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                     ":="
                     (Term.app
                      (Term.explicit "@" `prod_mem_prod)
                      [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                   []
                   (Term.app
                    (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                    [`hg
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                        (Term.anonymousCtor
                         "⟨"
                         [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                          ","
                          (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                         "⟩")]
                       "=>"
                       (Term.have
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          []
                          [(Term.typeSpec
                            ":"
                            (Init.Core.«term_∈_»
                             (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                             " ∈ "
                             (Term.app `Set.Prod [`t `t])))]
                          ":="
                          (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                        []
                        («term_$__»
                         `comp_s₁
                         "$"
                         («term_$__»
                          (Term.app `prod_mk_mem_comp_rel [`hc₁])
                          "$"
                          («term_$__»
                           `comp_s₂
                           "$"
                           (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
          "⟩")))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
          ":="
          (Term.app
           (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
           [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor
            "⟨"
            [`x
             ","
             (Term.paren
              "("
              [`hx
               [(Term.typeAscription
                 ":"
                 («term_≤_»
                  (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                  "≤"
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
              ")")]
            "⟩")
           []
           []
           ":="
           (Term.app `h [(Term.hole "_") `this])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
            ":="
            (Term.app
             (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
             [`hx])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
             ":="
             (Term.app `this.mono [`map_comap_le])))
           []
           (Term.anonymousCtor
            "⟨"
            [`x
             ","
             (calc
              "calc"
              [(calcStep
                («term_≤_» `f "≤" `g)
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
               (calcStep
                («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
                ":="
                (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
            "⟩"))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" («term_≤_» `f "≤" `g))]
     ":="
     («term_$__»
      `le_infi
      "$"
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`s] [])]
        "=>"
        («term_$__»
         `le_infi
         "$"
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`hs] [])]
           "=>"
           («term_$__»
            `le_infi
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`t] [])]
              "=>"
              («term_$__»
               `le_infi
               "$"
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`ht] [])]
                 "=>"
                 («term_$__»
                  (Term.proj `le_principal_iff "." `mpr)
                  "$"
                  («term_$__»
                   (Term.app `mem_of_superset [`ht])
                   "$"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`x `hx] [])]
                     "=>"
                     (Term.anonymousCtor
                      "⟨"
                      [`x "," `hx "," (Term.app `refl_mem_uniformity [`hs])]
                      "⟩")))))))))))))))))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
       ":="
       («term_$__»
        `comap_ne_bot
        "$"
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`t `ht] [])]
          "=>"
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
             []
             []
             ":="
             (Term.app
              (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
              [`ht])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
              []
              []
              ":="
              (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor
                "⟨"
                [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
                "⟩")
               []
               []
               ":="
               (Term.app `hf.left.nonempty_of_mem [`ht''])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₀ []]
                [(Term.typeSpec
                  ":"
                  (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
                ":="
                (Term.app `dense.nhds_within_ne_bot [`x])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₁ []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Set.«term{_|_}»
                     "{"
                     `y
                     "|"
                     (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                     "}")
                    " ∈ "
                    (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                 ":="
                 («term_$__»
                  (Term.app
                   (Term.explicit "@" `mem_inf_of_left)
                   [`α
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                    (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                    (Term.hole "_")])
                  "$"
                  (Term.app `mem_nhds_left [`x `ht']))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h₂ []]
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.app `range [`m])
                     " ∈ "
                     (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                  ":="
                  («term_$__»
                   (Term.app
                    (Term.explicit "@" `mem_inf_of_right)
                    [`α
                     (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                     (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                     (Term.hole "_")])
                   "$"
                   (Term.app `subset.refl [(Term.hole "_")]))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Init.Core.«term_∩_»
                       (Set.«term{_|_}»
                        "{"
                        `y
                        "|"
                        (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                        "}")
                       " ∩ "
                       (Term.app `range [`m]))
                      " ∈ "
                      (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                   ":="
                   (Term.app
                    (Term.explicit "@" `inter_mem)
                    [`α
                     (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                     (Term.hole "_")
                     (Term.hole "_")
                     `h₁
                     `h₂])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                    []
                    []
                    ":="
                    (Term.app `h₀.nonempty_of_mem [`this])))
                  []
                  (Term.anonymousCtor
                   "⟨"
                   [`b
                    ","
                    (Term.subst
                     `b_eq.symm
                     "▸"
                     [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                   "⟩"))))))))))))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
        ":="
        (Term.anonymousCtor
         "⟨"
         [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
          ","
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`s `hs] [])]
            "=>"
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor
                "⟨"
                [`s₁
                 ","
                 `hs₁
                 ","
                 (Term.paren
                  "("
                  [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                  ")")]
                "⟩")
               []
               []
               ":="
               (Term.app `comp_mem_uniformity_sets [`hs])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`s₂
                  ","
                  `hs₂
                  ","
                  (Term.paren
                   "("
                   [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                   ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app `comp_mem_uniformity_sets [`hs₁])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor
                  "⟨"
                  [`t
                   ","
                   `ht
                   ","
                   (Term.paren
                    "("
                    [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                    ")")]
                  "⟩")
                 []
                 []
                 ":="
                 (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hg₁ []]
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                  ":="
                  («term_$__»
                   (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                   "$"
                   (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hg₂ []]
                   [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                   ":="
                   («term_$__»
                    (Term.app `mem_lift [`hs₂])
                    "$"
                    (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hg []]
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_»
                       (Term.app
                        `Set.Prod
                        [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                       " ∈ "
                       (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                    ":="
                    (Term.app
                     (Term.explicit "@" `prod_mem_prod)
                     [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                  []
                  (Term.app
                   (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                   [`hg
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                       (Term.anonymousCtor
                        "⟨"
                        [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                         ","
                         (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                        "⟩")]
                      "=>"
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         []
                         [(Term.typeSpec
                           ":"
                           (Init.Core.«term_∈_»
                            (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                            " ∈ "
                            (Term.app `Set.Prod [`t `t])))]
                         ":="
                         (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                       []
                       («term_$__»
                        `comp_s₁
                        "$"
                        («term_$__»
                         (Term.app `prod_mk_mem_comp_rel [`hc₁])
                         "$"
                         («term_$__»
                          `comp_s₂
                          "$"
                          (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
         "⟩")))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
         ":="
         (Term.app
          (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
          [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`x
            ","
            (Term.paren
             "("
             [`hx
              [(Term.typeAscription
                ":"
                («term_≤_»
                 (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                 "≤"
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
             ")")]
           "⟩")
          []
          []
          ":="
          (Term.app `h [(Term.hole "_") `this])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
           ":="
           (Term.app
            (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
            [`hx])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
            ":="
            (Term.app `this.mono [`map_comap_le])))
          []
          (Term.anonymousCtor
           "⟨"
           [`x
            ","
            (calc
             "calc"
             [(calcStep
               («term_≤_» `f "≤" `g)
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
              (calcStep
               («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
               ":="
               (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
           "⟩")))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ne_bot [`g]))] ":=" (Term.app `hf.left.mono [`this])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
      ":="
      («term_$__»
       `comap_ne_bot
       "$"
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`t `ht] [])]
         "=>"
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
            []
            []
            ":="
            (Term.app
             (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
             [`ht])))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
             []
             []
             ":="
             (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
               "⟩")
              []
              []
              ":="
              (Term.app `hf.left.nonempty_of_mem [`ht''])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₀ []]
               [(Term.typeSpec
                 ":"
                 (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
               ":="
               (Term.app `dense.nhds_within_ne_bot [`x])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₁ []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Set.«term{_|_}»
                    "{"
                    `y
                    "|"
                    (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                    "}")
                   " ∈ "
                   (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                ":="
                («term_$__»
                 (Term.app
                  (Term.explicit "@" `mem_inf_of_left)
                  [`α
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                   (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                   (Term.hole "_")])
                 "$"
                 (Term.app `mem_nhds_left [`x `ht']))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h₂ []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.app `range [`m])
                    " ∈ "
                    (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                 ":="
                 («term_$__»
                  (Term.app
                   (Term.explicit "@" `mem_inf_of_right)
                   [`α
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                    (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                    (Term.hole "_")])
                  "$"
                  (Term.app `subset.refl [(Term.hole "_")]))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Init.Core.«term_∩_»
                      (Set.«term{_|_}»
                       "{"
                       `y
                       "|"
                       (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                       "}")
                      " ∩ "
                      (Term.app `range [`m]))
                     " ∈ "
                     (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                  ":="
                  (Term.app
                   (Term.explicit "@" `inter_mem)
                   [`α
                    (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                    (Term.hole "_")
                    (Term.hole "_")
                    `h₁
                    `h₂])))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                   []
                   []
                   ":="
                   (Term.app `h₀.nonempty_of_mem [`this])))
                 []
                 (Term.anonymousCtor
                  "⟨"
                  [`b
                   ","
                   (Term.subst
                    `b_eq.symm
                    "▸"
                    [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                  "⟩"))))))))))))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
       ":="
       (Term.anonymousCtor
        "⟨"
        [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
         ","
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`s `hs] [])]
           "=>"
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`s₁
                ","
                `hs₁
                ","
                (Term.paren
                 "("
                 [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                 ")")]
               "⟩")
              []
              []
              ":="
              (Term.app `comp_mem_uniformity_sets [`hs])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor
                "⟨"
                [`s₂
                 ","
                 `hs₂
                 ","
                 (Term.paren
                  "("
                  [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                  ")")]
                "⟩")
               []
               []
               ":="
               (Term.app `comp_mem_uniformity_sets [`hs₁])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`t
                  ","
                  `ht
                  ","
                  (Term.paren
                   "("
                   [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                   ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hg₁ []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                 ":="
                 («term_$__»
                  (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                  "$"
                  (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hg₂ []]
                  [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                  ":="
                  («term_$__»
                   (Term.app `mem_lift [`hs₂])
                   "$"
                   (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hg []]
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.app
                       `Set.Prod
                       [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                      " ∈ "
                      (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                   ":="
                   (Term.app
                    (Term.explicit "@" `prod_mem_prod)
                    [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                 []
                 (Term.app
                  (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                  [`hg
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                      (Term.anonymousCtor
                       "⟨"
                       [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                        ","
                        (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                       "⟩")]
                     "=>"
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        []
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_∈_»
                           (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                           " ∈ "
                           (Term.app `Set.Prod [`t `t])))]
                        ":="
                        (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                      []
                      («term_$__»
                       `comp_s₁
                       "$"
                       («term_$__»
                        (Term.app `prod_mk_mem_comp_rel [`hc₁])
                        "$"
                        («term_$__»
                         `comp_s₂
                         "$"
                         (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
        "⟩")))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
        ":="
        (Term.app
         (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
         [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`x
           ","
           (Term.paren
            "("
            [`hx
             [(Term.typeAscription
               ":"
               («term_≤_»
                (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
                "≤"
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app `h [(Term.hole "_") `this])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
          ":="
          (Term.app
           (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
           [`hx])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
           ":="
           (Term.app `this.mono [`map_comap_le])))
         []
         (Term.anonymousCtor
          "⟨"
          [`x
           ","
           (calc
            "calc"
            [(calcStep
              («term_≤_» `f "≤" `g)
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
             (calcStep
              («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
              ":="
              (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
          "⟩"))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Term.app `ne_bot [(Term.app `comap [`m `g])]))]
     ":="
     («term_$__»
      `comap_ne_bot
      "$"
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`t `ht] [])]
        "=>"
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
           []
           []
           ":="
           (Term.app
            (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
            [`ht])))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
            []
            []
            ":="
            (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor
              "⟨"
              [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
              "⟩")
             []
             []
             ":="
             (Term.app `hf.left.nonempty_of_mem [`ht''])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h₀ []]
              [(Term.typeSpec
                ":"
                (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
              ":="
              (Term.app `dense.nhds_within_ne_bot [`x])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₁ []]
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Set.«term{_|_}»
                   "{"
                   `y
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                   "}")
                  " ∈ "
                  (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
               ":="
               («term_$__»
                (Term.app
                 (Term.explicit "@" `mem_inf_of_left)
                 [`α
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                  (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                  (Term.hole "_")])
                "$"
                (Term.app `mem_nhds_left [`x `ht']))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₂ []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.app `range [`m])
                   " ∈ "
                   (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                ":="
                («term_$__»
                 (Term.app
                  (Term.explicit "@" `mem_inf_of_right)
                  [`α
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                   (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                   (Term.hole "_")])
                 "$"
                 (Term.app `subset.refl [(Term.hole "_")]))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Init.Core.«term_∩_»
                     (Set.«term{_|_}»
                      "{"
                      `y
                      "|"
                      (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                      "}")
                     " ∩ "
                     (Term.app `range [`m]))
                    " ∈ "
                    (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
                 ":="
                 (Term.app
                  (Term.explicit "@" `inter_mem)
                  [`α
                   (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                   (Term.hole "_")
                   (Term.hole "_")
                   `h₁
                   `h₂])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
                  []
                  []
                  ":="
                  (Term.app `h₀.nonempty_of_mem [`this])))
                []
                (Term.anonymousCtor
                 "⟨"
                 [`b
                  ","
                  (Term.subst
                   `b_eq.symm
                   "▸"
                   [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
                 "⟩"))))))))))))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
      ":="
      (Term.anonymousCtor
       "⟨"
       [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`s `hs] [])]
          "=>"
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor
              "⟨"
              [`s₁
               ","
               `hs₁
               ","
               (Term.paren
                "("
                [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
                ")")]
              "⟩")
             []
             []
             ":="
             (Term.app `comp_mem_uniformity_sets [`hs])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`s₂
                ","
                `hs₂
                ","
                (Term.paren
                 "("
                 [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                 ")")]
               "⟩")
              []
              []
              ":="
              (Term.app `comp_mem_uniformity_sets [`hs₁])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor
                "⟨"
                [`t
                 ","
                 `ht
                 ","
                 (Term.paren
                  "("
                  [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                  ")")]
                "⟩")
               []
               []
               ":="
               (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hg₁ []]
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
                ":="
                («term_$__»
                 (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                 "$"
                 (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hg₂ []]
                 [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                 ":="
                 («term_$__»
                  (Term.app `mem_lift [`hs₂])
                  "$"
                  (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hg []]
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.app
                      `Set.Prod
                      [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                     " ∈ "
                     (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                  ":="
                  (Term.app
                   (Term.explicit "@" `prod_mem_prod)
                   [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
                []
                (Term.app
                 (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                 [`hg
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                     (Term.anonymousCtor
                      "⟨"
                      [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                       ","
                       (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                      "⟩")]
                    "=>"
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_∈_»
                          (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                          " ∈ "
                          (Term.app `Set.Prod [`t `t])))]
                       ":="
                       (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                     []
                     («term_$__»
                      `comp_s₁
                      "$"
                      («term_$__»
                       (Term.app `prod_mk_mem_comp_rel [`hc₁])
                       "$"
                       («term_$__»
                        `comp_s₂
                        "$"
                        (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
       "⟩")))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
       ":="
       (Term.app
        (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
        [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor
         "⟨"
         [`x
          ","
          (Term.paren
           "("
           [`hx
            [(Term.typeAscription
              ":"
              («term_≤_»
               (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
               "≤"
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
           ")")]
         "⟩")
        []
        []
        ":="
        (Term.app `h [(Term.hole "_") `this])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
         ":="
         (Term.app
          (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
          [`hx])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
          ":="
          (Term.app `this.mono [`map_comap_le])))
        []
        (Term.anonymousCtor
         "⟨"
         [`x
          ","
          (calc
           "calc"
           [(calcStep
             («term_≤_» `f "≤" `g)
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
            (calcStep
             («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
             ":="
             (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
         "⟩")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Term.app `Cauchy [`g]))]
     ":="
     (Term.anonymousCtor
      "⟨"
      [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
       ","
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`s `hs] [])]
         "=>"
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor
             "⟨"
             [`s₁
              ","
              `hs₁
              ","
              (Term.paren
               "("
               [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
               ")")]
             "⟩")
            []
            []
            ":="
            (Term.app `comp_mem_uniformity_sets [`hs])))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor
              "⟨"
              [`s₂
               ","
               `hs₂
               ","
               (Term.paren
                "("
                [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
                ")")]
              "⟩")
             []
             []
             ":="
             (Term.app `comp_mem_uniformity_sets [`hs₁])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`t
                ","
                `ht
                ","
                (Term.paren
                 "("
                 [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
                 ")")]
               "⟩")
              []
              []
              ":="
              (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hg₁ []]
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
               ":="
               («term_$__»
                (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
                "$"
                (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hg₂ []]
                [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
                ":="
                («term_$__»
                 (Term.app `mem_lift [`hs₂])
                 "$"
                 (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hg []]
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.app
                     `Set.Prod
                     [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                    " ∈ "
                    (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
                 ":="
                 (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
               []
               (Term.app
                (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
                [`hg
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                    (Term.anonymousCtor
                     "⟨"
                     [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                      ","
                      (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                     "⟩")]
                   "=>"
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_»
                         (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                         " ∈ "
                         (Term.app `Set.Prod [`t `t])))]
                      ":="
                      (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                    []
                    («term_$__»
                     `comp_s₁
                     "$"
                     («term_$__»
                      (Term.app `prod_mk_mem_comp_rel [`hc₁])
                      "$"
                      («term_$__»
                       `comp_s₂
                       "$"
                       (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
      "⟩")))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
      ":="
      (Term.app
       (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
       [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`x
         ","
         (Term.paren
          "("
          [`hx
           [(Term.typeAscription
             ":"
             («term_≤_»
              (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
              "≤"
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app `h [(Term.hole "_") `this])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
        ":="
        (Term.app
         (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
         [`hx])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
         ":="
         (Term.app `this.mono [`map_comap_le])))
       []
       (Term.anonymousCtor
        "⟨"
        [`x
         ","
         (calc
          "calc"
          [(calcStep
            («term_≤_» `f "≤" `g)
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
           (calcStep
            («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
            ":="
            (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
        "⟩"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])]))]
     ":="
     (Term.app
      (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
      [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`x
        ","
        (Term.paren
         "("
         [`hx
          [(Term.typeAscription
            ":"
            («term_≤_»
             (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
             "≤"
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app `h [(Term.hole "_") `this])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
       ":="
       (Term.app
        (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
        [`hx])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
        ":="
        (Term.app `this.mono [`map_comap_le])))
      []
      (Term.anonymousCtor
       "⟨"
       [`x
        ","
        (calc
         "calc"
         [(calcStep
           («term_≤_» `f "≤" `g)
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
          (calcStep
           («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
           ":="
           (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
       "⟩")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`x
       ","
       (Term.paren
        "("
        [`hx
         [(Term.typeAscription
           ":"
           («term_≤_»
            (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
            "≤"
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app `h [(Term.hole "_") `this])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
      ":="
      (Term.app
       (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
       [`hx])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
       ":="
       (Term.app `this.mono [`map_comap_le])))
     []
     (Term.anonymousCtor
      "⟨"
      [`x
       ","
       (calc
        "calc"
        [(calcStep
          («term_≤_» `f "≤" `g)
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
         (calcStep
          («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
          ":="
          (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])]))]
     ":="
     (Term.app
      (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
      [`hx])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))]
      ":="
      (Term.app `this.mono [`map_comap_le])))
    []
    (Term.anonymousCtor
     "⟨"
     [`x
      ","
      (calc
       "calc"
       [(calcStep
         («term_≤_» `f "≤" `g)
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
        (calcStep
         («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
         ":="
         (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl [] [(Term.typeSpec ":" (Term.app `ClusterPt [`x `g]))] ":=" (Term.app `this.mono [`map_comap_le])))
   []
   (Term.anonymousCtor
    "⟨"
    [`x
     ","
     (calc
      "calc"
      [(calcStep
        («term_≤_» `f "≤" `g)
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
       (calcStep
        («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
        ":="
        (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`x
    ","
    (calc
     "calc"
     [(calcStep
       («term_≤_» `f "≤" `g)
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
      (calcStep
       («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
       ":="
       (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (calc
   "calc"
   [(calcStep
     («term_≤_» `f "≤" `g)
     ":="
     (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])]))))
    (calcStep
     («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
     ":="
     (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `le_nhds_of_cauchy_adhp [(«term‹_›» "‹" (Term.app `Cauchy [`g]) "›") `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term‹_›» "‹" (Term.app `Cauchy [`g]) "›")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Cauchy [`g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_nhds_of_cauchy_adhp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (Term.hole "_") "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic "by" (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.assumption "assumption") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.assumption "assumption")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.assumption', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» `f "≤" `g)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `this.mono [`map_comap_le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `map_comap_le
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `this.mono
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ClusterPt [`x `g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ClusterPt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
   [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])]) "." `mp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `le_nhds_iff_adhp_of_cauchy [(Term.app `this.map [`hm.uniform_continuous])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `this.map [`hm.uniform_continuous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm.uniform_continuous
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `this.map
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `this.map [`hm.uniform_continuous]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_nhds_iff_adhp_of_cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `le_nhds_iff_adhp_of_cauchy [(Term.paren "(" [(Term.app `this.map [`hm.uniform_continuous]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ClusterPt [`x (Term.app `map [`m (Term.app `Filter.comap [`m `g])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Filter.comap [`m `g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Filter.comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Filter.comap [`m `g]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `map
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `map [`m (Term.paren "(" [(Term.app `Filter.comap [`m `g]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ClusterPt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `h [(Term.hole "_") `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`x
    ","
    (Term.paren
     "("
     [`hx
      [(Term.typeAscription
        ":"
        («term_≤_»
         (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
         "≤"
         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`hx
    [(Term.typeAscription
      ":"
      («term_≤_»
       (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
       "≤"
       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_» (Term.app `map [`m (Term.app `Filter.comap [`m `g])]) "≤" (Term.app (Topology.Basic.term𝓝 "𝓝") [`x]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `map [`m (Term.app `Filter.comap [`m `g])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Filter.comap [`m `g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Filter.comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Filter.comap [`m `g]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `map
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
   [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) («term‹_›» "‹" (Term.hole "_") "›")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term‹_›» "‹" (Term.hole "_") "›")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.app `le_of_eqₓ [`hm.comap_uniformity])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm.comap_uniformity
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `le_of_eqₓ
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `le_of_eqₓ [`hm.comap_uniformity]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj («term‹_›» "‹" (Term.app `Cauchy [`g]) "›") "." `comap')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term‹_›» "‹" (Term.app `Cauchy [`g]) "›")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Cauchy [`g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Cauchy [(Term.app `Filter.comap [`m `g])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Filter.comap [`m `g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Filter.comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Filter.comap [`m `g]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.anonymousCtor
   "⟨"
   [(«term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
    ","
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`s `hs] [])]
      "=>"
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`s₁
           ","
           `hs₁
           ","
           (Term.paren
            "("
            [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app `comp_mem_uniformity_sets [`hs])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`s₂
            ","
            `hs₂
            ","
            (Term.paren
             "("
             [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
             ")")]
           "⟩")
          []
          []
          ":="
          (Term.app `comp_mem_uniformity_sets [`hs₁])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor
            "⟨"
            [`t
             ","
             `ht
             ","
             (Term.paren
              "("
              [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
              ")")]
            "⟩")
           []
           []
           ":="
           (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hg₁ []]
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
            ":="
            («term_$__»
             (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
             "$"
             (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hg₂ []]
             [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
             ":="
             («term_$__»
              (Term.app `mem_lift [`hs₂])
              "$"
              (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hg []]
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
                 " ∈ "
                 (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
              ":="
              (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
            []
            (Term.app
             (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
             [`hg
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
                 (Term.anonymousCtor
                  "⟨"
                  [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                   ","
                   (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                  "⟩")]
                "=>"
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                      " ∈ "
                      (Term.app `Set.Prod [`t `t])))]
                   ":="
                   (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
                 []
                 («term_$__»
                  `comp_s₁
                  "$"
                  («term_$__»
                   (Term.app `prod_mk_mem_comp_rel [`hc₁])
                   "$"
                   («term_$__»
                    `comp_s₂
                    "$"
                    (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`s `hs] [])]
    "=>"
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`s₁
         ","
         `hs₁
         ","
         (Term.paren
          "("
          [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app `comp_mem_uniformity_sets [`hs])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor
         "⟨"
         [`s₂
          ","
          `hs₂
          ","
          (Term.paren
           "("
           [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
           ")")]
         "⟩")
        []
        []
        ":="
        (Term.app `comp_mem_uniformity_sets [`hs₁])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`t
           ","
           `ht
           ","
           (Term.paren
            "("
            [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hg₁ []]
          [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
          ":="
          («term_$__»
           (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
           "$"
           (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hg₂ []]
           [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
           ":="
           («term_$__»
            (Term.app `mem_lift [`hs₂])
            "$"
            (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hg []]
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
               " ∈ "
               (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
            ":="
            (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
          []
          (Term.app
           (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
           [`hg
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
               (Term.anonymousCtor
                "⟨"
                [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
                 ","
                 (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
                "⟩")]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_»
                    (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                    " ∈ "
                    (Term.app `Set.Prod [`t `t])))]
                 ":="
                 (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
               []
               («term_$__»
                `comp_s₁
                "$"
                («term_$__»
                 (Term.app `prod_mk_mem_comp_rel [`hc₁])
                 "$"
                 («term_$__»
                  `comp_s₂
                  "$"
                  (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`s₁
       ","
       `hs₁
       ","
       (Term.paren
        "("
        [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app `comp_mem_uniformity_sets [`hs])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`s₂
        ","
        `hs₂
        ","
        (Term.paren
         "("
         [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app `comp_mem_uniformity_sets [`hs₁])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`t
         ","
         `ht
         ","
         (Term.paren
          "("
          [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hg₁ []]
        [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
        ":="
        («term_$__»
         (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
         "$"
         (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hg₂ []]
         [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
         ":="
         («term_$__»
          (Term.app `mem_lift [`hs₂])
          "$"
          (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hg []]
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
             " ∈ "
             (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
          ":="
          (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
        []
        (Term.app
         (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
         [`hg
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
             (Term.anonymousCtor
              "⟨"
              [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
               ","
               (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
              "⟩")]
            "=>"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                  " ∈ "
                  (Term.app `Set.Prod [`t `t])))]
               ":="
               (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
             []
             («term_$__»
              `comp_s₁
              "$"
              («term_$__»
               (Term.app `prod_mk_mem_comp_rel [`hc₁])
               "$"
               («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`s₂
       ","
       `hs₂
       ","
       (Term.paren
        "("
        [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app `comp_mem_uniformity_sets [`hs₁])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`t
        ","
        `ht
        ","
        (Term.paren
         "("
         [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hg₁ []]
       [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
       ":="
       («term_$__»
        (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
        "$"
        (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hg₂ []]
        [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
        ":="
        («term_$__»
         (Term.app `mem_lift [`hs₂])
         "$"
         (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hg []]
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
            " ∈ "
            (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
         ":="
         (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
       []
       (Term.app
        (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
        [`hg
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
            (Term.anonymousCtor
             "⟨"
             [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
              ","
              (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
             "⟩")]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                 " ∈ "
                 (Term.app `Set.Prod [`t `t])))]
              ":="
              (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
            []
            («term_$__»
             `comp_s₁
             "$"
             («term_$__»
              (Term.app `prod_mk_mem_comp_rel [`hc₁])
              "$"
              («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`t
       ","
       `ht
       ","
       (Term.paren
        "("
        [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hg₁ []]
      [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
      ":="
      («term_$__»
       (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
       "$"
       (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hg₂ []]
       [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
       ":="
       («term_$__»
        (Term.app `mem_lift [`hs₂])
        "$"
        (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`hg []]
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
           " ∈ "
           (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
        ":="
        (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
      []
      (Term.app
       (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
       [`hg
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
           (Term.anonymousCtor
            "⟨"
            [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
             ","
             (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
            "⟩")]
          "=>"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
                " ∈ "
                (Term.app `Set.Prod [`t `t])))]
             ":="
             (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
           []
           («term_$__»
            `comp_s₁
            "$"
            («term_$__»
             (Term.app `prod_mk_mem_comp_rel [`hc₁])
             "$"
             («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hg₁ []]
     [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g))]
     ":="
     («term_$__»
      (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
      "$"
      (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hg₂ []]
      [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
      ":="
      («term_$__»
       (Term.app `mem_lift [`hs₂])
       "$"
       (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`hg []]
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
          " ∈ "
          (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
       ":="
       (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
     []
     (Term.app
      (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
      [`hg
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
          (Term.anonymousCtor
           "⟨"
           [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
            ","
            (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
           "⟩")]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
               " ∈ "
               (Term.app `Set.Prod [`t `t])))]
            ":="
            (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
          []
          («term_$__»
           `comp_s₁
           "$"
           («term_$__»
            (Term.app `prod_mk_mem_comp_rel [`hc₁])
            "$"
            («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hg₂ []]
     [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g))]
     ":="
     («term_$__»
      (Term.app `mem_lift [`hs₂])
      "$"
      (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`hg []]
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
         " ∈ "
         (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
      ":="
      (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
    []
    (Term.app
     (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
     [`hg
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
         (Term.anonymousCtor
          "⟨"
          [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
           ","
           (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
          "⟩")]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
              " ∈ "
              (Term.app `Set.Prod [`t `t])))]
           ":="
           (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
         []
         («term_$__»
          `comp_s₁
          "$"
          («term_$__»
           (Term.app `prod_mk_mem_comp_rel [`hc₁])
           "$"
           («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`hg []]
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
        " ∈ "
        (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)))]
     ":="
     (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])))
   []
   (Term.app
    (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
    [`hg
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
        (Term.anonymousCtor
         "⟨"
         [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩") "," (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
         "⟩")]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
             " ∈ "
             (Term.app `Set.Prod [`t `t])))]
          ":="
          (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
        []
        («term_$__»
         `comp_s₁
         "$"
         («term_$__»
          (Term.app `prod_mk_mem_comp_rel [`hc₁])
          "$"
          («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
   [`hg
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
       (Term.anonymousCtor
        "⟨"
        [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩") "," (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
        "⟩")]
      "=>"
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
            " ∈ "
            (Term.app `Set.Prod [`t `t])))]
         ":="
         (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
       []
       («term_$__»
        `comp_s₁
        "$"
        («term_$__»
         (Term.app `prod_mk_mem_comp_rel [`hc₁])
         "$"
         («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.anonymousCtor "⟨" [`a "," `b] "⟩")
     (Term.anonymousCtor
      "⟨"
      [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩") "," (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
      "⟩")]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
          " ∈ "
          (Term.app `Set.Prod [`t `t])))]
       ":="
       (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
     []
     («term_$__»
      `comp_s₁
      "$"
      («term_$__»
       (Term.app `prod_mk_mem_comp_rel [`hc₁])
       "$"
       («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
        " ∈ "
        (Term.app `Set.Prod [`t `t])))]
     ":="
     (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")))
   []
   («term_$__»
    `comp_s₁
    "$"
    («term_$__»
     (Term.app `prod_mk_mem_comp_rel [`hc₁])
     "$"
     («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__»
   `comp_s₁
   "$"
   («term_$__»
    (Term.app `prod_mk_mem_comp_rel [`hc₁])
    "$"
    («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__»
   (Term.app `prod_mk_mem_comp_rel [`hc₁])
   "$"
   («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» `comp_s₂ "$" (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `prod_mk_mem_comp_rel [(Term.app `prod_t [`this]) `hc₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `prod_t [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `prod_t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `prod_t [`this]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `prod_mk_mem_comp_rel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `comp_s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.app `prod_mk_mem_comp_rel [`hc₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `prod_mk_mem_comp_rel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `comp_s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.anonymousCtor "⟨" [`c₁t "," `c₂t] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₂t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₁t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")") " ∈ " (Term.app `Set.Prod [`t `t]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Set.Prod [`t `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`c₁ [(Term.tupleTail "," [`c₂])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `c₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩") "," (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`c₂ "," `c₂t "," `hc₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₂t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`c₁ "," `c₁t "," `hc₁] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₁t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.anonymousCtor "⟨" [`a "," `b] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `hg
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) "." `sets_of_superset)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Filter.Order.Filter.Basic.«term_×ᶠ_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 61 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 60, term))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 60 >? 1024, (none, [anonymous]) <=? (some 60, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 60, (some 61, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app (Term.explicit "@" `prod_mem_prod) [`α `α (Term.hole "_") (Term.hole "_") `g `g `hg₁ `hg₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hg₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `hg₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `prod_mem_prod)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `prod_mem_prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
   " ∈ "
   (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Filter.Order.Filter.Basic.«term_×ᶠ_» `g " ×ᶠ " `g)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Filter.Order.Filter.Basic.«term_×ᶠ_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 61 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 60, term))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 60 >? 1024, (none, [anonymous]) <=? (some 60, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 60, (some 61, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Set.Prod [(Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) (Term.app `p [`s₂ `t])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `p [`s₂ `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `p [`s₂ `t]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `preimage [`Prod.swap `s₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Prod.swap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`Prod.swap `s₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `p [(Term.paren "(" [(Term.app `preimage [`Prod.swap `s₁]) []] ")") `t]) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  («term_$__»
   (Term.app `mem_lift [`hs₂])
   "$"
   (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ht
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `mem_lift')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_lift'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.app `mem_lift [`hs₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_lift
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.app `p [`s₂ `t]) " ∈ " `g)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `p [`s₂ `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  («term_$__»
   (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
   "$"
   (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.explicit "@" `mem_lift') [`α `α `f (Term.hole "_") `t `ht])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ht
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `mem_lift')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_lift'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.app `mem_lift [(Term.app `symm_le_uniformity [`hs₁])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `symm_le_uniformity [`hs₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `symm_le_uniformity
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `symm_le_uniformity [`hs₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_lift
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t]) " ∈ " `g)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `p [(Term.app `preimage [`Prod.swap `s₁]) `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `preimage [`Prod.swap `s₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `Prod.swap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`Prod.swap `s₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app (Term.proj `mem_prod_same_iff "." `mp) [(Term.app `hf.right [`hs₂])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hf.right [`hs₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hf.right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `hf.right [`hs₂]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_prod_same_iff "." `mp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_prod_same_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`t
    ","
    `ht
    ","
    (Term.paren
     "("
     [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`prod_t [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_» (Term.app `Set.Prod [`t `t]) " ⊆ " `s₂)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Set.Prod [`t `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `prod_t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ht
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `comp_mem_uniformity_sets [`hs₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comp_mem_uniformity_sets
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`s₂
    ","
    `hs₂
    ","
    (Term.paren
     "("
     [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`comp_s₂ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_» (Term.app `CompRel [`s₂ `s₂]) " ⊆ " `s₁)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `CompRel [`s₂ `s₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CompRel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `comp_s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `comp_mem_uniformity_sets [`hs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comp_mem_uniformity_sets
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`s₁
    ","
    `hs₁
    ","
    (Term.paren
     "("
     [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`comp_s₁ [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_» (Term.app `CompRel [`s₁ `s₁]) " ⊆ " `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `CompRel [`s₁ `s₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CompRel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `comp_s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term‹_›» "‹" (Term.app `ne_bot [`g]) "›")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term‹_›»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ne_bot [`g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ne_bot
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Cauchy [`g])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `g
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Cauchy
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  («term_$__»
   `comap_ne_bot
   "$"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`t `ht] [])]
     "=>"
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
        []
        []
        ":="
        (Term.app
         (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
         [`ht])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
         []
         []
         ":="
         (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
           "⟩")
          []
          []
          ":="
          (Term.app `hf.left.nonempty_of_mem [`ht''])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₀ []]
           [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
           ":="
           (Term.app `dense.nhds_within_ne_bot [`x])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₁ []]
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Set.«term{_|_}»
                "{"
                `y
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                "}")
               " ∈ "
               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
            ":="
            («term_$__»
             (Term.app
              (Term.explicit "@" `mem_inf_of_left)
              [`α
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
               (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
               (Term.hole "_")])
             "$"
             (Term.app `mem_nhds_left [`x `ht']))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h₂ []]
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.app `range [`m])
                " ∈ "
                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
             ":="
             («term_$__»
              (Term.app
               (Term.explicit "@" `mem_inf_of_right)
               [`α
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
                (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
                (Term.hole "_")])
              "$"
              (Term.app `subset.refl [(Term.hole "_")]))))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Init.Core.«term_∩_»
                  (Set.«term{_|_}»
                   "{"
                   `y
                   "|"
                   (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                   "}")
                  " ∩ "
                  (Term.app `range [`m]))
                 " ∈ "
                 (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
              ":="
              (Term.app
               (Term.explicit "@" `inter_mem)
               [`α
                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
                (Term.hole "_")
                (Term.hole "_")
                `h₁
                `h₂])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
               []
               []
               ":="
               (Term.app `h₀.nonempty_of_mem [`this])))
             []
             (Term.anonymousCtor
              "⟨"
              [`b
               ","
               (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
              "⟩"))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`t `ht] [])]
    "=>"
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
       []
       []
       ":="
       (Term.app
        (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
        [`ht])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
        []
        []
        ":="
        (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
          "⟩")
         []
         []
         ":="
         (Term.app `hf.left.nonempty_of_mem [`ht''])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₀ []]
          [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
          ":="
          (Term.app `dense.nhds_within_ne_bot [`x])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₁ []]
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Set.«term{_|_}»
               "{"
               `y
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
               "}")
              " ∈ "
              (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
           ":="
           («term_$__»
            (Term.app
             (Term.explicit "@" `mem_inf_of_left)
             [`α
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
              (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
              (Term.hole "_")])
            "$"
            (Term.app `mem_nhds_left [`x `ht']))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`h₂ []]
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.app `range [`m])
               " ∈ "
               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
            ":="
            («term_$__»
             (Term.app
              (Term.explicit "@" `mem_inf_of_right)
              [`α
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
               (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
               (Term.hole "_")])
             "$"
             (Term.app `subset.refl [(Term.hole "_")]))))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Init.Core.«term_∩_»
                 (Set.«term{_|_}»
                  "{"
                  `y
                  "|"
                  (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                  "}")
                 " ∩ "
                 (Term.app `range [`m]))
                " ∈ "
                (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
             ":="
             (Term.app
              (Term.explicit "@" `inter_mem)
              [`α
               (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
               (Term.hole "_")
               (Term.hole "_")
               `h₁
               `h₂])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
              []
              []
              ":="
              (Term.app `h₀.nonempty_of_mem [`this])))
            []
            (Term.anonymousCtor
             "⟨"
             [`b
              ","
              (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
             "⟩")))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`t' "," `ht' "," `ht_mem] "⟩")
     []
     []
     ":="
     (Term.app
      (Term.proj («term_$__» `mem_lift_sets "$" (Term.app `monotone_lift' [`monotone_const `mp₀])) "." `mp)
      [`ht])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
      []
      []
      ":="
      (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
        "⟩")
       []
       []
       ":="
       (Term.app `hf.left.nonempty_of_mem [`ht''])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₀ []]
        [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
        ":="
        (Term.app `dense.nhds_within_ne_bot [`x])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₁ []]
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Set.«term{_|_}»
             "{"
             `y
             "|"
             (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
             "}")
            " ∈ "
            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
         ":="
         («term_$__»
          (Term.app
           (Term.explicit "@" `mem_inf_of_left)
           [`α
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
            (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
            (Term.hole "_")])
          "$"
          (Term.app `mem_nhds_left [`x `ht']))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`h₂ []]
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app `range [`m])
             " ∈ "
             (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
          ":="
          («term_$__»
           (Term.app
            (Term.explicit "@" `mem_inf_of_right)
            [`α
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
             (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
             (Term.hole "_")])
           "$"
           (Term.app `subset.refl [(Term.hole "_")]))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Init.Core.«term_∩_»
               (Set.«term{_|_}»
                "{"
                `y
                "|"
                (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
                "}")
               " ∩ "
               (Term.app `range [`m]))
              " ∈ "
              (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
           ":="
           (Term.app
            (Term.explicit "@" `inter_mem)
            [`α
             (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
             (Term.hole "_")
             (Term.hole "_")
             `h₁
             `h₂])))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
            []
            []
            ":="
            (Term.app `h₀.nonempty_of_mem [`this])))
          []
          (Term.anonymousCtor
           "⟨"
           [`b
            ","
            (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
           "⟩")))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`t'' "," `ht'' "," `ht'_sub] "⟩")
     []
     []
     ":="
     (Term.app (Term.proj (Term.app `mem_lift'_sets [`mp₁]) "." `mp) [`ht_mem])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
       "⟩")
      []
      []
      ":="
      (Term.app `hf.left.nonempty_of_mem [`ht''])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₀ []]
       [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
       ":="
       (Term.app `dense.nhds_within_ne_bot [`x])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₁ []]
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Set.«term{_|_}»
            "{"
            `y
            "|"
            (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
            "}")
           " ∈ "
           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
        ":="
        («term_$__»
         (Term.app
          (Term.explicit "@" `mem_inf_of_left)
          [`α
           (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
           (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
           (Term.hole "_")])
         "$"
         (Term.app `mem_nhds_left [`x `ht']))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₂ []]
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.app `range [`m])
            " ∈ "
            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
         ":="
         («term_$__»
          (Term.app
           (Term.explicit "@" `mem_inf_of_right)
           [`α
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
            (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
            (Term.hole "_")])
          "$"
          (Term.app `subset.refl [(Term.hole "_")]))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Init.Core.«term_∩_»
              (Set.«term{_|_}»
               "{"
               `y
               "|"
               (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
               "}")
              " ∩ "
              (Term.app `range [`m]))
             " ∈ "
             (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
          ":="
          (Term.app
           (Term.explicit "@" `inter_mem)
           [`α
            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
            (Term.hole "_")
            (Term.hole "_")
            `h₁
            `h₂])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
           []
           []
           ":="
           (Term.app `h₀.nonempty_of_mem [`this])))
         []
         (Term.anonymousCtor
          "⟨"
          [`b
           ","
           (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
          "⟩"))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`x "," (Term.paren "(" [`hx [(Term.typeAscription ":" (Init.Core.«term_∈_» `x " ∈ " `t''))]] ")")]
      "⟩")
     []
     []
     ":="
     (Term.app `hf.left.nonempty_of_mem [`ht''])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₀ []]
      [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
      ":="
      (Term.app `dense.nhds_within_ne_bot [`x])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₁ []]
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Set.«term{_|_}»
           "{"
           `y
           "|"
           (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
           "}")
          " ∈ "
          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
       ":="
       («term_$__»
        (Term.app
         (Term.explicit "@" `mem_inf_of_left)
         [`α
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
          (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
          (Term.hole "_")])
        "$"
        (Term.app `mem_nhds_left [`x `ht']))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h₂ []]
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Term.app `range [`m])
           " ∈ "
           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
        ":="
        («term_$__»
         (Term.app
          (Term.explicit "@" `mem_inf_of_right)
          [`α
           (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
           (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
           (Term.hole "_")])
         "$"
         (Term.app `subset.refl [(Term.hole "_")]))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Init.Core.«term_∩_»
             (Set.«term{_|_}»
              "{"
              `y
              "|"
              (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
              "}")
             " ∩ "
             (Term.app `range [`m]))
            " ∈ "
            (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
         ":="
         (Term.app
          (Term.explicit "@" `inter_mem)
          [`α
           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
           (Term.hole "_")
           (Term.hole "_")
           `h₁
           `h₂])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
          []
          []
          ":="
          (Term.app `h₀.nonempty_of_mem [`this])))
        []
        (Term.anonymousCtor
         "⟨"
         [`b
          ","
          (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
         "⟩")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₀ []]
     [(Term.typeSpec ":" (Term.app `ne_bot [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)]))]
     ":="
     (Term.app `dense.nhds_within_ne_bot [`x])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₁ []]
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Set.«term{_|_}»
          "{"
          `y
          "|"
          (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
          "}")
         " ∈ "
         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
      ":="
      («term_$__»
       (Term.app
        (Term.explicit "@" `mem_inf_of_left)
        [`α
         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
         (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
         (Term.hole "_")])
       "$"
       (Term.app `mem_nhds_left [`x `ht']))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`h₂ []]
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.app `range [`m])
          " ∈ "
          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
       ":="
       («term_$__»
        (Term.app
         (Term.explicit "@" `mem_inf_of_right)
         [`α
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
          (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
          (Term.hole "_")])
        "$"
        (Term.app `subset.refl [(Term.hole "_")]))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Init.Core.«term_∩_»
            (Set.«term{_|_}»
             "{"
             `y
             "|"
             (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
             "}")
            " ∩ "
            (Term.app `range [`m]))
           " ∈ "
           (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
        ":="
        (Term.app
         (Term.explicit "@" `inter_mem)
         [`α
          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
          (Term.hole "_")
          (Term.hole "_")
          `h₁
          `h₂])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
         []
         []
         ":="
         (Term.app `h₀.nonempty_of_mem [`this])))
       []
       (Term.anonymousCtor
        "⟨"
        [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
        "⟩"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₁ []]
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Set.«term{_|_}»
         "{"
         `y
         "|"
         (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
         "}")
        " ∈ "
        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
     ":="
     («term_$__»
      (Term.app
       (Term.explicit "@" `mem_inf_of_left)
       [`α
        (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
        (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
        (Term.hole "_")])
      "$"
      (Term.app `mem_nhds_left [`x `ht']))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h₂ []]
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app `range [`m])
         " ∈ "
         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
      ":="
      («term_$__»
       (Term.app
        (Term.explicit "@" `mem_inf_of_right)
        [`α
         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
         (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
         (Term.hole "_")])
       "$"
       (Term.app `subset.refl [(Term.hole "_")]))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Init.Core.«term_∩_»
           (Set.«term{_|_}»
            "{"
            `y
            "|"
            (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
            "}")
           " ∩ "
           (Term.app `range [`m]))
          " ∈ "
          (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
       ":="
       (Term.app
        (Term.explicit "@" `inter_mem)
        [`α (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x) (Term.hole "_") (Term.hole "_") `h₁ `h₂])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
        []
        []
        ":="
        (Term.app `h₀.nonempty_of_mem [`this])))
      []
      (Term.anonymousCtor
       "⟨"
       [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
       "⟩")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h₂ []]
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app `range [`m])
        " ∈ "
        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
     ":="
     («term_$__»
      (Term.app
       (Term.explicit "@" `mem_inf_of_right)
       [`α
        (Term.app (Topology.Basic.term𝓝 "𝓝") [`x])
        (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `range [`m])])
        (Term.hole "_")])
      "$"
      (Term.app `subset.refl [(Term.hole "_")]))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Init.Core.«term_∩_»
          (Set.«term{_|_}»
           "{"
           `y
           "|"
           (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
           "}")
          " ∩ "
          (Term.app `range [`m]))
         " ∈ "
         (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
      ":="
      (Term.app
       (Term.explicit "@" `inter_mem)
       [`α (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x) (Term.hole "_") (Term.hole "_") `h₁ `h₂])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
       []
       []
       ":="
       (Term.app `h₀.nonempty_of_mem [`this])))
     []
     (Term.anonymousCtor
      "⟨"
      [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
      "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Init.Core.«term_∩_»
         (Set.«term{_|_}»
          "{"
          `y
          "|"
          (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
          "}")
         " ∩ "
         (Term.app `range [`m]))
        " ∈ "
        (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)))]
     ":="
     (Term.app
      (Term.explicit "@" `inter_mem)
      [`α (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x) (Term.hole "_") (Term.hole "_") `h₁ `h₂])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
      []
      []
      ":="
      (Term.app `h₀.nonempty_of_mem [`this])))
    []
    (Term.anonymousCtor
     "⟨"
     [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
     "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
     []
     []
     ":="
     (Term.app `h₀.nonempty_of_mem [`this])))
   []
   (Term.anonymousCtor
    "⟨"
    [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`b "," (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.subst `b_eq.symm "▸" [(Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `ht'_sub [(Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`x "," `hx "," `xyt'] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `xyt'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `ht'_sub
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
  `b_eq.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `h₀.nonempty_of_mem [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h₀.nonempty_of_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`y "," `xyt' "," `b "," `b_eq] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `xyt'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.explicit "@" `inter_mem)
   [`α (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x) (Term.hole "_") (Term.hole "_") `h₁ `h₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 100, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `inter_mem)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `inter_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Init.Core.«term_∩_»
    (Set.«term{_|_}»
     "{"
     `y
     "|"
     (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
     "}")
    " ∩ "
    (Term.app `range [`m]))
   " ∈ "
   (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Topology.Basic.«term𝓝[_]_» "𝓝[" (Term.app `range [`m]) "] " `x)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.«term𝓝[_]_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 100 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 100, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Core.«term_∩_»
   (Set.«term{_|_}»
    "{"
    `y
    "|"
    (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
    "}")
   " ∩ "
   (Term.app `range [`m]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∩_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`m])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
  (Set.«term{_|_}» "{" `y "|" (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t') "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")") " ∈ " `t')
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`x [(Term.tupleTail "," [`y])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `y
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Mathlib.ExtendedBinder.extBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  complete_space_extension
  { m : β → α }
      ( hm : UniformInducing m )
      ( dense : DenseRange m )
      ( h : ∀ f : Filter β , Cauchy f → ∃ x : α , map m f ≤ 𝓝 x )
    : CompleteSpace α
  :=
    ⟨
      fun
        f : Filter α
          =>
          fun
            hf : Cauchy f
              =>
              let
                p : Set α × α → Set α → Set α := fun s t => { y : α | ∃ x : α , x ∈ t ∧ ( x , y ) ∈ s }
                let
                  g := 𝓤 α . lift fun s => f.lift' p s
                  have
                    mp₀ : Monotone p := fun a b h t s ⟨ x , xs , xa ⟩ => ⟨ x , xs , h xa ⟩
                    have
                      mp₁ : ∀ { s } , Monotone p s := fun s a b h x ⟨ y , ya , yxs ⟩ => ⟨ y , h ya , yxs ⟩
                      have
                        : f ≤ g
                          :=
                          le_infi
                            $
                            fun
                              s
                                =>
                                le_infi
                                  $
                                  fun
                                    hs
                                      =>
                                      le_infi
                                        $
                                        fun
                                          t
                                            =>
                                            le_infi
                                              $
                                              fun
                                                ht
                                                  =>
                                                  le_principal_iff . mpr
                                                    $
                                                    mem_of_superset ht $ fun x hx => ⟨ x , hx , refl_mem_uniformity hs ⟩
                        have
                          : ne_bot g := hf.left.mono this
                          have
                            : ne_bot comap m g
                              :=
                              comap_ne_bot
                                $
                                fun
                                  t ht
                                    =>
                                    let
                                      ⟨ t' , ht' , ht_mem ⟩ := mem_lift_sets $ monotone_lift' monotone_const mp₀ . mp ht
                                      let
                                        ⟨ t'' , ht'' , ht'_sub ⟩ := mem_lift'_sets mp₁ . mp ht_mem
                                        let
                                          ⟨ x , ( hx : x ∈ t'' ) ⟩ := hf.left.nonempty_of_mem ht''
                                          have
                                            h₀ : ne_bot 𝓝[ range m ] x := dense.nhds_within_ne_bot x
                                            have
                                              h₁
                                                : { y | ( x , y ) ∈ t' } ∈ 𝓝[ range m ] x
                                                :=
                                                @ mem_inf_of_left α 𝓝 x 𝓟 range m _ $ mem_nhds_left x ht'
                                              have
                                                h₂
                                                  : range m ∈ 𝓝[ range m ] x
                                                  :=
                                                  @ mem_inf_of_right α 𝓝 x 𝓟 range m _ $ subset.refl _
                                                have
                                                  : { y | ( x , y ) ∈ t' } ∩ range m ∈ 𝓝[ range m ] x
                                                    :=
                                                    @ inter_mem α 𝓝[ range m ] x _ _ h₁ h₂
                                                  let
                                                    ⟨ y , xyt' , b , b_eq ⟩ := h₀.nonempty_of_mem this
                                                    ⟨ b , b_eq.symm ▸ ht'_sub ⟨ x , hx , xyt' ⟩ ⟩
                            have
                              : Cauchy g
                                :=
                                ⟨
                                  ‹ ne_bot g ›
                                    ,
                                    fun
                                      s hs
                                        =>
                                        let
                                          ⟨ s₁ , hs₁ , ( comp_s₁ : CompRel s₁ s₁ ⊆ s ) ⟩ := comp_mem_uniformity_sets hs
                                          let
                                            ⟨ s₂ , hs₂ , ( comp_s₂ : CompRel s₂ s₂ ⊆ s₁ ) ⟩
                                              :=
                                              comp_mem_uniformity_sets hs₁
                                            let
                                              ⟨ t , ht , ( prod_t : Set.Prod t t ⊆ s₂ ) ⟩
                                                :=
                                                mem_prod_same_iff . mp hf.right hs₂
                                              have
                                                hg₁
                                                  : p preimage Prod.swap s₁ t ∈ g
                                                  :=
                                                  mem_lift symm_le_uniformity hs₁ $ @ mem_lift' α α f _ t ht
                                                have
                                                  hg₂ : p s₂ t ∈ g := mem_lift hs₂ $ @ mem_lift' α α f _ t ht
                                                  have
                                                    hg
                                                      : Set.Prod p preimage Prod.swap s₁ t p s₂ t ∈ g ×ᶠ g
                                                      :=
                                                      @ prod_mem_prod α α _ _ g g hg₁ hg₂
                                                    g ×ᶠ g . sets_of_superset
                                                      hg
                                                        fun
                                                          ⟨ a , b ⟩ ⟨ ⟨ c₁ , c₁t , hc₁ ⟩ , ⟨ c₂ , c₂t , hc₂ ⟩ ⟩
                                                            =>
                                                            have
                                                              : ( c₁ , c₂ ) ∈ Set.Prod t t := ⟨ c₁t , c₂t ⟩
                                                              comp_s₁
                                                                $
                                                                prod_mk_mem_comp_rel hc₁
                                                                  $
                                                                  comp_s₂ $ prod_mk_mem_comp_rel prod_t this hc₂
                                  ⟩
                              have
                                : Cauchy Filter.comap m g := ‹ Cauchy g › . comap' le_of_eqₓ hm.comap_uniformity ‹ _ ›
                                let
                                  ⟨ x , ( hx : map m Filter.comap m g ≤ 𝓝 x ) ⟩ := h _ this
                                  have
                                    : ClusterPt x map m Filter.comap m g
                                      :=
                                      le_nhds_iff_adhp_of_cauchy this.map hm.uniform_continuous . mp hx
                                    have
                                      : ClusterPt x g := this.mono map_comap_le
                                      ⟨
                                        x
                                          ,
                                          calc
                                            f ≤ g := by assumption _ ≤ 𝓝 x := le_nhds_of_cauchy_adhp ‹ Cauchy g › this
                                        ⟩
      ⟩

theorem totally_bounded_preimage {f : α → β} {s : Set β} (hf : UniformEmbedding f) (hs : TotallyBounded s) :
    TotallyBounded (f ⁻¹' s) := fun t ht => by
  rw [← hf.comap_uniformity] at ht
  rcases mem_comap.2 ht with ⟨t', ht', ts⟩
  rcases totally_bounded_iff_subset.1 (totally_bounded_subset (image_preimage_subset f s) hs) _ ht' with
    ⟨c, cs, hfc, hct⟩
  refine' ⟨f ⁻¹' c, hfc.preimage (hf.inj.inj_on _), fun x h => _⟩
  have := hct (mem_image_of_mem f h)
  simp at this⊢
  rcases this with ⟨z, zc, zt⟩
  rcases cs zc with ⟨y, yc, rfl⟩
  exact
    ⟨y, zc,
      ts
        (by
          exact zt)⟩

end

theorem uniform_embedding_comap {α : Type _} {β : Type _} {f : α → β} [u : UniformSpace β] (hf : Function.Injective f) :
    @UniformEmbedding α β (UniformSpace.comap f u) u f :=
  @UniformEmbedding.mk _ _ (UniformSpace.comap f u) _ _ (@UniformInducing.mk _ _ (UniformSpace.comap f u) _ _ rfl) hf

section UniformExtension

variable {α : Type _} {β : Type _} {γ : Type _} [UniformSpace α] [UniformSpace β] [UniformSpace γ] {e : β → α}
  (h_e : UniformInducing e) (h_dense : DenseRange e) {f : β → γ} (h_f : UniformContinuous f)

local notation "ψ" => (h_e.dense_inducing h_dense).extend f

theorem uniformly_extend_exists [CompleteSpace γ] (a : α) : ∃ c, tendsto f (comap e (𝓝 a)) (𝓝 c) :=
  let de := h_e.dense_inducing h_dense
  have : Cauchy (𝓝 a) := cauchy_nhds
  have : Cauchy (comap e (𝓝 a)) := this.comap' (le_of_eqₓ h_e.comap_uniformity) (de.comap_nhds_ne_bot _)
  have : Cauchy (map f (comap e (𝓝 a))) := this.map h_f
  CompleteSpace.complete this

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `uniform_extend_subtype [])
  (Command.declSig
   [(Term.instBinder "[" [] (Term.app `CompleteSpace [`γ]) "]")
    (Term.implicitBinder "{" [`p] [":" (Term.arrow `α "→" (Term.prop "Prop"))] "}")
    (Term.implicitBinder "{" [`e] [":" (Term.arrow `α "→" `β)] "}")
    (Term.implicitBinder "{" [`f] [":" (Term.arrow `α "→" `γ)] "}")
    (Term.implicitBinder "{" [`b] [":" `β] "}")
    (Term.implicitBinder "{" [`s] [":" (Term.app `Set [`α])] "}")
    (Term.explicitBinder
     "("
     [`hf]
     [":"
      (Term.app
       `UniformContinuous
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`x] [(Term.typeSpec ":" (Term.app `Subtype [`p]))])]
          "=>"
          (Term.app `f [`x.val])))])]
     []
     ")")
    (Term.explicitBinder "(" [`he] [":" (Term.app `UniformEmbedding [`e])] [] ")")
    (Term.explicitBinder
     "("
     [`hd]
     [":"
      (Term.forall
       "∀"
       [(Term.simpleBinder [`x] [(Term.typeSpec ":" `β)])]
       ","
       (Init.Core.«term_∈_» `x " ∈ " (Term.app `Closure [(Term.app `range [`e])])))]
     []
     ")")
    (Term.explicitBinder
     "("
     [`hb]
     [":"
      (Init.Core.«term_∈_»
       (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)])
       " ∈ "
       (Term.app (Topology.Basic.term𝓝 "𝓝") [`b]))]
     []
     ")")
    (Term.explicitBinder "(" [`hs] [":" (Term.app `IsClosed [`s])] [] ")")
    (Term.explicitBinder
     "("
     [`hp]
     [":"
      (Term.forall
       "∀"
       []
       ","
       (Mathlib.ExtendedBinder.«term∀___,_»
        "∀"
        `x
        («binderTerm∈_» "∈" `s)
        ","
        (Term.forall "∀" [] "," (Term.app `p [`x]))))]
     []
     ")")]
   (Term.typeSpec
    ":"
    («term∃_,_»
     "∃"
     (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `c)] []))
     ","
     (Term.app
      `tendsto
      [`f
       (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
       (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))))
  (Command.declValSimple
   ":="
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`de []]
      [(Term.typeSpec ":" (Term.app `DenseEmbedding [`e]))]
      ":="
      (Term.app `he.dense_embedding [`hd])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`de' []]
       [(Term.typeSpec ":" (Term.app `DenseEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `de.subtype [`p])) [])])))))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`ue' []]
        [(Term.typeSpec ":" (Term.app `UniformEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
        ":="
        (Term.app `uniform_embedding_subtype_emb [(Term.hole "_") `he `de])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            `b
            " ∈ "
            (Term.app
             `Closure
             [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])))]
         ":="
         (Term.app
          («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
          [(Term.app `mem_of_mem_nhds [`hb])])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`c
            ","
            (Term.paren
             "("
             [`hc
              [(Term.typeAscription
                ":"
                (Term.app
                 `tendsto
                 [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
                  (Term.app
                   `comap
                   [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
             ")")]
           "⟩")
          []
          []
          ":="
          (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
        []
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
             [])
            (group
             (Tactic.simp
              "simp"
              []
              []
              ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
             [])
            (group
             (Tactic.change
              "change"
              (Term.app
               `tendsto
               [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
                (Term.app
                 `comap
                 [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
              [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
             [])
            (group
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
             [])
            (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
            (group
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "⟨"
               [(Term.hole "_")
                ","
                `hb
                ","
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`x] [])]
                  "=>"
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (Tactic.change
                        "change"
                        (Term.arrow
                         (Init.Core.«term_∈_»
                          (Term.app `e [`x])
                          " ∈ "
                          (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                         "→"
                         (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                        [])
                       [])
                      (group
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule ["←"] `closure_induced)
                          ","
                          (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                          ","
                          (Tactic.rwRule [] `ClusterPt)
                          ","
                          (Tactic.rwRule [] `ne_bot_iff)
                          ","
                          (Tactic.rwRule [] `nhds_induced)
                          ","
                          (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                          ","
                          (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                          ","
                          (Tactic.rwRule [] `hs.closure_eq)]
                         "]")
                        [])
                       [])
                      (group
                       (Tactic.exact
                        "exact"
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`hxs] [])]
                          "=>"
                          (Term.anonymousCtor
                           "⟨"
                           [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                           "⟩"))))
                       [])])))))]
               "⟩"))
             [])]))))))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`de []]
     [(Term.typeSpec ":" (Term.app `DenseEmbedding [`e]))]
     ":="
     (Term.app `he.dense_embedding [`hd])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`de' []]
      [(Term.typeSpec ":" (Term.app `DenseEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `de.subtype [`p])) [])])))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`ue' []]
       [(Term.typeSpec ":" (Term.app `UniformEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
       ":="
       (Term.app `uniform_embedding_subtype_emb [(Term.hole "_") `he `de])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           `b
           " ∈ "
           (Term.app
            `Closure
            [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])))]
        ":="
        (Term.app
         («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
         [(Term.app `mem_of_mem_nhds [`hb])])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`c
           ","
           (Term.paren
            "("
            [`hc
             [(Term.typeAscription
               ":"
               (Term.app
                `tendsto
                [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
                 (Term.app
                  `comap
                  [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
       []
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
            [])
           (group
            (Tactic.simp
             "simp"
             []
             []
             ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
             [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
            [])
           (group
            (Tactic.change
             "change"
             (Term.app
              `tendsto
              [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
               (Term.app
                `comap
                [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
             [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
            [])
           (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
           (group
            (Tactic.exact
             "exact"
             (Term.anonymousCtor
              "⟨"
              [(Term.hole "_")
               ","
               `hb
               ","
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`x] [])]
                 "=>"
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(group
                      (Tactic.change
                       "change"
                       (Term.arrow
                        (Init.Core.«term_∈_»
                         (Term.app `e [`x])
                         " ∈ "
                         (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                        "→"
                        (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                       [])
                      [])
                     (group
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule ["←"] `closure_induced)
                         ","
                         (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                         ","
                         (Tactic.rwRule [] `ClusterPt)
                         ","
                         (Tactic.rwRule [] `ne_bot_iff)
                         ","
                         (Tactic.rwRule [] `nhds_induced)
                         ","
                         (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                         ","
                         (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                         ","
                         (Tactic.rwRule [] `hs.closure_eq)]
                        "]")
                       [])
                      [])
                     (group
                      (Tactic.exact
                       "exact"
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`hxs] [])]
                         "=>"
                         (Term.anonymousCtor
                          "⟨"
                          [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                          "⟩"))))
                      [])])))))]
              "⟩"))
            [])]))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`de' []]
     [(Term.typeSpec ":" (Term.app `DenseEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(group (Tactic.exact "exact" (Term.app `de.subtype [`p])) [])])))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`ue' []]
      [(Term.typeSpec ":" (Term.app `UniformEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
      ":="
      (Term.app `uniform_embedding_subtype_emb [(Term.hole "_") `he `de])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          `b
          " ∈ "
          (Term.app
           `Closure
           [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])))]
       ":="
       (Term.app
        («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
        [(Term.app `mem_of_mem_nhds [`hb])])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor
         "⟨"
         [`c
          ","
          (Term.paren
           "("
           [`hc
            [(Term.typeAscription
              ":"
              (Term.app
               `tendsto
               [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
                (Term.app
                 `comap
                 [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
           ")")]
         "⟩")
        []
        []
        ":="
        (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
      []
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
           [])
          (group
           (Tactic.simp
            "simp"
            []
            []
            ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
            [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
           [])
          (group
           (Tactic.change
            "change"
            (Term.app
             `tendsto
             [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
              (Term.app
               `comap
               [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
            [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
           [])
          (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
          (group
           (Tactic.exact
            "exact"
            (Term.anonymousCtor
             "⟨"
             [(Term.hole "_")
              ","
              `hb
              ","
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`x] [])]
                "=>"
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (Tactic.change
                      "change"
                      (Term.arrow
                       (Init.Core.«term_∈_»
                        (Term.app `e [`x])
                        " ∈ "
                        (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                       "→"
                       (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                      [])
                     [])
                    (group
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule ["←"] `closure_induced)
                        ","
                        (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                        ","
                        (Tactic.rwRule [] `ClusterPt)
                        ","
                        (Tactic.rwRule [] `ne_bot_iff)
                        ","
                        (Tactic.rwRule [] `nhds_induced)
                        ","
                        (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                        ","
                        (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                        ","
                        (Tactic.rwRule [] `hs.closure_eq)]
                       "]")
                      [])
                     [])
                    (group
                     (Tactic.exact
                      "exact"
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`hxs] [])]
                        "=>"
                        (Term.anonymousCtor
                         "⟨"
                         [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                         "⟩"))))
                     [])])))))]
             "⟩"))
           [])])))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`ue' []]
     [(Term.typeSpec ":" (Term.app `UniformEmbedding [(Term.app `DenseEmbedding.subtypeEmb [`p `e])]))]
     ":="
     (Term.app `uniform_embedding_subtype_emb [(Term.hole "_") `he `de])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         `b
         " ∈ "
         (Term.app
          `Closure
          [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])))]
      ":="
      (Term.app
       («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
       [(Term.app `mem_of_mem_nhds [`hb])])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`c
         ","
         (Term.paren
          "("
          [`hc
           [(Term.typeAscription
             ":"
             (Term.app
              `tendsto
              [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
               (Term.app
                `comap
                [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
     []
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
          [])
         (group
          (Tactic.simp
           "simp"
           []
           []
           ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
          [])
         (group
          (Tactic.change
           "change"
           (Term.app
            `tendsto
            [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
             (Term.app
              `comap
              [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
           [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
          [])
         (group
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
          [])
         (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
         (group
          (Tactic.exact
           "exact"
           (Term.anonymousCtor
            "⟨"
            [(Term.hole "_")
             ","
             `hb
             ","
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`x] [])]
               "=>"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (Tactic.change
                     "change"
                     (Term.arrow
                      (Init.Core.«term_∈_»
                       (Term.app `e [`x])
                       " ∈ "
                       (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                      "→"
                      (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                     [])
                    [])
                   (group
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule ["←"] `closure_induced)
                       ","
                       (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                       ","
                       (Tactic.rwRule [] `ClusterPt)
                       ","
                       (Tactic.rwRule [] `ne_bot_iff)
                       ","
                       (Tactic.rwRule [] `nhds_induced)
                       ","
                       (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                       ","
                       (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                       ","
                       (Tactic.rwRule [] `hs.closure_eq)]
                      "]")
                     [])
                    [])
                   (group
                    (Tactic.exact
                     "exact"
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`hxs] [])]
                       "=>"
                       (Term.anonymousCtor
                        "⟨"
                        [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                        "⟩"))))
                    [])])))))]
            "⟩"))
          [])]))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        `b
        " ∈ "
        (Term.app
         `Closure
         [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])))]
     ":="
     (Term.app
      («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
      [(Term.app `mem_of_mem_nhds [`hb])])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`c
        ","
        (Term.paren
         "("
         [`hc
          [(Term.typeAscription
            ":"
            (Term.app
             `tendsto
             [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
              (Term.app
               `comap
               [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
                (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
    []
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
         [])
        (group
         (Tactic.simp
          "simp"
          []
          []
          ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
          [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
         [])
        (group
         (Tactic.change
          "change"
          (Term.app
           `tendsto
           [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
            (Term.app
             `comap
             [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
              (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
          [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
          [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
         [])
        (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
        (group
         (Tactic.exact
          "exact"
          (Term.anonymousCtor
           "⟨"
           [(Term.hole "_")
            ","
            `hb
            ","
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`x] [])]
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (Tactic.change
                    "change"
                    (Term.arrow
                     (Init.Core.«term_∈_»
                      (Term.app `e [`x])
                      " ∈ "
                      (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                     "→"
                     (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                    [])
                   [])
                  (group
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule ["←"] `closure_induced)
                      ","
                      (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                      ","
                      (Tactic.rwRule [] `ClusterPt)
                      ","
                      (Tactic.rwRule [] `ne_bot_iff)
                      ","
                      (Tactic.rwRule [] `nhds_induced)
                      ","
                      (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                      ","
                      (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                      ","
                      (Tactic.rwRule [] `hs.closure_eq)]
                     "]")
                    [])
                   [])
                  (group
                   (Tactic.exact
                    "exact"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`hxs] [])]
                      "=>"
                      (Term.anonymousCtor
                       "⟨"
                       [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                       "⟩"))))
                   [])])))))]
           "⟩"))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`c
       ","
       (Term.paren
        "("
        [`hc
         [(Term.typeAscription
           ":"
           (Term.app
            `tendsto
            [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
             (Term.app
              `comap
              [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
               (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])))
   []
   (Term.byTactic
    "by"
    (Tactic.tacticSeq
     (Tactic.tacticSeq1Indented
      [(group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
        [])
       (group
        (Tactic.simp
         "simp"
         []
         []
         ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
         [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
        [])
       (group
        (Tactic.change
         "change"
         (Term.app
          `tendsto
          [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
           (Term.app
            `comap
            [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
           (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
         [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
        [])
       (group
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
        [])
       (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
       (group
        (Tactic.exact
         "exact"
         (Term.anonymousCtor
          "⟨"
          [(Term.hole "_")
           ","
           `hb
           ","
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`x] [])]
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (Tactic.change
                   "change"
                   (Term.arrow
                    (Init.Core.«term_∈_»
                     (Term.app `e [`x])
                     " ∈ "
                     (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                    "→"
                    (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                   [])
                  [])
                 (group
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule ["←"] `closure_induced)
                     ","
                     (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                     ","
                     (Tactic.rwRule [] `ClusterPt)
                     ","
                     (Tactic.rwRule [] `ne_bot_iff)
                     ","
                     (Tactic.rwRule [] `nhds_induced)
                     ","
                     (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                     ","
                     (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                     ","
                     (Tactic.rwRule [] `hs.closure_eq)]
                    "]")
                   [])
                  [])
                 (group
                  (Tactic.exact
                   "exact"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`hxs] [])]
                     "=>"
                     (Term.anonymousCtor
                      "⟨"
                      [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                      "⟩"))))
                  [])])))))]
          "⟩"))
        [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
       [])
      (group
       (Tactic.simp
        "simp"
        []
        []
        ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
        [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
       [])
      (group
       (Tactic.change
        "change"
        (Term.app
         `tendsto
         [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
          (Term.app
           `comap
           [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
        [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
       [])
      (group (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")) [])
      (group
       (Tactic.exact
        "exact"
        (Term.anonymousCtor
         "⟨"
         [(Term.hole "_")
          ","
          `hb
          ","
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`x] [])]
            "=>"
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (Tactic.change
                  "change"
                  (Term.arrow
                   (Init.Core.«term_∈_»
                    (Term.app `e [`x])
                    " ∈ "
                    (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
                   "→"
                   (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
                  [])
                 [])
                (group
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule ["←"] `closure_induced)
                    ","
                    (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
                    ","
                    (Tactic.rwRule [] `ClusterPt)
                    ","
                    (Tactic.rwRule [] `ne_bot_iff)
                    ","
                    (Tactic.rwRule [] `nhds_induced)
                    ","
                    (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
                    ","
                    (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
                    ","
                    (Tactic.rwRule [] `hs.closure_eq)]
                   "]")
                  [])
                 [])
                (group
                 (Tactic.exact
                  "exact"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`hxs] [])]
                    "=>"
                    (Term.anonymousCtor
                     "⟨"
                     [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl]
                     "⟩"))))
                 [])])))))]
         "⟩"))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.anonymousCtor
    "⟨"
    [(Term.hole "_")
     ","
     `hb
     ","
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`x] [])]
       "=>"
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (Tactic.change
             "change"
             (Term.arrow
              (Init.Core.«term_∈_»
               (Term.app `e [`x])
               " ∈ "
               (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
              "→"
              (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
             [])
            [])
           (group
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule ["←"] `closure_induced)
               ","
               (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
               ","
               (Tactic.rwRule [] `ClusterPt)
               ","
               (Tactic.rwRule [] `ne_bot_iff)
               ","
               (Tactic.rwRule [] `nhds_induced)
               ","
               (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
               ","
               (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
               ","
               (Tactic.rwRule [] `hs.closure_eq)]
              "]")
             [])
            [])
           (group
            (Tactic.exact
             "exact"
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`hxs] [])]
               "=>"
               (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩"))))
            [])])))))]
    "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [(Term.hole "_")
    ","
    `hb
    ","
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`x] [])]
      "=>"
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (Tactic.change
            "change"
            (Term.arrow
             (Init.Core.«term_∈_»
              (Term.app `e [`x])
              " ∈ "
              (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
             "→"
             (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
            [])
           [])
          (group
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule ["←"] `closure_induced)
              ","
              (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
              ","
              (Tactic.rwRule [] `ClusterPt)
              ","
              (Tactic.rwRule [] `ne_bot_iff)
              ","
              (Tactic.rwRule [] `nhds_induced)
              ","
              (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
              ","
              (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
              ","
              (Tactic.rwRule [] `hs.closure_eq)]
             "]")
            [])
           [])
          (group
           (Tactic.exact
            "exact"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`hxs] [])]
              "=>"
              (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩"))))
           [])])))))]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`x] [])]
    "=>"
    (Term.byTactic
     "by"
     (Tactic.tacticSeq
      (Tactic.tacticSeq1Indented
       [(group
         (Tactic.change
          "change"
          (Term.arrow
           (Init.Core.«term_∈_»
            (Term.app `e [`x])
            " ∈ "
            (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
           "→"
           (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
          [])
         [])
        (group
         (Tactic.rwSeq
          "rw"
          []
          (Tactic.rwRuleSeq
           "["
           [(Tactic.rwRule ["←"] `closure_induced)
            ","
            (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
            ","
            (Tactic.rwRule [] `ClusterPt)
            ","
            (Tactic.rwRule [] `ne_bot_iff)
            ","
            (Tactic.rwRule [] `nhds_induced)
            ","
            (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
            ","
            (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
            ","
            (Tactic.rwRule [] `hs.closure_eq)]
           "]")
          [])
         [])
        (group
         (Tactic.exact
          "exact"
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`hxs] [])]
            "=>"
            (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩"))))
         [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (Tactic.change
        "change"
        (Term.arrow
         (Init.Core.«term_∈_» (Term.app `e [`x]) " ∈ " (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
         "→"
         (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
        [])
       [])
      (group
       (Tactic.rwSeq
        "rw"
        []
        (Tactic.rwRuleSeq
         "["
         [(Tactic.rwRule ["←"] `closure_induced)
          ","
          (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
          ","
          (Tactic.rwRule [] `ClusterPt)
          ","
          (Tactic.rwRule [] `ne_bot_iff)
          ","
          (Tactic.rwRule [] `nhds_induced)
          ","
          (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
          ","
          (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
          ","
          (Tactic.rwRule [] `hs.closure_eq)]
         "]")
        [])
       [])
      (group
       (Tactic.exact
        "exact"
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`hxs] [])]
          "=>"
          (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩"))))
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Tactic.exact
   "exact"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`hxs] [])]
     "=>"
     (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`hxs] [])]
    "=>"
    (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [(Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩") "," `rfl] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `rfl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`x "," (Term.app `hp [`x `hxs])] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `hp [`x `hxs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hxs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `hp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq
    "["
    [(Tactic.rwRule ["←"] `closure_induced)
     ","
     (Tactic.rwRule [] `mem_closure_iff_cluster_pt)
     ","
     (Tactic.rwRule [] `ClusterPt)
     ","
     (Tactic.rwRule [] `ne_bot_iff)
     ","
     (Tactic.rwRule [] `nhds_induced)
     ","
     (Tactic.rwRule ["←"] `de.to_dense_inducing.nhds_eq_comap)
     ","
     (Tactic.rwRule ["←"] `mem_closure_iff_nhds_ne_bot)
     ","
     (Tactic.rwRule [] `hs.closure_eq)]
    "]")
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs.closure_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_closure_iff_nhds_ne_bot
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `de.to_dense_inducing.nhds_eq_comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nhds_induced
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ne_bot_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ClusterPt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `mem_closure_iff_cluster_pt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `closure_induced
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.change
   "change"
   (Term.arrow
    (Init.Core.«term_∈_» (Term.app `e [`x]) " ∈ " (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
    "→"
    (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
   [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.change', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.arrow
   (Init.Core.«term_∈_» (Term.app `e [`x]) " ∈ " (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
   "→"
   (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.arrow', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» `x " ∈ " (Term.app `range [`Subtype.val]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `range [`Subtype.val])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Subtype.val
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `range
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
  (Init.Core.«term_∈_» (Term.app `e [`x]) " ∈ " (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " `s)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `e " '' " `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Set.Data.Set.Basic.term_''_ `e " '' " `s) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Closure
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `e [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.exact "exact" (Term.anonymousCtor "⟨" [`c "," `hc] "⟩"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.exact', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`c "," `hc] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule ["←"] `comap_comap) "," (Tactic.rwRule [] `tendsto_comap'_iff)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `tendsto_comap'_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `comap_comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«←»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.change
   "change"
   (Term.app
    `tendsto
    [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
     (Term.app
      `comap
      [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
       (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
     (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
   [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.change', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
    (Term.app
     `comap
     [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
      (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
    (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`c]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `comap
   [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
    (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.explicit "@" `Subtype.val) [`α `p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `Subtype.val)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Subtype.val
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `comap
   [(Term.paren "(" [(Rel.Data.Rel.«term_∘_» `e " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p])) []] ")")
    (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`b]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Term.explicit "@" `Subtype.val) [`α `p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `Subtype.val)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Subtype.val
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Rel.Data.Rel.«term_∘_» `f " ∘ " (Term.app (Term.explicit "@" `Subtype.val) [`α `p])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.simp
   "simp"
   []
   []
   ["[" [(Tactic.simpLemma [] [] `comap_comap)] "]"]
   [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simp', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«]»', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `comap_comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
  (Tactic.rwSeq
   "rw"
   []
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_subtype_eq_comap)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`hc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwSeq', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nhds_subtype_eq_comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `uniformly_extend_exists [`ue'.to_uniform_inducing `de'.dense `hf (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `hf
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `de'.dense
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `ue'.to_uniform_inducing
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `uniformly_extend_exists
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`c
    ","
    (Term.paren
     "("
     [`hc
      [(Term.typeAscription
        ":"
        (Term.app
         `tendsto
         [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
          (Term.app
           `comap
           [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
            (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`hc
    [(Term.typeAscription
      ":"
      (Term.app
       `tendsto
       [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
        (Term.app
         `comap
         [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
          (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
        (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])]))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `tendsto
   [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
    (Term.app
     `comap
     [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
      (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
    (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`c])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`c]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app
   `comap
   [(Term.app `DenseEmbedding.subtypeEmb [`p `e])
    (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`b "," `this] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `DenseEmbedding.subtypeEmb [`p `e])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `DenseEmbedding.subtypeEmb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `DenseEmbedding.subtypeEmb [`p `e]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `comap
   [(Term.paren "(" [(Term.app `DenseEmbedding.subtypeEmb [`p `e]) []] ")")
    (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.anonymousCtor "⟨" [`b "," `this] "⟩")]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Rel.Data.Rel.«term_∘_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `Subtype.val
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 0, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1 >? 1024, (none, [anonymous]) <=? (some 0, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Rel.Data.Rel.«term_∘_» `f " ∘ " `Subtype.val) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `tendsto
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `hc
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp)) [(Term.app `mem_of_mem_nhds [`hb])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mem_of_mem_nhds [`hb])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_of_mem_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `mem_of_mem_nhds [`hb]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  («term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» `monotone_image "$" `hp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `monotone_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `closure_mono
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 10, (some 10, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» `closure_mono "$" («term_$__» `monotone_image "$" `hp)) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   `b
   " ∈ "
   (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Closure [(Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `e " '' " (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.«term{_|_}» "{" `x "|" (Term.app `p [`x]) "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `p [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Mathlib.ExtendedBinder.extBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  uniform_extend_subtype
  [ CompleteSpace γ ]
      { p : α → Prop }
      { e : α → β }
      { f : α → γ }
      { b : β }
      { s : Set α }
      ( hf : UniformContinuous fun x : Subtype p => f x.val )
      ( he : UniformEmbedding e )
      ( hd : ∀ x : β , x ∈ Closure range e )
      ( hb : Closure e '' s ∈ 𝓝 b )
      ( hs : IsClosed s )
      ( hp : ∀ , ∀ x ∈ s , ∀ , p x )
    : ∃ c , tendsto f comap e 𝓝 b 𝓝 c
  :=
    have
      de : DenseEmbedding e := he.dense_embedding hd
      have
        de' : DenseEmbedding DenseEmbedding.subtypeEmb p e := by exact de.subtype p
        have
          ue' : UniformEmbedding DenseEmbedding.subtypeEmb p e := uniform_embedding_subtype_emb _ he de
          have
            : b ∈ Closure e '' { x | p x } := closure_mono $ monotone_image $ hp mem_of_mem_nhds hb
            let
              ⟨ c , ( hc : tendsto f ∘ Subtype.val comap DenseEmbedding.subtypeEmb p e 𝓝 ⟨ b , this ⟩ 𝓝 c ) ⟩
                :=
                uniformly_extend_exists ue'.to_uniform_inducing de'.dense hf _
              by
                rw [ nhds_subtype_eq_comap ] at hc
                  simp [ comap_comap ] at hc
                  change tendsto f ∘ @ Subtype.val α p comap e ∘ @ Subtype.val α p 𝓝 b 𝓝 c at hc
                  rw [ ← comap_comap , tendsto_comap'_iff ] at hc
                  exact ⟨ c , hc ⟩
                  exact
                    ⟨
                      _
                        ,
                        hb
                        ,
                        fun
                          x
                            =>
                            by
                              change e x ∈ Closure e '' s → x ∈ range Subtype.val
                                rw
                                  [
                                    ← closure_induced
                                      ,
                                      mem_closure_iff_cluster_pt
                                      ,
                                      ClusterPt
                                      ,
                                      ne_bot_iff
                                      ,
                                      nhds_induced
                                      ,
                                      ← de.to_dense_inducing.nhds_eq_comap
                                      ,
                                      ← mem_closure_iff_nhds_ne_bot
                                      ,
                                      hs.closure_eq
                                    ]
                                exact fun hxs => ⟨ ⟨ x , hp x hxs ⟩ , rfl ⟩
                      ⟩

include h_f

theorem uniformly_extend_spec [CompleteSpace γ] (a : α) : tendsto f (comap e (𝓝 a)) (𝓝 (ψ a)) := by
  simpa only [DenseInducing.extend] using tendsto_nhds_lim (uniformly_extend_exists h_e ‹_› h_f _)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
 (Command.declModifiers [] [] [] [] [] [])
 (Command.theorem
  "theorem"
  (Command.declId `uniform_continuous_uniformly_extend [])
  (Command.declSig
   [(Term.instBinder "[" [`cγ ":"] (Term.app `CompleteSpace [`γ]) "]")]
   (Term.typeSpec ":" (Term.app `UniformContinuous [(Topology.UniformSpace.UniformEmbedding.termψ "ψ")])))
  (Command.declValSimple
   ":="
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`d `hd] [])]
     "=>"
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`s "," `hs "," `hs_comp] "⟩")
        []
        []
        ":="
        (Term.app
         (Term.proj
          («term_$__»
           `mem_lift'_sets
           "$"
           («term_$__»
            (Term.app `monotone_comp_rel [`monotone_id])
            "$"
            (Term.app `monotone_comp_rel [`monotone_id `monotone_id])))
          "."
          `mp)
         [(Term.app `comp_le_uniformity3 [`hd])])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h_pnt []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.implicitBinder "{" [`a `m] [] "}")]
            ","
            (Term.arrow
             (Init.Core.«term_∈_» `m " ∈ " (Term.app (Topology.Basic.term𝓝 "𝓝") [`a]))
             "→"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `c)] []))
              ","
              («term_∧_»
               (Init.Core.«term_∈_» `c " ∈ " (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m])))
               "∧"
               («term_∧_»
                (Init.Core.«term_∈_»
                 (Term.paren
                  "("
                  [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                  ")")
                 " ∈ "
                 `s)
                "∧"
                (Init.Core.«term_∈_»
                 (Term.paren
                  "("
                  [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                  ")")
                 " ∈ "
                 `s)))))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`a `m `hm] [])]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`nb []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `ne_bot
                 [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
              ":="
              (Term.app
               (Term.proj
                (Term.app
                 (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot)
                 [(Term.hole "_")])
                "."
                `map)
               [(Term.hole "_")])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Init.Core.«term_∩_»
                   (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
                   " ∩ "
                   (Init.Core.«term_∩_»
                    (Set.«term{_|_}»
                     "{"
                     `c
                     "|"
                     (Init.Core.«term_∈_»
                      (Term.paren
                       "("
                       [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                       ")")
                      " ∈ "
                      `s)
                     "}")
                    " ∩ "
                    (Set.«term{_|_}»
                     "{"
                     `c
                     "|"
                     (Init.Core.«term_∈_»
                      (Term.paren
                       "("
                       [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                       ")")
                      " ∈ "
                      `s)
                     "}")))
                  " ∈ "
                  (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
               ":="
               (Term.app
                `inter_mem
                [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
                 (Term.app
                  `uniformly_extend_spec
                  [`h_e
                   `h_dense
                   `h_f
                   (Term.hole "_")
                   (Term.app
                    `inter_mem
                    [(Term.app `mem_nhds_right [(Term.hole "_") `hs])
                     (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
             []
             (Term.app `nb.nonempty_of_mem [`this])))))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `s])
             " ∈ "
             (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])))]
          ":="
          (Term.app `h_f [`hs])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Term.app
               `preimage
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                `s])
              " ∈ "
              (Term.app
               `comap
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
                   ")")))
                (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (tacticRwa__
                 "rwa"
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                [])])))))
         []
         (Term.let
          "let"
          (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
          []
          (Term.show
           "show"
           (Init.Core.«term_∈_»
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail
                    ","
                    [(Term.app
                      (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
                      [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `d])
            " ∈ "
            (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
           (Term.fromTerm
            "from"
            («term_$__»
             (Term.app
              (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
              [(Term.app `interior_mem_uniformity [`ht])])
             "$"
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
               "=>"
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    («term_≤_»
                     (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
                     "≤"
                     (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
                  ":="
                  (Term.app
                   (Term.proj `is_open_iff_nhds "." `mp)
                   [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_»
                      (Term.app `Interior [`t])
                      " ∈ "
                      (Filter.Order.Filter.Basic.«term_×ᶠ_»
                       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                       " ×ᶠ "
                       (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(group
                        (tacticRwa__
                         "rwa"
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                          "]")
                         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                        [])])))))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor
                     "⟨"
                     [`m₁
                      ","
                      `hm₁
                      ","
                      `m₂
                      ","
                      `hm₂
                      ","
                      (Term.paren
                       "("
                       [`hm
                        [(Term.typeAscription
                          ":"
                          (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                       ")")]
                     "⟩")
                    []
                    []
                    ":="
                    (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
                     []
                     []
                     ":="
                     (Term.app `h_pnt [`hm₁])))
                   []
                   (Term.let
                    "let"
                    (Term.letDecl
                     (Term.letPatDecl
                      (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                      []
                      []
                      ":="
                      (Term.app `h_pnt [`hm₂])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_⊆_»
                          (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                          " ⊆ "
                          (Term.app
                           `preimage
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            `s])))]
                       ":="
                       (calc
                        "calc"
                        [(calcStep
                          (Init.Core.«term_⊆_»
                           (Term.hole "_")
                           " ⊆ "
                           (Term.app
                            `preimage
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                               "=>"
                               (Term.paren
                                "("
                                [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                                 [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                                ")")))
                             (Term.app `Interior [`t])]))
                          ":="
                          (Term.app `preimage_mono [`hm]))
                         (calcStep
                          (Init.Core.«term_⊆_»
                           (Term.hole "_")
                           " ⊆ "
                           (Term.app
                            `preimage
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                               "=>"
                               (Term.paren
                                "("
                                [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                                 [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                                ")")))
                             `t]))
                          ":="
                          (Term.app `preimage_mono [`interior_subset]))
                         (calcStep
                          (Init.Core.«term_⊆_»
                           (Term.hole "_")
                           " ⊆ "
                           (Term.app
                            `preimage
                            [(Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                               "=>"
                               (Term.paren
                                "("
                                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                                ")")))
                             `s]))
                          ":="
                          `ts)])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        []
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_⊆_»
                           (Term.app
                            `Set.Prod
                            [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                             (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                           " ⊆ "
                           `s))]
                        ":="
                        (calc
                         "calc"
                         [(calcStep
                           («term_=_»
                            (Term.app
                             `Set.Prod
                             [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                              (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                            "="
                            (Set.Data.Set.Basic.term_''_
                             (Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                               "=>"
                               (Term.paren
                                "("
                                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                                ")")))
                             " '' "
                             (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                           ":="
                           `prod_image_image_eq)
                          (calcStep
                           (Init.Core.«term_⊆_»
                            (Term.hole "_")
                            " ⊆ "
                            (Set.Data.Set.Basic.term_''_
                             (Term.fun
                              "fun"
                              (Term.basicFun
                               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                               "=>"
                               (Term.paren
                                "("
                                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                                ")")))
                             " '' "
                             (Term.app
                              `preimage
                              [(Term.fun
                                "fun"
                                (Term.basicFun
                                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                                 "=>"
                                 (Term.paren
                                  "("
                                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                                  ")")))
                               `s])))
                           ":="
                           (Term.app `monotone_image [`this]))
                          (calcStep
                           (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                           ":="
                           («term_$__»
                            (Term.proj `image_subset_iff "." `mpr)
                            "$"
                            (Term.app `subset.refl [(Term.hole "_")])))])))
                      []
                      (Term.have
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         []
                         [(Term.typeSpec
                           ":"
                           (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                         ":="
                         (Term.app
                          (Term.explicit "@" `this)
                          [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                           (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                       []
                       («term_$__»
                        `hs_comp
                        "$"
                        (Term.show
                         "show"
                         (Init.Core.«term_∈_»
                          (Term.paren
                           "("
                           [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                            [(Term.tupleTail
                              ","
                              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                           ")")
                          " ∈ "
                          (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                         (Term.fromTerm
                          "from"
                          (Term.anonymousCtor
                           "⟨"
                           [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                           "⟩"))))))))))))))))))))))))
   [])
  []
  []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declaration', expected 'Lean.Parser.Command.declaration.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.theorem.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValSimple.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`d `hd] [])]
    "=>"
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`s "," `hs "," `hs_comp] "⟩")
       []
       []
       ":="
       (Term.app
        (Term.proj
         («term_$__»
          `mem_lift'_sets
          "$"
          («term_$__»
           (Term.app `monotone_comp_rel [`monotone_id])
           "$"
           (Term.app `monotone_comp_rel [`monotone_id `monotone_id])))
         "."
         `mp)
        [(Term.app `comp_le_uniformity3 [`hd])])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        [`h_pnt []]
        [(Term.typeSpec
          ":"
          (Term.forall
           "∀"
           [(Term.implicitBinder "{" [`a `m] [] "}")]
           ","
           (Term.arrow
            (Init.Core.«term_∈_» `m " ∈ " (Term.app (Topology.Basic.term𝓝 "𝓝") [`a]))
            "→"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `c)] []))
             ","
             («term_∧_»
              (Init.Core.«term_∈_» `c " ∈ " (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m])))
              "∧"
              («term_∧_»
               (Init.Core.«term_∈_»
                (Term.paren
                 "("
                 [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                 ")")
                " ∈ "
                `s)
               "∧"
               (Init.Core.«term_∈_»
                (Term.paren
                 "("
                 [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                 ")")
                " ∈ "
                `s)))))))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`a `m `hm] [])]
          "=>"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`nb []]
             [(Term.typeSpec
               ":"
               (Term.app
                `ne_bot
                [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
             ":="
             (Term.app
              (Term.proj
               (Term.app (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot) [(Term.hole "_")])
               "."
               `map)
              [(Term.hole "_")])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Init.Core.«term_∩_»
                  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
                  " ∩ "
                  (Init.Core.«term_∩_»
                   (Set.«term{_|_}»
                    "{"
                    `c
                    "|"
                    (Init.Core.«term_∈_»
                     (Term.paren
                      "("
                      [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                      ")")
                     " ∈ "
                     `s)
                    "}")
                   " ∩ "
                   (Set.«term{_|_}»
                    "{"
                    `c
                    "|"
                    (Init.Core.«term_∈_»
                     (Term.paren
                      "("
                      [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                      ")")
                     " ∈ "
                     `s)
                    "}")))
                 " ∈ "
                 (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
              ":="
              (Term.app
               `inter_mem
               [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
                (Term.app
                 `uniformly_extend_spec
                 [`h_e
                  `h_dense
                  `h_f
                  (Term.hole "_")
                  (Term.app
                   `inter_mem
                   [(Term.app `mem_nhds_right [(Term.hole "_") `hs])
                    (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
            []
            (Term.app `nb.nonempty_of_mem [`this])))))))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `s])
            " ∈ "
            (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])))]
         ":="
         (Term.app `h_f [`hs])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_∈_»
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `s])
             " ∈ "
             (Term.app
              `comap
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
                  ")")))
               (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(group
               (tacticRwa__
                "rwa"
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
               [])])))))
        []
        (Term.let
         "let"
         (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
         []
         (Term.show
          "show"
          (Init.Core.«term_∈_»
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
               "=>"
               (Term.paren
                "("
                [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail
                   ","
                   [(Term.app
                     (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
                     [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `d])
           " ∈ "
           (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
          (Term.fromTerm
           "from"
           («term_$__»
            (Term.app
             (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
             [(Term.app `interior_mem_uniformity [`ht])])
            "$"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
              "=>"
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   («term_≤_»
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
                    "≤"
                    (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
                 ":="
                 (Term.app
                  (Term.proj `is_open_iff_nhds "." `mp)
                  [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_»
                     (Term.app `Interior [`t])
                     " ∈ "
                     (Filter.Order.Filter.Basic.«term_×ᶠ_»
                      (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                      " ×ᶠ "
                      (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(group
                       (tacticRwa__
                        "rwa"
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                         "]")
                        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                       [])])))))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor
                    "⟨"
                    [`m₁
                     ","
                     `hm₁
                     ","
                     `m₂
                     ","
                     `hm₂
                     ","
                     (Term.paren
                      "("
                      [`hm
                       [(Term.typeAscription
                         ":"
                         (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                      ")")]
                    "⟩")
                   []
                   []
                   ":="
                   (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
                 []
                 (Term.let
                  "let"
                  (Term.letDecl
                   (Term.letPatDecl
                    (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
                    []
                    []
                    ":="
                    (Term.app `h_pnt [`hm₁])))
                  []
                  (Term.let
                   "let"
                   (Term.letDecl
                    (Term.letPatDecl
                     (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                     []
                     []
                     ":="
                     (Term.app `h_pnt [`hm₂])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_⊆_»
                         (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                         " ⊆ "
                         (Term.app
                          `preimage
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                             "=>"
                             (Term.paren
                              "("
                              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                              ")")))
                           `s])))]
                      ":="
                      (calc
                       "calc"
                       [(calcStep
                         (Init.Core.«term_⊆_»
                          (Term.hole "_")
                          " ⊆ "
                          (Term.app
                           `preimage
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            (Term.app `Interior [`t])]))
                         ":="
                         (Term.app `preimage_mono [`hm]))
                        (calcStep
                         (Init.Core.«term_⊆_»
                          (Term.hole "_")
                          " ⊆ "
                          (Term.app
                           `preimage
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            `t]))
                         ":="
                         (Term.app `preimage_mono [`interior_subset]))
                        (calcStep
                         (Init.Core.«term_⊆_»
                          (Term.hole "_")
                          " ⊆ "
                          (Term.app
                           `preimage
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            `s]))
                         ":="
                         `ts)])))
                    []
                    (Term.have
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Init.Core.«term_⊆_»
                          (Term.app
                           `Set.Prod
                           [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                            (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                          " ⊆ "
                          `s))]
                       ":="
                       (calc
                        "calc"
                        [(calcStep
                          («term_=_»
                           (Term.app
                            `Set.Prod
                            [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                             (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                           "="
                           (Set.Data.Set.Basic.term_''_
                            (Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            " '' "
                            (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                          ":="
                          `prod_image_image_eq)
                         (calcStep
                          (Init.Core.«term_⊆_»
                           (Term.hole "_")
                           " ⊆ "
                           (Set.Data.Set.Basic.term_''_
                            (Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            " '' "
                            (Term.app
                             `preimage
                             [(Term.fun
                               "fun"
                               (Term.basicFun
                                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                                "=>"
                                (Term.paren
                                 "("
                                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                                 ")")))
                              `s])))
                          ":="
                          (Term.app `monotone_image [`this]))
                         (calcStep
                          (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                          ":="
                          («term_$__»
                           (Term.proj `image_subset_iff "." `mpr)
                           "$"
                           (Term.app `subset.refl [(Term.hole "_")])))])))
                     []
                     (Term.have
                      "have"
                      (Term.haveDecl
                       (Term.haveIdDecl
                        []
                        [(Term.typeSpec
                          ":"
                          (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                        ":="
                        (Term.app
                         (Term.explicit "@" `this)
                         [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                          (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                      []
                      («term_$__»
                       `hs_comp
                       "$"
                       (Term.show
                        "show"
                        (Init.Core.«term_∈_»
                         (Term.paren
                          "("
                          [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                           [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                          ")")
                         " ∈ "
                         (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                        (Term.fromTerm
                         "from"
                         (Term.anonymousCtor
                          "⟨"
                          [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                          "⟩"))))))))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`s "," `hs "," `hs_comp] "⟩")
     []
     []
     ":="
     (Term.app
      (Term.proj
       («term_$__»
        `mem_lift'_sets
        "$"
        («term_$__»
         (Term.app `monotone_comp_rel [`monotone_id])
         "$"
         (Term.app `monotone_comp_rel [`monotone_id `monotone_id])))
       "."
       `mp)
      [(Term.app `comp_le_uniformity3 [`hd])])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      [`h_pnt []]
      [(Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [(Term.implicitBinder "{" [`a `m] [] "}")]
         ","
         (Term.arrow
          (Init.Core.«term_∈_» `m " ∈ " (Term.app (Topology.Basic.term𝓝 "𝓝") [`a]))
          "→"
          («term∃_,_»
           "∃"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `c)] []))
           ","
           («term_∧_»
            (Init.Core.«term_∈_» `c " ∈ " (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m])))
            "∧"
            («term_∧_»
             (Init.Core.«term_∈_»
              (Term.paren
               "("
               [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
               ")")
              " ∈ "
              `s)
             "∧"
             (Init.Core.«term_∈_»
              (Term.paren
               "("
               [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
               ")")
              " ∈ "
              `s)))))))]
      ":="
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`a `m `hm] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`nb []]
           [(Term.typeSpec
             ":"
             (Term.app
              `ne_bot
              [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
           ":="
           (Term.app
            (Term.proj
             (Term.app (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot) [(Term.hole "_")])
             "."
             `map)
            [(Term.hole "_")])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Init.Core.«term_∩_»
                (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
                " ∩ "
                (Init.Core.«term_∩_»
                 (Set.«term{_|_}»
                  "{"
                  `c
                  "|"
                  (Init.Core.«term_∈_»
                   (Term.paren
                    "("
                    [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                    ")")
                   " ∈ "
                   `s)
                  "}")
                 " ∩ "
                 (Set.«term{_|_}»
                  "{"
                  `c
                  "|"
                  (Init.Core.«term_∈_»
                   (Term.paren
                    "("
                    [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                    ")")
                   " ∈ "
                   `s)
                  "}")))
               " ∈ "
               (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
            ":="
            (Term.app
             `inter_mem
             [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
              (Term.app
               `uniformly_extend_spec
               [`h_e
                `h_dense
                `h_f
                (Term.hole "_")
                (Term.app
                 `inter_mem
                 [(Term.app `mem_nhds_right [(Term.hole "_") `hs])
                  (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
          []
          (Term.app `nb.nonempty_of_mem [`this])))))))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `s])
          " ∈ "
          (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])))]
       ":="
       (Term.app `h_f [`hs])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `s])
           " ∈ "
           (Term.app
            `comap
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
                ")")))
             (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
             [])])))))
      []
      (Term.let
       "let"
       (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
       []
       (Term.show
        "show"
        (Init.Core.«term_∈_»
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
             "=>"
             (Term.paren
              "("
              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail
                 ","
                 [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `d])
         " ∈ "
         (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
        (Term.fromTerm
         "from"
         («term_$__»
          (Term.app
           (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
           [(Term.app `interior_mem_uniformity [`ht])])
          "$"
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
            "=>"
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 («term_≤_»
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
                  "≤"
                  (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
               ":="
               (Term.app
                (Term.proj `is_open_iff_nhds "." `mp)
                [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_∈_»
                   (Term.app `Interior [`t])
                   " ∈ "
                   (Filter.Order.Filter.Basic.«term_×ᶠ_»
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                    " ×ᶠ "
                    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(group
                     (tacticRwa__
                      "rwa"
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                       "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                     [])])))))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor
                  "⟨"
                  [`m₁
                   ","
                   `hm₁
                   ","
                   `m₂
                   ","
                   `hm₂
                   ","
                   (Term.paren
                    "("
                    [`hm
                     [(Term.typeAscription
                       ":"
                       (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                    ")")]
                  "⟩")
                 []
                 []
                 ":="
                 (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
                  []
                  []
                  ":="
                  (Term.app `h_pnt [`hm₁])))
                []
                (Term.let
                 "let"
                 (Term.letDecl
                  (Term.letPatDecl
                   (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                   []
                   []
                   ":="
                   (Term.app `h_pnt [`hm₂])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_⊆_»
                       (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                       " ⊆ "
                       (Term.app
                        `preimage
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         `s])))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       (Init.Core.«term_⊆_»
                        (Term.hole "_")
                        " ⊆ "
                        (Term.app
                         `preimage
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          (Term.app `Interior [`t])]))
                       ":="
                       (Term.app `preimage_mono [`hm]))
                      (calcStep
                       (Init.Core.«term_⊆_»
                        (Term.hole "_")
                        " ⊆ "
                        (Term.app
                         `preimage
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          `t]))
                       ":="
                       (Term.app `preimage_mono [`interior_subset]))
                      (calcStep
                       (Init.Core.«term_⊆_»
                        (Term.hole "_")
                        " ⊆ "
                        (Term.app
                         `preimage
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          `s]))
                       ":="
                       `ts)])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_⊆_»
                        (Term.app
                         `Set.Prod
                         [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                          (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                        " ⊆ "
                        `s))]
                     ":="
                     (calc
                      "calc"
                      [(calcStep
                        («term_=_»
                         (Term.app
                          `Set.Prod
                          [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                           (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                         "="
                         (Set.Data.Set.Basic.term_''_
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          " '' "
                          (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                        ":="
                        `prod_image_image_eq)
                       (calcStep
                        (Init.Core.«term_⊆_»
                         (Term.hole "_")
                         " ⊆ "
                         (Set.Data.Set.Basic.term_''_
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          " '' "
                          (Term.app
                           `preimage
                           [(Term.fun
                             "fun"
                             (Term.basicFun
                              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                              "=>"
                              (Term.paren
                               "("
                               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                               ")")))
                            `s])))
                        ":="
                        (Term.app `monotone_image [`this]))
                       (calcStep
                        (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                        ":="
                        («term_$__»
                         (Term.proj `image_subset_iff "." `mpr)
                         "$"
                         (Term.app `subset.refl [(Term.hole "_")])))])))
                   []
                   (Term.have
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                      ":="
                      (Term.app
                       (Term.explicit "@" `this)
                       [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                        (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                    []
                    («term_$__»
                     `hs_comp
                     "$"
                     (Term.show
                      "show"
                      (Init.Core.«term_∈_»
                       (Term.paren
                        "("
                        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                         [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                        ")")
                       " ∈ "
                       (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                      (Term.fromTerm
                       "from"
                       (Term.anonymousCtor
                        "⟨"
                        [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                        "⟩"))))))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`h_pnt []]
     [(Term.typeSpec
       ":"
       (Term.forall
        "∀"
        [(Term.implicitBinder "{" [`a `m] [] "}")]
        ","
        (Term.arrow
         (Init.Core.«term_∈_» `m " ∈ " (Term.app (Topology.Basic.term𝓝 "𝓝") [`a]))
         "→"
         («term∃_,_»
          "∃"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `c)] []))
          ","
          («term_∧_»
           (Init.Core.«term_∈_» `c " ∈ " (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m])))
           "∧"
           («term_∧_»
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
              ")")
             " ∈ "
             `s)
            "∧"
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
              ")")
             " ∈ "
             `s)))))))]
     ":="
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`a `m `hm] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`nb []]
          [(Term.typeSpec
            ":"
            (Term.app
             `ne_bot
             [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
          ":="
          (Term.app
           (Term.proj
            (Term.app (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot) [(Term.hole "_")])
            "."
            `map)
           [(Term.hole "_")])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Init.Core.«term_∩_»
               (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
               " ∩ "
               (Init.Core.«term_∩_»
                (Set.«term{_|_}»
                 "{"
                 `c
                 "|"
                 (Init.Core.«term_∈_»
                  (Term.paren
                   "("
                   [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                   ")")
                  " ∈ "
                  `s)
                 "}")
                " ∩ "
                (Set.«term{_|_}»
                 "{"
                 `c
                 "|"
                 (Init.Core.«term_∈_»
                  (Term.paren
                   "("
                   [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                   ")")
                  " ∈ "
                  `s)
                 "}")))
              " ∈ "
              (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
           ":="
           (Term.app
            `inter_mem
            [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
             (Term.app
              `uniformly_extend_spec
              [`h_e
               `h_dense
               `h_f
               (Term.hole "_")
               (Term.app
                `inter_mem
                [(Term.app `mem_nhds_right [(Term.hole "_") `hs])
                 (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
         []
         (Term.app `nb.nonempty_of_mem [`this])))))))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `s])
         " ∈ "
         (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])))]
      ":="
      (Term.app `h_f [`hs])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_∈_»
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `s])
          " ∈ "
          (Term.app
           `comap
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
               ")")))
            (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(group
            (tacticRwa__
             "rwa"
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
            [])])))))
     []
     (Term.let
      "let"
      (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
      []
      (Term.show
       "show"
       (Init.Core.«term_∈_»
        (Term.app
         `preimage
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
            "=>"
            (Term.paren
             "("
             [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail
                ","
                [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          `d])
        " ∈ "
        (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
       (Term.fromTerm
        "from"
        («term_$__»
         (Term.app
          (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
          [(Term.app `interior_mem_uniformity [`ht])])
         "$"
         (Term.fun
          "fun"
          (Term.basicFun
           [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
           "=>"
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                («term_≤_»
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
                 "≤"
                 (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
              ":="
              (Term.app
               (Term.proj `is_open_iff_nhds "." `mp)
               [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_»
                  (Term.app `Interior [`t])
                  " ∈ "
                  (Filter.Order.Filter.Basic.«term_×ᶠ_»
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                   " ×ᶠ "
                   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(group
                    (tacticRwa__
                     "rwa"
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                      "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                    [])])))))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor
                 "⟨"
                 [`m₁
                  ","
                  `hm₁
                  ","
                  `m₂
                  ","
                  `hm₂
                  ","
                  (Term.paren
                   "("
                   [`hm
                    [(Term.typeAscription
                      ":"
                      (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                   ")")]
                 "⟩")
                []
                []
                ":="
                (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
                 []
                 []
                 ":="
                 (Term.app `h_pnt [`hm₁])))
               []
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                  []
                  []
                  ":="
                  (Term.app `h_pnt [`hm₂])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_⊆_»
                      (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                      " ⊆ "
                      (Term.app
                       `preimage
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        `s])))]
                   ":="
                   (calc
                    "calc"
                    [(calcStep
                      (Init.Core.«term_⊆_»
                       (Term.hole "_")
                       " ⊆ "
                       (Term.app
                        `preimage
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         (Term.app `Interior [`t])]))
                      ":="
                      (Term.app `preimage_mono [`hm]))
                     (calcStep
                      (Init.Core.«term_⊆_»
                       (Term.hole "_")
                       " ⊆ "
                       (Term.app
                        `preimage
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         `t]))
                      ":="
                      (Term.app `preimage_mono [`interior_subset]))
                     (calcStep
                      (Init.Core.«term_⊆_»
                       (Term.hole "_")
                       " ⊆ "
                       (Term.app
                        `preimage
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         `s]))
                      ":="
                      `ts)])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_⊆_»
                       (Term.app
                        `Set.Prod
                        [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                         (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                       " ⊆ "
                       `s))]
                    ":="
                    (calc
                     "calc"
                     [(calcStep
                       («term_=_»
                        (Term.app
                         `Set.Prod
                         [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                          (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                        "="
                        (Set.Data.Set.Basic.term_''_
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         " '' "
                         (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                       ":="
                       `prod_image_image_eq)
                      (calcStep
                       (Init.Core.«term_⊆_»
                        (Term.hole "_")
                        " ⊆ "
                        (Set.Data.Set.Basic.term_''_
                         (Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         " '' "
                         (Term.app
                          `preimage
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                             "=>"
                             (Term.paren
                              "("
                              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                              ")")))
                           `s])))
                       ":="
                       (Term.app `monotone_image [`this]))
                      (calcStep
                       (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                       ":="
                       («term_$__»
                        (Term.proj `image_subset_iff "." `mpr)
                        "$"
                        (Term.app `subset.refl [(Term.hole "_")])))])))
                  []
                  (Term.have
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                     ":="
                     (Term.app
                      (Term.explicit "@" `this)
                      [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                       (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                   []
                   («term_$__»
                    `hs_comp
                    "$"
                    (Term.show
                     "show"
                     (Init.Core.«term_∈_»
                      (Term.paren
                       "("
                       [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                        [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                       ")")
                      " ∈ "
                      (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                     (Term.fromTerm
                      "from"
                      (Term.anonymousCtor
                       "⟨"
                       [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                       "⟩")))))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app
         `preimage
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          `s])
        " ∈ "
        (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])))]
     ":="
     (Term.app `h_f [`hs])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `s])
         " ∈ "
         (Term.app
          `comap
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
              ")")))
           (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
           [])])))))
    []
    (Term.let
     "let"
     (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
     []
     (Term.show
      "show"
      (Init.Core.«term_∈_»
       (Term.app
        `preimage
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
           "=>"
           (Term.paren
            "("
            [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
             [(Term.tupleTail
               ","
               [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
            ")")))
         `d])
       " ∈ "
       (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
      (Term.fromTerm
       "from"
       («term_$__»
        (Term.app
         (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
         [(Term.app `interior_mem_uniformity [`ht])])
        "$"
        (Term.fun
         "fun"
         (Term.basicFun
          [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
          "=>"
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               («term_≤_»
                (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
                "≤"
                (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
             ":="
             (Term.app
              (Term.proj `is_open_iff_nhds "." `mp)
              [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_∈_»
                 (Term.app `Interior [`t])
                 " ∈ "
                 (Filter.Order.Filter.Basic.«term_×ᶠ_»
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                  " ×ᶠ "
                  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(group
                   (tacticRwa__
                    "rwa"
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                     "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                   [])])))))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor
                "⟨"
                [`m₁
                 ","
                 `hm₁
                 ","
                 `m₂
                 ","
                 `hm₂
                 ","
                 (Term.paren
                  "("
                  [`hm
                   [(Term.typeAscription
                     ":"
                     (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                  ")")]
                "⟩")
               []
               []
               ":="
               (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
                []
                []
                ":="
                (Term.app `h_pnt [`hm₁])))
              []
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                 []
                 []
                 ":="
                 (Term.app `h_pnt [`hm₂])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_⊆_»
                     (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                     " ⊆ "
                     (Term.app
                      `preimage
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       `s])))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     (Init.Core.«term_⊆_»
                      (Term.hole "_")
                      " ⊆ "
                      (Term.app
                       `preimage
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        (Term.app `Interior [`t])]))
                     ":="
                     (Term.app `preimage_mono [`hm]))
                    (calcStep
                     (Init.Core.«term_⊆_»
                      (Term.hole "_")
                      " ⊆ "
                      (Term.app
                       `preimage
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        `t]))
                     ":="
                     (Term.app `preimage_mono [`interior_subset]))
                    (calcStep
                     (Init.Core.«term_⊆_»
                      (Term.hole "_")
                      " ⊆ "
                      (Term.app
                       `preimage
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        `s]))
                     ":="
                     `ts)])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_⊆_»
                      (Term.app
                       `Set.Prod
                       [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                        (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                      " ⊆ "
                      `s))]
                   ":="
                   (calc
                    "calc"
                    [(calcStep
                      («term_=_»
                       (Term.app
                        `Set.Prod
                        [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                         (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                       "="
                       (Set.Data.Set.Basic.term_''_
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        " '' "
                        (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                      ":="
                      `prod_image_image_eq)
                     (calcStep
                      (Init.Core.«term_⊆_»
                       (Term.hole "_")
                       " ⊆ "
                       (Set.Data.Set.Basic.term_''_
                        (Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        " '' "
                        (Term.app
                         `preimage
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                            "=>"
                            (Term.paren
                             "("
                             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                             ")")))
                          `s])))
                      ":="
                      (Term.app `monotone_image [`this]))
                     (calcStep
                      (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                      ":="
                      («term_$__»
                       (Term.proj `image_subset_iff "." `mpr)
                       "$"
                       (Term.app `subset.refl [(Term.hole "_")])))])))
                 []
                 (Term.have
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                    ":="
                    (Term.app
                     (Term.explicit "@" `this)
                     [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                      (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                  []
                  («term_$__»
                   `hs_comp
                   "$"
                   (Term.show
                    "show"
                    (Init.Core.«term_∈_»
                     (Term.paren
                      "("
                      [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                       [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                      ")")
                     " ∈ "
                     (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                    (Term.fromTerm
                     "from"
                     (Term.anonymousCtor
                      "⟨"
                      [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                      "⟩"))))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app
         `preimage
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          `s])
        " ∈ "
        (Term.app
         `comap
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
             ")")))
          (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          [])])))))
   []
   (Term.let
    "let"
    (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
    []
    (Term.show
     "show"
     (Init.Core.«term_∈_»
      (Term.app
       `preimage
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
          "=>"
          (Term.paren
           "("
           [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
            [(Term.tupleTail
              ","
              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
           ")")))
        `d])
      " ∈ "
      (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
     (Term.fromTerm
      "from"
      («term_$__»
       (Term.app
        (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
        [(Term.app `interior_mem_uniformity [`ht])])
       "$"
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
         "=>"
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              («term_≤_»
               (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
               "≤"
               (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
            ":="
            (Term.app
             (Term.proj `is_open_iff_nhds "." `mp)
             [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_∈_»
                (Term.app `Interior [`t])
                " ∈ "
                (Filter.Order.Filter.Basic.«term_×ᶠ_»
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                 " ×ᶠ "
                 (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(group
                  (tacticRwa__
                   "rwa"
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)]
                    "]")
                   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                  [])])))))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor
               "⟨"
               [`m₁
                ","
                `hm₁
                ","
                `m₂
                ","
                `hm₂
                ","
                (Term.paren
                 "("
                 [`hm
                  [(Term.typeAscription
                    ":"
                    (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                 ")")]
               "⟩")
              []
              []
              ":="
              (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
               []
               []
               ":="
               (Term.app `h_pnt [`hm₁])))
             []
             (Term.let
              "let"
              (Term.letDecl
               (Term.letPatDecl
                (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
                []
                []
                ":="
                (Term.app `h_pnt [`hm₂])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_⊆_»
                    (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                    " ⊆ "
                    (Term.app
                     `preimage
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      `s])))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    (Init.Core.«term_⊆_»
                     (Term.hole "_")
                     " ⊆ "
                     (Term.app
                      `preimage
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       (Term.app `Interior [`t])]))
                    ":="
                    (Term.app `preimage_mono [`hm]))
                   (calcStep
                    (Init.Core.«term_⊆_»
                     (Term.hole "_")
                     " ⊆ "
                     (Term.app
                      `preimage
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       `t]))
                    ":="
                    (Term.app `preimage_mono [`interior_subset]))
                   (calcStep
                    (Init.Core.«term_⊆_»
                     (Term.hole "_")
                     " ⊆ "
                     (Term.app
                      `preimage
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       `s]))
                    ":="
                    `ts)])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_⊆_»
                     (Term.app
                      `Set.Prod
                      [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                       (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                     " ⊆ "
                     `s))]
                  ":="
                  (calc
                   "calc"
                   [(calcStep
                     («term_=_»
                      (Term.app
                       `Set.Prod
                       [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                        (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                      "="
                      (Set.Data.Set.Basic.term_''_
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       " '' "
                       (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                     ":="
                     `prod_image_image_eq)
                    (calcStep
                     (Init.Core.«term_⊆_»
                      (Term.hole "_")
                      " ⊆ "
                      (Set.Data.Set.Basic.term_''_
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       " '' "
                       (Term.app
                        `preimage
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                           "=>"
                           (Term.paren
                            "("
                            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                            ")")))
                         `s])))
                     ":="
                     (Term.app `monotone_image [`this]))
                    (calcStep
                     (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                     ":="
                     («term_$__»
                      (Term.proj `image_subset_iff "." `mpr)
                      "$"
                      (Term.app `subset.refl [(Term.hole "_")])))])))
                []
                (Term.have
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                   ":="
                   (Term.app
                    (Term.explicit "@" `this)
                    [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                     (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                 []
                 («term_$__»
                  `hs_comp
                  "$"
                  (Term.show
                   "show"
                   (Init.Core.«term_∈_»
                    (Term.paren
                     "("
                     [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                      [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                     ")")
                    " ∈ "
                    (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                   (Term.fromTerm
                    "from"
                    (Term.anonymousCtor
                     "⟨"
                     [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                     "⟩")))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl (Term.letPatDecl (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩") [] [] ":=" `this))
   []
   (Term.show
    "show"
    (Init.Core.«term_∈_»
     (Term.app
      `preimage
      [(Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
         "=>"
         (Term.paren
          "("
          [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
           [(Term.tupleTail
             ","
             [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
          ")")))
       `d])
     " ∈ "
     (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
    (Term.fromTerm
     "from"
     («term_$__»
      (Term.app
       (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
       [(Term.app `interior_mem_uniformity [`ht])])
      "$"
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
        "=>"
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             («term_≤_»
              (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
              "≤"
              (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
           ":="
           (Term.app
            (Term.proj `is_open_iff_nhds "." `mp)
            [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_∈_»
               (Term.app `Interior [`t])
               " ∈ "
               (Filter.Order.Filter.Basic.«term_×ᶠ_»
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
                " ×ᶠ "
                (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(group
                 (tacticRwa__
                  "rwa"
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                 [])])))))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor
              "⟨"
              [`m₁
               ","
               `hm₁
               ","
               `m₂
               ","
               `hm₂
               ","
               (Term.paren
                "("
                [`hm
                 [(Term.typeAscription
                   ":"
                   (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
                ")")]
              "⟩")
             []
             []
             ":="
             (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
              []
              []
              ":="
              (Term.app `h_pnt [`hm₁])))
            []
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
               []
               []
               ":="
               (Term.app `h_pnt [`hm₂])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_⊆_»
                   (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                   " ⊆ "
                   (Term.app
                    `preimage
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     `s])))]
                ":="
                (calc
                 "calc"
                 [(calcStep
                   (Init.Core.«term_⊆_»
                    (Term.hole "_")
                    " ⊆ "
                    (Term.app
                     `preimage
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      (Term.app `Interior [`t])]))
                   ":="
                   (Term.app `preimage_mono [`hm]))
                  (calcStep
                   (Init.Core.«term_⊆_»
                    (Term.hole "_")
                    " ⊆ "
                    (Term.app
                     `preimage
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      `t]))
                   ":="
                   (Term.app `preimage_mono [`interior_subset]))
                  (calcStep
                   (Init.Core.«term_⊆_»
                    (Term.hole "_")
                    " ⊆ "
                    (Term.app
                     `preimage
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      `s]))
                   ":="
                   `ts)])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_⊆_»
                    (Term.app
                     `Set.Prod
                     [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                      (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                    " ⊆ "
                    `s))]
                 ":="
                 (calc
                  "calc"
                  [(calcStep
                    («term_=_»
                     (Term.app
                      `Set.Prod
                      [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                       (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                     "="
                     (Set.Data.Set.Basic.term_''_
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      " '' "
                      (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                    ":="
                    `prod_image_image_eq)
                   (calcStep
                    (Init.Core.«term_⊆_»
                     (Term.hole "_")
                     " ⊆ "
                     (Set.Data.Set.Basic.term_''_
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                        "=>"
                        (Term.paren
                         "("
                         [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                          [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                         ")")))
                      " '' "
                      (Term.app
                       `preimage
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                          "=>"
                          (Term.paren
                           "("
                           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                           ")")))
                        `s])))
                    ":="
                    (Term.app `monotone_image [`this]))
                   (calcStep
                    (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                    ":="
                    («term_$__»
                     (Term.proj `image_subset_iff "." `mpr)
                     "$"
                     (Term.app `subset.refl [(Term.hole "_")])))])))
               []
               (Term.have
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                  ":="
                  (Term.app
                   (Term.explicit "@" `this)
                   [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                    (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
                []
                («term_$__»
                 `hs_comp
                 "$"
                 (Term.show
                  "show"
                  (Init.Core.«term_∈_»
                   (Term.paren
                    "("
                    [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                     [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                    ")")
                   " ∈ "
                   (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                  (Term.fromTerm
                   "from"
                   (Term.anonymousCtor
                    "⟨"
                    [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                    "⟩"))))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.show
   "show"
   (Init.Core.«term_∈_»
    (Term.app
     `preimage
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
        "=>"
        (Term.paren
         "("
         [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
          [(Term.tupleTail
            ","
            [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
         ")")))
      `d])
    " ∈ "
    (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
   (Term.fromTerm
    "from"
    («term_$__»
     (Term.app
      (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
      [(Term.app `interior_mem_uniformity [`ht])])
     "$"
     (Term.fun
      "fun"
      (Term.basicFun
       [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
       "=>"
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            («term_≤_»
             (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
             "≤"
             (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
          ":="
          (Term.app
           (Term.proj `is_open_iff_nhds "." `mp)
           [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_∈_»
              (Term.app `Interior [`t])
              " ∈ "
              (Filter.Order.Filter.Basic.«term_×ᶠ_»
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
               " ×ᶠ "
               (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(group
                (tacticRwa__
                 "rwa"
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
                [])])))))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor
             "⟨"
             [`m₁
              ","
              `hm₁
              ","
              `m₂
              ","
              `hm₂
              ","
              (Term.paren
               "("
               [`hm
                [(Term.typeAscription
                  ":"
                  (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
               ")")]
             "⟩")
            []
            []
            ":="
            (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
          []
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
             []
             []
             ":="
             (Term.app `h_pnt [`hm₁])))
           []
           (Term.let
            "let"
            (Term.letDecl
             (Term.letPatDecl
              (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
              []
              []
              ":="
              (Term.app `h_pnt [`hm₂])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_⊆_»
                  (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                  " ⊆ "
                  (Term.app
                   `preimage
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                      "=>"
                      (Term.paren
                       "("
                       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                       ")")))
                    `s])))]
               ":="
               (calc
                "calc"
                [(calcStep
                  (Init.Core.«term_⊆_»
                   (Term.hole "_")
                   " ⊆ "
                   (Term.app
                    `preimage
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     (Term.app `Interior [`t])]))
                  ":="
                  (Term.app `preimage_mono [`hm]))
                 (calcStep
                  (Init.Core.«term_⊆_»
                   (Term.hole "_")
                   " ⊆ "
                   (Term.app
                    `preimage
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     `t]))
                  ":="
                  (Term.app `preimage_mono [`interior_subset]))
                 (calcStep
                  (Init.Core.«term_⊆_»
                   (Term.hole "_")
                   " ⊆ "
                   (Term.app
                    `preimage
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     `s]))
                  ":="
                  `ts)])))
             []
             (Term.have
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Init.Core.«term_⊆_»
                   (Term.app
                    `Set.Prod
                    [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                     (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                   " ⊆ "
                   `s))]
                ":="
                (calc
                 "calc"
                 [(calcStep
                   («term_=_»
                    (Term.app
                     `Set.Prod
                     [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                      (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                    "="
                    (Set.Data.Set.Basic.term_''_
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     " '' "
                     (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                   ":="
                   `prod_image_image_eq)
                  (calcStep
                   (Init.Core.«term_⊆_»
                    (Term.hole "_")
                    " ⊆ "
                    (Set.Data.Set.Basic.term_''_
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     " '' "
                     (Term.app
                      `preimage
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                         "=>"
                         (Term.paren
                          "("
                          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                          ")")))
                       `s])))
                   ":="
                   (Term.app `monotone_image [`this]))
                  (calcStep
                   (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                   ":="
                   («term_$__»
                    (Term.proj `image_subset_iff "." `mpr)
                    "$"
                    (Term.app `subset.refl [(Term.hole "_")])))])))
              []
              (Term.have
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
                 ":="
                 (Term.app
                  (Term.explicit "@" `this)
                  [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
                   (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
               []
               («term_$__»
                `hs_comp
                "$"
                (Term.show
                 "show"
                 (Init.Core.«term_∈_»
                  (Term.paren
                   "("
                   [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                    [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                   ")")
                  " ∈ "
                  (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
                 (Term.fromTerm
                  "from"
                  (Term.anonymousCtor
                   "⟨"
                   [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                   "⟩")))))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'Lean.Parser.Term.show.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.fromTerm.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__»
   (Term.app
    (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
    [(Term.app `interior_mem_uniformity [`ht])])
   "$"
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
     "=>"
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          («term_≤_»
           (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
           "≤"
           (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
        ":="
        (Term.app
         (Term.proj `is_open_iff_nhds "." `mp)
         [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_∈_»
            (Term.app `Interior [`t])
            " ∈ "
            (Filter.Order.Filter.Basic.«term_×ᶠ_»
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
             " ×ᶠ "
             (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(group
              (tacticRwa__
               "rwa"
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
              [])])))))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor
           "⟨"
           [`m₁
            ","
            `hm₁
            ","
            `m₂
            ","
            `hm₂
            ","
            (Term.paren
             "("
             [`hm
              [(Term.typeAscription
                ":"
                (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
             ")")]
           "⟩")
          []
          []
          ":="
          (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
           []
           []
           ":="
           (Term.app `h_pnt [`hm₁])))
         []
         (Term.let
          "let"
          (Term.letDecl
           (Term.letPatDecl
            (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
            []
            []
            ":="
            (Term.app `h_pnt [`hm₂])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_⊆_»
                (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
                " ⊆ "
                (Term.app
                 `preimage
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  `s])))]
             ":="
             (calc
              "calc"
              [(calcStep
                (Init.Core.«term_⊆_»
                 (Term.hole "_")
                 " ⊆ "
                 (Term.app
                  `preimage
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                     "=>"
                     (Term.paren
                      "("
                      [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                       [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                      ")")))
                   (Term.app `Interior [`t])]))
                ":="
                (Term.app `preimage_mono [`hm]))
               (calcStep
                (Init.Core.«term_⊆_»
                 (Term.hole "_")
                 " ⊆ "
                 (Term.app
                  `preimage
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                     "=>"
                     (Term.paren
                      "("
                      [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                       [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                      ")")))
                   `t]))
                ":="
                (Term.app `preimage_mono [`interior_subset]))
               (calcStep
                (Init.Core.«term_⊆_»
                 (Term.hole "_")
                 " ⊆ "
                 (Term.app
                  `preimage
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                     "=>"
                     (Term.paren
                      "("
                      [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                       [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                      ")")))
                   `s]))
                ":="
                `ts)])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Init.Core.«term_⊆_»
                 (Term.app
                  `Set.Prod
                  [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                   (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                 " ⊆ "
                 `s))]
              ":="
              (calc
               "calc"
               [(calcStep
                 («term_=_»
                  (Term.app
                   `Set.Prod
                   [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                    (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                  "="
                  (Set.Data.Set.Basic.term_''_
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                     "=>"
                     (Term.paren
                      "("
                      [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                       [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                      ")")))
                   " '' "
                   (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                 ":="
                 `prod_image_image_eq)
                (calcStep
                 (Init.Core.«term_⊆_»
                  (Term.hole "_")
                  " ⊆ "
                  (Set.Data.Set.Basic.term_''_
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                     "=>"
                     (Term.paren
                      "("
                      [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                       [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                      ")")))
                   " '' "
                   (Term.app
                    `preimage
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                       "=>"
                       (Term.paren
                        "("
                        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                        ")")))
                     `s])))
                 ":="
                 (Term.app `monotone_image [`this]))
                (calcStep
                 (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                 ":="
                 («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
            []
            (Term.have
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
               ":="
               (Term.app
                (Term.explicit "@" `this)
                [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
             []
             («term_$__»
              `hs_comp
              "$"
              (Term.show
               "show"
               (Init.Core.«term_∈_»
                (Term.paren
                 "("
                 [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                  [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                 ")")
                " ∈ "
                (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
               (Term.fromTerm
                "from"
                (Term.anonymousCtor
                 "⟨"
                 [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                 "⟩")))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩") (Term.simpleBinder [`hx_t] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         («term_≤_»
          (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
          "≤"
          (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
       ":="
       (Term.app
        (Term.proj `is_open_iff_nhds "." `mp)
        [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Term.app `Interior [`t])
           " ∈ "
           (Filter.Order.Filter.Basic.«term_×ᶠ_»
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
            " ×ᶠ "
            (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(group
             (tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
             [])])))))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor
          "⟨"
          [`m₁
           ","
           `hm₁
           ","
           `m₂
           ","
           `hm₂
           ","
           (Term.paren
            "("
            [`hm
             [(Term.typeAscription
               ":"
               (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
            ")")]
          "⟩")
         []
         []
         ":="
         (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
       []
       (Term.let
        "let"
        (Term.letDecl
         (Term.letPatDecl
          (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
          []
          []
          ":="
          (Term.app `h_pnt [`hm₁])))
        []
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
           []
           []
           ":="
           (Term.app `h_pnt [`hm₂])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec
              ":"
              (Init.Core.«term_⊆_»
               (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
               " ⊆ "
               (Term.app
                `preimage
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                   "=>"
                   (Term.paren
                    "("
                    [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                     [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                    ")")))
                 `s])))]
            ":="
            (calc
             "calc"
             [(calcStep
               (Init.Core.«term_⊆_»
                (Term.hole "_")
                " ⊆ "
                (Term.app
                 `preimage
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  (Term.app `Interior [`t])]))
               ":="
               (Term.app `preimage_mono [`hm]))
              (calcStep
               (Init.Core.«term_⊆_»
                (Term.hole "_")
                " ⊆ "
                (Term.app
                 `preimage
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  `t]))
               ":="
               (Term.app `preimage_mono [`interior_subset]))
              (calcStep
               (Init.Core.«term_⊆_»
                (Term.hole "_")
                " ⊆ "
                (Term.app
                 `preimage
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  `s]))
               ":="
               `ts)])))
          []
          (Term.have
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Init.Core.«term_⊆_»
                (Term.app
                 `Set.Prod
                 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                " ⊆ "
                `s))]
             ":="
             (calc
              "calc"
              [(calcStep
                («term_=_»
                 (Term.app
                  `Set.Prod
                  [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                   (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
                 "="
                 (Set.Data.Set.Basic.term_''_
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  " '' "
                  (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
                ":="
                `prod_image_image_eq)
               (calcStep
                (Init.Core.«term_⊆_»
                 (Term.hole "_")
                 " ⊆ "
                 (Set.Data.Set.Basic.term_''_
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  " '' "
                  (Term.app
                   `preimage
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                      "=>"
                      (Term.paren
                       "("
                       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                       ")")))
                    `s])))
                ":="
                (Term.app `monotone_image [`this]))
               (calcStep
                (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
                ":="
                («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
           []
           (Term.have
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
              ":="
              (Term.app
               (Term.explicit "@" `this)
               [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
            []
            («term_$__»
             `hs_comp
             "$"
             (Term.show
              "show"
              (Init.Core.«term_∈_»
               (Term.paren
                "("
                [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
                 [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
                ")")
               " ∈ "
               (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
              (Term.fromTerm
               "from"
               (Term.anonymousCtor
                "⟨"
                [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
                "⟩"))))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       («term_≤_»
        (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
        "≤"
        (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])))]
     ":="
     (Term.app
      (Term.proj `is_open_iff_nhds "." `mp)
      [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Term.app `Interior [`t])
         " ∈ "
         (Filter.Order.Filter.Basic.«term_×ᶠ_»
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
          " ×ᶠ "
          (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
      ":="
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(group
           (tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
           [])])))))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor
        "⟨"
        [`m₁
         ","
         `hm₁
         ","
         `m₂
         ","
         `hm₂
         ","
         (Term.paren
          "("
          [`hm
           [(Term.typeAscription
             ":"
             (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
          ")")]
        "⟩")
       []
       []
       ":="
       (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
        []
        []
        ":="
        (Term.app `h_pnt [`hm₁])))
      []
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
         []
         []
         ":="
         (Term.app `h_pnt [`hm₂])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_⊆_»
             (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
             " ⊆ "
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `s])))]
          ":="
          (calc
           "calc"
           [(calcStep
             (Init.Core.«term_⊆_»
              (Term.hole "_")
              " ⊆ "
              (Term.app
               `preimage
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                (Term.app `Interior [`t])]))
             ":="
             (Term.app `preimage_mono [`hm]))
            (calcStep
             (Init.Core.«term_⊆_»
              (Term.hole "_")
              " ⊆ "
              (Term.app
               `preimage
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                `t]))
             ":="
             (Term.app `preimage_mono [`interior_subset]))
            (calcStep
             (Init.Core.«term_⊆_»
              (Term.hole "_")
              " ⊆ "
              (Term.app
               `preimage
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                `s]))
             ":="
             `ts)])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Init.Core.«term_⊆_»
              (Term.app
               `Set.Prod
               [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
              " ⊆ "
              `s))]
           ":="
           (calc
            "calc"
            [(calcStep
              («term_=_»
               (Term.app
                `Set.Prod
                [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                 (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
               "="
               (Set.Data.Set.Basic.term_''_
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                " '' "
                (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
              ":="
              `prod_image_image_eq)
             (calcStep
              (Init.Core.«term_⊆_»
               (Term.hole "_")
               " ⊆ "
               (Set.Data.Set.Basic.term_''_
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                " '' "
                (Term.app
                 `preimage
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                    "=>"
                    (Term.paren
                     "("
                     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                     ")")))
                  `s])))
              ":="
              (Term.app `monotone_image [`this]))
             (calcStep
              (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
              ":="
              («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
            ":="
            (Term.app
             (Term.explicit "@" `this)
             [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
          []
          («term_$__»
           `hs_comp
           "$"
           (Term.show
            "show"
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
               [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
              ")")
             " ∈ "
             (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
            (Term.fromTerm
             "from"
             (Term.anonymousCtor
              "⟨"
              [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
              "⟩"))))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Term.app `Interior [`t])
        " ∈ "
        (Filter.Order.Filter.Basic.«term_×ᶠ_»
         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
         " ×ᶠ "
         (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))))]
     ":="
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(group
          (tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          [])])))))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor
       "⟨"
       [`m₁
        ","
        `hm₁
        ","
        `m₂
        ","
        `hm₂
        ","
        (Term.paren
         "("
         [`hm
          [(Term.typeAscription
            ":"
            (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
         ")")]
       "⟩")
      []
      []
      ":="
      (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
       []
       []
       ":="
       (Term.app `h_pnt [`hm₁])))
     []
     (Term.let
      "let"
      (Term.letDecl
       (Term.letPatDecl
        (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
        []
        []
        ":="
        (Term.app `h_pnt [`hm₂])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_⊆_»
            (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
            " ⊆ "
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `s])))]
         ":="
         (calc
          "calc"
          [(calcStep
            (Init.Core.«term_⊆_»
             (Term.hole "_")
             " ⊆ "
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               (Term.app `Interior [`t])]))
            ":="
            (Term.app `preimage_mono [`hm]))
           (calcStep
            (Init.Core.«term_⊆_»
             (Term.hole "_")
             " ⊆ "
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `t]))
            ":="
            (Term.app `preimage_mono [`interior_subset]))
           (calcStep
            (Init.Core.«term_⊆_»
             (Term.hole "_")
             " ⊆ "
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `s]))
            ":="
            `ts)])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec
            ":"
            (Init.Core.«term_⊆_»
             (Term.app
              `Set.Prod
              [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
               (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
             " ⊆ "
             `s))]
          ":="
          (calc
           "calc"
           [(calcStep
             («term_=_»
              (Term.app
               `Set.Prod
               [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
                (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
              "="
              (Set.Data.Set.Basic.term_''_
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               " '' "
               (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
             ":="
             `prod_image_image_eq)
            (calcStep
             (Init.Core.«term_⊆_»
              (Term.hole "_")
              " ⊆ "
              (Set.Data.Set.Basic.term_''_
               (Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               " '' "
               (Term.app
                `preimage
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                   "=>"
                   (Term.paren
                    "("
                    [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                     [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                    ")")))
                 `s])))
             ":="
             (Term.app `monotone_image [`this]))
            (calcStep
             (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
             ":="
             («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
           ":="
           (Term.app
            (Term.explicit "@" `this)
            [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
         []
         («term_$__»
          `hs_comp
          "$"
          (Term.show
           "show"
           (Init.Core.«term_∈_»
            (Term.paren
             "("
             [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
              [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
             ")")
            " ∈ "
            (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
           (Term.fromTerm
            "from"
            (Term.anonymousCtor
             "⟨"
             [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")]
             "⟩")))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor
      "⟨"
      [`m₁
       ","
       `hm₁
       ","
       `m₂
       ","
       `hm₂
       ","
       (Term.paren
        "("
        [`hm
         [(Term.typeAscription
           ":"
           (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
        ")")]
      "⟩")
     []
     []
     ":="
     (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
      []
      []
      ":="
      (Term.app `h_pnt [`hm₁])))
    []
    (Term.let
     "let"
     (Term.letDecl
      (Term.letPatDecl
       (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
       []
       []
       ":="
       (Term.app `h_pnt [`hm₂])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_⊆_»
           (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
           " ⊆ "
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `s])))]
        ":="
        (calc
         "calc"
         [(calcStep
           (Init.Core.«term_⊆_»
            (Term.hole "_")
            " ⊆ "
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              (Term.app `Interior [`t])]))
           ":="
           (Term.app `preimage_mono [`hm]))
          (calcStep
           (Init.Core.«term_⊆_»
            (Term.hole "_")
            " ⊆ "
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `t]))
           ":="
           (Term.app `preimage_mono [`interior_subset]))
          (calcStep
           (Init.Core.«term_⊆_»
            (Term.hole "_")
            " ⊆ "
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `s]))
           ":="
           `ts)])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Init.Core.«term_⊆_»
            (Term.app
             `Set.Prod
             [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
              (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
            " ⊆ "
            `s))]
         ":="
         (calc
          "calc"
          [(calcStep
            («term_=_»
             (Term.app
              `Set.Prod
              [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
               (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
             "="
             (Set.Data.Set.Basic.term_''_
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              " '' "
              (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
            ":="
            `prod_image_image_eq)
           (calcStep
            (Init.Core.«term_⊆_»
             (Term.hole "_")
             " ⊆ "
             (Set.Data.Set.Basic.term_''_
              (Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              " '' "
              (Term.app
               `preimage
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                  "=>"
                  (Term.paren
                   "("
                   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                   ")")))
                `s])))
            ":="
            (Term.app `monotone_image [`this]))
           (calcStep
            (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
            ":="
            («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          []
          [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
          ":="
          (Term.app
           (Term.explicit "@" `this)
           [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
        []
        («term_$__»
         `hs_comp
         "$"
         (Term.show
          "show"
          (Init.Core.«term_∈_»
           (Term.paren
            "("
            [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
             [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
            ")")
           " ∈ "
           (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
          (Term.fromTerm
           "from"
           (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩"))))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
     []
     []
     ":="
     (Term.app `h_pnt [`hm₁])))
   []
   (Term.let
    "let"
    (Term.letDecl
     (Term.letPatDecl
      (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
      []
      []
      ":="
      (Term.app `h_pnt [`hm₂])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_⊆_»
          (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
          " ⊆ "
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `s])))]
       ":="
       (calc
        "calc"
        [(calcStep
          (Init.Core.«term_⊆_»
           (Term.hole "_")
           " ⊆ "
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             (Term.app `Interior [`t])]))
          ":="
          (Term.app `preimage_mono [`hm]))
         (calcStep
          (Init.Core.«term_⊆_»
           (Term.hole "_")
           " ⊆ "
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `t]))
          ":="
          (Term.app `preimage_mono [`interior_subset]))
         (calcStep
          (Init.Core.«term_⊆_»
           (Term.hole "_")
           " ⊆ "
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `s]))
          ":="
          `ts)])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_⊆_»
           (Term.app
            `Set.Prod
            [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
             (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
           " ⊆ "
           `s))]
        ":="
        (calc
         "calc"
         [(calcStep
           («term_=_»
            (Term.app
             `Set.Prod
             [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
              (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
            "="
            (Set.Data.Set.Basic.term_''_
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             " '' "
             (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
           ":="
           `prod_image_image_eq)
          (calcStep
           (Init.Core.«term_⊆_»
            (Term.hole "_")
            " ⊆ "
            (Set.Data.Set.Basic.term_''_
             (Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             " '' "
             (Term.app
              `preimage
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                 "=>"
                 (Term.paren
                  "("
                  [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                   [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                  ")")))
               `s])))
           ":="
           (Term.app `monotone_image [`this]))
          (calcStep
           (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
           ":="
           («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
      []
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
         ":="
         (Term.app
          (Term.explicit "@" `this)
          [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
       []
       («term_$__»
        `hs_comp
        "$"
        (Term.show
         "show"
         (Init.Core.«term_∈_»
          (Term.paren
           "("
           [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
            [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
           ")")
          " ∈ "
          (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
         (Term.fromTerm
          "from"
          (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩")))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.let
   "let"
   (Term.letDecl
    (Term.letPatDecl
     (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
     []
     []
     ":="
     (Term.app `h_pnt [`hm₂])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_⊆_»
         (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
         " ⊆ "
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `s])))]
      ":="
      (calc
       "calc"
       [(calcStep
         (Init.Core.«term_⊆_»
          (Term.hole "_")
          " ⊆ "
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            (Term.app `Interior [`t])]))
         ":="
         (Term.app `preimage_mono [`hm]))
        (calcStep
         (Init.Core.«term_⊆_»
          (Term.hole "_")
          " ⊆ "
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `t]))
         ":="
         (Term.app `preimage_mono [`interior_subset]))
        (calcStep
         (Init.Core.«term_⊆_»
          (Term.hole "_")
          " ⊆ "
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `s]))
         ":="
         `ts)])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec
         ":"
         (Init.Core.«term_⊆_»
          (Term.app
           `Set.Prod
           [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
            (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
          " ⊆ "
          `s))]
       ":="
       (calc
        "calc"
        [(calcStep
          («term_=_»
           (Term.app
            `Set.Prod
            [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
             (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
           "="
           (Set.Data.Set.Basic.term_''_
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            " '' "
            (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
          ":="
          `prod_image_image_eq)
         (calcStep
          (Init.Core.«term_⊆_»
           (Term.hole "_")
           " ⊆ "
           (Set.Data.Set.Basic.term_''_
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            " '' "
            (Term.app
             `preimage
             [(Term.fun
               "fun"
               (Term.basicFun
                [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
                "=>"
                (Term.paren
                 "("
                 [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                  [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                 ")")))
              `s])))
          ":="
          (Term.app `monotone_image [`this]))
         (calcStep
          (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
          ":="
          («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
        ":="
        (Term.app
         (Term.explicit "@" `this)
         [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
      []
      («term_$__»
       `hs_comp
       "$"
       (Term.show
        "show"
        (Init.Core.«term_∈_»
         (Term.paren
          "("
          [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
           [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
          ")")
         " ∈ "
         (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
        (Term.fromTerm
         "from"
         (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩"))))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.let', expected 'Lean.Parser.Term.let.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_⊆_»
        (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
        " ⊆ "
        (Term.app
         `preimage
         [(Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          `s])))]
     ":="
     (calc
      "calc"
      [(calcStep
        (Init.Core.«term_⊆_»
         (Term.hole "_")
         " ⊆ "
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           (Term.app `Interior [`t])]))
        ":="
        (Term.app `preimage_mono [`hm]))
       (calcStep
        (Init.Core.«term_⊆_»
         (Term.hole "_")
         " ⊆ "
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `t]))
        ":="
        (Term.app `preimage_mono [`interior_subset]))
       (calcStep
        (Init.Core.«term_⊆_»
         (Term.hole "_")
         " ⊆ "
         (Term.app
          `preimage
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           `s]))
        ":="
        `ts)])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_⊆_»
         (Term.app
          `Set.Prod
          [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
           (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
         " ⊆ "
         `s))]
      ":="
      (calc
       "calc"
       [(calcStep
         («term_=_»
          (Term.app
           `Set.Prod
           [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
            (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
          "="
          (Set.Data.Set.Basic.term_''_
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           " '' "
           (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
         ":="
         `prod_image_image_eq)
        (calcStep
         (Init.Core.«term_⊆_»
          (Term.hole "_")
          " ⊆ "
          (Set.Data.Set.Basic.term_''_
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
             "=>"
             (Term.paren
              "("
              [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
               [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
              ")")))
           " '' "
           (Term.app
            `preimage
            [(Term.fun
              "fun"
              (Term.basicFun
               [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
               "=>"
               (Term.paren
                "("
                [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                 [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
                ")")))
             `s])))
         ":="
         (Term.app `monotone_image [`this]))
        (calcStep
         (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
         ":="
         («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
    []
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       []
       [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
       ":="
       (Term.app
        (Term.explicit "@" `this)
        [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
     []
     («term_$__»
      `hs_comp
      "$"
      (Term.show
       "show"
       (Init.Core.«term_∈_»
        (Term.paren
         "("
         [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
          [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
         ")")
        " ∈ "
        (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
       (Term.fromTerm
        "from"
        (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩")))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_⊆_»
        (Term.app
         `Set.Prod
         [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
          (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
        " ⊆ "
        `s))]
     ":="
     (calc
      "calc"
      [(calcStep
        («term_=_»
         (Term.app
          `Set.Prod
          [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
           (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
         "="
         (Set.Data.Set.Basic.term_''_
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          " '' "
          (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
        ":="
        `prod_image_image_eq)
       (calcStep
        (Init.Core.«term_⊆_»
         (Term.hole "_")
         " ⊆ "
         (Set.Data.Set.Basic.term_''_
          (Term.fun
           "fun"
           (Term.basicFun
            [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
            "=>"
            (Term.paren
             "("
             [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
              [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
             ")")))
          " '' "
          (Term.app
           `preimage
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
              "=>"
              (Term.paren
               "("
               [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
                [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
               ")")))
            `s])))
        ":="
        (Term.app `monotone_image [`this]))
       (calcStep
        (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
        ":="
        («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
      ":="
      (Term.app
       (Term.explicit "@" `this)
       [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
    []
    («term_$__»
     `hs_comp
     "$"
     (Term.show
      "show"
      (Init.Core.«term_∈_»
       (Term.paren
        "("
        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
         [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
        ")")
       " ∈ "
       (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
      (Term.fromTerm
       "from"
       (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩"))))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec ":" (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s))]
     ":="
     (Term.app
      (Term.explicit "@" `this)
      [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])))
   []
   («term_$__»
    `hs_comp
    "$"
    (Term.show
     "show"
     (Init.Core.«term_∈_»
      (Term.paren
       "("
       [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
        [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
       ")")
      " ∈ "
      (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
     (Term.fromTerm
      "from"
      (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩")))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__»
   `hs_comp
   "$"
   (Term.show
    "show"
    (Init.Core.«term_∈_»
     (Term.paren
      "("
      [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
       [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
      ")")
     " ∈ "
     (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
    (Term.fromTerm
     "from"
     (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩"))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.show
   "show"
   (Init.Core.«term_∈_»
    (Term.paren
     "("
     [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
      [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
     ")")
    " ∈ "
    (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
   (Term.fromTerm
    "from"
    (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.show', expected 'Lean.Parser.Term.show.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fromTerm', expected 'Lean.Parser.Term.fromTerm.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`a "," `ha₂ "," (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`b "," `this "," `hb₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.paren
    "("
    [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
     [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
    ")")
   " ∈ "
   (Term.app `CompRel [`s (Term.app `CompRel [`s `s])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `CompRel [`s (Term.app `CompRel [`s `s])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `CompRel [`s `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CompRel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `CompRel [`s `s]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `CompRel
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren
   "("
   [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
    [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.UniformEmbedding.termψ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`x₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.UniformEmbedding.termψ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `hs_comp
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.explicit "@" `this)
   [(Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`ha₁ "," `hb₁] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.explicit "@" `this)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicit', expected 'Lean.Parser.Term.explicit.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_» (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")") " ∈ " `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [`a [(Term.tupleTail "," [`b])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (calc
   "calc"
   [(calcStep
     («term_=_»
      (Term.app
       `Set.Prod
       [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
        (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
      "="
      (Set.Data.Set.Basic.term_''_
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
         "=>"
         (Term.paren
          "("
          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
          ")")))
       " '' "
       (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
     ":="
     `prod_image_image_eq)
    (calcStep
     (Init.Core.«term_⊆_»
      (Term.hole "_")
      " ⊆ "
      (Set.Data.Set.Basic.term_''_
       (Term.fun
        "fun"
        (Term.basicFun
         [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
         "=>"
         (Term.paren
          "("
          [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
           [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
          ")")))
       " '' "
       (Term.app
        `preimage
        [(Term.fun
          "fun"
          (Term.basicFun
           [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
           "=>"
           (Term.paren
            "("
            [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
             [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
            ")")))
         `s])))
     ":="
     (Term.app `monotone_image [`this]))
    (calcStep
     (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
     ":="
     («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» (Term.proj `image_subset_iff "." `mpr) "$" (Term.app `subset.refl [(Term.hole "_")]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `subset.refl [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `subset.refl
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.proj `image_subset_iff "." `mpr)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `image_subset_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_» (Term.hole "_") " ⊆ " `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `monotone_image [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `monotone_image
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.hole "_")
   " ⊆ "
   (Set.Data.Set.Basic.term_''_
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    " '' "
    (Term.app
     `preimage
     [(Term.fun
       "fun"
       (Term.basicFun
        [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
        "=>"
        (Term.paren
         "("
         [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
          [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
         ")")))
      `s])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
     "=>"
     (Term.paren
      "("
      [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
       [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
      ")")))
   " '' "
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `s]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (some 0, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  `prod_image_image_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_=_»
   (Term.app
    `Set.Prod
    [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
     (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
   "="
   (Set.Data.Set.Basic.term_''_
    (Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    " '' "
    (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_=_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_
   (Term.fun
    "fun"
    (Term.basicFun
     [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
     "=>"
     (Term.paren
      "("
      [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
       [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
      ")")))
   " '' "
   (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`e `m₂]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `preimage [`e `m₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`e `m₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (some 0, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `Set.Prod
   [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
    (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂])) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.app
    `Set.Prod
    [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
     (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
   " ⊆ "
   `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `Set.Prod
   [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
    (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₂])) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Basic.term_''_', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m₁])) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (calc
   "calc"
   [(calcStep
     (Init.Core.«term_⊆_»
      (Term.hole "_")
      " ⊆ "
      (Term.app
       `preimage
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
          "=>"
          (Term.paren
           "("
           [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
            [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
           ")")))
        (Term.app `Interior [`t])]))
     ":="
     (Term.app `preimage_mono [`hm]))
    (calcStep
     (Init.Core.«term_⊆_»
      (Term.hole "_")
      " ⊆ "
      (Term.app
       `preimage
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
          "=>"
          (Term.paren
           "("
           [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
            [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
           ")")))
        `t]))
     ":="
     (Term.app `preimage_mono [`interior_subset]))
    (calcStep
     (Init.Core.«term_⊆_»
      (Term.hole "_")
      " ⊆ "
      (Term.app
       `preimage
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
          "=>"
          (Term.paren
           "("
           [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
            [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
           ")")))
        `s]))
     ":="
     `ts)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calc', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ts
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.hole "_")
   " ⊆ "
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `s]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `preimage_mono [`interior_subset])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `interior_subset
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage_mono
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.hole "_")
   " ⊆ "
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `t]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `e [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'calcStep', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `preimage_mono [`hm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage_mono
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.hole "_")
   " ⊆ "
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     (Term.app `Interior [`t])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    (Term.app `Interior [`t])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Interior [`t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Interior [`t]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `e [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_»
   (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
   " ⊆ "
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `s]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Set.Prod [(Term.app `preimage [`e `m₁]) (Term.app `preimage [`e `m₂])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `preimage [`e `m₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`e `m₂]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `preimage [`e `m₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `preimage [`e `m₁]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `h_pnt [`hm₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h_pnt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`b "," `hb₁ "," `hb₂ "," (Term.hole "_")] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hb₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `b
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `h_pnt [`hm₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h_pnt
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`a "," `ha₁ "," (Term.hole "_") "," `ha₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ha₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app (Term.proj `mem_prod_iff "." `mp) [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `mem_prod_iff "." `mp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `mem_prod_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor
   "⟨"
   [`m₁
    ","
    `hm₁
    ","
    `m₂
    ","
    `hm₂
    ","
    (Term.paren
     "("
     [`hm
      [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
     ")")]
   "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [`hm
    [(Term.typeAscription ":" (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t])))]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.tupleTail'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.typeAscription.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_⊆_» (Term.app `Set.Prod [`m₁ `m₂]) " ⊆ " (Term.app `Interior [`t]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_⊆_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Interior [`t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Set.Prod [`m₁ `m₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Set.Prod
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `hm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `m₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nhds_prod_eq) "," (Tactic.rwRule [] `le_principal_iff)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `le_principal_iff
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `nhds_prod_eq
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.app `Interior [`t])
   " ∈ "
   (Filter.Order.Filter.Basic.«term_×ᶠ_»
    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
    " ×ᶠ "
    (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Filter.Order.Filter.Basic.«term_×ᶠ_»
   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
   " ×ᶠ "
   (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Filter.Order.Filter.Basic.«term_×ᶠ_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 61 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 60, term))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`x₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 60 >? 1022, (some 1023, term) <=? (some 60, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 60, (some 61, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app `Interior [`t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   (Term.proj `is_open_iff_nhds "." `mp)
   [`is_open_interior (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")") `hx_t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hx_t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `x₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `is_open_interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj `is_open_iff_nhds "." `mp)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `is_open_iff_nhds
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_≤_»
   (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
   "≤"
   (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_≤_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Filter.Order.Filter.Basic.term𝓟 "𝓟") [(Term.app `Interior [`t])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `Interior [`t])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `Interior
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `Interior [`t]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Filter.Order.Filter.Basic.term𝓟 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Filter.Order.Filter.Basic.term𝓟', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [(Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren "(" [`x₁ [(Term.tupleTail "," [`x₂])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  `x₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.simpleBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.anonymousCtor "⟨" [`x₁ "," `x₂] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₂
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `x₁
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  (Term.app
   (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
   [(Term.app `interior_mem_uniformity [`ht])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `interior_mem_uniformity [`ht])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ht
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `interior_mem_uniformity
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `interior_mem_uniformity [`ht]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Term.proj (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) "." `sets_of_superset)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.Basic.term𝓤 "𝓤")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.Basic.term𝓤', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) []]
 ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
       "=>"
       (Term.paren
        "("
        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail
           ","
           [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `d])
   " ∈ "
   (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.Basic.term𝓤 "𝓤")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.Basic.term𝓤', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
      "=>"
      (Term.paren
       "("
       [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail
          ","
          [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `d])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `d
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
    "=>"
    (Term.paren
     "("
     [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail
        ","
        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail
      ","
      [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.UniformEmbedding.termψ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.UniformEmbedding.termψ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `α "×" `α)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `α "×" `α))])]
    "=>"
    (Term.paren
     "("
     [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail
        ","
        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letDecl', expected 'Lean.Parser.Term.letDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.anonymousCtor "⟨" [`t "," `ht "," `ts] "⟩")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.anonymousCtor.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ts
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `ht
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `t
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.byTactic
   "by"
   (Tactic.tacticSeq
    (Tactic.tacticSeq1Indented
     [(group
       (tacticRwa__
        "rwa"
        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
        [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
       [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.byTactic.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq', expected 'Lean.Parser.Tactic.tacticSeq.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeq1Indented.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'group', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (tacticRwa__
   "rwa"
   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h_e.comap_uniformity.symm)] "]")
   [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'tacticRwa__', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.location', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.rwRule', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `h_e.comap_uniformity.symm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `s])
   " ∈ "
   (Term.app
    `comap
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
        ")")))
     (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `comap
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
       ")")))
    (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `α
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.Basic.term𝓤 "𝓤")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.Basic.term𝓤', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`α]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `e [(Term.proj `x "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `x "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `x "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `x
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`x] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `e [(Term.proj `x "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `e [(Term.proj `x "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app `h_f [`hs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `h_f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.app
    `preimage
    [(Term.fun
      "fun"
      (Term.basicFun
       [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
       "=>"
       (Term.paren
        "("
        [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
         [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
        ")")))
     `s])
   " ∈ "
   (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.UniformSpace.Basic.term𝓤 "𝓤") [`β])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.Basic.term𝓤 "𝓤")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.Basic.term𝓤', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.app
   `preimage
   [(Term.fun
     "fun"
     (Term.basicFun
      [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
      "=>"
      (Term.paren
       "("
       [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
        [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
       ")")))
    `s])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.paren
   "("
   [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
    [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
   ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "2"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.proj `p "." (fieldIdx "1"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `p
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.simpleBinder', expected 'Lean.Parser.Term.simpleBinder.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_×_» `β "×" `β)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_×_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
  `β
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 36 >? 1024, (none, [anonymous]) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`p] [(Term.typeSpec ":" («term_×_» `β "×" `β))])]
    "=>"
    (Term.paren
     "("
     [(Term.app `f [(Term.proj `p "." (fieldIdx "1"))])
      [(Term.tupleTail "," [(Term.app `f [(Term.proj `p "." (fieldIdx "2"))])])]]
     ")")))
  []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `preimage
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.fun
   "fun"
   (Term.basicFun
    [(Term.simpleBinder [`a `m `hm] [])]
    "=>"
    (Term.have
     "have"
     (Term.haveDecl
      (Term.haveIdDecl
       [`nb []]
       [(Term.typeSpec
         ":"
         (Term.app `ne_bot [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
       ":="
       (Term.app
        (Term.proj
         (Term.app (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot) [(Term.hole "_")])
         "."
         `map)
        [(Term.hole "_")])))
     []
     (Term.have
      "have"
      (Term.haveDecl
       (Term.haveIdDecl
        []
        [(Term.typeSpec
          ":"
          (Init.Core.«term_∈_»
           (Init.Core.«term_∩_»
            (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
            " ∩ "
            (Init.Core.«term_∩_»
             (Set.«term{_|_}»
              "{"
              `c
              "|"
              (Init.Core.«term_∈_»
               (Term.paren
                "("
                [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
                ")")
               " ∈ "
               `s)
              "}")
             " ∩ "
             (Set.«term{_|_}»
              "{"
              `c
              "|"
              (Init.Core.«term_∈_»
               (Term.paren
                "("
                [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
                ")")
               " ∈ "
               `s)
              "}")))
           " ∈ "
           (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
        ":="
        (Term.app
         `inter_mem
         [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
          (Term.app
           `uniformly_extend_spec
           [`h_e
            `h_dense
            `h_f
            (Term.hole "_")
            (Term.app
             `inter_mem
             [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
      []
      (Term.app `nb.nonempty_of_mem [`this])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.fun.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.basicFun.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     [`nb []]
     [(Term.typeSpec
       ":"
       (Term.app `ne_bot [(Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])]))]
     ":="
     (Term.app
      (Term.proj
       (Term.app (Term.proj (Term.app `h_e.dense_inducing [`h_dense]) "." `comap_nhds_ne_bot) [(Term.hole "_")])
       "."
       `map)
      [(Term.hole "_")])))
   []
   (Term.have
    "have"
    (Term.haveDecl
     (Term.haveIdDecl
      []
      [(Term.typeSpec
        ":"
        (Init.Core.«term_∈_»
         (Init.Core.«term_∩_»
          (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
          " ∩ "
          (Init.Core.«term_∩_»
           (Set.«term{_|_}»
            "{"
            `c
            "|"
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
              ")")
             " ∈ "
             `s)
            "}")
           " ∩ "
           (Set.«term{_|_}»
            "{"
            `c
            "|"
            (Init.Core.«term_∈_»
             (Term.paren
              "("
              [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
              ")")
             " ∈ "
             `s)
            "}")))
         " ∈ "
         (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
      ":="
      (Term.app
       `inter_mem
       [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
        (Term.app
         `uniformly_extend_spec
         [`h_e
          `h_dense
          `h_f
          (Term.hole "_")
          (Term.app
           `inter_mem
           [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
    []
    (Term.app `nb.nonempty_of_mem [`this])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.have
   "have"
   (Term.haveDecl
    (Term.haveIdDecl
     []
     [(Term.typeSpec
       ":"
       (Init.Core.«term_∈_»
        (Init.Core.«term_∩_»
         (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
         " ∩ "
         (Init.Core.«term_∩_»
          (Set.«term{_|_}»
           "{"
           `c
           "|"
           (Init.Core.«term_∈_»
            (Term.paren
             "("
             [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
             ")")
            " ∈ "
            `s)
           "}")
          " ∩ "
          (Set.«term{_|_}»
           "{"
           `c
           "|"
           (Init.Core.«term_∈_»
            (Term.paren
             "("
             [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
             ")")
            " ∈ "
            `s)
           "}")))
        " ∈ "
        (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])))]
     ":="
     (Term.app
      `inter_mem
      [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
       (Term.app
        `uniformly_extend_spec
        [`h_e
         `h_dense
         `h_f
         (Term.hole "_")
         (Term.app
          `inter_mem
          [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])))
   []
   (Term.app `nb.nonempty_of_mem [`this]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.have', expected 'Lean.Parser.Term.have.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `nb.nonempty_of_mem [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `this
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `nb.nonempty_of_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveDecl', expected 'Lean.Parser.Term.haveDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveIdDecl.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
  (Term.app
   `inter_mem
   [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
    (Term.app
     `uniformly_extend_spec
     [`h_e
      `h_dense
      `h_f
      (Term.hole "_")
      (Term.app
       `inter_mem
       [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `uniformly_extend_spec
   [`h_e
    `h_dense
    `h_f
    (Term.hole "_")
    (Term.app
     `inter_mem
     [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app
   `inter_mem
   [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) (Term.app `mem_nhds_left [(Term.hole "_") `hs])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `mem_nhds_left [(Term.hole "_") `hs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_nhds_left
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `mem_nhds_left [(Term.hole "_") `hs]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.app `mem_nhds_right [(Term.hole "_") `hs])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hs
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `mem_nhds_right
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) []] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inter_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `inter_mem
   [(Term.paren "(" [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) []] ")")
    (Term.paren "(" [(Term.app `mem_nhds_left [(Term.hole "_") `hs]) []] ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  (Term.hole "_")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.hole.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
  `h_f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h_dense
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `h_e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `uniformly_extend_spec
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app
   `uniformly_extend_spec
   [`h_e
    `h_dense
    `h_f
    (Term.hole "_")
    (Term.paren
     "("
     [(Term.app
       `inter_mem
       [(Term.paren "(" [(Term.app `mem_nhds_right [(Term.hole "_") `hs]) []] ")")
        (Term.paren "(" [(Term.app `mem_nhds_left [(Term.hole "_") `hs]) []] ")")])
      []]
     ")")])
  []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  («term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  («term_$__» `preimage_mem_comap "$" `hm)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_$__»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `hm
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `preimage_mem_comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
  `image_mem_map
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(«term_$__» `image_mem_map "$" («term_$__» `preimage_mem_comap "$" `hm)) []]
 ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `inter_mem
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeSpec', expected 'Lean.Parser.Term.typeSpec.antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Init.Core.«term_∩_»
    (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
    " ∩ "
    (Init.Core.«term_∩_»
     (Set.«term{_|_}»
      "{"
      `c
      "|"
      (Init.Core.«term_∈_»
       (Term.paren
        "("
        [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
        ")")
       " ∈ "
       `s)
      "}")
     " ∩ "
     (Set.«term{_|_}»
      "{"
      `c
      "|"
      (Init.Core.«term_∈_»
       (Term.paren
        "("
        [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
        ")")
       " ∈ "
       `s)
      "}")))
   " ∈ "
   (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `map [`f (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app `comap [`e (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Term.app (Topology.Basic.term𝓝 "𝓝") [`a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.Basic.term𝓝 "𝓝")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.Basic.term𝓝', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`a]) []] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `e
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `comap
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
 "("
 [(Term.app `comap [`e (Term.paren "(" [(Term.app (Topology.Basic.term𝓝 "𝓝") [`a]) []] ")")]) []]
 ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
  `f
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  `map
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Init.Core.«term_∩_»
   (Set.Data.Set.Basic.term_''_ `f " '' " (Term.app `preimage [`e `m]))
   " ∩ "
   (Init.Core.«term_∩_»
    (Set.«term{_|_}»
     "{"
     `c
     "|"
     (Init.Core.«term_∈_»
      (Term.paren
       "("
       [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
       ")")
      " ∈ "
      `s)
     "}")
    " ∩ "
    (Set.«term{_|_}»
     "{"
     `c
     "|"
     (Init.Core.«term_∈_»
      (Term.paren
       "("
       [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
       ")")
      " ∈ "
      `s)
     "}")))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∩_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∩_»
   (Set.«term{_|_}»
    "{"
    `c
    "|"
    (Init.Core.«term_∈_»
     (Term.paren
      "("
      [`c [(Term.tupleTail "," [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])])]]
      ")")
     " ∈ "
     `s)
    "}")
   " ∩ "
   (Set.«term{_|_}»
    "{"
    `c
    "|"
    (Init.Core.«term_∈_»
     (Term.paren
      "("
      [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
      ")")
     " ∈ "
     `s)
    "}"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∩_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Set.«term{_|_}»
   "{"
   `c
   "|"
   (Init.Core.«term_∈_»
    (Term.paren
     "("
     [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]]
     ")")
    " ∈ "
    `s)
   "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  (Init.Core.«term_∈_»
   (Term.paren "(" [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]] ")")
   " ∈ "
   `s)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Core.«term_∈_»', expected 'antiquot'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `s
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
  (Term.paren "(" [(Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a]) [(Term.tupleTail "," [`c])]] ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.paren.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'optional.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tupleTail', expected 'Lean.Parser.Term.tupleTail.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'sepBy.antiquot_scope'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `c
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
  (Term.app (Topology.UniformSpace.UniformEmbedding.termψ "ψ") [`a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'many.antiquot_scope'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
  `a
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'ident.antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none, [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
  (Topology.UniformSpace.UniformEmbedding.termψ "ψ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Topology.UniformSpace.UniformEmbedding.termψ', expected 'antiquot'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none, [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Mathlib.ExtendedBinder.extBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.constant'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure.antiquot'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  uniform_continuous_uniformly_extend
  [ cγ : CompleteSpace γ ] : UniformContinuous ψ
  :=
    fun
      d hd
        =>
        let
          ⟨ s , hs , hs_comp ⟩
            :=
            mem_lift'_sets $ monotone_comp_rel monotone_id $ monotone_comp_rel monotone_id monotone_id . mp
              comp_le_uniformity3 hd
          have
            h_pnt
              : ∀ { a m } , m ∈ 𝓝 a → ∃ c , c ∈ f '' preimage e m ∧ ( c , ψ a ) ∈ s ∧ ( ψ a , c ) ∈ s
              :=
              fun
                a m hm
                  =>
                  have
                    nb : ne_bot map f comap e 𝓝 a := h_e.dense_inducing h_dense . comap_nhds_ne_bot _ . map _
                    have
                      : f '' preimage e m ∩ { c | ( c , ψ a ) ∈ s } ∩ { c | ( ψ a , c ) ∈ s } ∈ map f comap e 𝓝 a
                        :=
                        inter_mem
                          image_mem_map $ preimage_mem_comap $ hm
                            uniformly_extend_spec h_e h_dense h_f _ inter_mem mem_nhds_right _ hs mem_nhds_left _ hs
                      nb.nonempty_of_mem this
            have
              : preimage fun p : β × β => ( f p . 1 , f p . 2 ) s ∈ 𝓤 β := h_f hs
              have
                : preimage fun p : β × β => ( f p . 1 , f p . 2 ) s ∈ comap fun x : β × β => ( e x . 1 , e x . 2 ) 𝓤 α
                  :=
                  by rwa [ h_e.comap_uniformity.symm ] at this
                let
                  ⟨ t , ht , ts ⟩ := this
                  show
                    preimage fun p : α × α => ( ψ p . 1 , ψ p . 2 ) d ∈ 𝓤 α
                    from
                      𝓤 α . sets_of_superset interior_mem_uniformity ht
                        $
                        fun
                          ⟨ x₁ , x₂ ⟩ hx_t
                            =>
                            have
                              : 𝓝 ( x₁ , x₂ ) ≤ 𝓟 Interior t := is_open_iff_nhds . mp is_open_interior ( x₁ , x₂ ) hx_t
                              have
                                : Interior t ∈ 𝓝 x₁ ×ᶠ 𝓝 x₂ := by rwa [ nhds_prod_eq , le_principal_iff ] at this
                                let
                                  ⟨ m₁ , hm₁ , m₂ , hm₂ , ( hm : Set.Prod m₁ m₂ ⊆ Interior t ) ⟩
                                    :=
                                    mem_prod_iff . mp this
                                  let
                                    ⟨ a , ha₁ , _ , ha₂ ⟩ := h_pnt hm₁
                                    let
                                      ⟨ b , hb₁ , hb₂ , _ ⟩ := h_pnt hm₂
                                      have
                                        :
                                            Set.Prod preimage e m₁ preimage e m₂
                                              ⊆
                                              preimage fun p : β × β => ( f p . 1 , f p . 2 ) s
                                          :=
                                          calc
                                            _ ⊆ preimage fun p : β × β => ( e p . 1 , e p . 2 ) Interior t
                                                :=
                                                preimage_mono hm
                                              _ ⊆ preimage fun p : β × β => ( e p . 1 , e p . 2 ) t
                                                :=
                                                preimage_mono interior_subset
                                              _ ⊆ preimage fun p : β × β => ( f p . 1 , f p . 2 ) s := ts
                                        have
                                          : Set.Prod f '' preimage e m₁ f '' preimage e m₂ ⊆ s
                                            :=
                                            calc
                                              Set.Prod f '' preimage e m₁ f '' preimage e m₂
                                                    =
                                                    fun p : β × β => ( f p . 1 , f p . 2 )
                                                      ''
                                                      Set.Prod preimage e m₁ preimage e m₂
                                                  :=
                                                  prod_image_image_eq
                                                _
                                                    ⊆
                                                    fun p : β × β => ( f p . 1 , f p . 2 )
                                                      ''
                                                      preimage fun p : β × β => ( f p . 1 , f p . 2 ) s
                                                  :=
                                                  monotone_image this
                                                _ ⊆ s := image_subset_iff . mpr $ subset.refl _
                                          have
                                            : ( a , b ) ∈ s := @ this ( a , b ) ⟨ ha₁ , hb₁ ⟩
                                            hs_comp
                                              $
                                              show
                                                ( ψ x₁ , ψ x₂ ) ∈ CompRel s CompRel s s
                                                from ⟨ a , ha₂ , ⟨ b , this , hb₂ ⟩ ⟩

omit h_f

variable [SeparatedSpace γ]

theorem uniformly_extend_of_ind (b : β) : ψ (e b) = f b :=
  DenseInducing.extend_eq_at _ h_f.continuous.continuous_at

theorem uniformly_extend_unique {g : α → γ} (hg : ∀ b, g (e b) = f b) (hc : Continuous g) : ψ = g :=
  DenseInducing.extend_unique _ hg hc

end UniformExtension

